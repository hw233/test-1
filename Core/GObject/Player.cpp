#include "Config.h"
#include "Server/WorldServer.h"
#include "MsgID.h"
#include "Player.h"
#include "Package.h"
#include "PetPackage.h"
#include "TaskMgr.h"
#include "AttainMgr.h"
#include "ActivityMgr.h"
#include "HeroMemo.h"
#include "ShuoShuo.h"
#include "CFriend.h"
#include "Trade.h"
#include "Sale.h"
#include "GObjectManager.h"
#include "MapCollection.h"
#include "Country.h"
#include "Dungeon.h"
#include "GData/Money.h"
#include "Fighter.h"
#include "MsgHandler/CountryMsgStruct.h"
#include "Map.h"
#include "GData/NpcGroup.h"
#include "GData/PictureAttr.h"
#include "GData/Title.h"
#include "Clan.h"
#include "ClanCopy.h"
#include "ClanBuilding.h"
#include "Mail.h"
#include "Boss.h"
#include "Athletics.h"
#include "CountryBattle.h"
#include "NewCountryBattle.h"
#include "Battle/BattleSimulator.h"
#include "Battle/BattleFighter.h"
#include "Script/GameActionLua.h"
#include "Server/SysMsg.h"
#include "Server/OidGenerator.h"
#include "Server/Cfg.h"
#include "Common/Itoa.h"
#include "ClanDynamicMsg.h"
#include "PracticePlace.h"
#include <mysql.h>
#include "GData/Formation.h"
#include "GData/Money.h"
#include "Script/BattleFormula.h"
#include "Copy.h"
#include "FrontMap.h"
#include "XJFrontMap.h"
#include "HeroIsland.h"
#include "NewHeroIsland.h"
#include "GObject/AthleticsRank.h"
#ifndef _FB
#ifndef _VT
#ifndef _WIN32
#include "DCLogger.h"
#include "OpenAPIWorker.h"
#endif
#endif
#endif
#include "ClanRankBattle.h"
#include "TeamCopy.h"
#include "PetTeamCopy.h"
#include "HoneyFall.h"
#include "GData/ClanTechTable.h"
#include "GData/ClanLvlTable.h"
#include "GData/ClanSkillTable.h"
#include "GData/ClanStatueTable.h"
#include "GData/ExpTable.h"
#include "GData/FairyPetTable.h"
#include "GData/RideConfig.h"
#include "Common/StringTokenizer.h"
#include "TownDeamon.h"
#include "ArenaBattle.h"
#ifdef _ARENA_SERVER
#include "GameServer.h"
#endif
#include "GData/Store.h"
#include "RealItemAward.h"
#include "GObject/Tianjie.h"
#include <cmath>
#include "QixiTmpl.h"
#include "MsgHandler/Memcached.h"
#include "RechargeTmpl.h"
#include "GData/ExpTable.h"
#include "Version.h"
#include "GObject/ClanBoss.h"
#include "ClanCityBattle.h"
#include "MoFang.h"
#include "Marry.h"
#include "Married.h"
#include "Leaderboard.h"
#include "ArenaServerWar.h"
#include "GData/SevenSoul.h"
#include "KangJiTianMo.h"
#include "Battle/BattleReport.h"
#include "GObject/RaceBattle.h"
#include "GData/ClanShop.h"
#include "GObject/Evolution.h"
#include "GObject/DarkDargon.h"
#include "GData/IncenseTable.h"

#define NTD_ONLINE_TIME (4*60*60)
#ifndef _DEBUG
#define TGD_ONLINE_TIME (3*60*60)
#else
#define TGD_ONLINE_TIME (10*60)
#endif

#define CLAN_SKILL_ATTACK   1
#define CLAN_SKILL_DEFEND   2
#define CLAN_SKILL_MAGATK   3
#define CLAN_SKILL_MAGDEF   4
#define CLAN_SKILL_HP       5
#define CLAN_SKILL_ACTION   6
#define CLAN_SKILL_HITRATE  7
#define CLAN_SKILL_MAXSOUL  8

#define DAY_SECS (24*60*60)
#define CREATE_OFFSET(c, n) (((n) - (c)) / (DAY_SECS))

#define ATHL_BUFF_SECS        (10*60)
#define ATHL_BUFF_SECS_MAX    (30*60)
#define ATHL_BUFF_SECS_1      (30*60)

#define QIXI_XIQUE 9122

#define QQ_GAME_NEED_TIME  1200
#define QQ_GAME_START_TIME  20*3600
#define QQ_GAME_END_TIME    (20*3600+1800)

#define CARD_ITEM_ID 9415
#define CFD_INDEX_MAX 3
namespace GObject
{
    UInt32 Player::_recruit_cost = 20;
    UInt32 Player::_tavernBlueCount = 24;
    UInt32 Player::_tavernPurpleCount = 89;
    UInt32 Player::_tavernOrangeCount = 200;
	UInt32 Player::_tavernInterval = 1 * 3600, Player::_tavernRate = 100;
	UInt32 Player::_bookStoreInterval = 2 * 3600, Player::_bookStoreRate = 100;
    UInt8 Player::_yaMenActiveCount = 0;
    UInt8 Player::_shiMenActiveCount = 0;
	const UInt8 MaxICCount[] = {8, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24};
	const UInt16 MAX_EXTEND_TIME	= 20;
	const UInt16 EACH_EXTEND_NUM	= 50;
	GlobalPlayers globalPlayers;
	GlobalPlayers newPlayers;
	GlobalNamedPlayers globalNamedPlayers;
	ChallengeCheck challengeCheck;
    GlobalLevelsPlayers globalLevelsPlayers;
    GlobalPlayers globalOnlinePlayers;
    static TripodData nulltd;
    AtomicVal<UInt32> g_eMeiCount = (AtomicVal<UInt32>)(0);
    AtomicVal<UInt32> g_kunLunCount = (AtomicVal<UInt32>)(0);

	UInt8 Player::getMaxIcCount(UInt8 vipLevel ,UInt8 flag)
	{
        if (World::getICAct())
            return MaxICCount[5];
		UInt32 maxCount = MaxICCount[vipLevel];
        // 限时vip特权
        UInt32 VipType = GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
        if( in7DayFromCreated() && VipType >4 )
            VipType -= 2 ;
        if(maxCount < 16 && inVipPrivilegeTime() &&( VipType ==1||VipType==3||VipType ==0 ) )
            maxCount = 16;
        if(maxCount < 24 && inVipPrivilegeTime() &&( VipType % 2 ==0 ) )
            maxCount = 24;
        if(World::getNewYearSpeedTime() && !flag)
        {
             maxCount += GetVar(VAR_NEWYEARSPEED_COUNT);
        }
		return maxCount > 255 ? 255 : maxCount;
	}

    EventAutoBattle::~EventAutoBattle()
    {
        fprintf(stderr, "%s: %p\n", __PRETTY_FUNCTION__, this);
        if (m_Player)
        {
            m_Player->flushExp();
            m_Player->flushLastExp();
            m_Player->setLeftTimes(m_Timer.GetLeftTimes());
        }
        _writedb = true;
        updateDB(false);
    }

	float EventAutoBattle::calcExpEach(UInt32 now)
	{
#if 0
        return 8.0f * _npcGroup->getExp();
#else
        UInt8 plvl = m_Player->GetLev();
        UInt64 exp = (plvl - 10) * ((plvl > 99 ? 99 : plvl) / 10) * 5 + 25;
        return static_cast<float>(exp);
#endif
	}

	void EventAutoBattle::Process(UInt32)
	{
		UInt32 now = TimeUtil::Now();
		float exp = calcExpEach(now);
        float expBase = exp;
        float factor = 1.0f;
        float factorAdd = 0;

        UInt32 tmp;
        UInt32 curHookIndex = m_Player->GetVar(VAR_EXP_HOOK_INDEX);
        if(curHookIndex == ENUM_TRAINP1)
        {
            tmp = m_Player->GetVar(VAR_TRAINP1);
            if(tmp > 0)
            {
                factor = 1.2f;
                if(tmp > 60)
                    tmp -= 60;
                else
                    tmp = 0;
                m_Player->SetVar(VAR_TRAINP1, tmp);
            }
        }
        else if(curHookIndex == ENUM_TRAINP2)
        {
            tmp = m_Player->GetVar(VAR_TRAINP2);
            if(tmp > 0)
            {
                factor = 1.5f;
                if(tmp > 60)
                    tmp -= 60;
                else
                    tmp = 0;
                m_Player->SetVar(VAR_TRAINP2, tmp);
            }
        }
        else if(curHookIndex == ENUM_TRAINP3)
        {
            tmp = m_Player->GetVar(VAR_TRAINP3);
            if(tmp > 0)
            {
                factor = 1.8f;
                if(tmp > 60)
                    tmp -= 60;
                else
                    tmp = 0;
                m_Player->SetVar(VAR_TRAINP3, tmp);
            }
        }

        UInt32 extraExp = 0;
        // 限时vip特权
        if(m_Player->getBuffData(PLAYER_BUFF_CLANTREE1))
            factor+=0.2f;
        UInt32 VipType = m_Player->GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
        if(m_Player-> in7DayFromCreated() && VipType >4 )
            VipType -= 2 ;
        if(m_Player->inVipPrivilegeTime()  &&( VipType < 5 ))
        {
            factor += 1.0f;
            extraExp = static_cast<UInt32>(exp * 1.0f);
        }

        UInt32 gearBuff = m_Player->GetVar(VAR_GEAR_BUFF);
        if(gearBuff > 0)
            factor += (static_cast<float>(gearBuff) / 10000.0f);

		UInt16 cnt = static_cast<UInt16>(m_Timer.GetLeftTimes());
        //fprintf(stderr, "id: %lu => cnt: %u\n", m_Player->getId(), cnt);
        if (cnt % 10)
            _writedb = false;
        else
            _writedb = true;
#if 0
		_npcGroup->monsterKilled(m_Player);
#endif
        if (cfg.rpServer && m_Player->GetLev() < 70)
            exp *= 2;

        if(m_Player->getBuffData(PLAYER_BUFF_CLAN1) > 0)
            factorAdd = 0.5f;
        else if(m_Player->getBuffData(PLAYER_BUFF_CLAN2) > 0)
            factorAdd = 0.3f;
        else if(m_Player->getBuffData(PLAYER_BUFF_CLAN3) > 0)
            factorAdd = 0.2f;

        if(m_Player->getBuffData(PLAYER_BUFF_TYSS) > 0)
            factorAdd += 0.5f;

		if(m_Player->isOnline())
			m_Player->AddExp(static_cast<UInt32>(exp * factor + expBase * factorAdd), 0, extraExp, _writedb);
		else
			m_Player->pendExp(static_cast<UInt32>(exp * factor + expBase * factorAdd), false, _writedb);
#if 0
		_npcGroup->getLoots(m_Player);
#else
        if(uRand(10000) < 74)
            m_Player->GetPackage()->Add(9359, 1, true, false);
#endif
		notify();
		updateDB(false);
	}

	void EventAutoBattle::notify()
	{
		if(m_Player == NULL || !m_Player->isOnline())
			return;
		Stream st(REP::TASK_RESPONSE_HOOK);
		UInt16 cnt = static_cast<UInt16>(m_Timer.GetLeftTimes());

		UInt32 vipLevel = m_Player->getVipLevel();
        UInt8 iccnt = m_Player->getMaxIcCount(vipLevel) - m_Player->getIcCount();
        if (m_Player->getMaxIcCount(vipLevel) < m_Player->getIcCount())
            iccnt = m_Player->getMaxIcCount(vipLevel);
        UInt8 curType = static_cast<UInt8>(m_Player->GetVar(VAR_EXP_HOOK_INDEX));
		if(cnt > 0)
		{
#if 0
			if(_npcGroup == NULL)
				return;
#endif
			UInt32 t = TimeUtil::Now();
			if(t > _finalEnd) t = 0; else t = _finalEnd - t;

			st << /*_npcGroup->getId()*/static_cast<UInt32>(0) << static_cast<UInt8>(1) << cnt << t << iccnt << curType << Stream::eos;
		}
		else
		{
			st << static_cast<UInt32>(0) << static_cast<UInt8>(0) << static_cast<UInt16>(0) << static_cast<UInt32>(0) << iccnt << curType << Stream::eos;
			m_Player->delFlag(Player::Training);
		}
		m_Player->send(st);
	}

	bool EventAutoBattle::instantComplete()
	{
		UInt32 oldCnt = m_Timer.GetLeftTimes();
		UInt32 cnt = 60;
		if(cnt > oldCnt)
			cnt = oldCnt;
		UInt32 newCnt = oldCnt - cnt;
		struct ExpGainInstantCompleteStruct
		{
			float exp;
			UInt32 duration;
			UInt32 count;
			GData::NpcGroup * ng;
		};
		ExpGainInstantCompleteStruct ecs;
		ecs.duration = cnt * 60;
		m_Timer.SetLeftTimes(newCnt);
		ecs.exp = calcExpEach(TimeUtil::Now()) * cnt;
		ecs.count = cnt;
		ecs.ng = NULL;//_npcGroup;
        if (cfg.rpServer && m_Player->GetLev() < 70)
            ecs.exp *= 2;
        if(m_Player->getBuffData(PLAYER_BUFF_CLANTREE1))
            ecs.exp *= 1.2f;
		GameMsgHdr hdr(0x274, m_Player->getThreadId(), m_Player, sizeof(ExpGainInstantCompleteStruct));
		GLOBAL().PushMsg(hdr, &ecs);
		_finalEnd -= ecs.duration;
		notify();
        if (m_Player)
            m_Player->SetVar(VAR_LEFTTIMES, newCnt);
        _writedb = true;
		updateDB(false);
		return newCnt == 0;
	}

	void EventAutoBattle::updateDB(bool isNew)
	{
        if (m_Player->GetVar(VAR_LEFTTIMES))
            return;

		UInt32 count = m_Timer.GetLeftTimes();
		if(count > 0)
		{
			if(isNew)
				DB3().PushUpdateData("REPLACE INTO `auto_battle`(`playerId`, `npcId`, `count`, `interval`) VALUES(%" I64_FMT "u, %u, %u, %u)", m_Player->getId(), /*_npcGroup->getId()*/0, count, m_Timer.GetInterval());
			else
            {
                if (_writedb)
                    DB3().PushUpdateData("UPDATE `auto_battle` SET `count` = %u WHERE `playerId` = %" I64_FMT "u", count, m_Player->getId());
            }
		}
		else
			DB3().PushUpdateData("DELETE FROM `auto_battle` WHERE `playerId` = %" I64_FMT "u", m_Player->getId());
	}

	bool EventFighterTrain::Equal(UInt32 id, size_t fgtId) const
	{
		return 	id == GetID() && _fighter->getId() == fgtId;
	}

	bool EventFighterTrain::Accelerate(UInt32 times)
	{
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		_end -= times * 3600;
		return count == 0;
	}

	void EventFighterTrain::Process(UInt32 leftCount)
	{
		TrainFighterData * data =  m_Player->getTrainFighterData(_fighter->getId());
		UInt32 fgtId = _fighter->getId();
		if (data == NULL)
		{
			PopTimerEvent(m_Player, EVENT_FIGHTERAUTOTRAINING, fgtId);
			return;
		}
		const std::vector<UInt32>& levExp = GData::GDataManager::GetLevelTrainExp();
		UInt32 exp = static_cast<UInt32>(levExp[_fighter->getLevel()] * data->factor * 60);
		_fighter->addExp(exp);
		data->accExp += exp;
		data->checktime = leftCount;
		DB().PushUpdateData("UPDATE `fighter_train` SET `checkTime` = %u, `accExp` = %u WHERE `fgtId` = %u AND `ownerId` = %" I64_FMT "u", data->checktime, data->accExp, fgtId, m_Player->getId());
		if(leftCount == 0)
		{
			m_Player->delTrainFighter(fgtId, true);
			return;
		}
		if (_fighter->getLevel() >= m_Player->GetLev())
		{
			m_Player->delTrainFighter(fgtId, true);
			PopTimerEvent(m_Player, EVENT_FIGHTERAUTOTRAINING, fgtId);
			return;
		}
	}

	bool EventPlayerPractice::Equal(UInt32 id, size_t playerid) const
	{
		return 	id == GetID() && playerid == m_Player->getId();
	}

	bool EventPlayerPractice::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		_end -= times * 60;
		return count == 0;
    }

	void EventPlayerPractice::Process(UInt32 leftCount)
    {
        PracticeData* data = practicePlace.getPracticeData(m_Player->getId());
        if (!data) {
			PopTimerEvent(m_Player, EVENT_PLAYERPRACTICING, m_Player->getId());
			return;
        }

        GameMsgHdr hdr1(0x1F6, WORKER_THREAD_WORLD, m_Player, 0);
        GLOBAL().PushMsg(hdr1, NULL);

		data->checktime -= 10;
        if ((int)data->checktime < 0)
            data->checktime = 0;
		if(leftCount == 0 || data->checktime == 0)
		{
            DB().PushUpdateData("UPDATE `practice_data` SET `checktime` = %u, `place` = %u, `slot` = %u, winnerid = %" I64_FMT "u, fighters = '' WHERE `id` = %" I64_FMT "u", data->checktime, PPLACE_MAX, 0, 0, m_Player->getId());
            GameMsgHdr hdr1(0x1F7, WORKER_THREAD_WORLD, m_Player, 0);
            GLOBAL().PushMsg(hdr1, NULL);
			PopTimerEvent(m_Player, EVENT_PLAYERPRACTICING, m_Player->getId());
			return;
		}
        else
        {
            DB().PushUpdateData("UPDATE `practice_data` SET `checktime` = %u WHERE `id` = %" I64_FMT "u",
                    data->checktime, m_Player->getId());
        }
        return;
    }

	bool EventPlayerPractice::instantComplete()
	{
        PracticeData* data = practicePlace.getPracticeData(m_Player->getId());
        if (!data) {
			PopTimerEvent(m_Player, EVENT_PLAYERPRACTICING, m_Player->getId());
			return false;
        }

        if(m_Player->getPIcCount() <= 0)
            return false;

		if (data->checktime > 0)
		{
			UInt32 count = 60;
			if(count > data->checktime)
			{
				count = data->checktime;
			}

            UInt32 goldUse = GData::moneyNeed[GData::INSTANTPRACTICE].gold;
            PracticeFighterExp pfexp;
            memset(&pfexp, 0, sizeof(pfexp));
            pfexp.goldUse = goldUse;

            Fighter* fgt = 0;
            UInt8 n = 0;
            for (auto i = data->fighters.begin(), e = data->fighters.end(); i != e; ++i)
            {
                fgt = m_Player->findFighter(*i);
                if (fgt)
                {
                    if(n < sizeof(pfexp.fids)/sizeof(UInt32))
                    {
                        pfexp.fids[n] = *i;
                        pfexp.counts[n] = count;
                        ++ n;
                    }
                }
            }
            GameMsgHdr hdr1(0x320, m_Player->getThreadId(), m_Player, sizeof(PracticeFighterExp));
            GLOBAL().PushMsg(hdr1, &pfexp);

            stActivityMsg msg;
            msg.id = SthPSpeed;
            GameMsgHdr hdr2(0x245, m_Player->getThreadId(), m_Player, sizeof(stActivityMsg));
            GLOBAL().PushMsg(hdr2, &msg);

            m_Player->incPIcCount();
            data->checktime -= count;
            if ((int)data->checktime < 0)
                data->checktime = 0;
            if(data->checktime == 0)
            {
                DB().PushUpdateData("UPDATE `practice_data` SET `checktime` = %u, `place` = %u, `slot` = %u, winnerid = %" I64_FMT "u, fighters = '' WHERE `id` = %" I64_FMT "u", data->checktime, PPLACE_MAX, 0, 0, m_Player->getId());
                practicePlace.stop(m_Player);
                PopTimerEvent(m_Player, EVENT_PLAYERPRACTICING, m_Player->getId());
            }
            else
            {
                DB().PushUpdateData("UPDATE `practice_data` SET `checktime` = %u WHERE `id` = %" I64_FMT "u",
                        data->checktime, m_Player->getId());
            }

            {
                Stream st1(REP::PRACTICE_OCCUPY);
                st1 << static_cast<UInt8>(0);
                st1 << data->checktime * 60;
                st1 << data->prot;
                st1 << m_Player->getPIcCount();
                st1 << static_cast<UInt8>(m_Player->getPracticePlace()-1);

                UInt8 size = data->fighters.size();
                st1 << size;

                for (std::list<UInt32>::iterator i = data->fighters.begin(), e = data->fighters.end(); i != e; ++i)
                    st1 << *i;

                st1 << Stream::eos;
                m_Player->send(st1);
            }
        }

        return true;
	}

	bool EventPlayerTripod::Equal(UInt32 id, size_t playerid) const
	{
		return 	id == GetID() && playerid == m_Player->getId();
	}

	bool EventPlayerTripod::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		return count == 0;
    }

	void EventPlayerTripod::Process(UInt32 leftCount)
    {
        TripodData& data = m_Player->getTripodData();
         UInt32 VipType =m_Player-> GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
         UInt32 viplevel = m_Player->getVipLevel();
        if( m_Player->in7DayFromCreated() && VipType >4 )
            VipType -= 2 ;
         if(viplevel > 4 ||( m_Player->inVipPrivilegeTime()&& VipType == 5))
         {
             data.soul += POINT_PERMIN * 2; //九疑鼎速度
         }
             else
            data.soul += POINT_PERMIN;

        if (data.soul > MAX_TRIPOD_SOUL)
            data.soul = MAX_TRIPOD_SOUL;

        if (!leftCount || data.soul >= MAX_TRIPOD_SOUL - POINT_PERMIN/2) {
            PopTimerEvent(m_Player, EVENT_PLAYERPRTRIPOD, m_Player->getId());
            data.soul = MAX_TRIPOD_SOUL;
            if (!data.awdst)
            {
                data.awdst = 1;
                DB().PushUpdateData("UPDATE `tripod` SET `awdst` = %u WHERE `id` = %" I64_FMT "u", data.awdst, m_Player->getId());
            }
            return;
        }

        if (!(leftCount % 3))
            DB().PushUpdateData("UPDATE `tripod` SET `soul` = %u WHERE `id` = %" I64_FMT "u", data.soul, m_Player->getId());
    }

    bool EventAutoCopy::Equal(UInt32 id, size_t playerid) const
    {
		return 	id == GetID() && playerid == m_Player->getId();
    }

    void EventAutoCopy::Process(UInt32 leftCount)
    {
		GameMsgHdr hdr(0x276, m_Player->getThreadId(), m_Player, sizeof(id));
		GLOBAL().PushMsg(hdr, &id);
        if (!leftCount)
			PopTimerEvent(m_Player, EVENT_AUTOCOPY, m_Player->getId());
    }

    bool EventAutoCopy::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		return count == 0;
    }

    bool EventAutoTeamCopy::Equal(UInt32 id, size_t playerid) const
    {
		return 	id == GetID() && playerid == m_Player->getId();
    }

    void EventAutoTeamCopy::Process(UInt32 leftCount)
    {
		GameMsgHdr hdr(0x279, m_Player->getThreadId(), m_Player, sizeof(id));
		GLOBAL().PushMsg(hdr, &id);
        if (!leftCount)
			PopTimerEvent(m_Player, EVENT_AUTOTEAMCOPY, m_Player->getId());
    }

    bool EventAutoTeamCopy::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		return count == 0;
    }

    bool EventAutoFrontMap::Equal(UInt32 id, size_t playerid) const
    {
		return 	id == GetID() && playerid == m_Player->getId();
    }

    void EventAutoFrontMap::Process(UInt32 leftCount)
    {
        UInt16 idspot = (id << 8) + spot;
		GameMsgHdr hdr(0x278, m_Player->getThreadId(), m_Player, sizeof(idspot));
		GLOBAL().PushMsg(hdr, &idspot);
        if (!leftCount)
			PopTimerEvent(m_Player, EVENT_AUTOFRONTMAP, m_Player->getId());
        ++spot;
    }

    bool EventAutoFrontMap::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		return count == 0;
    }

    bool EventAutoXJFrontMap::Equal(UInt32 id, size_t playerid) const
    {
		return 	id == GetID() && playerid == m_Player->getId();
    }

    void EventAutoXJFrontMap::Process(UInt32 leftCount)
    {
        UInt16 idspot = (id << 8) + spot;
		GameMsgHdr hdr(0x368, m_Player->getThreadId(), m_Player, sizeof(idspot));
		GLOBAL().PushMsg(hdr, &idspot);
        if (!leftCount)
			PopTimerEvent(m_Player, EVENT_AUTOFRONTMAP, m_Player->getId());
        ++spot;
    }

    bool EventAutoXJFrontMap::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		return count == 0;
    }

	UInt64 EventAutoRaceBattle::calcExpEach()
	{
        UInt8 plvl = m_Player->GetLev();
        if(plvl < 40)
            return 0;
        UInt64 exp = (plvl - 10) * ((plvl > 99 ? 99 : plvl) / 10) * 5 + 25;
        if(World::getNationalDayHigh())
            exp *= 2;
        return exp;
	}

	void EventAutoRaceBattle::Process(UInt32 leftCount)
	{
		UInt64 exp = calcExpEach();

		if(m_Player->isOnline())
			m_Player->AddExp(exp * 8);
		else
			m_Player->pendExp(exp * 8);
        m_Player->setTotalExp(m_Player->getTotalExp() + exp * 8);

        if(!leftCount)
			PopTimerEvent(m_Player, EVENT_AUTORACEBATTLE, m_Player->getId());
	}

	void EventCoolSummerGiveAward::Process(UInt32 leftCount)
	{
        UInt8 awardType = m_Player->GetVar(VAR_COOL_SUMMER_AWARD_TYPE);
        UInt8 randType = m_Player->GetVar(VAR_COOL_SUMMER_RAND_TYPE);
        m_Player->sendCoolSummerAward(awardType, randType, 2);
        if(!leftCount)
			PopTimerEvent(m_Player, EVENT_COOLSUMMERAWARD, m_Player->getId());
	}

    bool EventPlayerTimeTick::Equal(UInt32 id, size_t playerid) const
    {
		return 	id == GetID() && playerid == m_Player->getId();
    }

    void EventPlayerTimeTick::Process(UInt32 leftCount)
    {
        GameMsgHdr hdr(0x277, m_Player->getThreadId(), m_Player, sizeof(type));
        GLOBAL().PushMsg(hdr, &type);

        if (!leftCount)
			PopTimerEvent(m_Player, EVENT_TIMETICK, m_Player->getId());
    }

    bool EventPlayerTimeTick::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		return count == 0;
    }

    bool EventAutoJobHunter::Equal(UInt32 id, size_t playerid) const
    {
		return 	id == GetID() && playerid == m_Player->getId();
    }

    void EventAutoJobHunter::Process(UInt32 leftCount)
    {
		GameMsgHdr hdr(0x2A1, m_Player->getThreadId(), m_Player, sizeof(id));
		GLOBAL().PushMsg(hdr, &id);
        if (!leftCount)
			PopTimerEvent(m_Player, EVENT_JOBHUNTER, m_Player->getId());
    }

    bool EventAutoJobHunter::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		return count == 0;
    }

    bool EventAutoRefreshOpenKey::Equal(UInt32 id, size_t playerid) const
    {
        return playerid == m_Player->getId();
    }

    void EventAutoRefreshOpenKey::Process(UInt32 leftCount)
    {
#ifndef _WIN32
#ifndef _FB
#ifndef _VT
#ifdef  OPEN_API_ON
        OPENAPI().Push(m_Player->getId(), 0, m_Player->getOpenId(), m_Player->getOpenKey(), m_Player->getSource().c_str(), m_Player->getClientIp());
#endif
#endif
#endif
#endif // _WIN32
    }

    bool EventAutoRefreshOpenKey::Accelerate(UInt32 times)
    {
		UInt32 count = m_Timer.GetLeftTimes();
		if(times > count)
		{
			times = count;
		}
		count -= times;
		m_Timer.SetLeftTimes(count);
		return count == 0;
    }

	void Lineup::updateId()
	{
		if(fighter != NULL) fid = fighter->getId(); else fid = 0;
	}

	Player::Player( UInt64 id ): GObjectBaseT<Player, UInt64>(id),
		_isJumpingMap(false),
#ifdef _ARENA_SERVER
        _channelId(static_cast<int>(id >> 40) & 0xFF), _serverId(static_cast<int>(id >> 48)),
#endif
        _isOnline(false), _isHoding(false), _holdGold(0), _threadId(0xFF), _session(-1),
		_availInit(false), _vipLevel(0), _clan(NULL), _clanBattle(NULL), _flag(0), _gflag(0), _onlineDuration(0), _offlineTime(0),
		_nextTavernUpdate(0), _nextBookStoreUpdate(0), _bossLevel(21), _ng(NULL), _lastNg(NULL),
		_lastDungeon(0), _exchangeTicketCount(0), _praplace(0), m_autoCopyFailed(false),
        _justice_roar(0), _spirit_factor(1.0f), _diamond_privilege(false), _qqvip_privilege(false), _athlRivalBuf(0), _new_rank(false), _worldBossHp(0), m_autoCopyComplete(0), hispot(0xFF), hitype(0),
#ifndef _WIN32
		m_ulog(NULL),
#endif
		m_isOffical(false), m_isXY(false), m_XinYue(0), m_sysDailog(false), m_hasTripod(false), _maxLingbaoBattlePoint(0), _jobHunter(NULL), _dreamer(NULL), _onBattlePet(NULL)
	{
        m_ClanBattleStatus = 1;
        m_ClanBattleScore = 0;
        m_ClanBattleWinTimes = 0;
        m_ClanBattleSkillFlag = 0;
        _invitedBy = 0;
        m_arenaCommitCD = 0;
        m_arenaTeamCommitCD = 0;
        m_serverWarCommitCD = 0;
        m_serverWarChallengeCD = 0;
        _inClanCity = false;

		memset(_buffData, 0, sizeof(UInt32) * PLAYER_BUFF_COUNT);
		m_Package = new Package(this);
		m_PetPackage = new PetPackage(this);
		m_TaskMgr = new TaskMgr(this);
		m_Trade = new Trade(this);
		m_Sale = new Sale(this);
		m_MailBox = new MailBox(this);
		m_Athletics = new Athletics(this);
		m_AttainMgr = new AttainMgr(this);
        m_ActivityMgr = new ActivityMgr(this);
        m_StrengthenMgr = new StrengthenMgr(this);
        m_HeroMemo = new HeroMemo(this);
        m_ShuoShuo = new ShuoShuo(this);
        m_CFriend = new CFriend(this);
        m_relation = new NewRelation(this);
		m_FairySpar = new FairySpar(this);
        m_pVars = new VarSystem(id);
        memset(&m_ctp, 0, sizeof(m_ctp));
        memset(&m_pctp, 0, sizeof(m_pctp));
        m_teamData = NULL;
        m_petTeamData = NULL;
        m_tcpInfo = new TeamCopyPlayerInfo(this);
        m_ptcpInfo = new PetTeamCopyPlayerInfo(this);
        m_hf = new HoneyFall(this);
        m_dpData = new DeamonPlayerData();
		m_moFang = new MoFang(this);
		m_erlking = new Erlking(this);
		m_marriageInfo = new MarriageInfo();
		m_collecCard= new CollectCard(this);
		_wrapKey= new OrdinarireWrapKey();
		m_MonsterKettleMgr = new MonsterKettleManager(this);
        m_csFlag = 0;
        m_spreadInterval = 0;
        m_spreadCoolTime = 0;
        _mditem = 0;
        _qixiBinding = false;
        m_checkTime = 0;
        m_curPage = 0;
        //m_checkTime1 = 0;

        memset (m_domain, 0, sizeof(m_domain));
        memset (m_openid, 0, sizeof(m_openid));
        memset (m_openkey, 0, sizeof(m_openkey));
        //memset (m_clientIp, 0, sizeof(m_clientIp));
        strncpy (m_clientIp, "0.0.0.0", 10);
        _isForbidSale = false;

        char buf[64] = {0};
        snprintf(buf, sizeof(buf), "%" I64_FMT "u", _id);
#ifndef _WIN32
        m_ulog = _analyzer.GetInstance(buf);
        m_ulog->SetUserIP("0.0.0.0");
#endif
        /*if(cfg.merged)
            _new_rank = true;
        else
            _new_rank = false;*/
        memset(cf_posPut, 0, sizeof(cf_posPut));
        memset(cf_itemId, 0, sizeof(cf_itemId));
        memset(cf_ratio, 0 ,sizeof(cf_ratio));
        //_hiattrFlag = false;
        //_hiafFlag = false;
        _cbHPflag = false;

        _inQQGroup = false;

        _loadMark = false;
        memset(_partCnt, 0, sizeof(_partCnt));
        memset(_alreadyCnt, 0, sizeof(_alreadyCnt));
        memset(_alreadyload, 0, sizeof(_alreadyload));
        m_EnterPTCStatus = false;
        m_InPTCStatus = false;
        _leftAddrEnter = 0 ;
        _InLeftTeam = false;
        _drinkingSum =0;
        _friendSum = 0;
        m_teamMemberData = NULL;
        m_TMDYRoomStatus = 0;
        m_curType = 0;
        m_curPageA = 0;
        _KJTM_factor = 1.0f;
        _ePhysicalTime = 0;

        _playerPos = 0;
        memset(_starCnt, 0, sizeof(_starCnt));
        _continueWinCnt = 0;
        _awardLevel = 2;
        _continueWinPage = 1;
        _rbBufId = 0;
        _rbValue = 0;
        _exitCd = 0;
        _starTotal = 0;
        _canContinueCnt = 0;
        _continueLoseCnt = 0;
        _attackCd = 0;
        _isLastLevel = false;
        _matchPlayer = NULL;
        _continueWinMaxCnt = 0;
        _totalWinCnt = 0;
        _totalLoseCnt = 0;
        _totalAchievement = 0;
        _totalItemCnt = 0;
        _totalExp = 0;
        /*m_autoTeamCopyCnt = 0;
        m_autoTeamCopyCurCnt = 0;
        m_autoTeamCopyCurIndex = 0;*/
        memset(&worldCupInfo, 0, sizeof(worldCupInfo));
        xxlMapInfo[0]="";
        xxlMapInfo[1]="";
        xxlMapInfo[2]="";
        SetVar(VAR_PACKAGE_SIZE_GEM, 200);
        SetVar(VAR_PACKAGE_SIZE_FORMULA, 200);
        SetVar(VAR_PACKAGE_SIZE_SL, 200);
    }


	Player::~Player()
	{
		UnInit();
        delete m_tcpInfo;
        m_tcpInfo = NULL;
        delete m_ptcpInfo;
        m_ptcpInfo = NULL;
        delete m_hf;
        m_hf = NULL;
        delete m_dpData;
        m_dpData = NULL;
	}

	bool Player::Load()
	{
		updateBattleFighters(false);

		SERVER().GetCountry(GetCountryThread()).PlayerEnter(this, false);

		recalcVipLevel();

		if(!hasStatus(TopupRewarded))
		{
			addStatus(TopupRewarded);
			if(_vipLevel > 8)
				sendVIPMails(9, _vipLevel);
			sendBlockBossMail(24, _bossLevel);
		}

		if(hasStatus(AutoCB))
		{
			globalCountryBattle.addAutoCB(this);
		}

        ClanRankBattleMgr::Instance().PlayerEnter(this);
		setBlockBossByLevel();
		return true;
	}

	void Player::setVipL(UInt8 lvl)
	{
#define _VIP_OPEN_MAX 15
        if (!lvl || lvl > _VIP_OPEN_MAX)
            return;
        if (lvl == 0)
            _playerData.totalRecharge = 87;
        else if (lvl == 1)
            _playerData.totalRecharge = 88;
        else if (lvl == 2)
            _playerData.totalRecharge = 888;
        else if (lvl == 3)
            _playerData.totalRecharge = 1888;
        else if (lvl == 4)
            _playerData.totalRecharge = 5888;
        else if (lvl == 5)
            _playerData.totalRecharge = 18888;
        else if (lvl == 6)
            _playerData.totalRecharge = 58888;
        else if (lvl == 7)
            _playerData.totalRecharge = 88888;
        else if (lvl == 8)
            _playerData.totalRecharge = 188888;
        else if (lvl == 9)
            _playerData.totalRecharge = 288888;
        else if (lvl == 10)
            _playerData.totalRecharge = 588888;
        else if (lvl == 11)
            _playerData.totalRecharge = 988888;
        else if (lvl == 12)
            _playerData.totalRecharge = 1888888;
        else if (lvl == 13)
            _playerData.totalRecharge = 2888888;
        else if (lvl == 14)
            _playerData.totalRecharge = 5888888;
        else if (lvl == 15)
            _playerData.totalRecharge = 8888888;
		DB1().PushUpdateData("UPDATE `player` SET `totalRecharge` = %u WHERE `id` = %" I64_FMT "u", _playerData.totalRecharge, getId());
        recalcVipLevel();
		sendModification(7, _playerData.totalRecharge);
    }

	UInt32 Player::calcVipLevel()
	{
#define VIP_OPEN_MAX 15
		UInt32 totalRecharge = _playerData.totalRecharge;
		UInt32 vipl;
		if(totalRecharge < 88)
			vipl = 0;
		else if(totalRecharge < 888)
			vipl = 1;
		else if(totalRecharge < 1888)
			vipl = 2;
		else if(totalRecharge < 5888)
			vipl = 3;
		else if(totalRecharge < 18888)
			vipl = 4;
		else if (totalRecharge < 58888)
			vipl = 5;
		else if(totalRecharge < 88888)
			vipl = 6;
		else if(totalRecharge < 188888)
			vipl = 7;
		else if(totalRecharge < 288888)
			vipl = 8;
		else if(totalRecharge < 588888)
			vipl = 9;
		else if(totalRecharge < 988888)
			vipl = 10;
		else if(totalRecharge < 1888888)
			vipl = 11;
		else if(totalRecharge < 2888888)
			vipl = 12;
		else if(totalRecharge < 5888888)
			vipl = 13;
		else if(totalRecharge < 8888888)
			vipl = 14;
        else
			vipl = 15;
		if(vipl > VIP_OPEN_MAX)
			return VIP_OPEN_MAX;
		return vipl;
	}

	UInt32 Player::calcYDVipLevel(UInt32 total)
	{
#define YDVIP_OPEN_MAX 6
		UInt32 totalRecharge = total;
		UInt32 vipl;
		if(totalRecharge < 100)
			vipl = 0;
		else if(totalRecharge < 300)
			vipl = 1;
		else if(totalRecharge < 1000)
			vipl = 2;
		else if(totalRecharge < 3000)
			vipl = 3;
		else if(totalRecharge < 10000)
			vipl = 4;
		else if (totalRecharge < 30000)
			vipl = 5;
		else
			vipl = 6;
		if(vipl > YDVIP_OPEN_MAX)
			return YDVIP_OPEN_MAX;
		return vipl;
	}

    //春节充值活动额度
    //static UInt32 recharge[] = {188,288,688,888,1888,2012,2888,3888,4888,5888,6888,7888,8888,9888,9999};
    //2012年3月份充值活动额度
    //static UInt32 recharge[] = {199,399,599,999,1299,1599,1999,2999,3999,4999,5999,6999,7999,8999,9999,};
    //2012年5月16充值活动额度
    //static UInt32 recharge[] = {199,399,599,799,999,1499,1999,3999,5999,7999,9999,19999,29999,39999,49999};
    static UInt32 recharge[] = {99,199,399,699,1099,1599,2199,2899,3699,4599,5599,8999,15999,26999,42999,64999,99999,};

    UInt8 Player::calcRechargeLevel(UInt32 total, UInt8& maxlevel)
    {
        UInt32 totalRecharge = total;
        maxlevel = sizeof(recharge)/sizeof(UInt32);
        for (UInt8 i = 0; i < sizeof(recharge)/sizeof(UInt32); ++i)
        {
            if (totalRecharge < recharge[i])
                return i;
        }
        return maxlevel;
    }

    inline UInt32 levelToRecharge(UInt8 lvl)
    {
        if (lvl < 1)
            return 0;
        if (lvl > sizeof(recharge)/sizeof(UInt32))
            lvl = sizeof(recharge)/sizeof(UInt32);
        return recharge[lvl-1];
    }

	bool Player::Init()
	{
		if(_availInit)
			return true;

		m_Package->Init();

		_availInit = true;

        return true;
	}

	void Player::UnInit()
	{
		m_Package->UnInit();
		SAFE_DELETE(m_Package);

		m_TaskMgr->UnInit();
		SAFE_DELETE(m_TaskMgr);

		SAFE_DELETE(m_Trade);
		SAFE_DELETE(m_Sale);
		SAFE_DELETE(m_Athletics);

		SAFE_DELETE(m_MailBox);

        SAFE_DELETE(m_pVars);
        SAFE_DELETE(m_AttainMgr);
        SAFE_DELETE(m_ActivityMgr);
        SAFE_DELETE(m_HeroMemo);
        SAFE_DELETE(m_ShuoShuo);
        SAFE_DELETE(m_CFriend);
        SAFE_DELETE(m_relation);
		SAFE_DELETE(m_FairySpar);
		SAFE_DELETE(m_moFang);
		SAFE_DELETE(m_erlking);
		SAFE_DELETE(m_collecCard);
		SAFE_DELETE(_wrapKey);
		SAFE_DELETE(m_MonsterKettleMgr);
	}

	UInt8 Player::GetCountryThread()
	{
		return mapCollection.getCountryFromSpot(_playerData.location);
	}

	const std::string& Player::getClanName() const
	{
		static std::string empty;
		if(_clan == NULL)
			return empty;
		return _clan->getName();
	}

    void Player::enchantGt11()
    {
        struct EnchantGt11 : public Visitor<ItemBase>
        {
            EnchantGt11(Player* player) : player(player) {}

            bool operator()(ItemBase* ptr)
            {
                if (IsWeapon(ptr->getClass()) || IsArmor(ptr->getClass()))
                {
                    ItemEquip* ie = (ItemEquip*)(ptr);
                    if (ie->getItemEquipData().enchant == 11 || ie->getItemEquipData().enchant == 12)
                    {
                        UInt8 type = IsWeapon(ptr->getClass())?1:2;
                        for (UInt8 l = ie->getItemEquipData().enchant; l >= 11; --l)
                            GameAction()->onEnchantGt11(player, ie->GetItemType().getId(), l, type);
                    }
                }
                return true;
            }

            Player* player;
        } eg(this);
        GetPackage()->enumerate(eg);

        std::map<UInt32, Fighter *>::iterator it = _fighters.begin();
        for (; it != _fighters.end(); ++it)
        {
            Fighter* fgt = it->second; // XXX: Fashion can not be enchanted
            ItemEquip* e[11] = {fgt->getWeapon(), fgt->getArmor(0), fgt->getArmor(1),
                fgt->getArmor(2), fgt->getArmor(3), fgt->getArmor(4), fgt->getAmulet(),
                fgt->getRing(), fgt->getTrump(0), fgt->getTrump(1), fgt->getTrump(2)};

            for (int i = 0; i < 11; ++i)
            {
                if (e[i] && (e[i]->getItemEquipData().enchant == 11 || e[i]->getItemEquipData().enchant == 12))
                {
                    UInt8 type = IsWeapon(e[i]->getClass())?1:2;
                    for (UInt8 l = e[i]->getItemEquipData().enchant; l >= 11; --l)
                        GameAction()->onEnchantGt11(this, e[i]->GetItemType().getId(), l, type);
                }
            }
        }

        SetVar(VAR_ENCHANTGT11, 1);
    }

	void Player::Login()
	{
		UInt32 curtime = TimeUtil::Now();

		if(cfg.enableWallow && _playerData.wallow)
		{
			UInt32 dur = curtime - _playerData.lastOnline;
            _offlineTime = dur;
			if(dur >= 5 * 60 * 60) {
				_onlineDuration = 0;
                _offlineTime = 0;
            }
		}
    
        SetKJTMAwardMark(0);
        UInt32 status = GetVar(VAR_KJTM_STATUS);
        UInt8 mark = GET_BIT(status, 0);
        if(0 == mark)
        {
            TeamMemberData* tmd = getTeamMemberData();
            if(NULL != tmd)
            {
                if(3 == tmd->memCnt)
                    SetKJTMAwardMark(1);
            }
        }

        KJTMUdpLog();

        if(GetVar(VAR_RP_VALUE) > 0 && TimeUtil::SharpDay(0, TimeUtil::Now()) != TimeUtil::SharpDay(0, _playerData.lastOnline))
            AddVar(VAR_VIA_ACC_DAYS, 1);
        //calcNewYearQzoneContinueDay(curtime);
        continuousLogin(curtime);
        continuousLoginRF(curtime);
        //SetMemCach();
       // continuousLoginSummerFlow();//修改

        sendYearRPInfo();
        sendSummerFlowInfo();
        sendLuckyMeetLoginInfo();
        //sendSummerMeetInfo();
        if (World::_halloween)
            sendHalloweenOnlineAward(curtime);
        else
            setBuffData(PLAYER_BUFF_ONLINE, 0);

		_playerData.lastOnline = curtime;
		DB1().PushUpdateData("UPDATE `player` SET `lastOnline` = %u WHERE `id` = %" I64_FMT "u", curtime, getId());

		if(_isOnline)
			_isOnline = false;

		Map * map = GetMap();
		if(map != NULL)
			map->PlayerEnter( this );

		m_TaskMgr->Init();
		m_Sale->Init();

		lockSecondPWD();

        offlineAutoExp(curtime);
		checkLastBattled();
		GameAction()->onLogin(this);
        if (World::getChristmas())
            GameAction()->onChristmas(this);
        if (World::getNewYear())
            GameAction()->onNewYear(this);
        if (World::getValentineDay())
            GameAction()->onValentineDay(this);
        /*
        if (World::getFoolsDay())
            GameAction()->onFoolsDay(this);
        */
        if (World::getMayDay())
            GameAction()->onMayDay(this);
        if (World::getMayDay1())
            GameAction()->onMayDay1(this);
        if (World::getEnchantGt11() && !GetVar(VAR_ENCHANTGT11))
            enchantGt11();
        if (World::getEnchantAct() && !GetVar(VAR_2NDSOUL))
        {
            for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
            {
                Fighter* fgt = it->second;
                GameAction()->onSoulEnchantMaxSoul(this, 0, fgt->get2ndSounSoulMax());
            }
            SetVar(VAR_2NDSOUL, 1);
        }

        if (World::_nationalDay) // XXX: 国庆节活动
        {
            UInt32 online = getBuffData(PLAYER_BUFF_ONLINE);
            if (online != static_cast<UInt32>(-1))
            {
                if (online < NTD_ONLINE_TIME)
                {
                    EventPlayerTimeTick* event = new(std::nothrow) EventPlayerTimeTick(this, NTD_ONLINE_TIME-online, 1, 0);
                    if (event) PushTimerEvent(event);
                }
                else
                    sendNationalDayOnlineAward();
            }
        }
#if 0 // XXX: 所有人都已经没有这个BUFF了
        else
            setBuffData(PLAYER_BUFF_ONLINE, 0, true);
#endif
        /*
        if (World::_thanksgiving)
        {
            UInt32 online = GetVar(VAR_TGDT);
            if (online != static_cast<UInt32>(-1))
            {
                if (online < TGD_ONLINE_TIME)
                {
                    EventPlayerTimeTick* event = new(std::nothrow) EventPlayerTimeTick(this, TGD_ONLINE_TIME-online, 1, 1);
                    if (event) PushTimerEvent(event);
                }
                else
                    GameAction()->onThanksgivingDay(this);
            }
        }
        */
        if (World::_blueactiveday)
            onBlueactiveday();

        if (World::getQgameGiftAct())
        {
            getQgameGiftAward();
        }

        /**
         * 1：蓝钻
         * 2：黄钻
         * 4：会员
         **/
        UInt32 curStatus = GetVar(VAR_BDIAMOND_CMD);
        UInt32 newStatus;
        UInt16 titleId;
        if(isBD() && (curStatus&1) == 0)
        {
            newStatus = 1;
            titleId = 283;
        }
        else if(isYD() && (curStatus&2) == 0)
        {
            newStatus = 2;
            titleId = 285;
        }
        else if(isQQVIP() && (curStatus&4) == 0)
        {
            newStatus = 4;
            titleId = 287;
        }
        else
        {
            newStatus = 0;
            titleId = 0;
        }
        if(newStatus > 0)
        {
            SetVar(VAR_BDIAMOND_CMD, curStatus | newStatus);

			SYSMSG(title, titleId);
			SYSMSG(content, titleId + 1);

			Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                UInt8 level = GetLev();
                UInt16 itemId;
                if(level < 60)
                    itemId = 9012;
                else if(level < 70)
                    itemId = 9013;
                else if(level < 80)
                    itemId = 9014;
                else if(level < 90)
                    itemId = 9015;
                else if(level < 100)
                    itemId = 9016;
                else if(level < 110)
                    itemId = 9035;
                else if(level < 120 )
                    itemId = 9391;
                else if(level < 130) 
                    itemId = 9430;
                else if(level < 140)
                    itemId = 9491;
                else
                    itemId = 9885;
                MailPackage::MailItem mitem[1] = {{itemId, 1}};
                MailItemsInfo itemsInfo(mitem, BlueDiamondCmd, 1);
                mailPackageManager.push(mail->id, mitem, 1, true);

                std::string strItems;
                for (int i = 0; i < 1; ++i)
                {
                    strItems += Itoa(mitem[i].id);
                    strItems += ",";
                    strItems += Itoa(mitem[i].count);
                    strItems += "|";
                }

                DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
            }
        }

        sendLevelPack(GetLev());
        offlineExp(curtime);

        //QQGame登录奖励
        sendQQGameGift1218();
        sendFeastLoginAct();
        sendFeastGiftLoginAct();
        //蛇年春节套装
        sendSnakeSpringEquipMail();
        //getNewYearGiveGiftAward(0,0);

        char buf[64] = {0};
        snprintf(buf, sizeof(buf), "%" I64_FMT "u", _id);
#ifndef _WIN32
        if (!m_ulog)
            m_ulog = _analyzer.GetInstance(buf);
        if (m_ulog)
        {
            TcpConnection conn = NETWORK()->GetConn(_session);
            if (conn)
            {
                Network::GameClient * cl = static_cast<Network::GameClient *>(conn.get());
                struct in_addr inaddr = inet_makeaddr(cl->GetClientIP(), 0);
                //m_ulog->SetUserIP(inet_ntoa(inaddr));
                m_ulog->SetUserIP(m_clientIp);
            }
        }
#endif
        if (!m_via.empty())
        {
            StringTokenizer via(m_via, "_");
            if (via.count() > 1)
                udpLog(via[0].c_str(), via[1].c_str(), "", "", getJinQuan().c_str(), "0", "login");
            else
                udpLog(m_via.c_str(), "", "", "", getJinQuan().c_str(), "0", "login");
        }
        else
            udpLog("", "", "", "", getJinQuan().c_str(), "0", "login");

        sendTowerLoginAct();

        if (!m_invited.empty())
        {
            if (!getInvitedBy())
            {
                UInt64 playerid = atoll(m_invited.c_str());
                if (playerid != getId())
                {
                    Player* cfriend = globalPlayers[playerid];
                    if (cfriend)
                    {
                        if (addCFriend(cfriend))
                        {
                            setInvitedBy(playerid);
                        }
                    }
                }
            }
        }
        /*
		if(!_playerData.totalRecharge && !GetVar(VAR_VIPFIRST))
		{
            SetVar(VAR_VIPFIRST, 1);

			SYSMSG(title, 254);
			SYSMSG(content, 255);

			Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[1] = {{449, 1}};
                MailItemsInfo itemsInfo(mitem, FirstReChargeAward, 1);
                mailPackageManager.push(mail->id, mitem, 1, true);

                std::string strItems;
                for (int i = 0; i < 1; ++i)
                {
                    strItems += Itoa(mitem[i].id);
                    strItems += ",";
                    strItems += Itoa(mitem[i].count);
                    strItems += "|";
                }

                DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
            }
		}
        */
#ifndef _WIN32
#ifndef _FB
#ifndef _VT
        dclogger.login(this);
        dclogger.login_sec(this);
        //dclogger.checkOpenId(this);
        //dclogger.checkYB(this);   //LB添加

        EventAutoRefreshOpenKey* event = new(std::nothrow) EventAutoRefreshOpenKey(this, 60 * 110, 24);
        if (event)
            PushTimerEvent(event);
            

#ifdef  OPEN_API_ON
        OPENAPI().Push(getId(), 0, getOpenId(), getOpenKey(), getSource().c_str(), getClientIp());
#endif
        
#endif
#endif
#endif // _WIN32
#ifdef DREAMER_DEBUG
        getDreamer();
#endif

        if(!_loadMark)
        {
            LOAD().Push(getId(), 0);
            _loadMark = true;
        }

        // XXX: 上线时暂设上次下线时间为当前时间，以防宕机时引起的挂机经验计算问题
        SetVar(VAR_OFFLINE, curtime);
	}

#define WEBDOWNLOAD 255

    void Player::udpLog(UInt8 platform, const char* str1, const char* str2, const char* str3, const char* str4,
                const char* str5, const char* str6, const char* type, UInt32 count)
    {
#ifndef _WIN32
        if (m_ulog && cfg.udplog)
        {
            char buf[1024] = {0};
            char* pbuf = &buf[0];
            if (cfg.isTestPlatform())
                pbuf += snprintf(pbuf, sizeof(buf), "%u_%u_%" I64_FMT "u|%s||%u|||%u||%u|%u|%u|%u|%u|%u|%u||%u||%u|1|",
                    cfg.serverNum, cfg.tcpPort, getId(), getOpenId(), IsMale() ? 1 : 2, GetLev(), _playerData.gold, _playerData.coupon, _playerData.tael, getVipLevel(), _clan? _clan->getId() : 0, getXinYue(), _playerData.qqvipl, cfg.serverNum, platform);
            else
                pbuf += snprintf(pbuf, sizeof(buf), "%u_%u_%" I64_FMT "u|%s||%u|||%u||%u|%u|%u|%u|%u|%u|%u||%u||%u|",
                    cfg.serverNum, cfg.tcpPort, getId(), getOpenId(), IsMale() ? 1 : 2, GetLev(), _playerData.gold, _playerData.coupon, _playerData.tael, getVipLevel(), _clan? _clan->getId() : 0, getXinYue(), _playerData.qqvipl, cfg.serverNum, platform);

            m_ulog->SetUserMsg(buf);
            if (platform != WEBDOWNLOAD)
                m_ulog->LogMsg(str1, str2, str3, str4, str5, str6, type, count, 0);
            // XXX: 不再分平台发送
            //if (platform)
            //    m_ulog->LogMsg(str1, str2, str3, str4, str5, str6, type, count, platform);

            TRACE_LOG("%s - (%s,%s,%s,%s,%s,%s,%s,%u) - %u", buf, str1, str2, str3, str4, str5, str6, type, count, platform);
        }
#endif
	}

    void Player::udpLog(const char* str1, const char* str2, const char* str3, const char* str4,
                const char* str5, const char* str6, const char* type, UInt32 count)
    {
#ifndef _WIN32
        if (m_ulog)
        {
            UInt8 platform = atoi(getDomain());
            if (platform == OFFICAL && strstr(m_via.c_str(), "webdownload"))
                platform = WEBDOWNLOAD;

            if (isXY())
                platform = PF_XY;

            udpLog(platform, str1, str2, str3, str4, str5, str6, type, count);
        }
#endif // _WIN32
    }

    void Player::udpLog(UInt32 type, UInt32 id, UInt32 num, UInt32 price, const char* op)
    {
        if (!op || !price)
            return;
        char _price[32] = {0};
        char _type[32] = {0};
        char _id[32] = {0};
        if (!id || !num)
        {
            snprintf(_type, 32, "1");
            snprintf(_id, 32, "GN_%u", type);
            snprintf(_price, 32, "%u", price);
            udpLog(op, _type, _id, _price, "", "", "props");
        }
        else
        {
            UInt8 type = GetItemLogType(id);
            snprintf(_type, 32, "%u", type);
            snprintf(_id, 32, "%u", id);
            snprintf(_price, 32, "%u", price/num);
            udpLog(op, _type, _id, _price, "", "", "props", num);
        }
    }
   
    void Player::luaUdpLog(const char* str1, const char* str2, const char* type)
    {
        udpLog(str1, str2, "", "", "", "", type);
    }

    void Player::guideUdp(UInt8 type, std::string& p1, std::string& p2)
    {
        if (type == 0)
            udpLog(p1.c_str(), p2.c_str(), "", "", "", "", "guide");
        else if (type == 1)
            udpLog(p1.c_str(), p2.c_str(), "", "", "", "", "act");
    }

    void Player::moneyLog(int type, int gold, int coupon, int tael, int achievement, int prestige)
    {
        if (!type || type > 2) return;
        UInt32 now = TimeUtil::Now();
        int today = TimeUtil::GetYYMMDD(now);
        bool sameDay = TimeUtil::SameDay(World::_moneyLogged, now);
        if (!sameDay)
        {
            for (int i = 0; i < 6; ++i)
                memcpy(&World::_moneyIn[i], &World::_moneyIn[i+1], sizeof(World::_moneyIn[i]));
            //World::_moneyIn[6] = {{0,},};
            memset(&World::_moneyIn, 0, sizeof(World::_moneyIn));

            DB8().PushUpdateData("INSERT INTO `money` (`time`, `type`, `gold`, `coupon`, `tael`, `achievement`, `prestige`) VALUES (%d,1,0,0,0,0,0)", today);
            DB8().PushUpdateData("INSERT INTO `money` (`time`, `type`, `gold`, `coupon`, `tael`, `achievement`, `prestige`) VALUES (%d,2,0,0,0,0,0)", today);
        }
        if(gold != 0 || coupon != 0 || tael != 0 || achievement!= 0 || prestige != 0)
            DB8().PushUpdateData("UPDATE `money` SET `gold` = `gold` + %d, `coupon` = `coupon` + %d, `tael` = `tael` + %d, `achievement` = `achievement` + %d, `prestige` = `prestige` + %d WHERE `time` = %d AND `type` = %d", gold, coupon, tael, achievement, prestige, today, type);

        World::_moneyLogged = now;
        // TODO:
        World::_moneyIn[6][type-1].gold += gold;
    }

    void Player::discountLog(UInt8 discountType)
    {
        char action[16] = "";
        snprintf (action, 16, "F1703_%d", discountType);
        udpLog("discount", action, "", "", "", "", "act");
    }

    void Player::tradeUdpLog(UInt32 id, UInt32 val /* = 0 */, UInt32 num /* = 1 */, bool priceLog /* = false */)
    {
        // 交易相关日志
        char action[32] = "";
        if (val)
        {
            if (priceLog)
                snprintf (action, 32, "F_%d_%d_2", id, val);
            else
                snprintf (action, 32, "F_%d_%d", id, val);
        }
        else
        {
            snprintf (action, 32, "F_%d", id);
        }
        udpLog("trade", action, "", "", "", "", "act", num);
    }

    void Player::skillStrengthenLog(UInt8 type, UInt32 val)
    {
        return; // XXX: 取消上报
        char action[16] = "";
        UInt32 num = 1;
        switch (type)
        {
            case 1:
                snprintf (action, 16, "%s", "F_1075");
                if (val)
                    strcat (action, "_1");
                else
                    strcat (action, "_2");
                break;
            case 2:
                snprintf (action, 8, "%s", "F_1076");
                num = val;
                break;
            default:
                snprintf (action, 8, "%s", "Error");
                break;
        }
        udpLog("skillStrengthen", action, "", "", "", "", "act", num);
    }

    void Player::townDeamonUdpLog(UInt16 level)
    {
        char action[16] = "";
        snprintf (action, 16, "F_1074_%d", level);
        udpLog("townDeamon", action, "", "", "", "", "act");
    }

    void Player::dungeonUdpLog(UInt8 levelReq, UInt8 type)
    {
        // 决战之地日志(又叫通天塔又叫地牢)
        char action[16] = "";
        switch(levelReq)
        {
            case 30:
                snprintf (action, 16, "F1068_%d", type);
                break;
            case 45:
                snprintf (action, 16, "F1069_%d", type);
                break;
            case 60:
                snprintf (action, 16, "F1070_%d", type);
                break;
            case 75:
                snprintf (action, 16, "F1071_%d", type);
                break;
            case 90:
                snprintf (action, 16, "F1072_%d", type);
                break;
            default:
                snprintf (action, 16, "ERROR");
                break;
        }
        udpLog("dungeon", action, "", "", "", "", "act");
    }

    void Player::frontMapUdpLog(UInt8 id, UInt8 type)
    {
        // 阵图日志
        char action[16] = "";

        snprintf (action, 16, "F%d_%d", id + 1055, type);

        udpLog("frontMap", action, "", "", "", "", "act");
    }

    void Player::copyUdpLog(UInt8 id, UInt8 type)
    {
        // 副本日志
        char action[16] = "";

        snprintf (action, 16, "F%d_%d", id + 1049, type);

        udpLog("copy", action, "", "", "", "", "act");
    }

    void Player::athleticsUdpLog(UInt32 id, UInt8 type /* = 0 */)
    {
        return; // XXX: 取消上报
        // 斗剑功能相关日志
        char action[16] = "";
        if (type)
        {
            snprintf (action, 16, "F%d_%d", id, type);
        }
        else
        {
            snprintf (action, 16, "F%d", id);
        }
        udpLog("athletics", action, "", "", "", "", "act");
    }

    void Player::activityUdpLog(UInt32 id, UInt8 type /* = 0 */)
    {
        // 活跃度功能相关日志
        // FIXME: 只能记录兑换积分小于255
        char action[16] = "";
        if (type)
        {
            snprintf (action, 16, "F%d_%d", id, type);
        }
        else
        {
            snprintf (action, 16, "F%d", id);
        }
        udpLog("activity", action, "", "", "", "", "act");
    }

    void Player::practiceUdpLog()
    {
        // 修为相关日志（暂时只有加速）
        char action[16] = "";
        snprintf (action, 16, "F%d", _vipLevel + 1003);
        udpLog("practice", action, "", "", "", "", "act");
    }

    void Player::arenaUdpLog(UInt32 id, UInt8 type /* = 0 */)
    {
        // 跨服战操作相关日志
        char action[16] = "";
        if (type)
        {
            snprintf (action, 16, "F%d_%d", id, type);
        }
        else
        {
            snprintf (action, 16, "F%d", id);
        }
        udpLog("arena", action, "", "", "", "", "act");
    }

    void Player::luckyDrawUdpLog(UInt32 id, UInt8 type, UInt32 num /* = 1 */)
    {
        // 秘境寻宝相关日志
        char action[16] = "";
        snprintf (action, 16, "F%d_%d", id + 1018, type);
        udpLog("luckyDraw", action, "", "", "", "", "act", num);
    }

    void Player::qixiUdpLog(UInt32 id)
    {
        // 七夕活动相关日志
        char action[16] = "";
        snprintf (action, 16, "F_%d", id);
        udpLog("qixi", action, "", "", "", "", "act");
    }

    void Player::clanUdpLog(UInt32 id)
    {
        // 帮派相关日志
        char action[16] = "";
        snprintf (action, 16, "F_%d", id);
        udpLog("clan", action, "", "", "", "", "act");
    }

    void Player::countryBattleUdpLog(UInt32 id, UInt8 country, std::string str)
    {
        // 国战相关日志
        char action[32] = "";
        if(str.empty())
            snprintf (action, 32, "F_%d_%d", id, country);
        else
            snprintf (action, 32, "F_%d_%d_%s", id, country, str.c_str());
        udpLog("countryBattle", action, "", "", "", "", "act");
    }

    void Player::heroIslandUdpLog(UInt32 id, UInt8 type, UInt16 value)
    {
        // 英雄岛相关日志
        char action[16] = "";
        if (value)
            snprintf (action, 16, "F_%d_%d_%d", id, type, value);
        else
            snprintf (action, 16, "F_%d_%d", id, type);
        udpLog("heroIsland", action, "", "", "", "", "act");
    }

    void Player::secondSoulUdpLog(UInt32 id, UInt32 val /* = 0 */, UInt32 num /* = 1 */)
    {
        return; // XXX: 取消上报
        // 元神相关日志
        char action[16] = "";
        if (val)
        {
            snprintf(action, 16, "F_%d_%d", id, val);
        }
        else
        {
            snprintf (action, 16, "F_%d", id);
        }
        if (!num)
            return;
        udpLog("secondSoul", action, "", "", "", "", "act", num);
    }

    void Player::wBossUdpLog(UInt32 id)
    {
        // 世界boss相关日志
        char action[16] = "";
        snprintf (action, 16, "F_%d", id);
        udpLog("worldBoss", action, "", "", "", "", "act");
    }

    void Player::clanCopyUdpLog(UInt32 id, UInt32 val /* = 0 */, UInt32 num /* = 1 */)
    {
        return; // XXX: 取消上报
        // 帮派副本相关日志
        char action[16] = "";
        if (val)
        {
            snprintf (action, 16, "F_%d_%d", id, val);
        }
        else
        {
            snprintf (action, 16, "F_%d", id);
        }
        udpLog("clanCopy", action, "", "", "", "", "act", num);
    }

    void Player::tripodUdpLog(UInt32 id, UInt32 val /* = 0 */, UInt32 num /* = 1 */)
    {
        // 九疑鼎相关日志
        char action[16] = "";
        if (val)
        {
            snprintf (action, 16, "F_%d_%d", id, val);
        }
        else
        {
            snprintf (action, 16, "F_%d", id);
        }
        udpLog("tripod", action, "", "", "", "", "act", num);
    }

    void Player::storeUdpLog(UInt32 id, UInt32 type, UInt32 itemId, UInt32 num /* = 1 */)
    {
        return; // XXX: 取消上报
        // 商城购买相关日志（现在只有荣誉和声望）
        char action[32] = "";
        snprintf (action, 32, "F_%d_%d_%d", id, type, itemId);
        udpLog("store", action, "", "", "", "", "act", num);
    }

    void Player::newRC7DayUdpLog(UInt32 id, UInt32 type /* = 0 */, UInt32 num /* = 1 */)
    {
        // 新版注册七日活动日志
        char action[32] = "";
        if (type)
            snprintf (action, 32, "F_%d_%d", id, type);
        else
            snprintf (action, 32, "F_%d", id);
        udpLog("register", action, "", "", "", "", "act", num);
    }

    void Player::transformUdpLog(UInt32 id, UInt32 type, UInt32 * moneys, UInt8 val1)
    {
        // 属性转移udp日志
        char action[64] = "";
        if (type & 0x01)
        {
            snprintf (action, 64, "F_%d_%d", id, 1);
            udpLog("transform", action, "", "", "", "", "act", moneys[0]);
        }
        if (type & 0x02)
        {
            snprintf (action, 64, "F_%d_%d_%d", id, 2, val1);
            udpLog("transform", action, "", "", "", "", "act", moneys[1]);
        }
        if (type & 0x08)
        {
            snprintf (action, 64, "F_%d_%d", id, 8);
            udpLog("transform", action, "", "", "", "", "act", moneys[2]);
        }
        if (type & 0x10)
        {
            snprintf (action, 64, "F_%d_%d", id, 10);
            udpLog("transform", action, "", "", "", "", "act", moneys[3]);
        }
        if (type & 0x20)
        {
            snprintf (action, 64, "F_%d_%d", id, 20);
            udpLog("transform", action, "", "", "", "", "act", moneys[4]);
        }
    }

    void Player::dreamerUdpLog(UInt32 id, UInt32 type, UInt32 num /* = 1 */)
    {
        // 水晶梦境udp日志
        char action[32] = "";
        snprintf (action, 32, "F_%d_%d", id, type);
        udpLog("dream", action, "", "", "", "", "act", num);
    }

    void Player::sendHalloweenOnlineAward(UInt32 now, bool _online)
    {
        _online = false; // XXX: fuck
        UInt32 online = getBuffData(PLAYER_BUFF_ONLINE);
        if (online == static_cast<UInt32>(-1))
            return;

        UInt8 oday = TimeUtil::Day(_playerData.lastOnline);
        UInt8 nday = TimeUtil::Day(now);
        if (oday != nday || _online)
        {
            if (nday - oday > 1) // XXX: 隔天
            {
                setBuffData(PLAYER_BUFF_ONLINE, 1);
            }
            else
            {
                ++online;
                setBuffData(PLAYER_BUFF_ONLINE, online);
            }
            if (_online)
            {
                _playerData.lastOnline = now;
                DB1().PushUpdateData("UPDATE `player` SET `lastOnline` = %u WHERE `id` = %" I64_FMT "u", now, getId());
            }
        }
        else
        {
            if (!online)
            {
                ++online;
                setBuffData(PLAYER_BUFF_ONLINE, online);
            }
            else
                return;
        }

        SYSMSG(title, 2122);
        SYSMSG(content, 2123);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {
            MailPackage::MailItem mitem[1] = {{GObject::MailPackage::Coupon,50}};
            mailPackageManager.push(mail->id, mitem, 1, true);
            std::string strItems;
            for (int i = 0; i < 1; ++i)
            {
                strItems += Itoa(mitem[i].id);
                strItems += ",";
                strItems += Itoa(mitem[i].count);
                strItems += "|";
            }
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
        }

        if (online == 3)
        {
            SYSMSG(title, 2124);
            SYSMSG(content, 2125);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[2] = {{GObject::MailPackage::Coupon,100}, {1750,1}};
                mailPackageManager.push(mail->id, mitem, 2, true);
                std::string strItems;
                for (int i = 0; i < 2; ++i)
                {
                    strItems += Itoa(mitem[i].id);
                    strItems += ",";
                    strItems += Itoa(mitem[i].count);
                    strItems += "|";
                }
                DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
            }
        }

        if (online >= 4)
            setBuffData(PLAYER_BUFF_ONLINE, static_cast<UInt32>(-1));
    }

    void Player::sendNationalDayOnlineAward()
    {
        if (getBuffData(PLAYER_BUFF_ONLINE) == static_cast<UInt32>(-1))
            return;

        SYSMSG(title, 2112);
        SYSMSG(content, 2113);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {
            MailPackage::MailItem mitem[2] = {{GObject::MailPackage::Coupon,100},{56,2}};
            mailPackageManager.push(mail->id, mitem, 2, true);
            std::string strItems;
            for (int i = 0; i < 2; ++i)
            {
                strItems += Itoa(mitem[i].id);
                strItems += ",";
                strItems += Itoa(mitem[i].count);
                strItems += "|";
            }
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
            setBuffData(PLAYER_BUFF_ONLINE, static_cast<UInt32>(-1), true);
        }
    }

    void Player::openLevelBox(UInt8 lvl, UInt8 cls)
    {
        static const UInt32 itemId[3][8] = {
            {2392,2393,2394,2395,2396,2397,2398,2399},
            {2384,2385,2386,2387,2388,2389,2390,2391},
            {2376,2377,2378,2379,2380,2381,2382,2383},
        };

        static const UInt32 gemId[3][8][6] = {
            {
                {5061,5081,5021,5031,5051,5041},
                {5071,5081,5021,5031,5051,5041},
                {5071,5091,5021,5031,5051,5041},
                {5071,5091,5021,5031,5051,5041},
                {5071,5131,5021,5031,5051,5041},
                {5071,5101,5021,5031,5051,5041},
                {5101,5131,5111,5021,5031,5051},
                {5061,5101,5131,5111,5021,5031},
            },
            {
                {5061,5081,5021,5031,5051,5041},
                {5071,5081,5021,5031,5051,5041},
                {5071,5091,5021,5031,5051,5041},
                {5071,5091,5021,5031,5051,5041},
                {5071,5131,5021,5031,5051,5041},
                {5071,5101,5021,5031,5051,5041},
                {5101,5131,5111,5021,5031,5051},
                {5061,5101,5131,5111,5021,5031},
            },
            {
                {5061,5081,5001,5031,5051,5011},
                {5071,5081,5001,5031,5051,5011},
                {5071,5091,5001,5031,5051,5011},
                {5071,5091,5001,5031,5051,5011},
                {5071,5131,5001,5031,5051,5011},
                {5071,5101,5001,5031,5051,5011},
                {5101,5131,5111,5001,5031,5051},
                {5061,5101,5131,5111,5001,5031},
            },
        };

        if (!cls || cls > 3)
            return;

        if (lvl == 30)
        {
            for (UInt8 i = 0; i < 8; ++i)
            {
                ItemEquip* ie = static_cast<ItemEquip*>(GetPackage()->AddEquip(itemId[cls-1][i], true, false));
                if (ie)
                {
                    ItemEquipData& ied = ie->getItemEquipData();
                    ied.sockets = 6;
                    for (UInt8 j = 0; j < 6; ++j)
                    {
                        ied.gems[j] = gemId[cls-1][i][j];
                        DB4().PushUpdateData("UPDATE `equipment` SET `enchant` = %u, `sockets` = %u, `socket1` = %u, `socket2` = %u, `socket3` = %u, `socket4` = %u, `socket5` = %u, `socket6` = %u, `attrType1` = %u, `attrValue1` = %d, `attrType2` = %u, `attrValue2` = %d, `attrType3` = %u, `attrValue3` = %d WHERE `id` = %u", ied.enchant, ied.sockets, ied.gems[0], ied.gems[1], ied.gems[2], ied.gems[3], ied.gems[4], ied.gems[5], ied.extraAttr2.type1, ied.extraAttr2.value1, ied.extraAttr2.type2, ied.extraAttr2.value2, ied.extraAttr2.type3, ied.extraAttr2.value3, ie->getId());
                    }
                    GetPackage()->SendSingleEquipData(ie);
                }
            }
        }
    }

    void Player::setVipAwardFlag(UInt8 type, UInt32 value)
    {
        switch (type)
        {
            case 2:
            case 1:
                _playerData.qqawardgot |= value;
                DB1().PushUpdateData("UPDATE `player` SET `qqawardgot` = %u WHERE `id` = %" I64_FMT "u",
                        _playerData.qqawardgot, getId());
            break;

            default:
            break;
        }
    }

    void Player::sendMailPack(UInt16 title, UInt16 content, lua_tinker::table items)
    {
        UInt32 size = items.size();
        if (!size || size > 100)
            return;

        SYSMSG(_title, title);
        SYSMSG(_content, content);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, _title, _content, 0xFFFE0000);
        if(mail)
        {
            std::string strItems;

            MailPackage::MailItem* mitem = new MailPackage::MailItem[size];
            for (UInt32 i = 0; i < size; ++i)
            {
                lua_tinker::table tmp = items.get<lua_tinker::table>(i);;
                mitem[i].id = tmp.get<UInt32>(0);
                mitem[i].count = tmp.get<UInt32>(1);

                strItems += Itoa(mitem[i].id);
                strItems += ",";
                strItems += Itoa(mitem[i].count);
                strItems += "|";
            }
            mailPackageManager.push(mail->id, mitem, size, true);
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, _title, _content, strItems.c_str(), mail->recvTime);
            delete mitem;
        }
    }

    void Player::sendMailItem(UInt16 title, UInt16 content, MailPackage::MailItem* mitem, UInt16 size, bool bind)
    {
        if (!mitem || !size)
            return;

        SYSMSG(_title, title);
        SYSMSG(_content, content);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, _title, _content, 0xFFFE0000);
        if(mail)
        {
            std::string strItems;
            for (UInt32 i = 0; i < size; ++i)
            {
                strItems += Itoa(mitem[i].id);
                strItems += ",";
                strItems += Itoa(mitem[i].count);
                strItems += "|";
            }
            mailPackageManager.push(mail->id, mitem, size, bind);
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, _title, _content, strItems.c_str(), mail->recvTime);
        }
    }

    void Player::sendLevelPack(UInt8 lvl)
    {
        if (lvl >= 30 && !(_playerData.qqawardgot & 0x10) && getCreated() < TimeUtil::MkTime(2013, 7, 5, 8))
        {
            GetPackage()->Add(37, 1, true, true);
            _playerData.qqawardgot |= 0x10;
            DB1().PushUpdateData("UPDATE `player` SET `qqawardgot` = %u WHERE `id` = %" I64_FMT "u", _playerData.qqawardgot, getId());
        }
        /** deleted by suntao 2013-6-29 **/
#if 0
        if (lvl >= 30 && !(_playerData.qqawardgot & 0x10))
        {
            SYSMSG(title, 2120);
            SYSMSG(content, 2121);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[1] = {{37,1}};
                mailPackageManager.push(mail->id, mitem, 1, true);

                std::string strItems;
                strItems += Itoa(mitem[0].id);
                strItems += ",";
                strItems += Itoa(mitem[0].count);
                strItems += "|";
                DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);

                _playerData.qqawardgot |= 0x10;
                DB1().PushUpdateData("UPDATE `player` SET `qqawardgot` = %u WHERE `id` = %" I64_FMT "u", _playerData.qqawardgot, getId());
            }
        }
#endif
        /** deleted by qiwy 2012-12-07 **/
#if 0
        if (lvl >= 40 && !(_playerData.qqawardgot & 0x08))
        {
            SYSMSG(title, 2114);
            SYSMSG(content, 2115);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[1] = {{36,1}};
                mailPackageManager.push(mail->id, mitem, 1, true);

                std::string strItems;
                strItems += Itoa(mitem[0].id);
                strItems += ",";
                strItems += Itoa(mitem[0].count);
                strItems += "|";
                DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);

                _playerData.qqawardgot |= 0x08;
                DB1().PushUpdateData("UPDATE `player` SET `qqawardgot` = %u WHERE `id` = %" I64_FMT "u", _playerData.qqawardgot, getId());
            }
        }
#endif
    }

	void Player::Reconnect()
	{
		Map * map = GetMap();
		if(map != NULL)
			map->PlayerEnter( this );

		m_TaskMgr->Init();
		m_Sale->Init();

		checkLastBattled();
		_isOnline = true;
		if(_clan != NULL)
			_clan->broadcastMemberInfo(this);
	}

    UInt32 Player::GetOnlineTimeToday()
    {
        UInt32 now = TimeUtil::Now();
         UInt32 onlineToday = GetVarNow(VAR_TODAY_ONLINE, now);

         UInt32 t = GetOnlineTimeTodaySinceLastLogin(now);
         return onlineToday + t;

    }
    UInt32  Player::GetOnlineTimeTodaySinceLastLogin(UInt32 now)
    {
        //UInt32 now  = TimeUtil::Now();
        UInt32 today = TimeUtil::SharpDayT( 0 , now);
        UInt32 lastOnline = _playerData.lastOnline;
        if( today >= lastOnline)
        {
           return now  - today ;
        }
        else
        {
            if(now  > lastOnline)
                return  now - lastOnline ;
        }
        return 0;
    }
    void Player::LogoutSaveOnlineTimeToday()
    {
        UInt32 now = TimeUtil::Now();

       // UInt32 onlineToday = GetVar(VAR_TODAY_ONLINE, now);

        UInt32 t = GetOnlineTimeTodaySinceLastLogin(now);
        AddVarNow(VAR_TODAY_ONLINE,  t , now);

    }
	void Player::selfKick()
	{
		if (m_TaskMgr->IsInConvey())
		{
			m_TaskMgr->SetConvey(false);
		}

		UInt32 curtime = TimeUtil::Now();
        /*
        if (World::_thanksgiving)
        {
            PopTimerEvent(this, EVENT_TIMETICK, getId());
            UInt32 online = GetVar(VAR_TGDT);
            if (online != static_cast<UInt32>(-1))
            {
                if (online + curtime - _playerData.lastOnline >= TGD_ONLINE_TIME)
                    GameAction()->onThanksgivingDay(this);
                else
                    SetVar(VAR_TGDT, online + curtime - _playerData.lastOnline);
            }
        }
        */

        int addr = inet_addr(m_clientIp);
		DBLOG1().PushUpdateData("update login_states set logout_time=%u where server_id=%u and player_id=%" I64_FMT "u and login_time=%u", curtime, addr?addr:cfg.serverLogId, _id, _playerData.lastOnline);
		writeOnlineRewardToDB();

		removeStatus(SGPunish);
        LogoutSaveOnlineTimeToday();

        char online[32] = {0,};
        snprintf(online, sizeof(online), "%u", curtime - _playerData.lastOnline);
        udpLog("", "", "", "", "", online, "login");

        //UInt8 platform = atoi(getDomain());
        if (cfg.GMCheck )
        {
            struct CrackValue
            {
                char ip[1024];
                int v;
            } crackValue;
            snprintf(crackValue.ip, sizeof(crackValue.ip), "%s", getClientIp());
            crackValue.v = 0;

            LoginMsgHdr hdr1(0x301, WORKER_THREAD_LOGIN, 0, this->GetSessionID(), sizeof(crackValue));
            GLOBAL().PushMsg(hdr1, &crackValue);
        }
        if(GetVar(GObject::VAR_MARRY_STATUS) == 5 || GetVar(GObject::VAR_MARRY_STATUS) == 6)
            gMarriedMgr.ProcessOnlineAward(this,1);
        DarkDargon::Instance().QuitDarkDargon(this);

        SetVar(VAR_OFFLINE, curtime);
        PopTimerEvent(this, EVENT_AUTOBATTLE, 0);
        delFlag(Training);
	}

	void Player::Logout(bool nobroadcast)
	{
		if (m_TaskMgr->IsInConvey())
		{
			m_TaskMgr->SetConvey(false);
		}

		UInt32 curtime = TimeUtil::Now();
        SetVar(VAR_OFFLINE, curtime);
        if(hasFlag(InCopyTeam))
            teamCopyManager->leaveTeamCopy(this);
       
        if(GetEnterPTCStatus())
            petTeamCopyManager->quit(this);

        if(GetInPTCStatus())
            petTeamCopyManager->leaveTeam(this, 2);

        if(GetTMDYRoomStatus())
            KJTMManager->LeaveRoom(this, 1);

		if(cfg.enableWallow && _playerData.wallow)
		{
			_onlineDuration = _onlineDuration + curtime - _playerData.lastOnline;
		}
        setQQGameOnlineTotalTime();
        int addr = inet_addr(m_clientIp);
		DBLOG1().PushUpdateData("update login_states set logout_time=%u where server_id=%u and player_id=%" I64_FMT "u and login_time=%u", curtime, addr?addr:cfg.serverLogId, _id, _playerData.lastOnline);
		DB1().PushUpdateData("UPDATE `player` SET `lastOnline` = %u, `nextReward` = '%u|%u|%u|%u' WHERE `id` = %" I64_FMT "u", curtime, _playerData.rewardStep, _playerData.nextRewardItem, _playerData.nextRewardCount, _playerData.nextRewardTime, _id);

        if(_isOnline && !hasFlag(Training))
        {
            //if(cfg.GMCheck)
             {
                 /** 如果boss正在该据点，退出不自动挂机 **/
                 if(worldBoss.needAutoBattle(_playerData.location))
                 {
                     UInt8 hookType = GetVar(VAR_LAST_HOOK_TYPE);
                     if(hookType == ENUM_TRAINP1 && GetVar(VAR_TRAINP1) > 0)
                     {
                     }
                     else if(hookType == ENUM_TRAINP2 && GetVar(VAR_TRAINP2) > 0)
                     {
                     }
                     else if(hookType == ENUM_TRAINP3 && GetVar(VAR_TRAINP3) > 0)
                     {
                     }
                     else
                         hookType = 0;
                     autoBattle(0, hookType);
                 }
             }
        }
        _isOnline = false;

		if(!nobroadcast)
		{
			Map * map = GetMap();
			if(map != NULL)
				map->PlayerLeave( this, true );

			if(_clan != NULL)
				_clan->broadcastMemberInfo(this);
		}
		testBattlePunish();

		checkLastBattled();

		if (_clanBattle != NULL)
		{
			GameMsgHdr hdr(0x177, WORKER_THREAD_WORLD, this, 0);
			GLOBAL().PushMsg(hdr, NULL);
		}

        if (World::_nationalDay)
        {
            UInt32 online = getBuffData(PLAYER_BUFF_ONLINE);
            if (online != static_cast<UInt32>(-1))
            {
                if (online + curtime - _playerData.lastOnline >= NTD_ONLINE_TIME)
                    sendNationalDayOnlineAward();
                else
                    setBuffData(PLAYER_BUFF_ONLINE, online + curtime - _playerData.lastOnline);
            }
        }
        /*
        if (World::_thanksgiving)
        {
            PopTimerEvent(this, EVENT_TIMETICK, getId());
            UInt32 online = GetVar(VAR_TGDT);
            if (online != static_cast<UInt32>(-1))
            {
                if (online + curtime - _playerData.lastOnline >= TGD_ONLINE_TIME)
                    GameAction()->onThanksgivingDay(this);
                else
                    SetVar(VAR_TGDT, online + curtime - _playerData.lastOnline);
            }
        }
        */
        if (World::_blueactiveday)
            PopTimerEvent(this, EVENT_TIMETICK, getId());

        LogoutSaveOnlineTimeToday();
#ifndef _WIN32
#ifdef _FB
#else
        dclogger.logout(this);
        PopTimerEvent(this, EVENT_REFRESHOPENKEY, getId());
#endif
#endif // _WIN32
        //heroIsland.playerOffline(this);
        //newHeroIsland.playerLeave(this);
		removeStatus(SGPunish);
        char online[32] = {0,};
        snprintf(online, sizeof(online), "%u", TimeUtil::Now() - _playerData.lastOnline);
        udpLog("", "", "", "", "", online, "login");

        //UInt8 platform = atoi(getDomain());
        if (cfg.GMCheck )
        {
            struct CrackValue
            {
                char ip[1024];
                int v;
            } crackValue;
            snprintf(crackValue.ip, sizeof(crackValue.ip), "%s", getClientIp());
            crackValue.v = 0;

            LoginMsgHdr hdr1(0x301, WORKER_THREAD_LOGIN, 0, this->GetSessionID(), sizeof(crackValue));
            GLOBAL().PushMsg(hdr1, &crackValue);
        }
        //愚公移山活动
        setLogoutInFoolsDay();
        globalOnlinePlayers.remove(getId()); //从全局在线玩家容器中删除
        PopTimerEvent(this, EVENT_AUTOBATTLE, 0);
        delFlag(Training);
        sendQQBoardOnlineTime();  
        SetQQBoardValue();
        if(GetVar(GObject::VAR_MARRY_STATUS) == 5 || GetVar(GObject::VAR_MARRY_STATUS) == 6)
        {
            gMarriedMgr.ProcessOnlineAward(this,1);
            gMarriedMgr.EnterCoupleCopy(this,0);
        }
        DarkDargon::Instance().QuitDarkDargon(this);
        if(getDrinkInfo().drinker !=NULL )
        {
            if(getDrinkInfo().time != 0 )
            {
                Player * friendOne = getDrinkInfo().drinker;   
                calcDrinkPoint();
                if(getDrinkInfo().type!=0)
                {
                    UInt8 flag = 1;
                    GameMsgHdr hdr(0x407, friendOne->getThreadId(), friendOne, sizeof(UInt8));
                    GLOBAL().PushMsg( hdr, &flag );
                }
            }
            else
            {
                getDrinkInfo().drinker->getDrinkInfo().reset();
                getDrinkInfo().drinker->sendDrinkInfo();
                getDrinkInfo().reset();
            }
        }
    }

	void Player::checkLastBattled()
	{
		bool update = false;
		if(_playerData.lastResource != 0)
		{
			UInt32 coupon = static_cast<UInt32>((_playerData.lastResource >> 16) & 0xFFFF);
			UInt32 tael = static_cast<UInt32>(_playerData.lastResource & 0xFFFF);
			UInt32 coin = static_cast<UInt32>((_playerData.lastResource >> 32) & 0xFFFFF);
			UInt32 achievement = static_cast<UInt32>((_playerData.lastResource >> 52) & 0xFFF);
			if(coupon > 0)
				getCoupon(coupon);
			if(tael > 0)
				getTael(tael);
			if(coin > 0)
				getCoin(coin);

			if(achievement > 0)
				getAchievement(achievement);
			_playerData.lastResource = 0;
			update = true;
		}
		if(_lastNg != NULL)
		{
			_lastNg->monsterKilled(this);
			if(_playerData.lastExp > 0)
			{
				AddExp(_playerData.lastExp, _lastNg->getLevel());
				_playerData.lastExp = 0;
			}
			_lastNg = NULL;
		}
		else if(_playerData.lastExp != 0)
		{
			UInt32 exp = _playerData.lastExp;
			if((exp & 0x80000000) > 0)
			{
				exp &= 0x7FFFFFFF;
				moveTo(_playerData.location & 0xFF00, true);
			}
			AddExp(exp);
			_playerData.lastExp = 0;
			update = true;
		}
		if(!_lastLoot.empty())
		{
			if(_lastDungeon > 0)
			{
				std::string itemnames;
				std::vector<GData::LootResult>::iterator it;
				for(it = _lastLoot.begin(); it != _lastLoot.end(); ++ it)
				{
					if(IsEquipTypeId(it->id))
					{
						const GData::ItemBaseType * ibt = GData::itemBaseTypeManager[it->id];
						if(ibt != NULL && ibt->quality > 4)
						{
							SYSMSGV(iname, 10002, it->id);
							itemnames += iname;
						}
					}
				}
				if(!itemnames.empty())
				{
					UInt32 did = _lastDungeon & 0x7F;
					UInt32 level = _lastDungeon >> 8;
					const GData::DungeonData * dd = GData::dungeons[did];
					if(dd != NULL)
						SYSMSG_BROADCASTV(270, _playerData.country, _playerData.name.c_str(), dd->getName().c_str(), level, itemnames.c_str());
				}
			}
			std::vector<GData::LootResult>::iterator it;
			for(it = _lastLoot.begin(); it != _lastLoot.end(); ++ it)
			{
				m_Package->ItemNotify(it->id, it->count);
			}
			_lastLoot.clear();
		}
		if(_lastDungeon > 0)
		{
			if((_lastDungeon & 0x80) > 0)
			{
				const GData::DungeonData * dd = GData::dungeons[_lastDungeon & 0x7F];
				if(dd != NULL)
					SYSMSG_BROADCASTV(272, _playerData.country, _playerData.name.c_str(), dd->getName().c_str());
			}
			_lastDungeon = 0;
		}
        if(!_lastAthAward.empty())
        {
            std::vector<LastAthAward>::iterator it;
            for(it = _lastAthAward.begin(); it != _lastAthAward.end(); ++ it)
            {
                if(it->itemId && it->itemCount)
                {
                    SYSMSG_SENDV(102, this, it->itemId, it->itemCount);
                    SYSMSG_SENDV(1002, this, it->itemId, it->itemCount);
                }
                if(it->prestige)
                {
                    SYSMSG_SENDV(185, this, it->prestige);
                    SYSMSG_SENDV(1090, this, it->prestige);
                }
            }
            _lastAthAward.clear();
        }
        sendDeamonAwardsInfo();
        checkLastExJobAward();

		if(update)
		{
			DB1().PushUpdateDataL("UPDATE `player` SET `lastExp` = 0, `lastResource` = 0 WHERE `id` = %" I64_FMT "u", _id);
		}
	}

    void Player::addLastTjScore()
    {
        if (!GObject::Tianjie::instance().isTjOpened())
        {
            _playerData.lastTjEventScore = 0;
            _playerData.lastTjTotalScore = 0;
            return;
        }

        if (_playerData.lastTjEventScore > 0)
        {
            SYSMSG_SENDV(167, this, _playerData.lastTjEventScore);
            SYSMSG_SENDV(169, this, _playerData.lastTjEventScore);
        }
        if (_playerData.lastTjTotalScore > 0)
        {
            SYSMSG_SENDV(168, this, _playerData.lastTjTotalScore);
            SYSMSG_SENDV(170, this, _playerData.lastTjTotalScore);
        }
        _playerData.lastTjEventScore = 0;
        _playerData.lastTjTotalScore = 0;
    }
    void Player::addLastGongxian()
    {
        if (!GObject::ClanBoss::instance().isOpening())
        {
            _playerData.lastGongxian = 0;
            return;
        }
        if (_playerData.lastGongxian > 0)
        {
            SYSMSG_SENDV(173, this, _playerData.lastGongxian);
            SYSMSG_SENDV(174, this, _playerData.lastGongxian);
        }
        _playerData.lastGongxian = 0;
    }
    void Player::pendLastGongxian(int num)
    {
        _playerData.lastGongxian += num;
    }

    UInt32 bufferId2VarId(UInt8 id)
    {
        if(id == PLAYER_BUFF_TRAINP1)
            return VAR_TRAINP1;
        else if(id == PLAYER_BUFF_TRAINP2/* || id == PLAYER_BUFF_TRAINP4 || id == PLAYER_BUFF_ADVANCED_HOOK*/)
            return VAR_TRAINP2;
        else if(id == PLAYER_BUFF_TRAINP3)
            return VAR_TRAINP3;
        else
            return 0;
    }

	void Player::sendExpHook(UInt8 id, UInt32 data)
	{
        if(_isOnline)
        {
            Stream st(REP::USER_INFO_CHANGE);
            st << id << data << Stream::eos;
            send(st);
        }
    }

	void Player::setBuffData(UInt8 id, UInt32 data, bool writedb)
	{
		UInt32 now = TimeUtil::Now();
		if(id == PLAYER_BUFF_ATTACKING && data >= now)
		{
			if(_playerData.status & SGPunish)
				_playerData.battlecdtm = data;
			else
            {
                if (data - now >= 30)
                    _playerData.battlecdtm = now + (data - now) / 6;
                else
                    _playerData.battlecdtm = now + (data - now);
                if (data - now < 2)
                    _playerData.battlecdtm = now + 2;
            }
		}
		if(id >= PLAYER_BUFF_COUNT || _buffData[id] == data)
			return;
		_buffData[id] = data;
		if(writedb || (id >= PLAYER_BUFF_HIFIGHT && id <= PLAYER_BUFF_HIESCAPE))
			sendModification(PLAYER_BUFF_START + id, data, writedb);
	}

	void Player::addBuffData(UInt8 id, UInt32 data)
	{
		if(id >= PLAYER_BUFF_COUNT || data == 0)
			return;
		UInt32 now = TimeUtil::Now();
		UInt32 olddata = getBuffData(id, now);
		if(olddata == 0 && id != PLAYER_BUFF_AUTOHEAL)
			_buffData[id] = now + data;
		else
			_buffData[id] = olddata + data;
		sendModification(PLAYER_BUFF_START + id, _buffData[id]);
	}

	UInt32 Player::getBuffData( UInt8 idx, UInt32 tm )
	{
		if(idx > PLAYER_BUFF_COUNT)
			return 0;
		if(idx != PLAYER_BUFF_AUTOHEAL &&
                idx != PLAYER_BUFF_HOLY &&
                idx != PLAYER_BUFF_AUTOCOPY &&
                idx != PLAYER_BUFF_WBOSS &&
                idx != PLAYER_BUFF_YDOTR &&
                idx != PLAYER_BUFF_ONLINE &&
                idx != PLAYER_BUFF_AMARTIAL_WIN &&
                _buffData[idx] > 0 && _buffData[idx] <= tm)
		{
			_buffData[idx] = 0;
			updateDB(PLAYER_BUFF_START + idx, 0);
			return 0;
		}
		return _buffData[idx];
	}

	UInt32 Player::getBuffLeft( UInt8 idx, UInt32 tm )
	{
		UInt32 buff = getBuffData( idx, tm );
		if(buff == 0)
			return 0;
		if(buff <= tm)
		{
			setBuffData( idx, 0 );
			return 0;
		}
		return buff - tm;
	}

    UInt32 Player::GetVar(UInt32 id)
    {
        return m_pVars->GetVar(id);
    }

    Int32 Player::GetVarS(Int32 id)
    {
        return (Int32)m_pVars->GetVar(id);
    }

    void Player::LoadVar(UInt32 id, UInt32 val, UInt32 overTime)
    {
        m_pVars->LoadVar(id, val, overTime);
    }

    void Player::SetVar(UInt32 id, UInt32 val)
    {
        m_pVars->SetVar(id,val);
    }
    void Player::DelVar(UInt32 id )
    {
        m_pVars->DelVar(id);
    }

    void Player::AddVar(UInt32 id, UInt32 val)
    {
        m_pVars->AddVar(id,val);
    }

    void Player::AddVarS(UInt32 id, Int32 val)
    {
        Int32 v = GetVarS(id);
        m_pVars->SetVar(id,v+val);
    }

    UInt32 Player::GetVarNow(UInt32 id,  UInt32 now)
    {
        return m_pVars->GetVar(id , now);
    }
    void Player::SetVarNow(UInt32 id, UInt32 val, UInt32 now)
    {
        m_pVars->SetVar(id,val, now);
    }

    void Player::AddVarNow(UInt32 id, UInt32 val, UInt32 now)
    {
        m_pVars->AddVar(id,val, now);
    }

    void Player::SetVarOffset(UInt32 offset)
    {
        m_pVars->SetOffset(offset);
    }

	void Player::send( const void * buf, int size )
	{
		if(!_isOnline) return;
		TcpConnection conn = NETWORK()->GetConn(_session);
		if(conn.get() == NULL)
		{
			return;
		}
		conn->send(buf, size);
	}

	bool Player::isFighterFull() const
	{
		size_t size = _fighters.size();
		return (size > 9 || (GetLev() < 40 && size >= static_cast<size_t>(1 + GetLev() / 10)));
	}

	void Player::storeFighters()
	{
		DB1().PushUpdateData("UPDATE `player` SET `lineup` = '%u,%u|%u,%u|%u,%u|%u,%u|%u,%u' WHERE id = %"  I64_FMT  "u",
			_playerData.lineup[0].fid, _playerData.lineup[0].pos, _playerData.lineup[1].fid, _playerData.lineup[1].pos,
			_playerData.lineup[2].fid, _playerData.lineup[2].pos, _playerData.lineup[3].fid, _playerData.lineup[3].pos,
			_playerData.lineup[4].fid, _playerData.lineup[4].pos, getId());
	}

	void Player::updateBattleFighters(bool updatedb)
	{
		int c = 0;
        bool hasMo = false;
		for(int i = 0; i < 5; ++ i)
		{
			Lineup& lup = _playerData.lineup[i];
			for(int j = 0; j < i; ++ j)
			{
				if(_playerData.lineup[j].fid == lup.fid)
				{
					lup.fid = 0;
					lup.pos = 0;
				}
			}
			UInt32 id = lup.fid;
			if(id == 0)
			{
				lup.fighter = NULL;
				continue;
			}
			std::map<UInt32, Fighter *>::iterator it = _fighters.find(id);
			if(it == _fighters.end())
			{
				lup.fid = 0;
				lup.fighter = NULL;
				lup.pos = 0;
			}
			else
			{
				lup.fighter = it->second;
                if(hasMo && lup.fighter->getClass() == e_cls_mo)
                {
                    lup.fighter = NULL;
                    lup.fid = 0;
                    lup.pos = 0;
                    continue;
                }
                else if(lup.fighter && lup.fighter->getClass() == e_cls_mo)
                    hasMo = true;
				lup.updateId();
				++ c;
				if(i > 0 && lup.fid < 10)
				{
					std::swap(_playerData.lineup[0], _playerData.lineup[i]);
				}
			}
		}
		if(c == 0 && !_fighters.empty())
		{
			if(_fighters.empty())
				return;
			Lineup& lup = _playerData.lineup[0];
			lup.fighter = _fighters.begin()->second;
			lup.pos = 12;
			lup.updateId();
		}
        SetVar(VAR_HAS_MO_BATTLER, hasMo? 1: 0);
		if(updatedb)
		{
			storeFighters();
		}
	}


	Map* Player::GetMap()
	{
		return Map::FromSpot(_playerData.location);
	}

	SpotData * Player::GetMapSpot()
	{
		return Map::Spot(_playerData.location);
	}

	UInt8 Player::GetClass() const
	{
		return (!_fighters.empty()) ? _fighters.begin()->second->getClass() : 1;
	}

	UInt8 Player::GetClassAndSex() const
	{
		return (!_fighters.empty()) ? _fighters.begin()->second->getClassAndSex() : 0;
	}

	bool Player::IsMale() const
	{
		return (!_fighters.empty()) ? _fighters.begin()->second->isMale() : 0;
	}

	UInt8 Player::GetLev() const
	{
		return (!_fighters.empty()) ? _fighters.begin()->second->getLevel() : 1;
	}

    UInt8 Player::GetColor() const
    {
        return (!_fighters.empty()) ? _fighters.begin()->second->getColor() : 0;
    }

    UInt8 Player::getPortraitAndColor() const
    {
        if(_fighters.empty())
            return 0;
        Fighter * fgt = _fighters.begin()->second;
        return (fgt->getColor() << 3) + fgt->getId();
    }

	UInt64 Player::GetExp() const
	{
		return (!_fighters.empty()) ? _fighters.begin()->second->getExp() : 0;
	}

    void Player::upInitCitta(Fighter* fgt, bool writedb)
    {
        static UInt16 cittas[4][9] =
        {
            {301, 0, 0, 0, 0, 0, 0, 0, 0},
            {401, 0, 0, 0, 0, 0, 0, 0, 0},
            {701, 0, 0, 0, 0, 0, 0, 0, 0},
            {13409, 13709, 13509, 14109, 14209, 14309, 0, 0, 0}
        };
        if(fgt->getClass() >= e_cls_max)
            return;
        UInt8 clsIdx = fgt->getClass() - 1;
        for(int i = 0; i < 9; ++ i)
        {
            UInt16 citta = cittas[clsIdx][i];
            if(citta == 0)
                continue;
            if (fgt->hasCitta(citta) < 0) {
                if (fgt->addNewCitta(citta, writedb, true)) {
                    if (!isMainFighter(fgt->getId()) && fgt->upCitta(citta, 0, writedb)) {
                    }
                }
            }
        }
    }

	void Player::addFighter( Fighter * fgt, bool writedb, bool load )
	{
		UInt32 id = fgt->getId();
		if(id < 10)
			_fighters.insert(_fighters.begin(), std::make_pair(fgt->getId(), fgt));
		else
			_fighters[fgt->getId()] = fgt;

		if(writedb)
		{
			UInt32 p = static_cast<UInt32>((fgt->getPotential()+0.005) * 100);
			UInt32 c = static_cast<UInt32>((fgt->getCapacity()+0.05) * 100);
			DB2().PushUpdateData("INSERT INTO `fighter` (`id`, `playerId`, `potential`, `capacity`, `level`, `experience`)\
                    VALUES(%u, %" I64_FMT "u, %u.%02u, %u.%02u, %u, %u)",
                    id, getId(), p / 100, p % 100, c / 100, c % 100, fgt->getLevel(), fgt->getExp());
            fgt->setSummoned(TimeUtil::Now());

            //招募散仙荣誉
           if(!load && CURRENT_THREAD_ID() <= WORKER_THREAD_NEUTRAL)
           {
                 UInt8 col  = fgt->getColor();

                 if(_fighters.size())
                     GameAction()->doAttainment(this, 10101, static_cast<UInt32>(col));

                 UInt8 minCol = col;

                 std::map<UInt32, Fighter *>::iterator it = _fighters.begin();

                 while(it != _fighters.end())
                 {
                      if(it->second->getId() >=  10 )
                         minCol = std::min(minCol, it->second->getColor());
                       it ++ ;
                 }


                 if(_fighters.size() == 5)
                     GameAction()->doAttainment(this, 10102, minCol);
                 if(_fighters.size() == 10)
                     GameAction()->doAttainment(this, 10108, minCol);
           }
		}

        if (!load && !fgt->getCittasNum())
            upInitCitta(fgt, true);

        fgt->getAttrType1(true);
        fgt->getAttrType2(true);
        fgt->getAttrType3(true);

        //if (fgt->getClass() == e_cls_mo)    // XXX: 更新前招募未完全打通穴道
        if (fgt->getClass() == e_cls_mo && !load)
        {
            // 70级，关元穴穴道，60级白虎
            fgt->addExp(GData::expTable.getLevelMin(70));
            fgt->openSecondSoul(13);
            fgt->setSoulLevel(60);
            fgt->setToAcupoints(11, true);
        }
    }

    bool Player::addFighterFromItem(UInt32 itemid, UInt32 price)
    {
        if(isFighterFull())
        {
            sendMsgCode(0, 1200);
            return false;
        }

        UInt32 id = 0;
        if (itemid == 73)
            id = 113;
        else if (itemid == 74)
            id = 18;
        else if (itemid == 75)
            id = 114;
        else if (itemid == 76)
            id = 28;
        else if (itemid == 77)
            id = 115;
        else if (itemid == 9011)
            id = 116;

        if (id)
        {
            if (hasFighter(id))
            {
                sendMsgCode(1, 1017);
                return false;
            }

            Fighter * fgt = globalFighters[id];
            if(fgt == NULL)
                return false;
            Fighter * fgt2 = fgt->clone(this);
            addFighter(fgt2, true);
            notifyAddFighter(fgt2);
            autoLineup(fgt2);
            return true;
        }

        return false;
    }

    bool Player::fighterFromItem(UInt32 fgtid)
    {
        if (!fgtid)
            return false;

        if(isFighterFull())
        {
            sendMsgCode(0, 1200);
            return false;
        }

        if (hasFighter(fgtid))
        {
            sendMsgCode(1, 1017);
            return false;
        }

        Fighter * fgt = globalFighters[fgtid];
        if(fgt == NULL)
            return false;
        Fighter* fgt2 = fgt->clone(this);
        addFighter(fgt2, true);
        notifyAddFighter(fgt2);
        autoLineup(fgt2);
        return true;
    }

	void Player::notifyAddFighter( Fighter * fgt )
	{
		if(!_isOnline)
			return;
		Stream st(REP::FIGHTER_ACCEPT);
		st << static_cast<UInt16>(fgt->getId());
        st << fgt->getPotential() << fgt->getCapacity() << fgt->getLevel() << fgt->getExp() << fgt->getDefaultSkillAndLevel() << fgt->getDefaultCittaAndLevel()
            << fgt->getSoul() << fgt->getMaxSoul();
		st << Stream::eos;
		send(st);

        { // XXX: 更全的信息
            Stream st(REP::FIGHTER_INFO);
            st << static_cast<UInt8>(1);
            makeFighterInfo(st, fgt);
            st << Stream::eos;
            send(st);
        }

		SYSMSG_SENDV(110, this, fgt->getColor(), fgt->getName().c_str());
		SYSMSG_SENDV(1010, this, fgt->getColor(), fgt->getName().c_str());
	}

	Fighter * Player::findFighter( UInt32 id )
	{
		std::map<UInt32, Fighter *>::iterator it = _fighters.find(id);
		if(it == _fighters.end())
			return NULL;
		return it->second;
	}

	Fighter * Player::getMainFighter()
	{
		if(_fighters.empty())
			return NULL;
		Fighter * fgt = _fighters.begin()->second;
		if(fgt->getId() > 9)
			return NULL;
		return fgt;
	}

	bool Player::hasFighter( UInt32 id )
	{
		std::map<UInt32, Fighter *>::iterator it = _fighters.find(id);
		return it != _fighters.end();
	}

	Fighter * Player::removeFighterFromLineup(UInt32 id)
	{
		Fighter * fighter = NULL;
		bool r = false;
		for(int j = 0; j < 5; ++ j)
		{
			if(_playerData.lineup[j].fid == id)
			{
				r = true;
				fighter = _playerData.lineup[j].fighter;
				_playerData.lineup[j].fid = 0;
				_playerData.lineup[j].fighter = NULL;
				_playerData.lineup[j].pos = 0;
			}
		}
		if(r)
		{
			setFormation(0);
			storeFighters();
			Stream st;
			makeFormationInfo(st);
			send(st);
		}
		return fighter;
	}

	Fighter * Player::removeFighter( UInt32 id )
	{
		if(_fighters.empty())
			return NULL;
		std::map<UInt32, Fighter *>::iterator it = _fighters.find(id);
		if(it != _fighters.end() && it->second->getId() > 6)
		{
			bool r = false;
			for(int j = 0; j < 5; ++ j)
			{
				if(_playerData.lineup[j].fid == id)
				{
					r = true;
					_playerData.lineup[j].fid = 0;
					_playerData.lineup[j].fighter = NULL;
					_playerData.lineup[j].pos = 0;
				}
			}
			if(r)
			{
				storeFighters();
				Stream st;
				makeFormationInfo(st);
				send(st);
			}
			if(delTrainFighter(id))
				PopTimerEvent(this, EVENT_FIGHTERAUTOTRAINING, id);
			Fighter * fgt = it->second;

            for(Int8 k = MAX_SKILL_NUM - 1; k >= 0; --k)
                fgt->equipSoulSkill(k, 0);

			ItemEquip * equip;
			for(UInt8 z = 0; z < 9; ++ z)
				m_Package->EquipTo(0, fgt, z+0x20, equip, true);
            for(UInt8 t = 0; t < 3; ++ t)
				m_Package->EquipTo(0, fgt, t+0x0a, equip, true);
            m_Package->EquipTo(0, fgt, 0x1f, equip, true);
            for(UInt8 t = 0; t < 3; ++ t)
            {
				m_Package->EquipTo(0, fgt, t+0x60, equip, true);
				ItemEquip * lingshi = fgt->setLingshi(NULL, t, false);
                if(lingshi)
                    m_Package->AddExistEquip(lingshi);
            }
		    m_Package->EquipTo(0, fgt, 0x70, equip, true);

			_fighters.erase(it);
			DB2().PushUpdateData("DELETE FROM `fighter` WHERE `id` = %u AND `playerId` = %" I64_FMT "u", id, getId());
			DB2().PushUpdateData("DELETE FROM `second_soul` WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", id, getId());

            if(fgt->getColor() >= 2) //删除散仙荣誉
                GameAction()->doAttainment(this, 10107, fgt->getColor());
			if(r)
				sendMsgCode(0, 1201);
			SYSMSG_SENDV(111, this, fgt->getColor(), fgt->getName().c_str());
			SYSMSG_SENDV(1011, this, fgt->getColor(), fgt->getName().c_str());

            UInt32 fgtid = fgt->getId();
            GameMsgHdr hdr2(0x1A6, WORKER_THREAD_WORLD, this, sizeof(fgtid));
            GLOBAL().PushMsg(hdr2, &fgtid);

			return fgt;
		}
		return NULL;
	}

	UInt32 Player::addFightCurrentHp(UInt32 id, UInt32 hp, bool battle)
	{
		UInt32 currHp = 0;
		if (battle)
		{
			for(int i = 0; i < 5; ++ i)
			{
				GObject::Lineup& pd = _playerData.lineup[i];
				if(pd.fighter != NULL && pd.fighter->getId() == id)
				{
					currHp = pd.fighter->getCurrentHP() + hp;
					pd.fighter->setCurrentHP(currHp);
					return currHp;
				}
			}
		}
		else
		{
			for (std::map<UInt32, Fighter*>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
			{
				Fighter * fgt = it->second;
				if (fgt->getId() == id)
				{
					currHp = fgt->getCurrentHP() + hp;
					fgt->setCurrentHP(currHp);
					return currHp;
				}
			}
		}
		return 0;
	}
    
    UInt32 Player::getBattleMaxHp()
    {
        UInt32 Hp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                Hp += fighter->getMaxHP();
        }
        return Hp;
    }

    UInt32 Player::getBattleCurrentHp()
    {
        UInt32 Hp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                Hp += fighter->getCurrentHP() > 0 ? fighter->getCurrentHP() : fighter->getMaxHP();
        }
        return Hp;
    }

    UInt8 Player::allHpP()
    {
        UInt32 total = 0;
        UInt32 totalmax = 0;
        for(int i = 0; i < 5; ++ i)
        {
            GObject::Lineup& pd = _playerData.lineup[i];
            if(pd.fighter != NULL)
            {
                if (pd.fighter->getCurrentHP())
                    total += pd.fighter->getCurrentHP();
                else
                    total += pd.fighter->getMaxHP();
                totalmax += pd.fighter->getMaxHP();
            }
        }
        if (!totalmax)
            return 0;
        if (!total)
            return 100;
        UInt8 p = (((float)total)/totalmax) * 100;
        if (p > 100)
            p = 100;
        return p;
    }

	void Player::addFightCurrentHpAll(UInt32 hp)
	{
		UInt32 currHp = 0;
		for (std::map<UInt32, Fighter*>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
		{
			Fighter * fgt = it->second;
			currHp = fgt->getCurrentHP() + hp;
			fgt->setCurrentHP(currHp);
		}
	}

    UInt8 Player::getFullFormationCnt()
    {
        UInt8 count = 0;
        int cnt = _playerData.formations.size();
        for( int idx = 0; idx < cnt; ++ idx )
        {
            if(FORMATION_LEVEL(_playerData.formations[idx]) == 2)
            {
                ++ count;
            }
        }
        return count;
    }

    bool Player::checkFormation_ID(UInt16 f)
    {
        bool find = false;
        int cnt = _playerData.formations.size();
        for( int idx = 0; idx < cnt; ++ idx )
        {
            if(FORMATION_ID(_playerData.formations[idx]) == FORMATION_ID(f))
            {
                find = true;
                break;
            }
        }

        if(!find)
            return false;

        return true;
    }

    bool Player::checkFormation(UInt16 f)
    {
        bool find = false;
        int cnt = _playerData.formations.size();
        for( int idx = 0; idx < cnt; ++ idx )
        {
            if(_playerData.formations[idx] == f)
            {
                find = true;
                break;
            }
        }

        if(!find)
            return false;

        return true;
    }

	bool Player::setFormation( UInt16 f )
	{
        if(!checkFormation(f))
            return false;

		if(_playerData.formation == f)
			return true;
		_playerData.formation = f;
		DB1().PushUpdateData("UPDATE `player` SET `formation` = %u WHERE id = %" I64_FMT "u", f, _id);

        return true;
	}

	void Player::makePlayerInfo( Stream& st )
	{
		UInt32 curtime = TimeUtil::Now();
		UInt8 c = 0;
		UInt8 buffid[PLAYER_BUFF_COUNT];
		UInt32 buffleft[PLAYER_BUFF_COUNT];
        if (cfg.rpServer && GetLev() < 70)
            setBuffData(PLAYER_BUFF_EXPDOUBLE, curtime+99*3600, false);
 
		for(UInt8 i = 0; i < PLAYER_BUFF_COUNT; ++ i)
		{
			if(i == 0)
			{
				if(_buffData[i] > 0)
				{
					buffid[c] = i + PLAYER_BUFF_START;
					buffleft[c] = _buffData[i];
					++ c;
				}
			}
			else
			{
                if(relateExpHook(i))
                {
                    UInt32 varId = bufferId2VarId(i);
                    if(varId == 0)
                        continue;
                    UInt32 varData = GetVar(varId);
                    if(varData == 0)
                        continue;
					buffid[c] = i + PLAYER_BUFF_START;
					buffleft[c] = varData;
                    ++c;
                }
                else if(_buffData[i] > curtime)
				{
					buffid[c] = i + PLAYER_BUFF_START;
					buffleft[c] = _buffData[i] - curtime;
					++ c;
				}
			}
		}
		st.init(REP::USER_INFO);
		UInt8 status = static_cast<UInt8>(_playerData.status);
		if(cfg.limitLuckyDraw == 2 || (cfg.limitLuckyDraw == 1 && _vipLevel < 2))
			status |= 0x80;
		st << _playerData.country << _playerData.gold << _playerData.coupon << _playerData.tael << _playerData.coin << getClanName()
			<< status << _playerData.title << static_cast<UInt8>(0) << _playerData.totalRecharge << static_cast<UInt8>(_playerData.qqvipl%10) << _playerData.qqvipyear << _playerData.achievement << _playerData.prestige<< _playerData.attainment << getPacksize(0) << getPacksize(1) << getPacksize(3) << getPacksize(4) << getPacksize(5) << _playerData.newGuild <<  _playerData.mounts << c;
		for(UInt8 i = 0; i < c; ++ i)
		{
			st << buffid[i] << buffleft[i];
		}
        st << GetVar(VAR_MONEY_ARENA);
        st << getClanProffer();
        bool fchange = makeTitleAllInfo(st);
        st << static_cast<UInt8>(GetVar(VAR_MAP_INDEX));
        checkClanTitle();
        makeClanTitleInfo(st);
        st << static_cast<UInt8>(GetVar(VAR_HIDE_VIP_LEVEL_FLAG));
        st << Stream::eos;

        if(fchange)
            writeTitleAll();
	}

	void Player::makeFormationInfo( Stream& st )
	{
		st.init(REP::RANK_SETTING);
		st << _playerData.formation << static_cast<UInt8>(0);
		UInt8 c = 0;
		for(UInt8 i = 0; i < 5; ++ i)
		{
			Lineup& pdata = _playerData.lineup[i];
			if(pdata.available())
			{
				++ c;
				st << pdata.fid << pdata.pos;
			}
		}
		st.data<UInt8>(6) = c;
		st << Stream::eos;

        if(hasFlag(GObject::Player::InCopyTeam))
        {
            teamCopyManager->updateTeamInfo(this);
        }
	}

	void Player::makeFighterSSList( Stream& st )
	{
		size_t c = _fighters.size();
		st.init(REP::SKILLSTRENGTHEN);
        st << static_cast<UInt8>(0);
		st << static_cast<UInt8>(c);
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
        {
            if (it->second)
            {
                it->second->makeFighterSSInfo(st);
            }
        }
		st << Stream::eos;
        HoneyFall* hf = getHoneyFall();
        if(!hf)
           return ;
        HoneyFallType hft = e_HFT_Trump_JF;
        Stream st1(REP::SKILLSTRENGTHEN);
        st1 <<static_cast<UInt8>(3)<<static_cast<UInt8>(2)<<static_cast<UInt8>(hf->getHftValue(hft))<< Stream::eos;
        send(st1);
        
	}


	void Player::makeFighterSSListWithNoSkill( Stream& st )
    {
		size_t c = _fighters.size();
		st.init(REP::SKILLSTRENGTHEN);
        st << static_cast<UInt8>(2);
		st << static_cast<UInt8>(c);
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
        {
            if (it->second)
            {
                it->second->makeFighterSSInfoWithNoSkill(st);
            }
        }
		st << Stream::eos;
    }

    void Player::sendFighterSSListWithNoSkill()
    {
        Stream st;
        makeFighterSSListWithNoSkill(st);
		send(st);
    }

	/*void Player::xingchenInfo()
	{
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
	    {
            if(it->second)
            {
                it->second->sendXingchenInfo();
            }
        }
	}*/

	void Player::makeFighterList( Stream& st )
	{
		size_t c = _fighters.size();
		st.init(REP::FIGHTER_INFO);
		st << static_cast<UInt8>(c);
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
			makeFighterInfo(st, it->second);
		st << Stream::eos;
	}

	void Player::makeFighterInfo( Stream& st, Fighter * fgt, bool withequip )
	{
		st << static_cast<UInt16>(fgt->getId()) << fgt->getPotential()
            << fgt->getCapacity() << fgt->getLevel() << fgt->getExp()
            << fgt->getPExp() << fgt->getPExpMax() << fgt->getSoul() << fgt->getMaxSoul();
		st << fgt->getPeerlessAndLevel() << fgt->getCurrentHP();
        st << fgt->getAttrType1();
        st << fgt->getAttrValue1();
        st << fgt->getAttrType2();
        st << fgt->getAttrValue2();
        st << fgt->getAttrType3();
        st << fgt->getAttrValue3();
        fgt->appendElixirAttr(st);
        st << fgt->getUpCittasMax();
		if(withequip)
		{
			st << fgt->getFashionId() << fgt->getWeaponId() << fgt->getArmorId(0) << fgt->getArmorId(1)
                << fgt->getArmorId(2) << fgt->getArmorId(3) << fgt->getArmorId(4)
				<< fgt->getAmuletId() << fgt->getRingId();
            fgt->getAllTrumps(st);
            //灵侍id
            UInt32 lss[3] = {0};
            fgt->getAllLingshiId(lss);
            st << lss[0] << lss[1] << lss[2];
            for(UInt8 i = 0 ; i < 3; ++i)
            {
                if(fgt->getEvolution()->getEquip(i))
                    st << static_cast<UInt32>(fgt->getEvolution()->getEquip(i)->getId());
                else
                    st << static_cast<UInt32>(0);
            }

            fgt->getAllAcupointsBits(st);
            fgt->getAllSkillAndLevel(st);
            fgt->getAllPeerlessAndLevel(st);
            fgt->getAllCittaAndLevel(st);

			UInt8 c = 0;
			UInt8 buffid[PLAYER_BUFF_COUNT];
			UInt32 buffleft[PLAYER_BUFF_COUNT];
			UInt32 curtime = TimeUtil::Now();
			for(UInt8 i = 0; i < FIGHTER_BUFF_COUNT; ++ i)
			{
				UInt32 data = fgt->getBuffData(i);
				if(data > 0)
				{
					buffid[c] = i + PLAYER_BUFF_START;
					buffleft[c] = data - curtime;
					++ c;
				}
			}
			st << c;
			for(UInt8 i = 0; i < c; ++ i)
			{
				st << buffid[i] << buffleft[i];
			}
            st << static_cast<UInt8>(fgt->getHideFashion());
            st << static_cast<UInt32>(fgt->getPortrait());

            fgt->xingchenInfo(st);
            fgt->getAllAcupointsGoldBits(st);
            fgt->getAllLingbaoLevelAndFall(st);
            st << static_cast<UInt32>(fgt->getIncense()); 
            st << static_cast<UInt8>(fgt->getEvolution()->IsComplete());
		}
	}

	bool Player::makeFighterInfo( Stream&st, UInt32 id )
	{
		std::map<UInt32, Fighter *>::iterator it = _fighters.find(id);
		if(it == _fighters.end())
			return false;
		makeFighterInfo(st, it->second);
		return true;
	}

	bool Player::setNewGuildTaskStep(UInt32 step)
	{
#if 0
		if (step <= 0 || step > NEWGUILDSTEP_MAX)
			return false;
		UInt64 stepVal = 1ull << (step - 1);
 		if ((stepVal & _playerData.newGuild) == 0)
		{
			_playerData.newGuild |= stepVal;
			DB1().PushUpdateData("UPDATE `player` SET `newGuild` = %" I64_FMT "u WHERE `id` = %" I64_FMT "u", _playerData.newGuild, _id);
			switch (step)
			{
			case 3:
				AddExp(300);
				getCoupon(50);
				getCoin(1000);
				break;
			case 5:
				AddExp(500);
				getCoupon(50);
				getCoin(1000);
				break;
			case 7:
				AddExp(700);
				getCoupon(50);
				getCoin(1000);
				break;
			case 8:
				AddExp(1000);
				getCoupon(50);
				getCoin(1000);
				break;
			default:
				break;
			}
		}
		Stream st(REP::USER_INFO_CHANGE);
		st << static_cast<UInt8>(0x10) << step << Stream::eos;
		send(st);
#else
        PLAYER_DATA(this, newGuild) = step;
        DB1().PushUpdateData("UPDATE `player` SET `newGuild` = %" I64_FMT "u WHERE `id` = %" I64_FMT "u", _playerData.newGuild, getId());
#endif
		return true;
	}

    void Player::sendNewGuild()
    {
        Stream st(REP::GUIDE_RESPONSE_STEP);
        st << static_cast<UInt16>(_playerData.newGuild);
        st << Stream::eos;
        send(st);
    }

	bool Player::challenge( Player * other, UInt32 * rid, int * turns, bool applyhp, UInt32 sysRegen, bool noreghp, UInt32 scene, UInt8 report )
	{
		checkLastBattled();
		other->checkLastBattled();
		Battle::BattleSimulator bsim(applyhp && scene != Battle::BS_CLANBOSSBATTLE ? _playerData.location : scene, this, other);
		PutFighters( bsim, 0 );
		other->PutFighters( bsim, 1 );
		bsim.start();
		bool res = bsim.getWinner() == 1;


		Stream st(REP::ATTACK_NPC);
		st << static_cast<UInt8>(res ? 1 : 0) << static_cast<UInt8>(0) << bsim.getId() << static_cast<UInt64>(0) << Stream::eos;
        if (report & 0x01)
        {
            send(st);
        }
        /*
        else if (scene != Battle::BS_CLANBOSSBATTLE)
        {
            if (res)
            {
                SYSMSG_SENDV(2144, this, other->getCountry(), other->getName().c_str());
            }
            else
            {
                SYSMSG_SENDV(2143, this, other->getCountry(), other->getName().c_str());
            }
        }
        */

        if (report & 0x02)
        {
            st.data<UInt8>(4) = static_cast<UInt8>(res ? 0 : 1);
            other->send(st);
        }
        /*
        else if (scene != Battle::BS_CLANBOSSBATTLE)
        {
            if (res)
            {
                SYSMSG_SENDV(2141, other, getCountry(), getName().c_str());
            }
            else
            {
                SYSMSG_SENDV(2140, other, getCountry(), getName().c_str());
            }
        }
        */

		if(turns != NULL)
			*turns = bsim.getTurns();

		if(rid != NULL)
			*rid = bsim.getId();

		if(applyhp)
		{
			if(bsim.applyFighterHP(0, this, !hasFlag(CountryBattle | ClanBattling | ClanRankBattle), 0))
				checkHPLoss();
			if(bsim.applyFighterHP(1, other, !other->hasFlag(CountryBattle | ClanBattling | ClanRankBattle), 0))
				other->checkHPLoss();
		}
		else if(sysRegen > 0 && !noreghp)
		{
			if(res)
			{
				bsim.applyFighterHP(0, this, false, sysRegen);
				other->regenAll();
			}
			else
			{
				bsim.applyFighterHP(1, other, false, sysRegen);
				regenAll();
			}
		}
        else if (noreghp)
        {
            bsim.applyFighterHP(0, this, false, sysRegen);
            bsim.applyFighterHP(1, other, false, sysRegen);
        }

		if(res)
			other->checkDeath();
		else
			checkDeath();

		return res;
	}

	bool Player::attackNpc( UInt32 npcId, UInt32 turns, bool regen, bool needtype)
	{
        if (GetPackage()->GetRestPackageSize() <= 0)
        {
            sendMsgCode(0, 1011);
            return false;
        }
		UInt32 now = TimeUtil::Now();
		UInt32 buffLeft = getBuffData(PLAYER_BUFF_ATTACKING, now);
		if(buffLeft > now)
		{
			sendMsgCode(0, 1407, buffLeft - now);
			return false;
		}
		checkLastBattled();
		if(getThreadId() == WORKER_THREAD_NEUTRAL && turns == 0xFFFFFFFF)
		{
			if(bossManager.attack(this, npcId))
				return false;
		}
		GData::NpcGroups::iterator it = GData::npcGroups.find(npcId);
        if(it == GData::npcGroups.end())
			return false;

		GData::NpcGroup * ng = it->second;

        if (!ng)
            return false;

        if (cfg.GMCheck && needtype && ng->getType()) // XXX: 必须是野外怪,天劫怪除外
            return false;

		if(GameAction()->RunExploreTask(this, npcId))
			turns = 0;
		Battle::BattleSimulator bsim(_playerData.location, this, ng->getName(), ng->getLevel(), false, turns);

		PutFighters( bsim, 0 );
		if(npcId == 6145)
		{
			Fighter * fgt;
			if(_playerData.country == 0)
				fgt = globalFighters[4104];
			else
				fgt = globalFighters[4147];
			int pos = 22;
			while(bsim(0, pos) != 0 && pos >= 0) -- pos;
			if(pos >= 0)
				bsim.newFighter(0, pos, fgt);
		}
		ng->putFighters( bsim );
		bsim.start();
		Stream& packet = bsim.getPacket();
		if(packet.size() <= 8)
			return false;

        UInt32 exp = 0;
		Stream st(REP::ATTACK_NPC);

		bool res = bsim.getWinner() == 1;
		if(res)
		{
			st << static_cast<UInt16>(0x0101);
			_lastNg = ng;

            if (ng->getLevel() <= GetLev() || (ng->getLevel() > GetLev() && (ng->getLevel() - GetLev()) < 10))
            {
#if 0
                if(getBuffData(PLAYER_BUFF_TRAINP3, now))
                    exp = ng->getExp() * 18 / 10;
                else if(getBuffData(PLAYER_BUFF_TRAINP4, now))
                    exp = ng->getExp() * 3 / 2;
                else if(getBuffData(PLAYER_BUFF_TRAINP2, now))
                    exp = ng->getExp() * 3 / 2;
                else if(getBuffData(PLAYER_BUFF_TRAINP1, now))
                    exp = ng->getExp() * 13 / 10;
                else
                    exp  = ng->getExp();
#else
                    exp  = ng->getExp();
#endif
                if (isOffical())
                    exp -= (exp/10);
                if((this->getPlatform() == 10 && World::getQQGameAct()) || (this->getPlatform() == 11 && World::get3366PrivilegeAct()) || ((getPlatform() == 1 || getPlatform() == 2) && World::getQzonePYPrivilegeAct()))
                {
                    UInt32 extraExp = exp / 2;//蓝黄钻野外手动打怪经验+50%
                    if(getPlatform() == 1 && World::getQzonePYPrivilegeAct())
                    {
                        SYSMSG_SENDV(1096, this, extraExp);
                        SYSMSG_SENDV(1097, this, extraExp);
                    }
                    else if(getPlatform() == 2 && World::getQzonePYPrivilegeAct())
                    {
                        SYSMSG_SENDV(1098, this, extraExp);
                        SYSMSG_SENDV(1099, this, extraExp);
                    }
                    else if(this->getPlatform() == 10 && World::getQQGameAct())
                    {
                        SYSMSG_SENDV(1092, this, extraExp);
                        SYSMSG_SENDV(1093, this, extraExp);
                    }
                    else
                    {
                        SYSMSG_SENDV(1094, this, extraExp);
                        SYSMSG_SENDV(1095, this, extraExp);
                    }
                    exp += extraExp;
                }
                if (cfg.rpServer && GetLev() < 70)
                    exp *= 2;
                pendExp(exp);
                ng->getLoots(this, _lastLoot);
            }

            //战胜特定NPC之后 荣誉
            GameAction()->doAttainment(this, 10351, npcId);
		}
		else
			st << static_cast<UInt16>(0x0100);
		st << _playerData.lastExp << static_cast<UInt8>(0);
		UInt8 sz = _lastLoot.size();
		st << sz;
		for(UInt8 i = 0; i < sz; ++ i)
		{
			st << _lastLoot[i].id << _lastLoot[i].count;
		}
		st.append(&packet[8], packet.size() - 8);
        st << static_cast<UInt64>(exp);
		st << Stream::eos;
		send(st);
		if(!regen)
		{
			if(bsim.applyFighterHP(0, this))
			{
				checkHPLoss();
			}
		}

		if(!res)
			checkDeath();

        if (getVipLevel() >= 7 && bsim.getTurns() > 30)
            setBuffData(PLAYER_BUFF_ATTACKING, now + 30);
        else
		    setBuffData(PLAYER_BUFF_ATTACKING, now + bsim.getTurns());

		return res;
	}

    bool Player::attackTianjieNpc(UInt32 npcId, UInt32 expMulti, bool isEvent,bool isBoss)
	{
        int turns = 200;
		UInt32 now = TimeUtil::Now();
		UInt32 buffLeft = getBuffData(PLAYER_BUFF_ATTACKING, now);
		if(buffLeft > now)
		{
			sendMsgCode(0, 1407, buffLeft - now);
			return false;
		}
		checkLastBattled();

        GData::NpcGroups::iterator it = GData::npcGroups.find(npcId);
        if(it == GData::npcGroups.end())
			return false;

		GData::NpcGroup * ng = it->second;

        if (!ng)
            return false;

        if (cfg.GMCheck && (ng->getType() != 8 || GObject::Tianjie::instance().isTjOpened() == false)) //只能在天劫期间
            return false;

		if(GameAction()->RunExploreTask(this, npcId))
			turns = 0;
        UInt16 location = _playerData.location;
        if (isBoss)
            location = Battle::BS_WBOSS;
		Battle::BattleSimulator bsim(location, this, ng->getName(), ng->getLevel(), false, turns);
		PutFighters( bsim, 0 );
        ng->putFighters( bsim );
		bsim.start();

        Stream& packet = bsim.getPacket();
		if(packet.size() <= 8)
			return false;

		bool res = bsim.getWinner() == 1;
        UInt32 exp =0 ;
		if(res)
		{
			_lastNg = ng;
            exp = TIANJIE_EXP(GetLev()) * ng->getExp() * expMulti;
            addExpOrTjScore(exp, 0, isEvent, true);
		}

        UInt16 ret = 0x0100;
        if (res) ret = 0x0101;

        Stream st(REP::ATTACK_NPC);
        st << ret << PLAYER_DATA(this, lastExp) << static_cast<UInt8>(0);
        UInt8 size = _lastLoot.size();
        st << size;
        for (UInt8 i = 0; i < size; ++i)
        {
            st << _lastLoot[i].id << _lastLoot[i].count;
        }
        st.append(&packet[8], packet.size() - 8);
        st << static_cast<UInt64>(exp);
        st << Stream::eos;
        send(st);

        turns = bsim.getTurns() > 15 ? 15 : bsim.getTurns();
		setBuffData(PLAYER_BUFF_ATTACKING, now + turns);
		return res;
	}


    void Player::autoFrontMapFailed()
    {
        //PopTimerEvent(this, EVENT_AUTOFRONTMAP, getId());
        //delFlag(Player::AutoFrontMap);
    }

    void Player::autoCopyFailed(UInt8 id)
    {
        //GObject::playerCopy.failed(this, id);
        //setCopyFailed();
    }

    bool Player::attackRareAnimal(UInt32 id)
    {
        bool isFull = false;
        UInt64 exp =0;
        return attackCopyNpc(id, 1/*XXX:使用这个背景*/, 5, 1, isFull, exp, 1, false,NULL, false);
    }

	bool Player::attackCopyNpc( UInt32 npcId, UInt8 type, UInt8 copyId,
            UInt8 expfactor, bool& full,UInt64 & pexp, UInt8 lootlvl, bool ato, std::vector<UInt16>* loot, bool applayhp )
	{
        if (GetPackage()->GetRestPackageSize() == 0)
        {
            sendMsgCode(0, 1011);
            full = true;
            return false;
        }
		UInt32 now = TimeUtil::Now();
		UInt32 buffLeft = getBuffData(PLAYER_BUFF_ATTACKING, now);
		if(cfg.GMCheck && buffLeft > now && !ato)
		{
			sendMsgCode(0, 1407, buffLeft - now);
			return false;
		}
		checkLastBattled();
		GData::NpcGroups::iterator it = GData::npcGroups.find(npcId);
		if(it == GData::npcGroups.end())
			return false;

        UInt8 nationalDayF = 1;
        if(World::getNationalDayHigh())
            nationalDayF = 2;

		GData::NpcGroup * ng = it->second;
        UInt16 bs = 0;
        if(type == 0)
            bs = Battle::BS_FRONTMAP1;
        else if(type == 1)
            bs = copyId - 1 + Battle::BS_COPY1;
        else if(type == 2)
            bs = Battle::BS_WBOSS;

		Battle::BattleSimulator bsim(bs, this, ng->getName(), ng->getLevel(), false);
		PutFighters( bsim, 0 );
		ng->putFighters( bsim );
		bsim.start();
		Stream& packet = bsim.getPacket();
		if(packet.size() <= 8)
			return false;

        UInt8 atoCnt = 0;
        UInt16 ret = 0x0100;
        UInt32 exp =0;
		bool res = bsim.getWinner() == 1;
		if(res)
		{
			ret = 0x0101;
			_lastNg = ng;

            exp = expfactor * ng->getExp();

            if(getBuffData(PLAYER_BUFF_QI_TIAN_CHU_MO, now))
                exp *= (18.f/10.f);

            exp *= nationalDayF;

            pendExp(exp);
            pexp = exp;
            ng->getLoots(this, _lastLoot, lootlvl, &atoCnt, nationalDayF);

            //战胜NPC 成就
            GameAction()->doAttainment(this, 10351, npcId);

		}

        if (ato)
        {
            if (loot)
            {
                UInt8 sz = _lastLoot.size();
                (*loot).push_back(atoCnt);
                for(UInt8 i = 0; i < sz; ++ i)
                {
                    (*loot).push_back(_lastLoot[i].id);
                    (*loot).push_back(_lastLoot[i].count);
                }
            }
        }
        else
        {
            Stream st(REP::ATTACK_NPC);
            st << ret << _playerData.lastExp << static_cast<UInt8>(0);
            UInt8 sz = _lastLoot.size();
            st << sz;
            for(UInt8 i = 0; i < sz; ++ i)
            {
                st << _lastLoot[i].id << _lastLoot[i].count;
            }
            st.append(&packet[8], packet.size() - 8);
            st << static_cast<UInt64>(exp);
            st << Stream::eos;
            send(st);
        }

        if (applayhp)
            bsim.applyFighterHP(0, this);

		if(!res)
			checkDeath();

		setBuffData(PLAYER_BUFF_ATTACKING, now + bsim.getTurns());

        if(World::getGuankaAct())
        {
            if(res && npcId >= 13524 && npcId <= 13529)
                addguankaScoreByAttack(bsim.getRounds()+1);
            if(npcId >= 13500 && npcId <= 13529)
                guankaActUdpLog(npcId, res);
        }
		return res;
	}

    UInt32 Player::getAutoBattleCount()
    {
		UInt32 count = 60 * 8;
        if (!World::getNewYear() || GetLev() < 45)
        {
            UInt32 viplvl = getVipLevel();
            UInt32 VipType = GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
            if(in7DayFromCreated() && VipType >4 )
                 VipType -= 2 ;
            if((viplvl >= 4 && viplvl <= 7) || ( inVipPrivilegeTime() && VipType == 5 ))
                  count = 60 * 16;
            if(( viplvl > 7 && viplvl <= 15)||(inVipPrivilegeTime() &&( VipType %2 ==0)))
                count = 60 * 24;
        }
        else
        {
            count = 60 * 240;
        }
        if (World::getAutoBattleAct())
            count = 60*216;
        if(World::get11TimeNum()<=15)
            count = 60 * 144 ;
        if(World::getNewYearSpeedTime())
            count = 168 * 60;
        return count;
    }


	bool Player::autoBattle( UInt32 npcId, UInt8 type)
	{
        if(type > 3)
            return false;
        if(GetLev() < 30)
            return false;
#if 0
		GData::NpcGroups::iterator it = GData::npcGroups.find(npcId);
		if(it == GData::npcGroups.end())
			return false;
		GData::NpcGroup * ng = it->second;
		if(GetLev() < ng->getLevel())
		{
			sendMsgCode(0, 1151);
			return false;
		}
        if (ng->getType())
            return false;
#else
        SpotData * spotData = GetMapSpot();
        if (!spotData || spotData->m_Type != 9)
            return false;
#endif
        if (GetPackage()->GetRestPackageSize() == 0)
        {
            sendMsgCode(0, 1011);
            return false;
        }
		const UInt32 eachBattle = 60;
        UInt32 count = getAutoBattleCount();

		UInt32 timeDur = count * eachBattle;
		UInt32 final = TimeUtil::Now() + timeDur;
#if 0
        GObject::EventWrapper::iterator it = GObject::eventWrapper.FindTimerEvent(this, EVENT_AUTOBATTLE, 0);
        if(it != GObject::eventWrapper.end())
        {
            GObject::EventBase *event = it->second;
            if(event)
            {
                count = event->GetTimer().GetLeftTimes();
                GObject::EventAutoBattle *eventAuto = static_cast<GObject::EventAutoBattle *>(event);
                final = eventAuto->getFinalEnd();
            }
        }
#endif
        if(!hasFlag(Training) && type == 0)
        {
             UInt8 hookType = GetVar(VAR_LAST_HOOK_TYPE);
             if(hookType == ENUM_TRAINP1 && GetVar(VAR_TRAINP1) > 0)
             {
             }
             else if(hookType == ENUM_TRAINP2 && GetVar(VAR_TRAINP2) > 0)
             {
             }
             else if(hookType == ENUM_TRAINP3 && GetVar(VAR_TRAINP3) > 0)
             {
             }
             else
                 hookType = 0;
             type = hookType;
        }
		EventAutoBattle* event = new(std::nothrow) EventAutoBattle(this, eachBattle, count, /*ng*/NULL, final);
		if (event == NULL) return false;
        SetVar(VAR_EXP_HOOK_INDEX, type);
        SetVar(VAR_LAST_HOOK_TYPE, type);
		cancelAutoBattle(false);
		addFlag(Training);
		event->notify();
		event->updateDB(true);
		PushTimerEvent(event);
        OnHeroMemo(MC_FIGHTER, MD_STARTED, 0, 0);
        GameAction()->doStrong(this, SthTaskHook, 0,0);
        SetVar(VAR_LEFTTIMES, count);
		return true;
	}

	void Player::pushAutoBattle(UInt32 npcId, UInt16 count, UInt16 interval)
	{
        DB3().PushUpdateData("DELETE FROM `auto_battle` WHERE `playerId` = %" I64_FMT "u", _id);
        if (!GetVar(VAR_LEFTTIMES))
            SetVar(VAR_LEFTTIMES, count);
        else
            return;

		if(/*npcId == 0 || */count == 0 || interval == 0)
			return;
        if (count > 1440 && GetLev() < 45) // XXX: 45级以下不允许挂机240小时
            return;
#if 0
		GData::NpcGroups::iterator it = GData::npcGroups.find(npcId);
		if(it == GData::npcGroups.end())
			return;
		GData::NpcGroup * ng = it->second;
#endif
		UInt32 final = TimeUtil::Now() + interval * count;
		EventAutoBattle* event = new(std::nothrow) EventAutoBattle(this, interval, count, /*ng*/NULL, final);
		if (event == NULL) return;
		PushTimerEvent(event);
		addFlag(Training);
	}

	void Player::pushAutoDungeon( UInt32 id, UInt32 exp, UInt8 won )
	{
		Dungeon * dg = dungeonManager[id];
		if(dg == NULL)
			return;
		dg->pushChallenge(this, exp, won > 0);
	}

	void Player::cancelAutoBattle(bool needNotify)
	{
		GameMsgHdr hdr2(0x179, WORKER_THREAD_WORLD, this, 0);
		GLOBAL().PushMsg(hdr2, 0);
        if(needNotify)
            cancelAutoBattleNotify();
	}

	void Player::cancelAutoBattleNotify()
	{
		Stream st(REP::TASK_RESPONSE_HOOK);
        UInt8 cnt = getMaxIcCount(getVipLevel()) - getIcCount();
        if (getMaxIcCount(getVipLevel()) < getIcCount())
            cnt = getMaxIcCount(getVipLevel());
		st << static_cast<UInt32>(0) << static_cast<UInt8>(0) << static_cast<UInt16>(0) << static_cast<UInt32>(0) << cnt << Stream::eos;
		send(st);
		DB3().PushUpdateData("DELETE FROM `auto_battle` WHERE `playerId` = %" I64_FMT "u", _id);
		delFlag(Training);
	}

	void Player::cancelAutoDungeon()
	{
		if(!hasFlag(AutoDungeon)) return;
		GameMsgHdr hdr(0x180, WORKER_THREAD_WORLD, this, 0);
		GLOBAL().PushMsg(hdr, 0);
	}

	void Player::instantAutoBattle()
	{
        if(GetFreePackageSize() < 1)
        {
            sendMsgCode(2, 1011);
            return;
        }
		if(_playerData.icCount > getMaxIcCount(_vipLevel))
            _playerData.icCount = 0;
		if(_playerData.icCount >= getMaxIcCount(_vipLevel) || !hasFlag(Training) || getGoldOrCoupon() < 10)
			return;

        ConsumeInfo ci(InstantAutoBattle,0,0);
		useGoldOrCoupon(GData::moneyNeed[GData::INSTANTAUTOBATTLE].gold,&ci);
        incIcCount();
		GameMsgHdr hdr(0x178, WORKER_THREAD_WORLD, this, 0);
		GLOBAL().PushMsg(hdr, NULL);
        GameAction()->doStrong(this, SthHookSpeed, 0,0);
        getSummerMeetScore(6);
        GuangGunCompleteTask(0,27);
        OnHeroMemo(MC_FIGHTER, MD_STARTED, 0, 1);
	}

	void Player::sendEvents()
	{
		struct EventQuery
		{
			bool autoBattle;
			bool autoDungeon;
		};
		EventQuery eq = { hasFlag(Training), hasFlag(AutoDungeon) };
		GameMsgHdr hdr(0x19C, WORKER_THREAD_WORLD, this, sizeof(EventQuery));
		GLOBAL().PushMsg(hdr, &eq);
	}

	void Player::sendAutoBattleEvent(EventBase * event)
	{
		EventAutoBattle * evab = dynamic_cast<EventAutoBattle *>(event);
		if(evab == NULL)
			return;
		evab->notify();
	}

	void Player::PutFighters( Battle::BattleSimulator& bsim, int side, bool fullhp ,UInt16 fighterId )
	{
		bsim.setFormation(side, getFormation());
		for(int i = 0; i < 5; ++ i)
		{
			Lineup& lup = getLineup(i);
            if(fighterId != 0 && lup.fid != fighterId)
                continue ;
			if(lup.fid != 0 && lup.fighter == NULL)
			{
				std::map<UInt32, Fighter *>::iterator it = _fighters.find(lup.fid);
				if(it == _fighters.end())
				{
					lup.fid = 0;
					lup.fighter = NULL;
					lup.pos = 0;
				}
				else
				{
					lup.fighter = it->second;
					lup.updateId();
				}
			}
			if(lup.fighter != NULL)
			{
				Battle::BattleFighter * bf = bsim.newFighter(side, lup.pos, lup.fighter);
				bf->setHP(fullhp ? 0 : lup.fighter->getCurrentHP());
                if (lup.fighter->getClass() == 4)
                    OnShuoShuo(SS_MO_BATTLE);
			}
			else if(i == 0 && !_fighters.empty())
			{
				lup.fighter = _fighters.begin()->second;
				lup.updateId();
				lup.pos = 12;
				Battle::BattleFighter * bf = bsim.newFighter(side, lup.pos, lup.fighter);
				bf->setHP(fullhp ? 0 : lup.fighter->getCurrentHP());
				storeFighters();
			}
		}
		bsim.setPortrait(side, _fighters.empty() ? 0 : _fighters.begin()->second->getId());
        if(!fighterId)
            PutPets(bsim, side);
    }

    void Player::PutPets( Battle::BattleSimulator& bsim, int side, bool init /* = true */)
    {
        // 战斗模拟器中加载宠物
        if (_onBattlePet)
        {
            Battle::BattleFighter * bf = bsim.newPet(side, 0, _onBattlePet);
            bf->setHP(_onBattlePet->getMaxHP());
        }
    }

    void Player::PutSpecialPets( Battle::BattleSimulator& bsim, int side, int pos, bool init /* = true */)
    {
        // 战斗模拟器中加载宠物
        if(_onBattlePet)
        {
            Battle::BattleFighter * bf = bsim.newFighter(side, pos, _onBattlePet);
            bf->setHP(_onBattlePet->getMaxHP());
        }
    }

    Fighter * Player::takeFighter( UInt32 id, bool writedb )
    {
        if(id > GREAT_FIGHTER_MAX || (writedb && id < 10))
            return NULL;
        if(hasFighter(id))
            return NULL;
        Fighter * fgt = globalFighters[id];
        if(fgt == NULL)
            return NULL;
        Fighter * fgt2 = fgt->clone(this);
		addFighter(fgt2, writedb);
		if (_clan != NULL)
		{
			UInt8 color = fgt2->getColor();
			if (color == 4 || color == 5)
			{
				Stream st;
				_clan->getClanDynamicMsg()->addCDMsg(color == 4 ? 10 : 22, getName(), fgt2->getName(), &st);
				_clan->broadcast(st);
			}
		}
		if(writedb)
		{
			bool rewrite = false;
			for(int i = 0; i < 6; ++ i)
			{
				if(_playerData.tavernId[i] == id)
				{
					_playerData.tavernId[i] = 0;
					rewrite = true;
					break;
				}
			}
			if(rewrite)
				writeTavernIds();
			notifyFriendAct(6, id);
			Map * map = Map::FromSpot(_playerData.location);
			if(map != NULL)
				map->SendHide(id, this);
			if(fgt->getColor() > 1 && fgt->getId() > 6 && fgt->getId() <= GREAT_FIGHTER_MAX)
				SYSMSG_BROADCASTV(10, getCountry(), getName().c_str(), fgt->getColor(), fgt->getName().c_str());
			notifyAddFighter(fgt2);
			autoLineup(fgt2);
		}
		return fgt2;
	}


	bool Player::ExtendPackageSize(UInt8 type)
	{
		static const UInt16 MAX_PACK_SIZE = PlayerData::INIT_PACK_SIZE + MAX_EXTEND_TIME*EACH_EXTEND_NUM;
        UInt16 size = getPacksize(type);
		if (size >= MAX_PACK_SIZE || (size + EACH_EXTEND_NUM) > MAX_PACK_SIZE)
			return false;
		UInt32 lvl = 1 + (size - (PlayerData::INIT_PACK_SIZE + (type ? 50 : 0))) / EACH_EXTEND_NUM;
		UInt32 gold = lvl * (lvl + 1) * 5;
		if (getGold() < gold)
			return false;
		ConsumeInfo ci(ExtendPackage,0,0);
		useGold(gold,&ci);

        if(type == 0)
        {
            _playerData.packSize += EACH_EXTEND_NUM;
            updateDB(32, _playerData.packSize);
        }
        else if(type == 3)
            AddVar(VAR_PACKAGE_SIZE_GEM, EACH_EXTEND_NUM);
        else if(type == 4)
            AddVar(VAR_PACKAGE_SIZE_FORMULA, EACH_EXTEND_NUM);
        else if(type == 5)
            AddVar(VAR_PACKAGE_SIZE_SL, EACH_EXTEND_NUM);
        else
        {
            _playerData.packSizeSoul += EACH_EXTEND_NUM;
            updateDB(33, _playerData.packSizeSoul);
        }
		Stream st(REP::PACK_EXTEND);
		st << type << getPacksize(type) << Stream::eos;
		send(st);
		return true;
	}

	UInt16 Player::GetFreePackageSize(UInt8 type)
	{
		return m_Package->GetRestPackageSize(type);
	}

	bool Player::addFriend( Player * pl )
	{
		if(pl == NULL || this == pl)
			return false;
		Mutex::ScopedLock lk(_mutex);
		Mutex::ScopedLock lk2(pl->getMutex());
		if(!testCanAddFriend(pl))
			return false;
		if(_id < pl->getId())
		{
			addFriendInternal(pl, true, true);
			pl->addFriendInternal(this, true, true);
		}
		else
		{
			pl->addFriendInternal(this, true, true);
			addFriendInternal(pl, true, true);
		}

        AddFriendAttainment(pl);
		return true;
	}

	bool Player::addCFriend( Player * pl )
	{
		if(pl == NULL || this == pl)
			return false;
		Mutex::ScopedLock lk(_mutex);
		Mutex::ScopedLock lk2(pl->getMutex());
		if(!testCanAddCFriend(pl))
			return false;
		if(_id < pl->getId())
		{
			addCFriendInternal(pl, true, true);
			pl->addCFriendInternal(this, true, true);
		}
		else
		{
			pl->addCFriendInternal(this, true, true);
			addCFriendInternal(pl, true, true);
		}
		return true;
	}
	void Player::addFriendFromDB( Player * pl )
	{
		if(pl == NULL || this == pl)
			return;
		if(_id < pl->getId())
		{
			addFriendInternal(pl, false, false);
			pl->addFriendInternal(this, false, false);
		}
		else
		{
			pl->addFriendInternal(this, false, false);
			addFriendInternal(pl, false, false);
		}
	}

	void Player::addCFriendFromDB( Player * pl )
	{
		if(pl == NULL || this == pl)
			return;
		if(_id < pl->getId())
		{
			addCFriendInternal(pl, false, false);
			pl->addCFriendInternal(this, false, false);
		}
		else
		{
			pl->addCFriendInternal(this, false, false);
			addCFriendInternal(pl, false, false);
		}
	}

    void Player::AddFriendAttainment( Player* pl)
    {
        //增加好友成就
            //处理别人的
            stAttainMsg  msg;
            msg.attainID =  Script::ADD_FRIEND;
            msg.param =  0;
            GameMsgHdr h(0x244,  pl->getThreadId(), pl, sizeof(msg));
            GLOBAL().PushMsg(h, & msg);

            msg.attainID = Script::ONE_FRIEND_LEV_UP;
            msg.param = this->GetLev();
            GLOBAL().PushMsg(h, & msg);

            //处理自己的
            GameAction()->doAttainment(this, Script::ADD_FRIEND,       _friends[0].size());
            //GameAction()->doAttainment(this, Script::ONE_FRIEND_LEV_UP, pl->GetLev());
            OnFriendLevUp(pl->GetLev());
    }
	void Player::addFriendInternal( Player * pl, bool notify, bool writedb )
	{
		if(notify)
		{
            UInt32 prayType = pl->GetVar(VAR_PRAY_TYPE);
            UInt32 prayValue = pl->GetVar(VAR_PRAY_VALUE);
			notifyFriendAct(1, pl);
			Stream st(REP::FRIEND_ACTION);
			st << static_cast<UInt8>(0x01) << pl->getId() << pl->getName() << pl->getPF() << static_cast<UInt8>(pl->IsMale() ? 0 : 1) << pl->getCountry() << pl->GetLev() << pl->GetClass() << pl->getClanName() << pl->GetNewRelation()->getMood() << pl->GetNewRelation()->getSign() << GObject::gAthleticsRank.getAthleticsRank(pl) << static_cast<UInt8>(pl->isOnline()) ;
            st<<static_cast<UInt8>(prayType)<< static_cast<UInt8>(prayValue) ;
            if(CheckFriendPray(pl->getId()))
                st<<static_cast<UInt8>(1);
            else st<<static_cast<UInt8>(0);
            st<<getBePrayednum(pl->getId());
            
            st<<static_cast<UInt8>(GetVar(VAR_OLDMAN_PRESENT));
            std::string openid = pl->getOpenId();
            st << openid;
            st << getFriendlyCount(pl->getId());
            st << static_cast<UInt8>(_hasBrother(pl));
            st << static_cast<UInt8>(GetYBCount(pl));

            st<<Stream::eos;
			send(st);
			SYSMSG_SEND(132, this);
			SYSMSG_SENDV(1032, this, pl->getCountry(), pl->getName().c_str());
			if(writedb)
				DB1().PushUpdateData("REPLACE INTO `friend` (`id`, `type`, `friendId`) VALUES (%" I64_FMT "u, 0, %" I64_FMT "u)", getId(), pl->getId());
		}
		_friends[0].insert(pl);

        if (notify || writedb)
        {
            if (getFrendsNum() >= 1)
                OnHeroMemo(MC_CONTACTS, MD_STARTED, 0, 0);
            if (getFrendsNum() >= 5)
                OnHeroMemo(MC_CONTACTS, MD_STARTED, 0, 1);
            if (getFrendsNum() >= 10)
                OnHeroMemo(MC_CONTACTS, MD_STARTED, 0, 2);
        }
	}

	void Player::addCFriendInternal( Player * pl, bool notify, bool writedb )
	{
		if(notify)
		{
            //notifyFriendAct(1, pl);
            Stream st(REP::FRIEND_ACTION);
            st <<static_cast<UInt8>(0x07) << pl->getId() << pl->getName() << pl->getPF() << static_cast<UInt8>(pl->IsMale() ? 0 : 1) << pl->getCountry()<< pl->GetLev() << pl->GetClass() << pl->getClanName() << pl->GetNewRelation()->getMood() << pl->GetNewRelation()->getSign() << GObject::gAthleticsRank.getAthleticsRank(pl);
            st << static_cast<UInt8>(pl->isOnline());
            st << static_cast<UInt8>(pl->GetVar(VAR_PRAY_TYPE))<<static_cast<UInt8>(pl->GetVar(VAR_PRAY_VALUE));
            if(CheckFriendPray(pl->getId()))
                st<<static_cast<UInt8>(1);
            else st<<static_cast<UInt8>(0);
            st<<getBePrayednum(pl->getId());
            st<<static_cast<UInt8>(GetVar(VAR_OLDMAN_PRESENT));
            std::string openid = pl->getOpenId();
            st << openid;
            st << getFriendlyCount(pl->getId());
            st << static_cast<UInt8>(_hasBrother(pl));
            st << static_cast<UInt8>(GetYBCount(pl));
            st<<Stream::eos;
            send(st);
            SYSMSG_SEND(2341, this);
            SYSMSG_SENDV(2342, this, pl->getCountry(), pl->getName().c_str());
            if(writedb)
                DB1().PushUpdateData("REPLACE INTO `friend` (`id`, `type`, `friendId`) VALUES (%" I64_FMT "u, 3, %" I64_FMT "u)", getId(), pl->getId());
		}
		_friends[3].insert(pl);
        //更新密友信息
        if(notify && isOnline())
            GetCFriend()->updateRecordData();
	}
	void Player::delFriend( Player * pl )
	{
		Mutex::ScopedLock lk(_mutex);
		Mutex::ScopedLock lk2(pl->getMutex());
		delFriendInternal(pl);
		pl->delFriendInternal(this);

	}
    void Player::delCFriend(Player* pl)
	{
		Mutex::ScopedLock lk(_mutex);
		Mutex::ScopedLock lk2(pl->getMutex());
		delCFriendInternal(pl);
		pl->delCFriendInternal(this);
	}

	void Player::delFriendInternal( Player * pl, bool writedb )
	{
		std::set<Player *>::iterator it = _friends[0].find(pl);
		if(it == _friends[0].end())
			return;
        beRefuceBrother(pl,1);
		_friends[0].erase(it);
		Stream st(REP::FRIEND_ACTION);
		st << static_cast<UInt8>(0x02) << pl->getName() << Stream::eos;
		send(st);
		SYSMSG_SEND(134, this);
		SYSMSG_SENDV(1034, this, pl->getCountry(), pl->getName().c_str());

        std::map<UInt64,FriendCount >::iterator it_count = _friendlyCount.find(pl->getId());
        std::map<UInt64,struct invitTime>::iterator it_brother = _brothers.find(pl->getId());
        //std::map<UInt64,FriendYellowBird >::iterator it_bird = _friendYB.find(pl->getId());
        //std::map<UInt64,FriendTaskNum >::iterator it_task = _friendTask.find(pl->getId());

        if(it_brother != _brothers.end())
        {
            _brothers.erase(it_brother) ;
        }
      //  if(it_bird != _friendYB.end())
      //  {
      //      _friendYB.erase(it_bird) ;
      //  }
      //  if(it_task != _friendTask.end())
      //  {
      //      _friendTask.erase(it_task) ;
      //  }
        
        if(it_count != _friendlyCount.end())
        {
            _friendlyCount.erase(it_count);
        }
		if(writedb)
        {
			DB1().PushUpdateData("DELETE FROM `friend` WHERE `id` = %" I64_FMT "u AND `type` = 0 AND `friendId` = %" I64_FMT "u", getId(), pl->getId());
			DB1().PushUpdateData("DELETE FROM `friendlyCount` WHERE `playerId` = %" I64_FMT "u AND `friendId` = %" I64_FMT "u", getId(), pl->getId());
        }
	}

	void Player::delCFriendInternal( Player * pl, bool writedb )
	{
		std::set<Player *>::iterator it = _friends[3].find(pl);
		if(it == _friends[3].end())
			return;
		_friends[3].erase(it);
		Stream st(REP::FRIEND_ACTION);
		st << static_cast<UInt8>(0x08) << pl->getName() << Stream::eos;
		send(st);
		SYSMSG_SEND(2339, this);
		SYSMSG_SENDV(2340, this, pl->getCountry(), pl->getName().c_str());
		if(writedb)
        {
			DB1().PushUpdateData("DELETE FROM `friend` WHERE `id` = %" I64_FMT "u AND `type` = 3 AND `friendId` = %" I64_FMT "u", getId(), pl->getId());
			DB1().PushUpdateData("DELETE FROM `friendlyCount` WHERE `playerId` = %" I64_FMT "u AND `friendId` = %" I64_FMT "u", getId(), pl->getId());
        }
	}

	Player * Player::_findFriend( UInt8 type, std::string& name )
	{
		Player * pl = globalNamedPlayers[fixName(name)];
		if(pl == NULL)
			return NULL;
		std::set<Player *>::iterator it = _friends[type].find(pl);
		if(it == _friends[type].end())
			return NULL;
		return *it;
	}

	bool Player::_hasFriend( UInt8 type, Player * pl ) const
	{
		std::set<Player *>::const_iterator it = _friends[type].find(pl);
		if(it == _friends[type].end())
			return false;
		return true;
	}

	bool Player::addBlock( Player * pl )
	{
		if(pl == this)
			return false;
		Mutex::ScopedLock lk(_mutex);
		if(_friends[1].size() >= MAX_FRIENDS)
		{
			sendMsgCode(2, 1505);
			return false;
		}
		if(pl == NULL || _hasBlock(pl))
		{
			SYSMSG_SEND(136, this);
			SYSMSG_SENDV(1036, this, pl->getCountry(), pl->getName().c_str());
			return false;
		}

		notifyFriendAct(4, pl);
		Stream st(REP::FRIEND_ACTION);
        
        st <<static_cast<UInt8>(0x03) << pl->getId() << pl->getName() << pl->getPF() << static_cast<UInt8>(pl->IsMale() ? 0 : 1) << pl->getCountry()<< pl->GetLev() << pl->GetClass() << pl->getClanName() << pl->GetNewRelation()->getMood() << pl->GetNewRelation()->getSign() << GObject::gAthleticsRank.getAthleticsRank(pl);
        st << static_cast<UInt8>(pl->isOnline());
        st << static_cast<UInt8>(pl->GetVar(VAR_PRAY_TYPE))<<static_cast<UInt8>(pl->GetVar(VAR_PRAY_VALUE));
        if(CheckFriendPray(pl->getId()))
            st<<static_cast<UInt8>(1);
        else st<<static_cast<UInt8>(0);
        st<<getBePrayednum(pl->getId());
        st<<static_cast<UInt8>(GetVar(VAR_OLDMAN_PRESENT));
        std::string openid = pl->getOpenId();
        st << openid;
        st << getFriendlyCount(pl->getId());
        st << static_cast<UInt8>(_hasBrother(pl));
        st << static_cast<UInt8>(GetYBCount(pl));
        st<<Stream::eos;
		send(st);
		DB1().PushUpdateData("REPLACE INTO `friend` (`id`, `type`, `friendId`) VALUES (%" I64_FMT "u, 1, %" I64_FMT "u)", getId(), pl->getId());
		SYSMSG_SEND(135, this);
		SYSMSG_SENDV(1035, this, pl->getCountry(), pl->getName().c_str());

		_friends[1].insert(pl);
		delFriend(pl);
		return true;
	}

	void Player::addBlockFromDB( Player * pl )
	{
		if(pl == NULL || this == pl)
			return;
		_friends[1].insert(pl);
	}

	bool Player::delBlock( Player * pl )
	{
		Mutex::ScopedLock lk(_mutex);
		std::set<Player *>::iterator it = _friends[1].find(pl);
		if(it == _friends[1].end())
			return false;
		_friends[1].erase(it);
		Stream st(REP::FRIEND_ACTION);
		st << static_cast<UInt8>(0x04) << pl->getName() << Stream::eos;
		send(st);
		DB1().PushUpdateData("DELETE FROM `friend` WHERE `id` = %" I64_FMT "u AND `type` = 1 AND `friendId` = %" I64_FMT "u", getId(), pl->getId());
		return true;
	}

	bool Player::addFoe( Player * pl )
	{
		if(pl == this)
			return false;
		Mutex::ScopedLock lk(_mutex);
		if(pl == NULL || _hasFriend(pl) || _hasFoe(pl))
		{
			return false;
		}

		notifyFriendAct(3, pl);
		Stream st(REP::FRIEND_ACTION);
		st << static_cast<UInt8>(0x05) << pl->getId() << pl->getName() << static_cast<UInt8>(pl->IsMale() ? 0 : 1) << pl->getCountry() << pl->GetLev() << pl->GetClass() << pl->getClanName() << Stream::eos;
		send(st);
		DB1().PushUpdateData("REPLACE INTO `friend` (`id`, `type`, `friendId`) VALUES (%" I64_FMT "u, 2, %" I64_FMT "u)", getId(), pl->getId());
		//SYSMSG_SEND(157, this);
		//SYSMSG_SENDV(1057, this, pl->getCountry(), pl->getName().c_str());

		if(_friends[2].size() >= MAX_FRIENDS)
	{
			std::set<Player *>::iterator it = _friends[2].begin();
			Stream st(REP::FRIEND_ACTION);
			st << static_cast<UInt8>(0x06) << (*it)->getName() << Stream::eos;
			send(st);
			_friends[2].erase(it);
		}
		_friends[2].insert(pl);
		return true;
	}

	void Player::addFoeFromDB( Player * pl )
	{
		if(pl == NULL || this == pl)
			return;
		_friends[2].insert(pl);
	}

	bool Player::delFoe( Player * pl )
	{
		Mutex::ScopedLock lk(_mutex);
		std::set<Player *>::iterator it = _friends[2].find(pl);
		if(it == _friends[2].end())
			return false;
		_friends[2].erase(it);
		Stream st(REP::FRIEND_ACTION);
		st << static_cast<UInt8>(0x06) << pl->getName() << Stream::eos;
		send(st);
		DB1().PushUpdateData("DELETE FROM `friend` WHERE `id` = %" I64_FMT "u AND `type` = 2 AND `friendId` = %" I64_FMT "u", getId(), pl->getId());
		return true;
	}

	void Player::sendFriendList( UInt8 type, UInt8 start, UInt8 cnt )
	{
		UInt8 sz = static_cast<UInt8>(_friends[type].size());
		UInt8 end = start + cnt;
		if(end > sz)
			end = sz;
		if(end < start)
			cnt = 0;
		else
			cnt = end - start;
		Stream st(REP::FRIEND_LIST);
		st << static_cast<UInt8>(type) << static_cast<UInt8>(GetVar(VAR_HAS_VOTE)?1:0) << static_cast<UInt8>(GetVar(VAR_FRIEND_SECURITY))  << start << cnt << sz;
        if (sz && cnt)
        {
            std::set<Player *>::iterator it = _friends[type].begin();
            std::advance(it, start);
            for(UInt8 i = 0; i < cnt; ++ i)
            {
                Player * pl = *it;
                st << pl->getId() << pl->getName() << static_cast<UInt8>(pl->GetVar(VAR_HIDE_VIP_LEVEL_FLAG) ? 0xFF : (pl->getVipLevel()))
                    << pl->getPF() << static_cast<UInt8>(pl->IsMale() ? 0 : 1) << pl->getCountry()
                    << pl->GetLev() << pl->GetClass() << pl->getClanName() << pl->GetNewRelation()->getMood() << pl->GetNewRelation()->getSign() << GObject::gAthleticsRank.getAthleticsRank(pl);
                st << static_cast<UInt8>(pl->isOnline());
                st << static_cast<UInt8>(pl->GetVar(VAR_PRAY_TYPE))<<static_cast<UInt8>(pl->GetVar(VAR_PRAY_VALUE));
                if(CheckFriendPray(pl->getId()))
                  st<<static_cast<UInt8>(1);
                else st<<static_cast<UInt8>(0);
                st<<getBePrayednum(pl->getId());
                st<<static_cast<UInt8>(pl->GetVar(VAR_OLDMAN_PRESENT));
                // std::cout <<pl->getId()<<"@!@# "<<pl->GetVar(VAR_PRAY_TYPE)<<"!!@!"<<pl->GetVar(VAR_PRAY_VALUE)<<std::endl;
                std::string openid = pl->getOpenId();
                st << openid;
                st << static_cast<UInt8>(pl->GetVar(VAR_FRIEND_SECURITY));
                st << getFriendlyCount(pl->getId());
                st << static_cast<UInt8>(_hasBrother(pl));
                st << static_cast<UInt8>(GetYBCount(pl));
                ++it;
            }
        }
		st << Stream::eos;
		send(st);
	}

    void Player::vote(Player* other)
    {
        if(GetLev() < 45)
            return;
        if(other->GetLev() < 45)
        {
            sendMsgCode(0, 1510);
            return;
        }

        if (GetVar(VAR_HAS_VOTE))
        {
            return;
        }
        SetVar(VAR_HAS_VOTE, 1);
        if(other->getThreadId() == getThreadId())
        {
            other->beVoted();
        }
        else
        {
            GameMsgHdr hdr(0x360, other->getThreadId(), other, 0);
            GLOBAL().PushMsg(hdr, NULL);
        }
        sendMsgCode(0, 1509);
        GameMsgHdr hdr2(0x1C6, WORKER_THREAD_WORLD, this, 0);
        GLOBAL().PushMsg(hdr2, NULL);

        Stream st(REP::FRIEND_ACTION);
        st << static_cast<UInt8>(0x09) << static_cast<UInt8>(1) << Stream::eos;
        send(st);

    }

    void Player::beVoted()
    {
        AddVar(VAR_POPULARITY, 1);
        UInt32 total = GetVar(VAR_POPULARITY);
        GameMsgHdr hdr(0x1C7, WORKER_THREAD_WORLD, this, sizeof(total));
        GLOBAL().PushMsg(hdr, &total);
    }
    void Player::prayForOther(Player* other)
    {
        if(other == NULL )
            return ;

        std::map<UInt64,UInt32>::iterator it =_prayFriend.find(other->getId());
        UInt32 now = TimeUtil::Now();
        if(CheckFriendPray(other->getId()))
        {
              return ; 
        }
        UInt32 prayType = other->GetVar(VAR_PRAY_TYPE);
        if(!prayType)
            return ;
        UInt32 prayValue = other->GetVar(VAR_PRAY_VALUE);
        if(prayValue <0 ||prayValue >= 10)
        {
             return ; 
        }
        
        if(other->getThreadId() == getThreadId())
        {
            other->bePrayed(getId());
        }
        else
        {
            UInt64 id = getId();
            GameMsgHdr hdr(0x362, other->getThreadId(), other, sizeof(id));
            GLOBAL().PushMsg(hdr, &id);
        }
        ++prayValue;
        _prayFriend[other->getId()]=now;
        CompleteFriendlyTask(other,1);
        SendOtherInfoForPray(other,prayValue);
        SYSMSG_SENDV(2026, this);

        char str[16] = {0};
        sprintf(str, "F_130822_8");
        udpLog("xuyuanshu", str, "", "", "", "", "act");
        GameAction()->doStrong(this, SthPrayTree, 0 ,0 );
        GuangGunCompleteTask(0,24);
    }
    void Player::limitQQFriend(UInt8 tmp)
    {
        SetVar(VAR_FRIEND_SECURITY,tmp); 
        return;
    }

    void Player::SendOtherInfoForPray(Player* other,UInt32 op)
    {
        UInt32 prayType = other->GetVar(VAR_PRAY_TYPE);
        UInt32 prayValue = other->GetVar(VAR_PRAY_VALUE);
        Stream st(REP::FRIEND_ACTION);
		st << static_cast<UInt8>(0x0A) << other->getId() << other->getName() <<other->getPF() << static_cast<UInt8>(other->IsMale() ? 0 : 1) << other->getCountry() << other->GetLev() << other->GetClass() << other->getClanName() << other->GetNewRelation()->getMood() << other->GetNewRelation()->getSign() << GObject::gAthleticsRank.getAthleticsRank(other) << static_cast<UInt8>(other->isOnline())<<static_cast<UInt8>(prayType);
        if(op == 0 )
            st<< static_cast<UInt8>(prayValue) ;
        else 
            st<< static_cast<UInt8>(op) ;
        if( op || CheckFriendPray(other->getId()))
            st<<static_cast<UInt8>(1);
        else st<<static_cast<UInt8>(0);
        st<<getBePrayednum(other->getId());
        st<<static_cast<UInt8>(GetVar(VAR_OLDMAN_PRESENT));
        std::string openid = other->getOpenId();
        st << openid;
        st << getFriendlyCount(other->getId());
        st << static_cast<UInt8>(_hasBrother(other));
        st << static_cast<UInt8>(GetYBCount(other));
        st<< Stream::eos;
        send(st);
    }
    void Player::bePrayed(UInt64 id)
    {
        UInt32  prayValue = GetVar(VAR_PRAY_VALUE); 
        UInt32 now = TimeUtil::Now();
        if(prayValue < 0 || prayValue >= 10)
            return ;
        ++prayValue;
        if(prayValue == 10 )
            SetVar(VAR_PRAY_SUCTIME,TimeUtil::Now());
        UInt32 num ;
        SetVar(VAR_PRAY_VALUE ,prayValue);
        std::map<UInt64,StuPrayValue >::iterator it = _bePrayed.find(id);
        if(it == _bePrayed.end())
        {
            _bePrayed[id]=StuPrayValue(now,1);
            num = 1;
        }
        else
        {
            it->second.time = now;
            num =++(it->second.praynum);    //map  待定 
        }
        sendPrayInfo();
		DB1().PushUpdateData("REPLACE INTO `pray_relation` (`id`, `friendId`, `pray`, `time`,`praynum`) VALUES( %" I64_FMT "u, %" I64_FMT "u,1,%u,%u)", id , getId(),now,num);
    }
    void Player::sendPrayInfo()
    {
        Fighter * ft = getMainFighter();
        if(!ft)
            return;
        UInt32 pexp = (5+ft->getAcuPraAdd()+ft->getSoulPracticeAddOn())*(1+(ft->getCapacity()-5)*0.16)*60*3;
        UInt32 prayType = GetVar(VAR_PRAY_TYPE);
        UInt32 prayCount = GetVar(VAR_PRAY_COUNT);
        UInt32 prayValue = GetVar(VAR_PRAY_VALUE);
        UInt32 praySucTime = GetVar(VAR_PRAY_SUCTIME);
        UInt32 prayToday = GetVar(VAR_PRAY_TYPE_TODAY);
        UInt32 prayLogin = GetVar(VAR_PRAY_LOGIN);
        UInt32 max = 0 ;
        UInt32 i=0;
        UInt32 count=0 ;
        while(i<16)
        {
            if(prayLogin & (1 << i++ ))
                ++count;
            else 
            {
                if(count != 0 && max<count)
                    max = count ;
                count =0;
            }
        }
        UInt32 now = TimeUtil::Now();
        UInt32 timeValue ;
        if((43200+praySucTime)>now)
            timeValue = 43200+praySucTime-now;   
        else 
            timeValue =0;
        Stream st(REP::NEWRELATION);
        st << static_cast<UInt8>(6);
        st << pexp;
        st << static_cast<UInt8>(prayType);
        st << static_cast<UInt8>(max);
        st << static_cast<UInt8>(prayCount);
        st << static_cast<UInt8>(prayToday);
        st << static_cast<UInt8>(prayValue);
        if(prayValue >= 10)
            st <<timeValue;
        size_t offset = st.size();
        UInt32 time = GetVar(VAR_PRAY_TIME);
        std::map<UInt64,StuPrayValue >::iterator it =_bePrayed.begin();
        UInt8 Count = 0;
        st<<Count;
        for(;it!=_bePrayed.end();++it)
        {
            if(it->second.time > time && time != 0 )
             {
                Player* player = globalPlayers[it->first];
                st<<player->getName();
                ++Count;
             }
        }
        st.data<UInt8>(offset)=Count;
        st << Stream::eos;
        send(st);
//        std::cout<<"type:"<<prayType<<" count:"<<prayCount<<" value:"<<prayValue<< " suctime"<<praySucTime<<std::endl;
    }
    void Player::selectPray(UInt8 index)
    {
        if(GetVar(VAR_PRAY_TYPE))
            return ;
        UInt8 prayCount = GetVar(VAR_PRAY_COUNT);
        UInt8 maxCount = 2 ;
        UInt32 now = TimeUtil::Now();
        if(getVipLevel())
        {
               maxCount = 3 ;
        }
        UInt32 prayLogin = GetVar(VAR_PRAY_LOGIN);
        UInt32 max = 0 ;
        UInt32 i=0;
        UInt32 count=0 ;
        while(i<16)
        {
            if(prayLogin & (1 << i++ ))
                ++count;
            else 
            {
                if(count != 0 && max<count)
                    max = count ;
                count =0;
            }
        }
        if(max>=3)
            maxCount++;
        if(prayCount >= maxCount)
            return ;
        SetVar(VAR_PRAY_TYPE,index);
        SetVar(VAR_PRAY_COUNT,prayCount+1);
        SetVar(VAR_PRAY_TYPE_TODAY,1);
        SetVar(VAR_PRAY_TIME,now);
        checkSelectPray();
       // Stream st;
       // SYSMSGVP(st, 430, getName().c_str(), 0);
       // broadcastFriend(st);
        char str[16] = {0};
        sprintf(str, "F_130822_1");
        udpLog("xuyuanshu", str, "", "", "", "", "act");
        GameAction()->doStrong(this, SthPrayTree, 0 ,0 );
    }
     
    void Player::getPrayAward()
    {
        UInt32 type = GetVar(VAR_PRAY_TYPE);
        UInt32 prayValue = GetVar(VAR_PRAY_VALUE);
        UInt32 praySucTime = GetVar(VAR_PRAY_SUCTIME);
        UInt32 now = TimeUtil::Now();
        if((43200+praySucTime)>now)
            return ;
        if(prayValue < 10)
            return ;
        if(type == 1)
        {
           getTael(10000); 
        }
        else if(type == 2)
        {
            UInt8 plvl = GetLev();
            UInt64 exp = (plvl - 10) * ((plvl > 99 ? 99 : plvl) / 10) * 5 + 25;
            UInt32 exp_ = static_cast<float>(exp)*6*60;
            AddExp(exp_);
        }
        else if(type == 3)
        {
            Fighter * ft = getMainFighter();
            if(!ft)
                return;
            UInt32 pexp = (5+ft->getAcuPraAdd()+ft->getSoulPracticeAddOn())*(1+(ft->getCapacity()-5)*0.16)*60*3;
            AddPExp(pexp);
        }
        else if(!GameAction()->RunPrayAward(this, type))
              return ;
        SetVar(VAR_PRAY_TYPE , 0 );
        SetVar(VAR_PRAY_VALUE , 0);
        SetVar(VAR_PRAY_TYPE_TODAY,0);
        SetVar(VAR_PRAY_TIME,0);
        sendPrayInfo();
        char str[16] = {0};
        sprintf(str, "F_130822_%d", 1+type);
        udpLog("xuyuanshu", str, "", "", "", "", "act");

    }
	void Player::sendModification( UInt8 t, UInt32 v, bool updateToDB )
	{
		if(_isOnline)
		{
			Stream st(REP::USER_INFO_CHANGE);
			if(t > PLAYER_BUFF_START)
			{
                UInt32 tm = TimeUtil::Now();
                if(v > tm)
                    st << t << static_cast<UInt32>(v - tm) << Stream::eos;
                else
                    st << t << static_cast<UInt32>(0) << Stream::eos;
			}
			else
				st << t << v << Stream::eos;
			send(st);
		}
		if(updateToDB)
			updateDB(t, v);
	}

	void Player::updateDB( UInt8 t, UInt32 v )
	{
		if(t >= PLAYER_BUFF_START && t < PLAYER_BUFF_START + PLAYER_BUFF_COUNT)
		{
			if(t >= PLAYER_BUFF_START + PLAYER_BUFF_DISPLAY_MAX)
				return;
			if(v > 0)
				DB7().PushUpdateData("REPLACE INTO `player_buff`(`id`, `buffId`, `data`) VALUES(%" I64_FMT "u, %u, %u)", _id, t - PLAYER_BUFF_START, v);
            else
				DB7().PushUpdateData("DELETE FROM `player_buff` WHERE `id` = %" I64_FMT "u AND `buffId` = %u", _id, t - PLAYER_BUFF_START);
			return;
		}
		const char * field = NULL;
		switch(t)
		{
		case 1: field = "gold"; break;
		case 2: field = "coupon"; break;
		case 3: field = "tael"; break;
		case 4: field = "coin"; break;
		case 5: field = "status"; v &= ~0x80; break;
		case 6: field = "title"; break;
		case 7: field = "totalRecharge"; break;
        case 8: field = "archievement"; break;
		case 9: field = "mounts"; break;
        case 0x0B:field = "attainment"; break;
		case 0x20: field = "packSize"; break;
		case 0x21: field = "packSizeSoul"; break;
		}
		if(field != NULL)
			DB1().PushUpdateData("UPDATE `player` SET `%s` = %u WHERE `id` = %" I64_FMT "u", field, v, _id);
        if (t == 7 && TimeUtil::Now() < World::getOpenTime() + 7 * 86400)
        {
            SetVar(VAR_RP7_RECHARGE, v);
        }
    }

	UInt32 Player::getGold( UInt32 c, IncommingInfo* ii)
	{
		if(c == 0)
			return _playerData.gold;
		_playerData.gold += c;
		SYSMSG_SENDV(149, this, c);
		SYSMSG_SENDV(1049, this, c);
		sendModification(1, _playerData.gold);

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_gold (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

        if (ii && ii->incommingType == InFromSale)
        {
            char gold[32] = {0};
            snprintf(gold, sizeof(gold), "%u", c);
            udpLog("sale", gold, "", "", "", "", "currency");
        }

#ifndef _WIN32
#ifdef _FB
#else
        if (ii)
            dclogger.gold_sec(this, c, ii->incommingType, true);
        else
            dclogger.gold_sec(this, c, 0, true);
#endif
#endif
		return _playerData.gold;
	}

	UInt32 Player::useGold( UInt32 c ,ConsumeInfo * ci)
	{
		if(c == 0 || _playerData.gold == 0)
			return _playerData.gold;
		if(_playerData.gold < c)
			_playerData.gold = 0;
		else
		{
		    _playerData.gold -= c;
		    if(ci!=NULL)
		    {
				DBLOG1().PushUpdateData("insert into consume_gold (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
					cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, c, TimeUtil::Now());
            }
        }
		SYSMSG_SENDV(150, this, c);
		SYSMSG_SENDV(1050, this, c);
		sendModification(1, _playerData.gold);

        if (ci && ci->purchaseType != ZCJBRoolAward)
        {
            udpLog(ci->purchaseType, ci->itemId, ci->itemNum, c, "add");
        }

        // 统计鹊桥道具购买的日志
        if (ci && ci->itemId == 9122)
        {
            udpLog("qixi", "I_9122_1", "", "", "", "", "act", ci->itemNum);
        }
#ifndef _WIN32
#ifdef _FB
#else
        dclogger.consume(this, _playerData.gold, c);
        if (ci)
            dclogger.gold_sec(this, c, ci->purchaseType, false);
        else
            dclogger.gold_sec(this, c, 0, false);

#endif
#endif // _WIN32
        if(ci && ci->purchaseType != TrainFighter && ci->purchaseType != ZCJBRoolAward && ci->purchaseType != ZhengHun && ci->purchaseType != DINGQINGXINWU && ci->purchaseType != JieHun)
        {
            AddVar(VAR_USEGOLD_CNT, c);
            AddHYYJCount(c);
            if(ci->purchaseType != Fund &&ci->purchaseType != OutBuyFund)
            {
               UInt32 val =  GetVar(VAR_SUMMERMEET_SCORE5);
               if((val + c) >= 1000)
                   SetVar(VAR_SUMMERMEET_SCORE5, 1000);
               else
                   AddVar(VAR_SUMMERMEET_SCORE5, c);
               sendSummerMeetScoreInfo();
            }
        }
        if(!GetVar(VAR_LUCKYSTAR_IS_CONSUME))
            SetVar(VAR_LUCKYSTAR_IS_CONSUME, 1);
        setLuckyStarCondition();
        if(ci && ci->purchaseType != Discount3  && ci->purchaseType != Discount5 && ci->purchaseType != Discount8 && ci->purchaseType != DiscountSp1 && ci->purchaseType != DiscountSp2 && ci->purchaseType != DiscountSp3 && ci->purchaseType != ZhengHun && ci->purchaseType != JieHun && ci->purchaseType != LiHun && ci->purchaseType != TrainFighter && ci->purchaseType != DINGQINGXINWU)
        {
            CarnivalConsumeAct(c);
            TreasureConsumeAct(c);
        }
        return _playerData.gold;
	}

    void Player::deleteGold(UInt32 c)
    {
        UInt32 n = _playerData.gold;
        if( c > _playerData.gold || c == 0)
        {
            _playerData.gold = 0;
        }
		else
		{
		    _playerData.gold -= c;
            n = c;
        }
        sendModification(1, _playerData.gold);
        udpLog("clear", "F_1158", "", "", "", "", "act", n);
    }

    UInt32 Player::useGold4LuckDraw(UInt32 c)
    {
		ConsumeInfo ci(LuckyDraw,0,0);
		return useGold(c, &ci);
    }

    UInt32 Player::getGold4LuckDraw()
    {
        return getGold();
    }

    UInt32 Player::useGoldInLua(UInt32 c, UInt32 pt)
    {
		ConsumeInfo ci(pt,0,0);
		return useGold(c, &ci);
    }

    UInt32 Player::getGoldInLua()
    {
        return getGold();
    }

	bool Player::holdGold(UInt32 c, UInt8 action, ConsumeInfo * ci)
	{
		switch(action)
		{
		case 0:
			{
				if (c > _playerData.gold)
					return false;
                if(_isHoding)
                    return false;
                _isHoding = true;
                _holdGold = c;
			}
			break;
		case 1:
			{
                _playerData.gold -= _holdGold;
				sendModification(1, _playerData.gold);

#ifndef _WIN32
#ifdef _FB
#else
                if (ci)
                    dclogger.gold_sec(this, c, ci->purchaseType, false);
                else
                    dclogger.gold_sec(this, c, 0, false);
#endif
#endif

                if(ci!=NULL)
                {
                    DBLOG1().PushUpdateData("insert into consume_gold (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                            cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, c, TimeUtil::Now());
                }

                if (ci && ci->purchaseType == PurchaseSale)
                {
                    char gold[32] = {0};
                    snprintf(gold, sizeof(gold), "-%u", _holdGold);
                    udpLog("sale", gold, "", "", "", "", "currency");
                }

				SYSMSG_SENDV(150, this, c);
				SYSMSG_SENDV(1050, this, c);
                _isHoding = false;

                if(!GetVar(VAR_LUCKYSTAR_IS_CONSUME))
                    SetVar(VAR_LUCKYSTAR_IS_CONSUME, 1);
                setLuckyStarCondition();
			}
			break;
		case 2:
			{
                _holdGold = 0;
				updateDB(1, _playerData.gold);
                _isHoding = false;
			}
			break;
		}
		WARN_LOG("Hold money : action[%d]owerId[%" I64_FMT "u]gold[%u]time[%u]",  action, getId(), c, TimeUtil::Now());
		return true;
	}

	UInt32 Player::getGoldOrCoupon()
	{
		return _playerData.gold + _playerData.coupon;
	}

	UInt32 Player::useGoldOrCoupon(UInt32 num,ConsumeInfo * ci)
	{
		if(_playerData.coupon > 0)
		{
			if(_playerData.coupon < num)
			{
				num -= _playerData.coupon;
				useCoupon(_playerData.coupon, ci);
			}
			else
			{
				useCoupon(num, ci);
				return 0;
			}
		}
		useGold(num, ci);
		return num;
	}

	UInt32 Player::getCoupon( UInt32 c )
	{
		if(c == 0)
			return _playerData.coupon;
		_playerData.coupon += c;
#ifndef _WIN32
#ifdef _FB
#else
        dclogger.coupon_sec(this, c, 0, true);
#endif
#endif
		SYSMSG_SENDV(155, this, c);
		SYSMSG_SENDV(1055, this, c);
		sendModification(2, _playerData.coupon);
		return _playerData.coupon;
	}

	UInt32 Player::useCoupon( UInt32 c ,ConsumeInfo * ci)
	{
		if(c == 0 || _playerData.coupon == 0)
			return _playerData.coupon;
		if(_playerData.coupon < c)
			_playerData.coupon = 0;
		else
		{
		    _playerData.coupon -= c;
            if(ci!=NULL)
		    {
				DBLOG1().PushUpdateData("insert into consume_coupon (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
					cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, c, TimeUtil::Now());
            }
#ifndef _WIN32
#ifdef _FB
#else
            if (ci)
                dclogger.coupon_sec(this, c, ci->purchaseType, false);
            else
                dclogger.coupon_sec(this, c, 0, false);
#endif
#endif
        }
		SYSMSG_SENDV(156, this, c);
		SYSMSG_SENDV(1056, this, c);
		sendModification(2, _playerData.coupon);
        {
            AddVar(VAR_USECOUPON_CNT, c);
            daysValueRankMsg msg;
            msg.playerId = getId();
            msg.type = 2;
            msg.value = GetVar(VAR_USETAEL_CNT) + GetVar(VAR_USECOUPON_CNT) * 100;
            GameMsgHdr hdr(0x1EC, WORKER_THREAD_WORLD, this, sizeof(msg));
            GLOBAL().PushMsg(hdr, &msg);
        }
		return _playerData.coupon;
	}

	UInt32 Player::getTael( UInt32 c )
	{
		if(c == 0)
			return _playerData.tael;

		if(cfg.enableWallow && _playerData.wallow)
		{
			UInt32 onlineDuration = (_onlineDuration + TimeUtil::Now() - _playerData.lastOnline);
			if(onlineDuration >= 5 * 60 * 60)
			{
				c = 0;
				SYSMSG_SENDV(184, this);
				SYSMSG_SENDV(1084, this);
			}
			else if(onlineDuration >= 3 * 60 * 60)
			{
				c /= 2;
				SYSMSG_SENDV(182, this, c);
				SYSMSG_SENDV(1082, this, c);
			}
			else
			{
				SYSMSG_SENDV(151, this, c);
				SYSMSG_SENDV(1051, this, c);
			}
		}
		else
		{
			SYSMSG_SENDV(151, this, c);
			SYSMSG_SENDV(1051, this, c);
		}
		if(c > 0)
		{
			_playerData.tael += c;
			sendModification(3, _playerData.tael);
#ifndef _WIN32
#ifdef _FB
#else
        dclogger.tael_sec(this, c, 0, true);
#endif
#endif
		}
		return _playerData.tael;
	}

	UInt32 Player::useTael( UInt32 c,ConsumeInfo * ci )
	{
		if(c == 0 || _playerData.tael == 0)
			return _playerData.tael;
		if(_playerData.tael < c)
			_playerData.tael = 0;
		else
		{
			if(ci!=NULL)
			{
                std::string tbn("consume_tael");
                DBLOG1().GetMultiDBName(tbn);
				DBLOG1().PushUpdateData("insert into %s (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",tbn.c_str(), cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, c, TimeUtil::Now());
			}
			_playerData.tael -= c;
#ifndef _WIN32
#ifdef _FB
#else
            if (ci)
                dclogger.tael_sec(this, c, ci->purchaseType, false);
            else
                dclogger.tael_sec(this, c, 0, false);
#endif
#endif
        }
        SYSMSG_SENDV(152, this, c);
        SYSMSG_SENDV(1052, this, c);
		sendModification(3, _playerData.tael);
        if(ci && ci->purchaseType != TrainFighter)
        {
            AddVar(VAR_USETAEL_CNT, c);
            daysValueRankMsg msg;
            msg.playerId = getId();
            msg.type = 2;
            msg.value = GetVar(VAR_USETAEL_CNT) + GetVar(VAR_USECOUPON_CNT) * 100;
            GameMsgHdr hdr(0x1EC, WORKER_THREAD_WORLD, this, sizeof(msg));
            GLOBAL().PushMsg(hdr, &msg);
        }
		return _playerData.tael;
	}

	void Player::useTael2(UInt32 c, Player *attacker, ConsumeInfo * ci)//nature challengge use
	{
		if(c == 0 || _playerData.tael == 0)
			return ;
		if(_playerData.tael < c)
			_playerData.tael = 0;
		else
		{
			if(ci!=NULL)
			{
                std::string tbn("consume_tael");
                DBLOG1().GetMultiDBName(tbn);
				DBLOG1().PushUpdateData("insert into %s (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
					tbn.c_str(),cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, c, TimeUtil::Now());
			}
			_playerData.tael -= c;
#ifndef _WIN32
#ifdef _FB
#else
            if (ci)
                dclogger.tael_sec(this, c, ci->purchaseType, false);
            else
                dclogger.tael_sec(this, c, 0, false);
#endif
#endif
        }
        SYSMSG_SENDV(152, this, c);
        sendModification(3, _playerData.tael);
    }

    UInt32 Player::getMoneyArenaLua(UInt32 c)
    {
        IncommingInfo ii(ArenaFromCard,0,0);
        return getMoneyArena(c, &ii);
    }

    UInt32 Player::getMoneyArena( UInt32 c, IncommingInfo* ii)
    {
        UInt32 moneyArena = GetVar(VAR_MONEY_ARENA);
		if(c == 0)
			return moneyArena;
		moneyArena += c;
		SYSMSG_SENDV(164, this, c);
		SYSMSG_SENDV(1064, this, c);
        SetVar(VAR_MONEY_ARENA, moneyArena);

        Stream st(REP::USER_INFO_CHANGE);
        st << static_cast<UInt8>(0x16) << moneyArena << Stream::eos;
        send(st);

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_arena (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

        return moneyArena;
	}

	UInt32 Player::useMoneyArena( UInt32 a,ConsumeInfo * ci )
	{
        UInt32 moneyArena = GetVar(VAR_MONEY_ARENA);
        if(a == 0 || moneyArena == 0)
            return moneyArena;
        if(moneyArena < a)
            moneyArena = 0;
        else
        {
            moneyArena -= a;
            if(ci!=NULL)
            {
                DBLOG1().PushUpdateData("insert into consume_arena (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
        }
        SYSMSG_SENDV(163, this, a);
        SYSMSG_SENDV(1063, this, a);
        SetVar(VAR_MONEY_ARENA, moneyArena);

        Stream st(REP::USER_INFO_CHANGE);
        st << static_cast<UInt8>(0x16) << moneyArena << Stream::eos;
        send(st);

        return moneyArena;
    }

	UInt32 Player::getClanProffer( UInt32 c, IncommingInfo* ii)
	{
        Clan* clan = getClan();
        if(!clan)
            return 0;
        ClanMember* member = clan->getClanMember(this);
        if(!member)
            return 0;
        if(c == 0)
			return clan->getMemberProffer(this);
        clan->addMemberProffer(this, c);
		//member->proffer += c;
        UInt32 proffer = clan->getMemberProffer(this);
		SYSMSG_SENDV(166, this, c);
		SYSMSG_SENDV(1066, this, c);

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_clan_proffer (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

		return proffer;
	}

	UInt32 Player::useClanProffer( UInt32 a,ConsumeInfo * ci )
	{
        Clan* clan = getClan();
        if(!clan)
            return 0;
        ClanMember* member = clan->getClanMember(this);
        if(!member)
            return 0;
        UInt32 proffer = clan->getMemberProffer(this);
        if(proffer < a)
            clan->addMemberProffer(this, -proffer);
        else
        {
            clan->addMemberProffer(this, -a);
            //member->proffer -= a;
            if(ci!=NULL)
            {
                DBLOG1().PushUpdateData("insert into consume_clan_proffer (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
        }
        SYSMSG_SENDV(165, this, a);
        SYSMSG_SENDV(1065, this, a);

        return proffer;
    }

	UInt16 Player::addClanProfferFromItem(UInt16 num, UInt16 unit)
	{
        IncommingInfo ii(ProfferFromUseItem, 0, 0);
        UInt32 proffer = getClanProffer(num * unit, &ii);
        UInt16 iRet;
        if(proffer > 0)
            iRet = num;
        else
            iRet = 0;
		return iRet;
	}

    UInt32 Player::getCoin( UInt32 c )
	{
        return 0; // XXX: no useful
		if(c == 0)
			return _playerData.coin;
		if(_playerData.coin >= 99999999)
		{
			//SYSMSG_SENDV(159, this);
			return _playerData.coin;
		}


		if(cfg.enableWallow && _playerData.wallow)
		{
			UInt32 onlineDuration = (_onlineDuration + TimeUtil::Now() - _playerData.lastOnline);
			if(onlineDuration >= 5 * 60 * 60)
			{
				c = 0;
				SYSMSG_SENDV(184, this);
				SYSMSG_SENDV(1084, this);
			}
			else if(onlineDuration >= 3 * 60 * 60)
			{
				c /= 2;
				SYSMSG_SENDV(183, this, c);
				SYSMSG_SENDV(1083, this, c);
			}
		}

		if(_playerData.coin >= 99999999)
		{
			//SYSMSG_SENDV(159, this);
		}

		if(c > 0)
		{
			if(_playerData.coin + c > 99999999)
				c = 99999999 - _playerData.coin;
			_playerData.coin += c;
			sendModification(4, _playerData.coin);
		}
		return _playerData.coin;
	}

	UInt32 Player::useCoin( UInt32 c, ConsumeInfo * ci, bool notify )
	{
        return 0; // XXX: no useful
		if(c == 0 || _playerData.coin == 0)
			return _playerData.coin;
		if(_playerData.coin < c)
			_playerData.coin = 0;
		else
		{
		    if(ci!=NULL)
		    {
				DBLOG1().PushUpdateData("insert into consume_coin (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
					cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, c, TimeUtil::Now());
            }
		    _playerData.coin -= c;
		}
		if(notify)
		{
		}
		sendModification(4, _playerData.coin);
		return _playerData.coin;
	}

	bool Player::holdCoin(UInt32 c, UInt8 action)
	{
		switch(action)
		{
		case 0:
			{
				if (c > _playerData.coin)
					return false;
				_playerData.coin -= c;
			}
			break;
		case 1:
			{
				sendModification(4, _playerData.coin);
			}
			break;
		case 2:
			{
				_playerData.coin += c;
				updateDB(4, _playerData.coin);
			}
			break;
		}
		WARN_LOG("Hold money : action[%d]owerId[%" I64_FMT "u]coin[%u]time[%u]",  action, getId(), c, TimeUtil::Now());
		return true;
	}

    bool Player::useDemonLog(UInt32 id, UInt32 num, ConsumeInfo* ci)
    {
        if (!ci)
            return false;
        DBLOG1().PushUpdateData("insert into consume_demon (server_id,player_id,consume_type,item_id,item_num,id,num,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u,%u)", cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, id, num, TimeUtil::Now());
        return true;
    }

	TrainFighterData* Player::getTrainFighterData(UInt32 id)
	{
		std::map<UInt32, TrainFighterData *>::iterator found = _trainFighters.find(id);
		return found == _trainFighters.end() ? NULL : found->second;
	}

	void Player::addTrainFighterFromDB(UInt32 id,  UInt8 priceType, UInt32 price, UInt32 tm, UInt32 ct, UInt32 exp)
	{
		if(ct == 0)
			return;
		Fighter * fgt = findFighter(id);
		if(fgt == NULL)
			return;
		TrainFighterData *& data = _trainFighters[id];
		if (data != NULL) delete data;
		data = new(std::nothrow) TrainFighterData;
		if(data == NULL)
			return;
		data->traintime = tm;
		data->checktime = ct;
		data->factor = (priceType == 0 ? 8.0f : 3.0f);
		data->price = price;
		data->priceType = priceType;
		data->accExp = exp;
		data->trainend = TimeUtil::Now() + 3600 * data->checktime;
		EventFighterTrain* event = new(std::nothrow) EventFighterTrain(this, 3600, data->checktime, fgt, data->trainend);
		if (event == NULL)
		{
			_trainFighters.erase(id);
			delete data;
			return;
		}
		PushTimerEvent(event);
	}

	bool Player::delTrainFighter(UInt32 id, bool notify)
	{
		std::map<UInt32, TrainFighterData *>::iterator found = _trainFighters.find(id);
		if (found == _trainFighters.end()) return false;
		Fighter * fgt = findFighter(id);
		if (fgt == NULL) return false;
		TrainFighterData * data = found->second;
		//UInt32 count = data->checktime;
		//if (count > 0)
		{
            UInt32 count = 0;
            if((TimeUtil::Now() + (data->checktime * 3600)) > data->trainend)
                count = (TimeUtil::Now() + (data->checktime * 3600) - data->trainend)/60;
            UInt32 money = 0;
            if(data->checktime * 60 > count)
                money = data->price * static_cast<float>(data->checktime * 60 - count)/(data->traintime * 60);
			//UInt32 money = data->checktime * data->price / data->traintime;
			if (data->priceType == 0)
			{
				if (money != 0)
				{
					SYSMSGV(title, 406);
					SYSMSGV(content, 409, fgt->getName().c_str(), data->price - money, data->accExp, money);
					GetMailBox()->newMail(NULL, 0x12, title, content);
                    IncommingInfo ii(InFromCancelTrain, 0, 0);
					getGold(money, &ii);
				}
				else
				{
					SYSMSGV(title, 406);
					SYSMSGV(content, 407, fgt->getName().c_str(), data->price - money, data->accExp);
					GetMailBox()->newMail(NULL, 0x12, title, content);
				}
			}
			else
			{
				if (money != 0)
				{
					SYSMSGV(title, 406);
					SYSMSGV(content, 410, fgt->getName().c_str(), data->price - money, data->accExp, money);
					GetMailBox()->newMail(NULL, 0x12, title, content);
					getTael(money);
				}
				else
				{
					SYSMSGV(title, 406);
					SYSMSGV(content, 408, fgt->getName().c_str(), data->price - money, data->accExp);
					GetMailBox()->newMail(NULL, 0x12, title, content);
				}
			}
		}
		delete data;
		_trainFighters.erase(id);
		DB1().PushUpdateData("DELETE FROM `fighter_train` WHERE `fgtId` = %u AND `ownerId` = %" I64_FMT "u", id, _id);
		Stream st(REP::TRAIN_FIGHTER_OP);
		st << static_cast<UInt8>(2) << id << static_cast<UInt8>(1) << static_cast<UInt32>(0) << Stream::eos;
		send(st);
		//if (notify)
		//	sendMsgCode(0, 2088, id);

		return true;
	}

	bool Player::hasTrainFighter(UInt32 id)
	{
		return _trainFighters.find(id) != _trainFighters.end();
	}

	bool Player::addTrainFighter(UInt32 id, UInt8 priceType, UInt32 time)
	{
		Fighter * fgt = findFighter(id);
		if (fgt == NULL)
			return false;
		if (hasTrainFighter(id))
			return false;
		if (fgt->getLevel() >= GetLev())
			return false;
		if (time > 24)
			return false;
		UInt32 price = 0;
		ConsumeInfo ci(TrainFighter,0,0);
		if (priceType == 0)
		{
			const std::vector<UInt32>& golds = GData::GDataManager::GetGoldTrainList();
            if(fgt->getLevel() >= golds.size())
                return false;
			price = time * golds[fgt->getLevel()];
			if (getGold() < price)
			{
				sendMsgCode(0, 1101);
				return false;
			}
			useGold(price, &ci);
		}
		else
		{
			const std::vector<UInt32>& taels = GData::GDataManager::GetTaelTrainList();
            if(fgt->getLevel() >= taels.size())
                return false;
			price = time * taels[fgt->getLevel()];
			if (getTael() < price)
			{
				sendMsgCode(0, 1100);
				return false;
			}
			useTael(price, &ci);
		}
		TrainFighterData *& data = _trainFighters[id];
		if (data != NULL) delete data;
		data = new TrainFighterData();
		data->checktime = time;
		data->traintime = data->checktime;
		data->factor = (priceType == 0 ? 8.0f : 3.0f);
		data->price = price;
		data->priceType = priceType;
		data->trainend = TimeUtil::Now() + 3600 * data->checktime;
		DB1().PushUpdateData("REPLACE INTO `fighter_train`(`fgtId`, `ownerId`, `priceType`, `price`, `trainTime`, `checkTime`) VALUES(%u, %" I64_FMT "u, %u, %u, %u, %u)", id, getId(), priceType, price, data->traintime, data->checktime);
		removeFighterFromLineup(id);
		EventFighterTrain* event = new(std::nothrow) EventFighterTrain(this, 3600, data->checktime, fgt, data->trainend);
		if (event == NULL) return false;
		PushTimerEvent(event);
		Stream st(REP::TRAIN_FIGHTER_OP);
		UInt32 remain = event->GetEnd() - TimeUtil::Now();
		st << static_cast<UInt8>(1) << id << data->priceType << remain << Stream::eos;
		send(st);

		return true;
	}

	bool Player::accTrainFighter(UInt32 id, UInt32 hrs)
	{
		std::map<UInt32, TrainFighterData *>::iterator found = _trainFighters.find(id);
		if (found == _trainFighters.end())
			return false;
		Fighter * fighter = findFighter(id);
		if (fighter == NULL)
			return false;
		TrainFighterData * data = found->second;
		if (data->checktime > 0)
		{
			UInt32 count = hrs;
			if(count > data->checktime)
			{
				count = data->checktime;
			}
			UInt32 goldUse = 10 * count;
			if (getGold() < goldUse)
				return false;
			ConsumeInfo ci(AccTrainFighter, 0, 0);
			const std::vector<UInt32>& levExp = GData::GDataManager::GetLevelTrainExp();
            UInt32 i = 0;
            for(; i < count; ++ i)
            {
                if (fighter->getLevel() >= GetLev())
                    break;

                UInt32 exp = static_cast<UInt32>(levExp[fighter->getLevel()] * data->factor * 60);
                fighter->addExp(exp);
                data->accExp += exp;
            }

            goldUse = 10 * i;
			useGold(goldUse, &ci);
			data->checktime -= i;
			data->trainend -= i * 3600;
			if (data->checktime == 0 || fighter->getLevel() >= GetLev())
			{
				if(delTrainFighter(id, true))
					PopTimerEvent(this, EVENT_FIGHTERAUTOTRAINING, id);
			}
			else
			{
				DB().PushUpdateData("UPDATE `fighter_train` SET `checkTime` = %u, `accExp` = %u WHERE `fgtId` = %u AND `ownerId` = %" I64_FMT "u", data->checktime, data->accExp, id, _id);
				Stream st(REP::TRAIN_FIGHTER_OP);
				UInt32 now = TimeUtil::Now();
				st << static_cast<UInt8>(2) << id << static_cast<UInt8>(0);
				if(data->trainend > now)
					st << static_cast<UInt32>(data->trainend - now);
				else
					st << static_cast<UInt32>(0);
				st << Stream::eos;
				send(st);
				struct TrainAccData
				{
					UInt32 fgtId;
					UInt32 accCount;
				};
				TrainAccData tad = { id, count };
				GameMsgHdr hdr(0x17C, WORKER_THREAD_WORLD, this, sizeof(TrainAccData));
				GLOBAL().PushMsg(hdr, &tad);
			}
			return true;
		}

		return false;
	}

	bool Player::cancelTrainFighter(UInt32 id)
	{
		std::map<UInt32, TrainFighterData *>::iterator found = _trainFighters.find(id);
		if (found == _trainFighters.end())
			return false;
		Fighter * fighter = findFighter(id);
		if (fighter == NULL)
			return false;
		TrainFighterData * data = found->second;
        UInt32 exp = 0;
		if (data->checktime > 0)
		{
            UInt32 count = (TimeUtil::Now() + (data->checktime * 3600) - data->trainend)/60;
            const std::vector<UInt32>& levExp = GData::GDataManager::GetLevelTrainExp();
            exp = static_cast<UInt32>(levExp[fighter->getLevel()] * data->factor * count);
            data->accExp += exp;
        }

		if(delTrainFighter(id))
        {
            fighter->addExp(exp);
			PopTimerEvent(this, EVENT_FIGHTERAUTOTRAINING, id);
        }
		return true;
	}

    void Player::makeTrainFighterInfo(Stream& st)
    {
        st.init(REP::TRAIN_FIGHTER_OP);
        UInt8 cnt = 0;
        st << static_cast<UInt8>(0) << cnt;
        if(!_trainFighters.empty())
        {
            UInt32 now = TimeUtil::Now();
            for (std::map<UInt32, TrainFighterData *>::iterator it = _trainFighters.begin(); it != _trainFighters.end(); ++ it)
            {
                if (it->second->trainend > now)
                {
                    st << it->first << it->second->priceType << static_cast<UInt32>(it->second->trainend - now);
                    ++ cnt;
                }
            }
            st.data<UInt8>(5) = cnt;
        }
        st << Stream::eos;
    }

	UInt32 Player::addStatus( UInt32 s )
	{
		if(s == 0 || (_playerData.status & s) == s)
			return _playerData.status;
		_playerData.status |= s;
		UInt32 status = _playerData.status;
		if(cfg.limitLuckyDraw == 2 || (cfg.limitLuckyDraw == 1 && _vipLevel < 2))
			status |= 0x80;
		sendModification(5, status);
		return _playerData.status;
	}

	UInt32 Player::setStatusBit( UInt32 bitStart, UInt32 bitCount, UInt32 s )
	{
		_playerData.status &= ~(((1 << bitCount) - 1) << bitStart);
		_playerData.status |= (s << bitStart);
		UInt32 status = _playerData.status;
		if(cfg.limitLuckyDraw == 2 || (cfg.limitLuckyDraw == 1 && _vipLevel < 2))
			status |= 0x80;
		sendModification(5, status);
		return _playerData.status;
	}

	UInt32 Player::removeStatus( UInt32 s )
	{
		if(s == 0 || (_playerData.status & s) == 0)
			return _playerData.status;
		_playerData.status &= ~s;
		UInt32 status = _playerData.status;
		if(cfg.limitLuckyDraw == 2 || (cfg.limitLuckyDraw == 1 && _vipLevel < 2))
			status |= 0x80;
		sendModification(5, status);
		return _playerData.status;
	}

    UInt8 Player::getTitle_noCheck()
    {
        return _playerData.title;
    }

    UInt8 Player::getTitle()
    {
        UInt32 timeLeft = 0;
        if(CURRENT_THREAD_ID() == getThreadId())
        {
            if(!checkTitleTimeEnd(_playerData.title, timeLeft))
            {
                notifyTitleAll();
                writeTitleAll();
            }
        }
        else
        {
            GameMsgHdr h(0x264,  getThreadId(), this, 0);
            GLOBAL().PushMsg(h, NULL);
        }

        return _playerData.title;
    }

    bool Player::isForeverTitle(UInt8 t)
    {   //38道尊 39释尊 40儒尊 201名震蜀山
        if(t == 38 || t == 39 || t == 40 || (t >= 201 && t <= 206) || t == 134)
            return false;
        return true;
    }

    void Player::loadTitleAll(UInt8 t, UInt32 timeEnd)
    {
        if(!isForeverTitle(t) && timeEnd == 0)
            return;
        std::map<UInt8, UInt32>& titleAll = _playerData.titleAll;
        titleAll[t] = timeEnd;
    }

	void Player::fixOldVertionTitle( UInt8 t)
	{
        _playerData.titleAll[t] = 0;
        writeTitleAll();
	}

	void Player::setTitle( UInt8 t, UInt32 timeLen )
	{
        if(CURRENT_THREAD_ID() != getThreadId())
        {
            UInt8 thr = getThreadId();
            if(0xFF == thr)
                thr = getCountry();

            struct TitleData
            {
                UInt8 title;
                UInt32 timeLen;
            } titleData = {t, timeLen};
            GameMsgHdr h(0x265,  thr, this, sizeof(titleData));
            GLOBAL().PushMsg(h, &titleData);
            return;
        }

        std::map<UInt8, UInt32>& titleAll = _playerData.titleAll;
        bool flag = false;
        std::map<UInt8, UInt32>::iterator it = _playerData.titleAll.find(t);
        if(it == titleAll.end())
        {
            if(timeLen == 0)
                titleAll[t] = 0;
            else
                titleAll[t] = TimeUtil::Now() + timeLen;
            flag = true;
        }
        else if(it->second != 0)
        {
            if(timeLen == 0)
                titleAll[t] = 0;
            else
                titleAll[t] = TimeUtil::Now() + timeLen;
            flag = true;
        }
        bool fchange = notifyTitleAll();
        if(flag || fchange)
        {
            writeTitleAll();
        }

		if(t == _playerData.title)
			return;
		_playerData.title = t;
		sendModification(6, _playerData.title);
		rebuildBattleName();
	}

    bool Player::notifyTitleAll()
    {
        Stream st(REP::USER_INFO_CHANGE);
        st << static_cast<UInt8>(0x17);
        bool flag = makeTitleAllInfo(st);
        st << Stream::eos;
        send(st);

        return flag;
    }

    void Player::changeTitle(UInt8 t)
    {
        if(!hasTitle(t))
            return;

        UInt32 timeLeft = 0;
        if(!checkTitleTimeEnd(t, timeLeft))
        {
            notifyTitleAll();
            writeTitleAll();
            return;
        }

		if(t == _playerData.title)
			return;
		_playerData.title = t;
		sendModification(6, _playerData.title);
		rebuildBattleName();
    }

	UInt32 Player::getAchievement( UInt32 a )
	{
		if(a == 0)
			return _playerData.achievement;
		_playerData.achievement += a;
		// SYSMSG_SENDV(105, this, a);
		SYSMSG_SENDV(1005, this, a);
		sendModification(8, _playerData.achievement);
        {
            AddVar(VAR_GETACHIEVEMENT_CNT, a);
            daysValueRankMsg msg;
            msg.playerId = getId();
            msg.type = 3;
            msg.value = GetVar(VAR_GETACHIEVEMENT_CNT) + GetVar(VAR_GETPRESTIGE_CNT);
            GameMsgHdr hdr(0x1EC, WORKER_THREAD_WORLD, this, sizeof(msg));
            GLOBAL().PushMsg(hdr, &msg);
        }
		return _playerData.achievement;
	}

	UInt32 Player::useAchievement( UInt32 a ,ConsumeInfo * ci)
	{
		if(a == 0 || _playerData.achievement == 0)
			return _playerData.achievement;
		if(_playerData.achievement < a)
			_playerData.achievement = 0;
		else
		{
		    _playerData.achievement -= a;
		    if(ci!=NULL)
		    {
				DBLOG1().PushUpdateData("insert into consume_achievement (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
					cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
		}
		SYSMSG_SENDV(106, this, a);
		SYSMSG_SENDV(1006, this, a);
		sendModification(8, _playerData.achievement);
		return _playerData.achievement;
	}

   	void Player::useAchievement2( UInt32 a, Player *attacker, ConsumeInfo * ci)
	{
		if(a == 0 || _playerData.achievement == 0)
			return ;
		if(_playerData.achievement < a)
			_playerData.achievement = 0;
		else
		{
			_playerData.achievement -= a;
			if(ci!=NULL)
			{
				DBLOG1().PushUpdateData("insert into consume_achievement (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
					cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
			}
		}
		//SYSMSG_SENDV(106, this, a);
		//SYSMSG_SENDV(1061, this, attacker->getCountry(), attacker->getName().c_str(), a);
		sendModification(8, _playerData.achievement);
		return ;
	}

    UInt32  Player::getAttainment( UInt32 a)
    {
        if(a == 0)
            return _playerData.attainment;

        _playerData.attainment += a;

        sendModification(0x0B, _playerData.attainment);
        return _playerData.attainment;
    }

    UInt32 Player::useAttainment(UInt32 a, ConsumeInfo* ci)
    {
        if(a == 0 || _playerData.attainment == 0)
            return _playerData.attainment;
        if(_playerData.attainment < a)
            _playerData.attainment = 0;
        else
            _playerData.attainment -= a;

        if(ci)
        {

        }
        sendModification(0x0B,  _playerData.attainment);
        return _playerData.attainment;
    }
    UInt32 Player::getPrestige(UInt32 a, bool notify)
    {
		if(a == 0)
			return _playerData.prestige;
		_playerData.prestige += a;

        if(notify)
        {
            SYSMSG_SENDV(185, this, a);
            SYSMSG_SENDV(1090, this, a);
        }

        DB6().PushUpdateData("UPDATE `player` SET `prestige` = %u WHERE `id` = %" I64_FMT "u", _playerData.prestige, getId());

        Stream st(REP::USER_INFO_CHANGE);
        st << static_cast<UInt8>(0x15) << _playerData.prestige << Stream::eos;
        send(st);
        {
            AddVar(VAR_GETPRESTIGE_CNT, a);
            daysValueRankMsg msg;
            msg.playerId = getId();
            msg.type = 3;
            msg.value = GetVar(VAR_GETACHIEVEMENT_CNT) + GetVar(VAR_GETPRESTIGE_CNT);
            GameMsgHdr hdr(0x1EC, WORKER_THREAD_WORLD, this, sizeof(msg));
            GLOBAL().PushMsg(hdr, &msg);
        }
		return _playerData.prestige;
    }

    UInt32 Player::usePrestige(UInt32 a,ConsumeInfo * ci)
    {
		if(a == 0 || _playerData.prestige == 0)
			return _playerData.prestige;
		if(_playerData.prestige < a)
			_playerData.prestige = 0;
		else
		{
		    _playerData.prestige -= a;
		    if(ci!=NULL)
		    {
				DBLOG1().PushUpdateData("insert into consume_prestige (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
					cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
		}
		SYSMSG_SENDV(186, this, a);
		SYSMSG_SENDV(1091, this, a);

        DB6().PushUpdateData("UPDATE `player` SET `prestige` = %u WHERE `id` = %" I64_FMT "u", _playerData.prestige, getId());

        Stream st(REP::USER_INFO_CHANGE);
        st << static_cast<UInt8>(0x15) << _playerData.prestige << Stream::eos;
        send(st);

		return _playerData.prestige;
    }

    void Player::AddPExp(UInt32 pexp)
    {
		for(int i = 0; i < 5; ++ i)
		{
			GObject::Fighter * fgt = getLineup(i).fighter;
			if(fgt != NULL)
				fgt->addPExp(pexp);
		}
    }

    void Player::AddPExpBy(Player* player, UInt32 pexp)
    {
        if (!player || !pexp)
            return;

        if (isOnline())
        {
            GameMsgHdr hdr2(0x238, this->getThreadId(), this, sizeof(pexp));
            GLOBAL().PushMsg(hdr2, &pexp);
        }
        else
            AddPExp(pexp);
    }

    void Player::AddItemBy(Player* player, UInt16 item, UInt16 num, bool bind)
    {
        if (!player || !item || !num)
            return;

        if (isOnline())
        {
            struct ItemAdd
            {
                ItemAdd() : item(0), num(0), bind(false), fromWhere(0) {}
                UInt16 item;
                UInt16 num;
                bool bind;
                UInt16 fromWhere;
            };

            ItemAdd ia;
            ia.item = item;
            ia.num = num;
            ia.bind = bind;

            GameMsgHdr hdr2(0x241, this->getThreadId(), this, sizeof(ia));
            GLOBAL().PushMsg(hdr2, &ia);
        }
        else
            m_Package->AddItem(item, num, bind, true);
    }

	void Player::AddExp(UInt64 exp, UInt8 mlvl, UInt32 extraExp, bool writedb)
    {
    	if(exp == 0)
			return;
		if(mlvl == 0)
			mlvl = 255;
		else
			mlvl += 10;

        if(cfg.enableWallow && _playerData.wallow)
		{
			UInt32 onlineDuration = (_onlineDuration + TimeUtil::Now() - _playerData.lastOnline);
			if(onlineDuration >= 5 * 60 * 60)
			{
				exp = 0;
                extraExp = 0;
				SYSMSG_SENDV(184, this);
				SYSMSG_SENDV(1084, this);
				return;
			}
			else if(onlineDuration >= 3 * 60 * 60)
			{
				exp /= 2;
                extraExp /= 2;
				SYSMSG_SENDV(181, this);
				SYSMSG_SENDV(1081, this);
            }
		}
		for(int i = 0; i < 5; ++ i)
		{
			GObject::Fighter * fgt = getLineup(i).fighter;
			if(fgt != NULL)
				fgt->addExp(exp, extraExp, writedb);
		}
        //是否开启天劫
        GObject::Tianjie::instance().isOpenTj(this);
        sendLevelPack(GetLev()); // XXX:
        if (cfg.rpServer && GetLev()>=70)
            setBuffData(PLAYER_BUFF_EXPDOUBLE,0);
	}

    void Player::flushExp()
    {
		for(int i = 0; i < 5; ++ i)
		{
			GObject::Fighter * fgt = getLineup(i).fighter;
			if(fgt != NULL)
				fgt->flushExp();
		}
    }

    void Player::flushLastExp()
    {
        if (_playerData.lastExp)
            DB1().PushUpdateDataL("UPDATE `player` SET `lastExp` = %u WHERE `id` = %" I64_FMT "u", _playerData.lastExp, _id);
    }

    void Player::addHIAttr(const GData::AttrExtra& attr)
    {
        _hiattr += attr;
		for(int i = 0; i < 5; ++ i)
		{
			GObject::Fighter * fgt = getLineup(i).fighter;
			if(fgt != NULL)
				fgt->setDirty();
        }
    }

    void Player::clearHIAttr()
    {
        _hiattr.reset();
		for(int i = 0; i < 5; ++ i)
		{
			GObject::Fighter * fgt = getLineup(i).fighter;
			if(fgt != NULL)
				fgt->setDirty();
        }
    }
   /* void Player::setHIAf(const GObject::AttrExtra& af)
    {
        _hiaf = af;
		for(int i = 0; i < 5; ++ i)
		{
			GObject::Fighter * fgt = getLineup(i).fighter;
			if(fgt != NULL)
				fgt->setDirty();
        }
    }

    void Player::clearHIAf()
    {
        memset(&_hiaf, 0, sizeof(_hiaf));
		for(int i = 0; i < 5; ++ i)
		{
			GObject::Fighter * fgt = getLineup(i).fighter;
			if(fgt != NULL)
				fgt->setDirty();
        }
    }
    */
	void Player::setLevelAndExp( UInt8 l, UInt64 e )
	{
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
		{
			it->second->setLevelAndExp(l, e);
		}
	}

	void Player::moveTo( UInt16 spot, bool inCity )
	{
		if (spot == _playerData.location && inCity == (_playerData.inCity > 0))
			return;

		GObject::Country& cny = CURRENT_COUNTRY();
		UInt8 old_cny = GObject::mapCollection.getCountryFromSpot(_playerData.location);
        if (old_cny != cny.GetThreadID())
            return;
        if(inClanCity() && gClanCity)
        {
            if(!gClanCity->playerLeave(this))
                return;
        }

        if (isJumpingMap())
            return;
        setJumpingMap(true);

		cancelAutoBattle();
		cancelAutoDungeon();

        if (getBuffData(PLAYER_BUFF_AUTOCOPY))
            cancelAutoCopy(getBuffData(PLAYER_BUFF_AUTOCOPY));
        if (GetVar(VAR_ATOFM))
            cancelAutoFrontMap(GetVar(VAR_ATOFM));
        if (GetVar(VAR_ATOXJFM))
            cancelAutoXJFrontMap(GetVar(VAR_ATOXJFM));

        if (_playerData.location == 8977)
        {
            //heroIsland.playerLeave(this);
            newHeroIsland.playerLeave(this);
            delFlag(Player::InHeroIsland);
        }
        else if (_playerData.location == 1556)
        {
            cancelAutoRaceBattle();
        }
        SpotData * spotData = GetMapSpot();
        if(spotData && spotData->m_CountryBattle && !(gClanCity && gClanCity->isOpen()))
        {
            GObject::CountryBattle *cb = spotData->GetCountryBattle();
	        NewCountryBattle * ncb = spotData->GetNewCountryBattle();
            if(WORLD().isNewCountryBattle() && ncb)
                ncb->playerLeave(this);
            if(!WORLD().isNewCountryBattle() && cb)
                cb->playerLeave(this);
        }
        ClanRankBattleMgr::Instance().PlayerLeave(this);

        if (_playerData.location == CLAN_COPY_LOCATION)
        {
            ClanCopyMgr::Instance().playerLeave(this);
        }

        if (_jobHunter)
            _jobHunter->OnLeaveGame(_playerData.location);

        if(hasFlag(InCopyTeam))
        {
            teamCopyManager->leaveTeamCopy(this);
        }

        if(GetEnterPTCStatus())
            petTeamCopyManager->quit(this);

        if(GetInPTCStatus())
            petTeamCopyManager->leaveTeam(this, 1);

        if(GetTMDYRoomStatus())
            KJTMManager->LeaveRoom(this, 1);

		UInt8 new_cny = GObject::mapCollection.getCountryFromSpot(spot);
        if (new_cny > WORKER_THREAD_LOGIN)
        {
            SYSMSG_SENDV(621, this, new_cny);
            setJumpingMap(false);
            return;
        }

		if(new_cny != cny.GetThreadID())
		{
			CountryEnterStruct ces(true, inCity ? 1 : 0, spot);
			cny.PlayerLeave(this);
			// _threadId = new_cny; // XXX: why here???
            // setJumpingMap(true);
			GameMsgHdr hdr(0x1F0, new_cny, this, sizeof(CountryEnterStruct));
			GLOBAL().PushMsg( hdr, &ces );
			return;
		}

		GObject::Map * map = GObject::Map::FromSpot(spot);
		if(map == NULL)
        {
            setJumpingMap(false);
			return;
        }

		UInt16 oldLoc = _playerData.location;
		bool sameMap = ((oldLoc >> 8) == (spot >> 8));
		bool oldInCity = _playerData.inCity > 0;
		if(oldInCity || inCity)
		{
			GObject::Map * oldMap = GObject::Map::FromSpot(oldLoc);
			if(oldMap != NULL)
			{
				oldMap->PlayerLeave(this, false, !sameMap);
			}
		}

		_playerData.inCity = inCity ? 1 : 0;
		_playerData.location = spot;
        if (_playerData.location == 1556)
        {
            if(raceBattle.isStart())
                raceBattle.autoBattle(this);
        }

		DB1().PushUpdateData("UPDATE `player` SET `inCity` = %u, `location` = %u WHERE id = %"  I64_FMT  "u", _playerData.inCity, _playerData.location, getId());

        ClanRankBattleMgr::Instance().PlayerEnter(this);

		if(inCity)
		{
			bool notify = !sameMap || !oldInCity;

			if(notify)
				map->SendCityNPCs(this);

			map->PlayerEnter(this, !sameMap);
		}
		map->SendAtCity(this, inCity, !sameMap);
        setJumpingMap(false);

        ClanCopyMgr::Instance().playerEnter(this);

	}

	bool Player::regenHP( UInt32 hp )
	{
		std::map<UInt32, Fighter*>::iterator it;
		bool r = false;
		for(it = _fighters.begin(); it != _fighters.end(); ++ it)
		{
			Fighter * fgt = it->second;
			if(fgt == NULL)
				continue;
			r |= fgt->getCurrentHP() != fgt->regenHP(hp);
		}
		return r;
	}

	void Player::writeTavernIds()
	{
		DB1().PushUpdateData("UPDATE `player` SET `tavernId` = '%u|%u|%u|%u|%u|%u|%u|%u|%u|%u' WHERE `id` = %" I64_FMT "u",
                _playerData.tavernId[0], _playerData.tavernId[1], _playerData.tavernId[2], _playerData.tavernId[3],
                _playerData.tavernId[4], _playerData.tavernId[5], _playerData.tavernBlueCount,
                _playerData.tavernPurpleCount, _playerData.tavernOrangeCount, _nextTavernUpdate, _id);
	}

    void Player::resetShiMen()
    {
        _playerData.smFinishCount = 0;
        _playerData.smFreeCount = 0;
        _playerData.smAcceptCount = 0;
        _playerData.shimen.clear();

        writeShiMen();

        if (isOnline())
            sendColorTask(0, 0);
    }

    void Player::resetYaMen()
    {
        _playerData.ymFinishCount = 0;
        _playerData.ymFreeCount = 0;
        _playerData.ymAcceptCount = 0;
        _playerData.yamen.clear();

        writeYaMen();

        if (isOnline())
            sendColorTask(1, 0);
    }

	void Player::writeShiMen()
	{
        std::string shimen = "";
        int cnt = _playerData.shimen.size();
        if(cnt == 0)
            shimen = "0,0|";
        for(int i = 0; i < cnt; ++ i)
        {
            shimen += Itoa(_playerData.shimen[i]);
            shimen += ',';
            shimen += Itoa(_playerData.smcolor[i]);
            shimen += '|';
        }

		DB1().PushUpdateData("UPDATE `player` SET `shimen` = '%s%u|%u|%u', `fshimen` = '%u,%u|%u,%u|%u,%u|%u,%u|%u,%u|%u,%u' WHERE `id` = %" I64_FMT "u",
                shimen.c_str(), _playerData.smFreeCount, _playerData.smFinishCount, _playerData.smAcceptCount,
                _playerData.fshimen[0], _playerData.fsmcolor[0], _playerData.fshimen[1], _playerData.fsmcolor[1],
                _playerData.fshimen[2], _playerData.fsmcolor[2], _playerData.fshimen[3], _playerData.fsmcolor[3],
                _playerData.fshimen[4], _playerData.fsmcolor[4], _playerData.fshimen[5], _playerData.fsmcolor[5], _id);

       // printf("%u\n",  _playerData.smFinishCount );

        if(   _playerData.smFinishCount  == 5)
            GameAction()->doAttainment(this, Script::SHIMEN_5_TODAY, 0);
	}

	void Player::writeYaMen()
	{
        std::string yamen = "";
        int cnt = _playerData.yamen.size();
        if(cnt == 0)
            yamen = "0,0|";
        for(int i = 0; i < cnt; ++ i)
        {
            yamen += Itoa(_playerData.yamen[i]);
            yamen += ',';
            yamen += Itoa(_playerData.ymcolor[i]);
            yamen += '|';
        }

		DB1().PushUpdateData("UPDATE `player` SET `yamen` = '%s%u|%u|%u',`fyamen` = '%u,%u|%u,%u|%u,%u|%u,%u|%u,%u|%u,%u' WHERE `id` = %" I64_FMT "u",
                yamen.c_str(), _playerData.ymFreeCount, _playerData.ymFinishCount, _playerData.ymAcceptCount,
                _playerData.fyamen[0], _playerData.fymcolor[0], _playerData.fyamen[1], _playerData.fymcolor[1],
                _playerData.fyamen[2], _playerData.fymcolor[2], _playerData.fyamen[3], _playerData.fymcolor[3],
                _playerData.fyamen[4], _playerData.fymcolor[4], _playerData.fyamen[5], _playerData.fymcolor[5], _id);

        if(_playerData.ymFinishCount == 5)
            GameAction()->doAttainment(this, Script::YAMEN_5_TODAY, 0);
	}

    void Player::writeShiYaMen()
    {
        std::string shimen = "";
        int cnt = _playerData.shimen.size();
        if(cnt == 0)
            shimen = "0,0|";
        for(int i = 0; i < cnt; ++ i)
        {
            shimen += Itoa(_playerData.shimen[i]);
            shimen += ',';
            shimen += Itoa(_playerData.smcolor[i]);
            shimen += '|';
        }

        std::string yamen = "";
        cnt = _playerData.yamen.size();
        if(cnt == 0)
            yamen = "0,0|";
        for(int j = 0; j < cnt; ++ j)
        {
            yamen += Itoa(_playerData.yamen[j]);
            yamen += ',';
            yamen += Itoa(_playerData.ymcolor[j]);
            yamen += '|';
        }

		DB1().PushUpdateData("UPDATE `player` SET `shimen` = '%s|%u|%u|%u', `fshimen` = '%u,%u|%u,%u|%u,%u|%u,%u|%u,%u|%u,%u', `yamen` = '%s|%u|%u|%u', `fyamen` = '%u,%u|%u,%u|%u,%u|%u,%u|%u,%u|%u,%u' WHERE `id` = %" I64_FMT "u",
                shimen.c_str(), _playerData.smFreeCount, _playerData.smFinishCount, _playerData.smAcceptCount,
                _playerData.fshimen[0], _playerData.fsmcolor[0], _playerData.fshimen[1], _playerData.fsmcolor[1],
                _playerData.fshimen[2], _playerData.fsmcolor[2], _playerData.fshimen[3], _playerData.fsmcolor[3],
                _playerData.fshimen[4], _playerData.fsmcolor[4], _playerData.fshimen[5], _playerData.fsmcolor[5],
                yamen.c_str(), _playerData.ymFreeCount, _playerData.ymFinishCount, _playerData.ymAcceptCount,
                _playerData.fyamen[0], _playerData.fymcolor[0], _playerData.fyamen[1], _playerData.fymcolor[1],
                _playerData.fyamen[2], _playerData.fymcolor[2], _playerData.fyamen[3], _playerData.fymcolor[3],
                _playerData.fyamen[4], _playerData.fymcolor[4], _playerData.fyamen[5], _playerData.fymcolor[5], _id);
    }

    bool Player::addAwardByTaskColor(UInt32 taskid, bool im)
    {
        //SetVar(VAR_DROP_OUT_ITEM_MARK, 0);
        if (!im) {
            std::vector<UInt32>& shimen = _playerData.shimen;
            std::vector<UInt8>& smcolor = _playerData.smcolor;
            int cnt = shimen.size();
            for (int i = 0; i < cnt; ++i) {
                if (shimen[i] == taskid) {
                    UInt32 award = Script::BattleFormula::getCurrent()->calcTaskAward(0, smcolor[i], GetLev());
                    AddExp(award*(World::_wday==2?2:1));
                    ++_playerData.smFinishCount;
                    shimen.erase(shimen.begin() + i);
                    smcolor.erase(smcolor.begin() + i);
                    --cnt;

                    if (World::getWhiteLoveDay() && World::_wday == 1)
                        GetPackage()->AddItem2(476, 1, 1, 1);

                    sendColorTask(0, 0);
                    writeShiMen();
                    OnShuoShuo(SS_SHIMEN);
                    return true;
                }
            }

            std::vector<UInt32>& yamen = _playerData.yamen;
            std::vector<UInt8>& ymcolor = _playerData.ymcolor;
            cnt = yamen.size();
            for (int i = 0; i < cnt; ++i) {
                if (yamen[i] == taskid) {
                    UInt32 award = Script::BattleFormula::getCurrent()->calcTaskAward(2, ymcolor[i], GetLev());
                    getTael(award*(World::_wday==2?2:1));
                    ++_playerData.ymFinishCount;
                    yamen.erase(yamen.begin() + i);
                    ymcolor.erase(ymcolor.begin() + i);
                    --cnt;

                    if (World::getWhiteLoveDay() && World::_wday == 2)
                        GetPackage()->AddItem2(476, 1, 1, 1);

                    sendColorTask(1, 0);
                    writeYaMen();
                    OnShuoShuo(SS_YAMEN);
                    return true;
                }
            }
        } else {
            for (int i = 0; i < 6; ++i) {
                if (_playerData.fshimen[i] == taskid) {
                    if (!World::getNewYear())
                    {
                        UInt32 VipType =GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
                        if(in7DayFromCreated() && VipType >4 )
                            VipType -= 2 ;
                        if (getVipLevel() < 3 && !((inVipPrivilegeTime()&&!(VipType==0||VipType ==1 ||VipType ==3)))) 
                        {
                            sendMsgCode(0, 1003);
                            return false;
                        }
                    }

                    if (GetLev() < static_cast<UInt8>(30)) {
                        sendMsgCode(1, 1016);
                        return false;
                    }

                    if (ColorTaskOutOfAccept(4, im))
                        return false;

                    if (getGold() < GData::moneyNeed[GData::SHIMEN_IM].gold) {
                        sendMsgCode(0, 1101);
                        return false;
                    }

                    ConsumeInfo ci(ShimenTask, 0, 0);
                    useGold(GData::moneyNeed[GData::SHIMEN_IM].gold, &ci);

                    UInt32 award = Script::BattleFormula::getCurrent()->calcTaskAward(0, _playerData.fsmcolor[i], GetLev());
                    AddExp(award*(World::_wday==2?2:1));
                    ++_playerData.smFinishCount;
                    ++_playerData.smAcceptCount;
                    _playerData.fshimen[i] = 0;
                    _playerData.fsmcolor[i] = 0;

                    if (World::getWhiteLoveDay() && World::_wday == 1)
                        GetPackage()->AddItem2(476, 1, 1, 1);

                    sendColorTask(0, 0);
                    writeShiMen();
                    OnShuoShuo(SS_SHIMEN);
                    return true;
                }
            }

            for (int i = 0; i < 6; ++i) {
                if (_playerData.fyamen[i] == taskid) {
                    if (!World::getNewYear())
                    {
                        UInt32 VipType =GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
                        if(in7DayFromCreated() && VipType >4 )
                            VipType -= 2 ;
                        if (getVipLevel() < 3 && !(inVipPrivilegeTime()&& !( VipType==0||VipType ==1 ||VipType ==3 )) ) { sendMsgCode(0, 1003);
                            return false;
                        }
                    }

                    if (GetLev() < static_cast<UInt8>(30)) {
                        sendMsgCode(1, 1016);
                        return false;
                    }

                    if (ColorTaskOutOfAccept(5, im))
                        return false;

                    if (getGold() < GData::moneyNeed[GData::YAMEN_IM].gold) {
                        sendMsgCode(0, 1101);
                        return false;
                    }

                    ConsumeInfo ci(YamenTask, 0, 0);
                    useGold(GData::moneyNeed[GData::YAMEN_IM].gold, &ci);

                    UInt32 award = Script::BattleFormula::getCurrent()->calcTaskAward(2, _playerData.fymcolor[i], GetLev());
                    getTael(award*(World::_wday==2?2:1));
                    AddExp(3000);

                    ++_playerData.ymFinishCount;
                    ++_playerData.ymAcceptCount;
                    _playerData.fyamen[i] = 0;
                    _playerData.fymcolor[i] = 0;

                    if (World::getWhiteLoveDay() && World::_wday == 2)
                        GetPackage()->AddItem2(476, 1, 1, 1);

                    sendColorTask(1, 0);
                    writeYaMen();
                    OnShuoShuo(SS_YAMEN);
                    return true;
                }
            }
        }
        return false;
    }

    bool Player::ColorTaskOutOfAccept(UInt8 type, bool im)
    {
        if (type == 4) {
            if (_playerData.smAcceptCount >= getShiMenMax()) {
                SYSMSG_SENDV(2107, this);
                return true;
            }
        } else if (type == 5) {
            if (_playerData.ymAcceptCount >= getYaMenMax()) {
                SYSMSG_SENDV(2108, this);
                return true;
            }
        }
        return false;
    }

    void Player::ColorTaskAccept(UInt8 type, UInt32 taskid)
    {
        if (type == 4) {
            for (int i = 0; i < 6; ++i) {
                if (_playerData.fshimen[i] == taskid) {
                    _playerData.shimen.push_back(taskid);
                    _playerData.smcolor.push_back(_playerData.fsmcolor[i]);

                    _playerData.fshimen[i] = 0;
                    _playerData.fsmcolor[i] = 0;

                    ++_playerData.smAcceptCount;
                    sendColorTask(0, 0);
                    writeShiMen();
                    return;
                }
            }
        }

        if (type == 5) {
            for (int i = 0; i < 6; ++i) {
                if (_playerData.fyamen[i] == taskid) {
                    _playerData.yamen.push_back(taskid);
                    _playerData.ymcolor.push_back(_playerData.fymcolor[i]);

                    _playerData.fyamen[i] = 0;
                    _playerData.fymcolor[i] = 0;

                    ++_playerData.ymAcceptCount;
                    sendColorTask(1, 0);
                    writeYaMen();
                    return;
                }
            }
        }
    }

    void Player::ColorTaskAbandon(UInt8 type, UInt32 taskid)
    {
        if (type == 4) {
            std::vector<UInt32>& shimen = _playerData.shimen;
            std::vector<UInt8>& smcolor = _playerData.smcolor;
            int cnt = shimen.size();
            for (int i = 0; i < cnt; ++i) {
                if (shimen[i] == taskid) {
                    shimen.erase(shimen.begin() + i);
                    smcolor.erase(smcolor.begin() + i);
                    if (_playerData.smAcceptCount) {
                        --_playerData.smAcceptCount;
                        sendColorTask(0, 0);
                        writeShiMen();
                    }
                    return;
                }
            }
        }

        if (type == 5) {
            std::vector<UInt32>& yamen = _playerData.yamen;
            std::vector<UInt8>& ymcolor = _playerData.ymcolor;
            int cnt = yamen.size();
            for (int i = 0; i < cnt; ++i) {
                if (yamen[i] == taskid) {
                    yamen.erase(yamen.begin() + i);
                    ymcolor.erase(ymcolor.begin() + i);
                    if (_playerData.ymAcceptCount) {
                        --_playerData.ymAcceptCount;
                        sendColorTask(1, 0);
                        writeYaMen();
                    }
                    return;
                }
            }
        }
    }

    void Player::checkDungeonTimeout(UInt32 now)
    {
        if(now >= _playerData.dungeonEnd)
        {
            if(World::getJiqirenAct() && !TimeUtil::SameDay(now,TimeUtil::MkTime(2014, 9, 29)))
                handleJiqirenAct_dungeon();
            _playerData.dungeonEnd = TimeUtil::SharpDay(1, now);
            _playerData.dungeonCnt = 0;
            _playerData.dungeonCnt1 = 0;

            DB1().PushUpdateData("UPDATE `player` SET `dungeonCnt` = %u, `dungeonCnt1` = %u , `dungeonEnd` = %u where `id` = %" I64_FMT "u", PLAYER_DATA(this, dungeonCnt), PLAYER_DATA(this, dungeonCnt1), PLAYER_DATA(this, dungeonEnd), getId());
        }
    }

    void Player::clearFinishCount(UInt32 nextday)
    {
        if(World::getJiqirenAct() && !TimeUtil::SameDay(nextday ,TimeUtil::MkTime(2014, 9, 29)))
        {
            handleJiqirenAct_shiyamen();
            handleJiqirenAct_erlking();
        }
        _playerData.smFinishCount = 0;
        _playerData.ymFinishCount = 0;
        _playerData.smFreeCount = 0;
        _playerData.ymFreeCount = 0;

        _playerData.smAcceptCount = _playerData.shimen.size();
        _playerData.ymAcceptCount = _playerData.yamen.size();

        writeShiYaMen();

        if (isOnline()) {
            sendColorTask(0, 0);
            sendColorTask(1, 0);
        }
    }

    UInt32 Player::getClanTask()
    {
        if (!getClan())
            return 0;
        URandom rnd(time(NULL));
        const std::vector<UInt32>& task = GData::GDataManager::GetClanTask();
        UInt8 idx = rnd(task.size());
        UInt32 taskid = task[idx];
        if(_playerData.clanTaskId == taskid)
            _playerData.clanTaskId = task[++idx % task.size()];
        else
            _playerData.clanTaskId = taskid;
        GetTaskMgr()->AddCanAcceptTask(_playerData.clanTaskId);
        return _playerData.clanTaskId;
    }

    bool Player::finishClanTask(UInt32 taskId)
    {
		const GData::TaskType& taskType = GData::GDataManager::GetTaskTypeData(taskId);
        if(taskType.m_Class != 6)
            return false;

        if(getClan() == NULL) {
            delClanTask();
            return false;
        }

        if(taskId != _playerData.clanTaskId || _playerData.ctFinishCount > getClanTaskMax() - 1)
            return false;

        ++ _playerData.ctFinishCount;
        getClan()->addMemberActivePoint(this, 1, e_clan_actpt_none);
        if(getClanTaskMax() > _playerData.ctFinishCount) {
            getClanTask();
        } else {
            _playerData.clanTaskId = 0;
        }

        if (World::getWhiteLoveDay() && World::_wday == 3)
            GetPackage()->AddItem2(476, 1, 1, 1);

        OnHeroMemo(MC_CONTACTS, MD_ADVANCED, 0, 1);
        writeClanTask();
        GameAction()->doStrong(this, SthClanTask, 0 ,0 );
        getSummerMeetScore(9);
        return true;
    }

    void Player::delClanTask()
    {
        if(_playerData.clanTaskId)
        {
            if(!GetTaskMgr()->DelTask(_playerData.clanTaskId))
                GetTaskMgr()->DelCanAcceptTask(_playerData.clanTaskId);

            _playerData.clanTaskId = 0;

            writeClanTask();
        }
    }

    void Player::buildClanTask(bool fReset,UInt32 nextday)
    {
        bool writeDB = false;
        do
        {
            if(getClan() == NULL)
            {
                break;
            }

            const std::vector<UInt32>& task = GData::GDataManager::GetClanTask();
            if(task.size() == 0)
                break;

            if(_playerData.clanTaskId == 0)
            {
                URandom rnd(time(NULL));
                _playerData.clanTaskId = task[rnd(task.size())];
                writeDB = true;
            }
            else
            {
                const GData::TaskType& taskType = GData::GDataManager::GetTaskTypeData(_playerData.clanTaskId);
                if(taskType.m_Class != 6)
                {
                    URandom rnd(time(NULL));
                    _playerData.clanTaskId = task[rnd(task.size())];
                    writeDB = true;
                }
            }

            GetTaskMgr()->AddCanAcceptTask(_playerData.clanTaskId);
        } while(false);

        if(fReset && World::getJiqirenAct() && !TimeUtil::SameDay(nextday ,TimeUtil::MkTime(2014, 9, 29)))
            handleJiqirenAct_clan();
        if(fReset && _playerData.ctFinishCount != 0)
        {
            _playerData.ctFinishCount = 0;
            writeDB = true;
        }

        if(writeDB)
            writeClanTask();
    }

	void Player::writeClanTask()
	{
        if (!isOffical() && getClanTaskMax() < _playerData.ctFinishCount)
            _playerData.ctFinishCount = 0;

        Stream st(REP::CLAN_INFO_UPDATE);
        st << static_cast<UInt8>(9) << ((_playerData.ctFinishCount << 4) | getClanTaskMax());
        st << Stream::eos;
        send(st);

		DB1().PushUpdateData("UPDATE `player` SET `clantask` = '%u,%u' WHERE `id` = %" I64_FMT "u",  _playerData.clanTaskId, _playerData.ctFinishCount, _id);
	}

    UInt32 Player::getClanTaskId()
    {
        return _playerData.clanTaskId;
    }

    bool Player::isClanTask(UInt32 taskId)
    {
        return _playerData.clanTaskId == taskId;
    }

    bool Player::isClanTaskFull()
    {
        return getClanTaskMax() - 1 < _playerData.ctFinishCount;
    }

    void Player::AddClanBuilding(UInt32 building)
    {
        Clan* clan = getClan();
        if(clan == NULL)
        {
            return;
        }

        clan->addConstruction(building);
    }

    void Player::AddClanContrib(UInt32 contrib)
    {
        Clan* clan = getClan();
        if(clan == NULL)
        {
            return;
        }

        clan->addMemberProffer(this, contrib);
    }


    ////////////////////////////////////////////
    // 帮派副本

    void Player::setClanCopyLevel(UInt16 level)
    {
        // GM命令设置帮派副本等级
        if (_clan == NULL)
            return;
        _clan->setCopyLevel(level);
    }

    void Player::setClanCopyTime(UInt32 time)
    {
        // GM命令设置帮派副本每轮时间
        ClanCopyMgr::Instance().setInterval(time);
    }


    // 帮派副本
    ////////////////////////////////////////////


	inline UInt32 getTavernPriceByColor(UInt8 color)
	{
        return 0;
		switch(color)
		{
		case 0:
		case 1:
			return 100000;
			break;
		case 2:
			return 500000;
			break;
		case 3:
			return 5000000;
			break;
		default:
			return 99999999;
			break;
		}
		return 99999999;
	}

	inline UInt32 getTavernPrice(UInt32 id)
	{
		Fighter * fgt = globalFighters[id];
		if(fgt == NULL)
			return 0;
		return getTavernPriceByColor(fgt->getColor());
	}

    bool isFirst(UInt8* colors)
    {
        for (UInt8 i = 0; i < 6; ++i)
            if (colors[i])
                return false;
        return true;
    }

    inline bool hasCTAccept(std::vector<UInt32>& tasks, UInt32 task, int rcnt)
    {
        if (rcnt > 100)
            return false;
        return find(tasks.begin(), tasks.end(), task) != tasks.end();
    }

	void Player::flushTaskColor(UInt8 tasktype, UInt8 type, UInt8 color, UInt16 count, bool force)
    {
        int ttype = 0;
        if (tasktype >= 1)
            ttype = 1;
        else
            ttype = 0;

        int ftype = 0;
        if (type == 1)
            ftype = 0;
        if (type == 2 || type == 3)
            ftype = 1;
        else
            ftype = 0;

        bool first = false;
        if (!force) {
            if (ttype == 0) {
                if (isFirst(_playerData.fsmcolor))
                    first = true;
            }
            if (ttype == 1) {
                if (isFirst(_playerData.fymcolor))
                    first = true;
            }
        }

        UInt16 ncount = 0;
        if (type || first) {
            UInt32 money = 0;
            UInt16 usedGold = 0, maxGold = 0;
            if (ftype) {
                if (ttype == 0)
                    money = GData::moneyNeed[GData::SHIMEN_FRESH].gold;
                else
                    money = GData::moneyNeed[GData::YAMEN_FRESH].gold;

                maxGold = money * count;

                if(_playerData.gold < maxGold) {
                    sendMsgCode(1, 1101);
                    return;
                }
            }

            const std::vector<UInt8>& factor = GData::GDataManager::GetFlushTaskFactor(ttype, ftype);
            UInt8 rfac[5] = {0};
            rfac[0] = factor[0];
            for (int i = 1; i < 5; ++i)
                rfac[i] = rfac[i-1] + factor[i];

            bool percolor = false;
            do {
                ++ncount;
                if ((!ftype && ((ttype == 0 && _playerData.smFreeCount < getShiMenMax()) ||
                                (ttype == 1 && _playerData.ymFreeCount < getYaMenMax()))) || ftype) {
                    URandom rnd(time(NULL));
                    const std::vector<UInt32>& task = GData::GDataManager::GetShiYaMenTask(_playerData.country, ttype);
                    if (!task.size())
                        return;
                    std::set<UInt32> idxs;
                    if (task.size() <= 6) {
                        for (size_t i = 0; i < task.size(); ++i)
                            idxs.insert(i);
                    } else {
                        for (int i = 0; i < 6; ++i) {
                            UInt32 j = rnd(task.size());
                            if (ttype == 0) {
                                int rcnt = 0;
                                while (idxs.find(j) != idxs.end() || hasCTAccept(_playerData.shimen, task[j], ++rcnt))
                                    j = rnd(task.size());
                            } else {
                                int rcnt = 0;
                                while (idxs.find(j) != idxs.end() || hasCTAccept(_playerData.yamen, task[j], ++rcnt))
                                    j = rnd(task.size());
                            }
                            idxs.insert(j);
                        }
                    }

                    int n = 0;
                    for (std::set<UInt32>::iterator i = idxs.begin(), e = idxs.end(); i != e; ++i) {
                        UInt32 rd = rnd(100);
                        for (int j = 0; j < 5; ++j) {
                            if (rd <= rfac[j]) {
                                 UInt32 VipType = GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE); 
                                if (ttype == 0) {
                                    _playerData.fshimen[n] = task[*i];
                                    _playerData.fsmcolor[n] = j+1;
                                    if (getVipLevel() >= 3  ) {
                                        static UInt8 viptaskcolor[16] = {0,0,0,3,3,3,4,4,4,4,4,4,4,4,4,4};
                                        if (_playerData.fsmcolor[n] < viptaskcolor[getVipLevel()])
                                            _playerData.fsmcolor[n] = viptaskcolor[getVipLevel()];
                                    }
                                    if((inVipPrivilegeTime() && VipType%2 == 0))
                                    {
                                        if(_playerData.fsmcolor[n] < 4 )
                                            _playerData.fsmcolor[n] = 4;
                                    }
                                } else {
                                    _playerData.fyamen[n] = task[*i];
                                    _playerData.fymcolor[n] = j+1;
                                    if (getVipLevel() >= 2 ) {
                                        static UInt8 viptaskcolor[16] = {0,0,3,3,3,4,4,4,4,4,4,4,4,4,4,4};
                                        if (_playerData.fymcolor[n] < viptaskcolor[getVipLevel()])
                                            _playerData.fymcolor[n] = viptaskcolor[getVipLevel()];
                                    }
                                    if((inVipPrivilegeTime() && VipType%2 == 0))
                                    {
                                        if(_playerData.fymcolor[n] < 4 )
                                            _playerData.fymcolor[n] = 4;
                                    }
                                }

                                if (color && j+1 == color)
                                    percolor = true;

                                ++n;
                                break;
                            }
                        }
                    }

                    if (!ftype && !first) {
                        if (ttype == 0)
                            ++_playerData.smFreeCount;
                        else
                            ++_playerData.ymFreeCount;
                    }
                }

                if (ftype)
                    usedGold += money;

                if (percolor)
                    break;
                if (type == 2)
                    break;

                --count;
            } while (count > 0);

            if (ftype) {
                if (ttype == 0) {
                    ConsumeInfo ci(ShimenTaskFresh, 0, 0);
                    useGold(usedGold, &ci);
                } else {
                    ConsumeInfo ci(YamenTaskFresh, 0, 0);
                    useGold(usedGold, &ci);
                }
            }

            if (!ttype)
                writeShiMen();
            else
                writeYaMen();
        }

        sendColorTask(ttype, ncount);
    }

    void Player::sendColorTask(UInt8 ttype, UInt16 ncount)
    {
        Stream st(REP::TASK_CYC_FRESH);
        st << ttype;
        if (ttype == 0) {
            st <<  ncount << _playerData.smFinishCount;
            st << _playerData.smFreeCount;
        } else {
            st <<  ncount << _playerData.ymFinishCount;
            st << _playerData.ymFreeCount;
        }

        if (ttype == 0) {
            for (int i = 0; i < 6; ++i) {
                if (!_playerData.fsmcolor[i]) {
                    st << static_cast<UInt32>(0);
                    st << static_cast<UInt8>(0);
                } else {
                    st << _playerData.fshimen[i];
                    st << static_cast<UInt8>(_playerData.fsmcolor[i]);
                }
            }
        } else {
            for (int i = 0; i < 6; ++i) {
                if (!_playerData.fymcolor[i]) {
                    st << static_cast<UInt32>(0);
                    st << static_cast<UInt8>(0);
                } else {
                    st << _playerData.fyamen[i];
                    st << static_cast<UInt8>(_playerData.fymcolor[i]);
                }
            }
        }
        st << Stream::eos;
        send(st);
    }

    void Player::listRecruit(UInt8 type, UInt8 color, UInt16 count)
	{
		UInt32 curtime = TimeUtil::Now();
		bool extraRefresh = false;
		UInt16 usedGold = 0, maxGold = _recruit_cost * count;

		if(_nextTavernUpdate == 0)
		{
			maxGold = 0;
			extraRefresh = true;
			count = 1;
			updateNextTavernUpdate(curtime);
		}
		else if(type > 0 && curtime >= _nextTavernUpdate)
		{
			if(type == 1)
			{
				maxGold -= _recruit_cost;
				extraRefresh = true;
				updateNextTavernUpdate(curtime);
			}
		}

		if(_playerData.gold + _playerData.coupon < maxGold)
		{
			sendMsgCode(1, 1101);
			return;
		}

        if(count == 1)
            color = 1;
        else if(color > 0)
            -- color;

        if(count > 0 && globalFighters.getColorFighterNum(extraRefresh ? 0 : 1, color) == getColorFighterNum(color))
        {
			sendMsgCode(0, 1200);
            return;
        }
        //触发新手任务
        if(type > 0)
            GetTaskMgr()->CompletedTask(203);

        while(color > 0)
        {
            if(globalFighters.getColorFighterNum(extraRefresh ? 0 : 1, color) > 0)
                break;
            -- color;
        }

		UInt16 tcount = 0;
		Stream st(REP::HOTEL_PUB_LIST);
		if(count > 0)
		{
            OnHeroMemo(MC_FIGHTER, MD_ADVANCED, 0, 0);
            UInt8 hasGet = 0;
			do
			{
				bool hasBlue = false, hasPurple = false, hasOrange = false;
				std::set<UInt32> excepts, excepts2;
				int i;
				//for(i = 0; i < 6; ++ i)
                    //excepts2.insert(_playerData.tavernId[i]);
				i = 0;
                int rateidx0 = 0;
                int rateidx1 = 0;
                int rateidx2 = 0;
                if(!extraRefresh)
                {
                    rateidx0 = _playerData.tavernBlueCount / 10;
                    rateidx1 = _playerData.tavernPurpleCount / 10;
                    rateidx2 = _playerData.tavernOrangeCount / 10;
                }
                else
                {
                    rateidx0 = _playerData.tavernBlueCount / 10;
                    rateidx1 = _playerData.tavernPurpleCount / 10;
                }

                if(rateidx0 < 0)
                    rateidx0 = 0;
                if(rateidx1 < 0)
                    rateidx1 = 0;
                if(rateidx2 < 0)
                    rateidx2 = 0;

				if(!extraRefresh)
				{
					usedGold += _recruit_cost;
#if 0
					if(_playerData.tavernBlueCount >= _tavernBlueCount)
					{
						Fighter * fgt = globalFighters.getRandomOut(this, excepts, excepts2, 2, rateidx);
						if(fgt != NULL)
						{
							_playerData.tavernId[i] = fgt->getId();
							excepts.insert(fgt->getId());

							hasBlue = true;
							++ i;
						}
					}
					if(_playerData.tavernPurpleCount >= _tavernPurpleCount)
					{
						Fighter * fgt = globalFighters.getRandomOut(this, excepts, excepts2, 3, rateidx);
						if(fgt != NULL)
						{
							_playerData.tavernId[i] = fgt->getId();
							excepts.insert(fgt->getId());

							hasPurple = true;
							++ i;
						}
					}
					if(_playerData.tavernOrangeCount >= _tavernOrangeCount)
					{
						Fighter * fgt = globalFighters.getRandomOut(this, excepts, excepts2, 4, rateidx);
						if(fgt != NULL)
						{
							_playerData.tavernId[i] = fgt->getId();
							excepts.insert(fgt->getId());

							hasOrange = true;
							++ i;
						}
					}
#endif
				}

				for(; i < 6; ++ i)
				{
					Fighter * fgt = globalFighters.getRandomOut(this, excepts, excepts2, extraRefresh ? 0 : 1, rateidx0, rateidx1, rateidx2);
                    if (i == 0 && GetLev() <= 10 && !type && GetTaskMgr()->HasAcceptedTask(14)
                            && !GetTaskMgr()->HasCompletedTask(14) && !GetTaskMgr()->HasSubmitedTask(14))
                    {
                        UInt32 fgtId = 0;
                        if(3 == GetClass())  //道
                        {
                            static UInt32 shi[] = { 45, 46, 49, 50 };
                            fgtId = shi[uRand(4)];
                        }
                        else    //释或者儒
                        {
                            static UInt32 dao[] = { 54, 58, 59, 60 };
                            fgtId = dao[uRand(4)];
                        }
		                fgt = globalFighters[fgtId];
                    }
					if(fgt == NULL)
					{
						_playerData.tavernId[i] = 0;
					}
					else
					{
						UInt8 tmpcolor = fgt->getColor();
                        if(tmpcolor)
                        {
                            if( (1 << tmpcolor) & hasGet )
                            {
                                -- i;
                                continue;
                            }
                            else
                            {
                                hasGet |= (1 << tmpcolor);
                            }
                        }

						_playerData.tavernId[i] = fgt->getId();
						excepts.insert(fgt->getId());
						switch(tmpcolor)
						{
						case 1:
							hasBlue = true;
							break;
						case 2:
							hasPurple = true;
							break;
                        case 3:
                            hasOrange = true;
						default:
							break;
						}
					}
				}
				if(extraRefresh)
				{
					extraRefresh = false;
					if(hasBlue)
						_playerData.tavernBlueCount = 0;
					else
						++ _playerData.tavernBlueCount;
                    if(hasPurple)
						_playerData.tavernPurpleCount = 0;
					else
						++ _playerData.tavernPurpleCount;
				}
				else
				{
					++ tcount;
					if(hasBlue)
						_playerData.tavernBlueCount = 0;
					else
						++ _playerData.tavernBlueCount;
                    if(hasPurple)
						_playerData.tavernPurpleCount = 0;
					else
						++ _playerData.tavernPurpleCount;
                    if(hasOrange)
                        _playerData.tavernOrangeCount = 0;
                    else
                        ++ _playerData.tavernOrangeCount;
				}
				-- count;
				if(hasBlue)
				{
					if(color <= 1)
						break;
				}
				if(hasPurple)
				{
					if(color <= 2)
						break;
				}
                if(hasOrange)
                {
                    if(color <=3)
                        break;
                }
			}
			while(count > 0);
			st << calcNextTavernUpdate(curtime);
			if(type == 2)
				st << tcount;
			else
				st << static_cast<UInt16>(0);
			writeTavernIds();
            ConsumeInfo ci(FlushFighter, 0, 0);
            useGoldOrCoupon(usedGold, &ci);
		}
		else
		{
			st << calcNextTavernUpdate(curtime) << static_cast<UInt16>(0);
		}
		for(int i = 0; i < 6; ++ i)
		{
			st << _playerData.tavernId[i] << getTavernPrice(_playerData.tavernId[i]);
		}
		st << Stream::eos;
		send(st);
        /*
        if(type > 0)
            GameAction()->doAty(this, AtyBarRef, 0, 0);
        */
	}

	UInt16 Player::calcNextTavernUpdate(UInt32 curtime)
	{
		if(_nextTavernUpdate > curtime)
			return static_cast<UInt16>(_nextTavernUpdate - curtime);
		return 0;
	}

	UInt32 Player::hireRecruit( UInt8 idx )
	{
		if(idx > 5 || _playerData.tavernId[idx] == 0)
			return 0;
		if(isFighterFull())
		{
			sendMsgCode(0, 1200);
			return 0;
		}
		UInt32 price = getTavernPrice(_playerData.tavernId[idx]);
		if(_playerData.tael < price)
		{
			sendMsgCode(0, 1100);
			return 0;
		}
		Fighter * fgt = takeFighter(_playerData.tavernId[idx], true);
		if(fgt == NULL)
			return 0;
		_playerData.tavernId[idx] = 0;
		writeTavernIds();
		ConsumeInfo ci(RecruitFighter,0,0);
		useTael(price,&ci);

        if(fgt->getColor() == 2)
        {
            _playerData.tavernPurpleCount = 0;
        }
        else if(fgt->getColor() == 3)
        {
            _playerData.tavernPurpleCount = 0;
            _playerData.tavernOrangeCount = 0;
        }

        OnHeroMemo(MC_FIGHTER, MD_ADVANCED, 0, 1);
        if (fgt->getColor() == 1)
            OnHeroMemo(MC_FIGHTER, MD_ADVANCED, 0, 2);

        if(fgt->getColor() ==3)
        {
            GameAction()->onRecruitAward(this);
        }

		return fgt->getId();
	}

	void Player::updateNextTavernUpdate(UInt32 curtime)
	{
		_nextTavernUpdate = (curtime + _tavernInterval) / _tavernInterval * _tavernInterval;
	}

    UInt32 Player::getColorFighterNum(UInt8 color)
    {
        UInt32 num = 0;
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
        {
            Fighter* fighter = it->second;
            if(fighter->getColor() == color && it->second->getId() > 6)
                ++ num;
        }

        return num;
    }

	void Player::exceptAvailableFighters( std::map<UInt32, UInt32>& data )
	{
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
		{
			if(it->first > 6)
				data.erase(it->first);
		}
	}

	void Player::sendMsgCode( UInt8 type, UInt32 code, UInt32 data )
	{
		if(!_isOnline)
			return;
		Stream st(REP::ALERT_MSG);
		st << type << code << data << Stream::eos;
		send(st);
	}

	bool Player::canClosePK()
	{
		return getBuffData(PLAYER_BUFF_PKLOCK) == 0;
	}

	void Player::moveToHome()
	{
		if(_playerData.country == 0)
			moveTo(0x0005, true);
		else
			moveTo(0x1002, true);
	}

	void Player::moveToNeutralHome()
	{
		moveTo(0x3004, true);
	}

	void Player::autoRegenAll()
	{
		//if(hasFlag(CountryBattle | ClanBattling | ClanRankBattle))
		if(hasFlag(ClanBattling | ClanRankBattle))
			return;
		UInt32 autohp = 0; // getBuffData(0);
		//if(autohp == 0)
		//	return;
		for(int i = 0; i < 5; ++ i)
		{
			Fighter * fighter = getLineup(i).fighter;
			if(fighter == NULL)
				continue;
			UInt32 hp = fighter->getCurrentHP();
			if(hp == 0)
				continue;
            if (!World::getAutoHeal())
            {
                UInt32 maxhp = fighter->getMaxHP();
                if(hp < maxhp)
                {
                    if(hp + autohp >= maxhp)
                    {
                        autohp -= maxhp - hp;
                        hp = maxhp;
                    }
                    else
                    {
                        hp += autohp;
                        fighter->setCurrentHP(hp);
                        autohp = 0;
                        break;
                    }
                }
                else
                    hp = 0;
            }
            else
            {
                hp = 0;
            }
			fighter->setCurrentHP(hp);
		}
		//setBuffData(0, autohp);
	}

#ifdef _ARENA_SERVER
	UInt32 Player::getClientAddress()
	{
        return 0;
    }
#else
	UInt32 Player::getClientAddress()
	{
        TcpConnection conn = NETWORK()->GetConn(this->GetSessionID());
		if(conn.get() == NULL)
			return 0;
        Network::GameClient * client = static_cast<Network::GameClient *>(conn.get());
        return client->GetClientIP();
	}
#endif

	void Player::makeWallow( Stream& st )
	{
		UInt8 wallow, stage;
		UInt32 duration;
		wallow = _playerData.wallow;
		if(wallow)
		{
			UInt32 onlineDuration = (_onlineDuration + TimeUtil::Now() - _playerData.lastOnline);
			if(onlineDuration < 3 * 60 * 60)
			{
				stage = 0;
				duration = 3 * 60 * 60 - onlineDuration;
			}
			else if(onlineDuration < 5 * 60 * 60)
			{
				stage = 1;
				duration = 5 * 60 * 60 - onlineDuration;
			}
			else
			{
				stage = 2;
				duration = 5 * 60 * 60;
			}
		}
		else
		{
			stage = 0;
			duration = 0;
		}
		st.init(REP::WALLOW_VERIFY);
		st << wallow << stage << duration << Stream::eos;
	}

	void Player::sendWallow( )
	{
		if(!cfg.enableWallow)
			return;

		Stream st;
		makeWallow(st);
		send(st);
	}

	void Player::setGMLevel( UInt8 l )
	{
		if(l > 3)
			l = 3;
		if(_playerData.gmLevel == l)
			return;
		_playerData.gmLevel = l;
		DB1().PushUpdateData("UPDATE `player` SET `gmLevel` = %u WHERE `id` = %" I64_FMT "u", l, _id);
	}

	void Player::autoLineup( Fighter * fgt )
	{
		if(_fighters.size() <= 5)
		{
			UInt8 c = 0, fe = 0;
			for(UInt8 i = 0; i < 5; ++ i)
			{
				Lineup& lu = _playerData.lineup[i];
				if(lu.available())
					++ c;
				else
				{
					if(fe == 0)
						fe = i;
				}
			}
			if(c >= 5)
				return;
			else
			{
				_playerData.lineup[fe].fighter = fgt;
				_playerData.lineup[fe].updateId();
				++ c;
			}
            if (c == 4)
                OnHeroMemo(MC_FIGHTER, MD_ADVANCED, 1, 0);
            UInt8 newPos[5] = {0};
            if(0 == _playerData.formation)
            {
                setFormation(FORMATION_1); // 七绝阵
            }

            for( int i = 0; i < 5; ++ i)
            {
                newPos[i] = GData::formationManager[_playerData.formation]->operator[](i).pos;
            }

			int starti = 0;
			int endi = c - 1;
			Lineup& lu1 = _playerData.lineup[0];
            if (!lu1.fighter)
                return;
            // 道默认站前排
			bool mfSolid = lu1.fighter->getClass() == e_cls_dao;
			if(mfSolid)
				lu1.pos = newPos[starti ++];
			for(int i = 1; i < 5; ++ i)
			{
				Lineup& lu = _playerData.lineup[i];
				if(!lu.available())
					continue;
                if (!lu.fighter)
                    continue;
				if(lu.fighter->getClass() == e_cls_dao)
					lu.pos = newPos[starti ++];
				else
					lu.pos = newPos[endi --];
			}
			if(!mfSolid)
				lu1.pos = newPos[starti];
			updateBattleFighters();
			Stream st;
			makeFormationInfo(st);
			send(st);
		}
	}

	void Player::incIcCount( )
	{
		checkIcExpire(false);
		++ _playerData.icCount;
		DB1().PushUpdateData("UPDATE `player` SET `icCount` = '%u|%u' WHERE `id` = %" I64_FMT "u", _playerData.icCount, _playerData.nextIcReset, _id);
	}

	void Player::resetIcCount( )
	{
		checkIcExpire(false);
		if(_playerData.icCount > 0)
			_playerData.icCount = 0;
		DB1().PushUpdateData("UPDATE `player` SET `icCount` = '%u|%u' WHERE `id` = %" I64_FMT "u", _playerData.icCount, _playerData.nextIcReset, _id);
	}

	UInt8 Player::getIcCount()
	{
		checkIcExpire();
		return _playerData.icCount;
	}

	void Player::checkIcExpire( bool writedb )
	{
		UInt32 now = TimeUtil::Now();
		if(now >= _playerData.nextIcReset)
		{
            if(World::getNewYearSpeedTime() && World::getNewYearSpeedTime(_playerData.nextIcReset))
            {
                UInt8 day = (TimeUtil::SharpDay(0, now) - _playerData.nextIcReset )/86400 ;
                UInt8 oldValue = getMaxIcCount(getVipLevel(),1);
                UInt32 value = getMaxIcCount(getVipLevel()) - _playerData.icCount + (day) * oldValue;
                if((value + oldValue) > 255 )
                    SetVar(VAR_NEWYEARSPEED_COUNT,255 - oldValue );
                else
                    SetVar(VAR_NEWYEARSPEED_COUNT,value );
            }
			_playerData.nextIcReset = TimeUtil::SharpDay(1, now);
			_playerData.icCount = 0;
			DB1().PushUpdateData("UPDATE `player` SET `icCount` = '%u|%u' WHERE `id` = %" I64_FMT "u", _playerData.icCount, _playerData.nextIcReset, _id);
		}
	}

	void Player::checkHPLoss()
	{
#if 0
		if(!hasStatus(FirstHPLoss))
		{
			Stream st(REP::GUIDE_RESPONSE_STEP);
			st << static_cast<UInt16>(1) << Stream::eos;
			send(st);
			addStatus(FirstHPLoss);
		}
#endif
	}

	void Player::checkDeath()
	{
#if 0
		if(!hasStatus(FirstDeath))
		{
			Stream st(REP::GUIDE_RESPONSE_STEP);
			st << static_cast<UInt16>(2) << Stream::eos;
			send(st);
			addStatus(FirstDeath);
		}
#endif
	}

    void Player::OnAddOneFriend()
    {
        GameAction()->doAttainment(this, Script::ADD_FRIEND,       _friends[0].size());
    }
    void Player::OnFriendLevUp(UInt8 nLev)
    {

        //一个好友的等级上升
        GameAction()->doAttainment(this, Script::ONE_FRIEND_LEV_UP, nLev);

        if(nLev < 50)
            return;
        UInt32 f80 = 0;
        UInt32 f50 = 0;
        std::set<Player *> :: iterator it = _friends[0].begin();

        while(it != _friends[0].end())
        {
            UInt8 curLev = (*it)->GetLev();
            if(curLev >= 50)
                f50 ++ ;
            if(curLev >= 80)
                f80 ++;
            it ++;
        }

        if(f80 >= 5)
        {
            GameAction()->doAttainment(this,  Script::FIVE_FRIEND_LEV_80, 0);
        }
        if(f50>= 5)
        {
            GameAction()->doAttainment(this,   Script:: FIVE_FRIEND_LEV_50, 0);
        }

    }

    static UInt8 cf_lvls[5] = {45, 50, 60, 70, LEVEL_MAX};
    void Player::tellCFriendLvlUp(UInt8 lvl)
    {
        if (!World::getCFriend())
            return;
        bool found = false;
        for (UInt8 i = 0; i < sizeof(cf_lvls)/sizeof(UInt8); ++i)
        {
            if (lvl < cf_lvls[i])
            {
                if (i)
                {
                    found = true;
                    lvl = cf_lvls[i-1];
                }
                break;
            }
        }

        if (!found)
            return;

        if (!_invitedBy)
            return;

        struct PlayerLvlUp
        {
            Player* player;
            UInt8 lvl;
        } msg;

        msg.player = this;
        msg.lvl = lvl;

        Player* player = globalPlayers[_invitedBy];
        if (!player)
            return;

        GameMsgHdr h(0x242,  player->getThreadId(), player, sizeof(msg));
        GLOBAL().PushMsg(h, &msg);
    }

    void Player::setCFriends()
    {
        UInt32 cfs[4] = {0};
        static UInt8 cf_nums[6] = {1, 3, 5, 10, 20, 30};
        for (std::set<Player *>::iterator it = _friends[3].begin();
                it != _friends[3].end(); ++it)
        {
            UInt8 lvl = (*it)->GetLev();
            for (UInt8 i = 0; i < sizeof(cf_lvls)/sizeof(UInt8); ++i)
            {
                if (lvl < cf_lvls[i] || lvl >= LEVEL_MAX)
                    break;
                ++cfs[i];
            }
        }

        for (UInt8 j = 0; j < sizeof(cfs)/sizeof(UInt32); ++j)
        {
            for (UInt8 i = 0; i < sizeof(cf_nums)/sizeof(UInt8); ++i)
            {
                if (cfs[j] < cf_nums[i])
                    break;
                GetCFriend()->setCFriendSafe(CF_45_1+6*j+i);
            }
        }
    }

    void Player::OnCFriendLvlUp(Player* player, UInt8 lvl)
    {
        if (!player || !lvl)
            return;
        if (!_hasCFriend(player))
            return;
        setCFriends();
    }

    void Player::OnCFriendAthleticsRank()
    {
        if(CURRENT_THREAD_ID() != getThreadId())
        {
            GameMsgHdr hdr(0x341, getThreadId(), this, 0);
            GLOBAL().PushMsg(hdr, NULL);
        }
        else
        {
            for (std::set<Player *>::iterator it = _friends[3].begin(); it != _friends[3].end(); ++it)
            {
                (*it)->setCFriendByRank();
            }
        }
    }

    void Player::setCFriendByRank()
    {
        UInt16 cf_AthRank[2] = {0}; //斗剑排名:500名,200名
        static UInt8 cf_AthRank_nums[] = {1, 2, 5, 10};
        for (std::set<Player *>::iterator it = _friends[3].begin(); it != _friends[3].end(); ++it)
        {
            if (gAthleticsRank.getAthleticsRankLocal(*it) <= 200)
                ++cf_AthRank[1];
            if (gAthleticsRank.getAthleticsRankLocal(*it) <= 500)
                ++cf_AthRank[0];
        }

        for (UInt8 j = 0; j < sizeof(cf_AthRank)/sizeof(UInt16); ++j)
        {
            for (UInt8 i = 0; i < sizeof(cf_AthRank_nums)/sizeof(UInt8); ++i)
            {
                if (cf_AthRank[j] < cf_AthRank_nums[i])
                    break;
                GetCFriend()->setCFriendSafe(CF_RANK500_1+4*j+i);
            }
        }
    }

	void Player::checkLevUp(UInt8 oLev, UInt8 nLev)
	{
        if(nLev >= 47)
        {
            UInt32 thisDay = TimeUtil::SharpDay();
            UInt32 endDay = TimeUtil::SharpDay(6, PLAYER_DATA(this, created));
            if(thisDay <= endDay)
            {
                UInt32 targetVal = GetVar(VAR_CLAWARD2);
                if (!(targetVal & TARGET_LEVEL))
                {
                    targetVal |= TARGET_LEVEL;
                    AddVar(VAR_CTS_TARGET_COUNT, 1);
                    SetVar(VAR_CLAWARD2, targetVal);
                    sendNewRC7DayTarget();
                    newRC7DayUdpLog(1152, 1);
                }
            }
        }
        
        if(World::getTowerLoginAct() && !GetVar(VAR_TOWER_LEVEL) && strcasestr(m_via.c_str(), "sscq_dlhd") && nLev >= 40)
        {
            SYSMSGV(title, 4106);
            SYSMSGV(content, 4107);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[6] = {{516,1},{509,1},{507,1},{56,3},{57,3},{503,1}};
                mailPackageManager.push(mail->id, mitem, 6, true);
            }
            SetVar(VAR_TOWER_LEVEL, 1);
        }

        sendFeastLoginAct();
        sendFeastGiftLoginAct();

        if(_clan != NULL)
        {
			_clan->broadcastMemberInfo(this);
		}
		m_TaskMgr->CheckCanAcceptTaskByLev(nLev);
		if ((nLev > 29 && !m_Athletics->hasEnterAthletics()) || (oLev < 40 && nLev > 39))
		{
			GameMsgHdr hdr(0x19E, WORKER_THREAD_WORLD, this, sizeof(nLev));
			GLOBAL().PushMsg(hdr, &nLev);
			setBlockBossByLevel();
		}
		Map * map = GetMap();
		if(map != NULL)
			map->OnPlayerLevUp(this);

		GameAction()->onLevelup(this, oLev, nLev);
        if (nLev >= 45)
            OnHeroMemo(MC_FIGHTER, MD_STARTED, 0, 2);
       tellCFriendLvlUp(nLev);

        //TELL my frined that my Level up  so get the Attainment!
        if(nLev == 50 || nLev == 80 || nLev == 100)
        {
            stAttainMsg  msg;
            msg .attainID = Script::ONE_FRIEND_LEV_UP;
            msg.param = nLev;
            std::set<Player *> :: iterator it = _friends[0].begin();
            while(it != _friends[0].end())
            {

                GameMsgHdr hdr(0x244, (*it)->getThreadId(), *it, sizeof(msg));
                GLOBAL().PushMsg(hdr, &msg);
                it ++ ;
            }
        }
        
        if(nLev >= 30)
        {
            GameMsgHdr hdr(0x193, WORKER_THREAD_WORLD, this, 0);
            GLOBAL().PushMsg(hdr, NULL);
        }

        if (nLev == 70)
        {
            GameMsgHdr hdr(0x1A7, WORKER_THREAD_WORLD, this, 0);
            GLOBAL().PushMsg(hdr, 0);
        }

       /* if(oLev < 60 && nLev >= 60)
        {
            SetVar(VAR_DROP_OUT_ITEM_MARK, 0);
        }*/

        if (nLev == 40 || nLev == 50 || nLev == 60 || nLev == 70 || nLev == 80 || nLev == 90 || nLev == 100)
            OnShuoShuo(nLev/10-4 + SS_40);

        if(nLev >= 40)
            MiLuZhiJiao();

        sendVipPrivilegeMail(nLev);
        getLevelAwardInfo();
        if(oLev < 80 && nLev >= 80)
        {
            for(std::map<UInt32, FairyPet *>::iterator it = _fairyPets.begin(); it != _fairyPets.end(); ++ it)
            {
                FairyPet* pet = it->second;
                if(!pet)
                    continue;
                pet->sendSevenSoul();
            }
        }
	}

    void Player::sendFormationList()
    {
        Stream st(REP::RANK_DATA);
        UInt8 cnt = _playerData.formations.size();
        st << static_cast<UInt8>(0) << cnt;
        for( int idx = 0; idx < cnt; ++ idx )
        {
            st << _playerData.formations[idx];
        }

        st << Stream::eos;
        send(st);
    }

    bool Player::formationLevUp(UInt16 formationId)
    {
        const GData::Formation* formation = GData::formationManager[formationId];
        if(formation == NULL)
            return false;

        Stream st(REP::RANK_DATA);
        st << static_cast<UInt8>(1);
        int cnt = formation->getLevUpItemCount();
        if(0 == cnt)
        {
            st << static_cast<UInt8>(0) << Stream::eos;
            send(st);

            SYSMSG_SENDV(2100, this, formation->getName().c_str());
            return false;
        }

        for( int idx = 0; idx < cnt; ++ idx )
        {
            UInt32 itemId = formation->LevUpItem(idx);
            if(0 == m_Package->GetItemAnyNum(itemId))
            {
                st << static_cast<UInt8>(0) << Stream::eos;
                send(st);
                const GData::ItemBaseType* item = GData::itemBaseTypeManager[itemId];
                if(item)
                    SYSMSG_SENDV(2101, this, item->getName().c_str());
                return false;
            }
        }

        UInt16 newFormationId = formationId + 1;
        const GData::Formation* newformation = GData::formationManager[newFormationId];
        if(NULL == newformation)
        {
            st << static_cast<UInt8>(0) << Stream::eos;
            send(st);

            SYSMSG_SENDV(2100, this, formation->getName().c_str());
            return false;
        }

        std::vector<UInt16>& act_form = _playerData.formations;
        int c = act_form.size();
        for( int idx = 0; idx < c; )
        {
            if( act_form[idx] == formationId )
            {
                act_form.erase(act_form.begin() + idx);
                c = act_form.size();
            }
            else
                ++idx;
        }

        addNewFormation(newFormationId, true);

        for( int idx = 0; idx < cnt; ++ idx )
        {
            m_Package->DelItemAny(formation->LevUpItem(idx), 1);
        }

        if(_playerData.formation == formationId)
			setFormation(newFormationId);

        st << static_cast<UInt8>(1) << Stream::eos;
        send(st);

        OnShuoShuo(SS_FMTLVLUP);
        return true;
    }

    bool Player::addNewFormation(UInt16 newformationId, bool writedb)
    {
        const GData::Formation* newformation = GData::formationManager[newformationId];
        if(NULL == newformation)
            return false;

        if(writedb && checkFormation_ID(newformationId))
        {
            SYSMSG_SENDV(2103, this);
            return false;
        }

        _playerData.formations.push_back(newformationId);

        if(!writedb)
            return true;

        std::string formations = "";
        formations += Itoa(_playerData.formations[0]);
        UInt8 cnt = _playerData.formations.size();
        UInt8 scnt = 0;

        if(_playerData.formations[0] %10 > 1)
            scnt ++ ;
        for(int idx = 1; idx < cnt; ++ idx)
        {
            formations += ",";
            formations += Itoa(_playerData.formations[idx]);

            if(_playerData.formations[idx] %10 > 1)
                scnt ++ ;
        }

        SYSMSG_SENDV(2104, this, newformation->getName().c_str());
        DB1().PushUpdateData("UPDATE `player` SET `formations` = '%s' WHERE id = %"  I64_FMT  "u", formations.c_str(), _id);

        //学习阵法的成就
        GameAction()->doAttainment(this,Script:: LEARNED_FORMATION, cnt);
        GameAction()->doAttainment(this,Script:: LEARNED_SFORMATION , scnt);
        Stream st(REP::RANK_DATA);
        st << static_cast<UInt8>(2) << newformationId << Stream::eos;
        send(st);

        return true;
    }

    void Player::setZhenyuan(UInt32 zhyId, UInt8 index)
    {
        if(index >= ZHENYUAN_MAXCNT || _playerData.zhenyuans[index])
            return;
        ItemZhenyuan * zhenyuan = static_cast<ItemZhenyuan *>(GetPackage()->GetEquip(zhyId));
        if(!zhenyuan || GetLev() < zhenyuan->getReqLev())
            return;
        UInt8 subClass = zhenyuan->getClass();
        if(!IsZhenYuan(zhenyuan->getClass()))
            return;
        if(subClass != static_cast<ItemClass>(index/3 + Item_Formula6)) //不是对应类型
            return;
        UInt8 fcnt = getFullFormationCnt();
        if(fcnt <= index || fcnt <= getZhenyuanCnt())
            return;
        UInt8 tmpcnt = 0;
        for(int i = index/3*3; i < (index/3+1)*3; ++ i)
        {
            ItemZhenyuan * izy = _playerData.zhenyuans[i];
            if(izy == zhenyuan)
                return;
            if(izy)
                ++ tmpcnt;
        }
        if(tmpcnt >= 3)
            return;
        bool res = setZhenyuan(zhenyuan, index);
        if(res)
        {
            setLineupDirty();
            Stream st(REP::XJFRONTMAP);
            st << static_cast<UInt8>(0x11) << zhyId << index;
            st << Stream::eos;
            send(st);
            static_cast<ItemEquip *>(zhenyuan)->DoEquipBind();
            GetPackage()->eraseEquip(zhenyuan->getId());
            GameAction()->doStrong(this, SthSetZhenYuan, 0, 0);
        }
    }

    bool Player::setZhenyuan(ItemZhenyuan * zhenyuan, UInt8 idx, bool writedb)
    {
        if(idx >= ZHENYUAN_MAXCNT)
            return false;
        if(_playerData.zhenyuans[idx] == zhenyuan)
            return false;
        if(_playerData.zhenyuans[idx])
            GetPackage()->AddExistEquip(static_cast<ItemEquip *>(_playerData.zhenyuans[idx]));
        _playerData.zhenyuans[idx] = zhenyuan;
        if(writedb)
            updateZhenyuansToDB();
        return true;
    }

    void Player::takedownZhenyuan(UInt32 zhyId)
    {
        bool find = false;
        for(int i = 0; i < ZHENYUAN_MAXCNT; ++ i)
        {
            if(_playerData.zhenyuans[i] && _playerData.zhenyuans[i]->getId() == zhyId)
            {
                setZhenyuan(static_cast<ItemZhenyuan *>(NULL), i);
                find = true;
                break;
            }
        }
        if(!find) return;
        setLineupDirty();

        Stream st(REP::XJFRONTMAP);
        st << static_cast<UInt8>(0x12) << zhyId;
        st << Stream::eos;
        send(st);
    }

    void Player::updateZhenyuansToDB()
    {
        std::string str;
        for(int i = 0; i < ZHENYUAN_MAXCNT; ++ i)
        {
            if(_playerData.zhenyuans[i])
                str += Itoa(_playerData.zhenyuans[i]->getId());
            else
                str += Itoa(0);
            if(i < ZHENYUAN_MAXCNT-1)
                str += ",";
        }
        DB1().PushUpdateData("UPDATE `player` SET `zhenyuans` = '%s' WHERE id = %"  I64_FMT  "u", str.c_str(), _id);
    }

    void Player::sendZhenyuansInfo()
    {
        checkTQSF();
        Stream st(REP::XJFRONTMAP);
        st << static_cast<UInt8>(0x10);
        st << GetVar(VAR_ZHENYUAN_TIQU_CNT);
        UInt16 flag = 0;
        size_t offset = st.size();
        st << flag;
        for(int i = 0; i < ZHENYUAN_MAXCNT; ++ i)
        {
            if(_playerData.zhenyuans[i])
            {
                flag |= 1 << i;
                st << _playerData.zhenyuans[i]->GetItemType().getId();
                st << _playerData.zhenyuans[i]->getId();
                _playerData.zhenyuans[i]->getZhyAttr().appendAttrToStream(st);
            }
        }
        st.data<UInt16>(offset)= flag;
        st << Stream::eos;
        send(st);
    }

    bool Player::checkTQSF()    //阵元提取神符
    {
        if(GetLev() < 75)
            return false;

        UInt32 now = TimeUtil::Now();
        UInt32 today = TimeUtil::SharpDayT(1, now);
        UInt32 lastDate = GetVar(VAR_ZHENYUAN_TIQU_DATE);
        lastDate = lastDate == 0 ? 0 :TimeUtil::SharpDayT(1, lastDate);
        UInt32 info = GetVar(VAR_ZHENYUAN_TIQU_CNT);

        UInt16 leftCnt = info;  //去除高16位
        if(today > lastDate)
        {
            if(leftCnt < 5)
                leftCnt = 5;
            SetVar(VAR_ZHENYUAN_TIQU_CNT, leftCnt);
            SetVar(VAR_ZHENYUAN_TIQU_DATE, now);
        }
        return true;
    }

    void Player::addZhenyuanTiQuTimes(UInt16 num)
    {
        if(!checkTQSF())
            return;
        if(0 == num) return;
        UInt32 info = GetVar(VAR_ZHENYUAN_TIQU_CNT);
        UInt16 leftCnt = info;  //去除高16位

        info = (info >> 16) << 16; //高16位值
        info |= leftCnt + num;
        SetVar(VAR_ZHENYUAN_TIQU_CNT, info);
        updateZhenyuanTiQu();
    }

    void Player::updateZhenyuanTiQu()
    {
        Stream st(REP::XJFRONTMAP);
        st << static_cast<UInt8>(0x14);
        st << GetVar(VAR_ZHENYUAN_TIQU_CNT);
        st << Stream::eos;
        send(st);
    }

    void Player::zhenyuanTiQu()
    {
        if(!checkTQSF())
            return;
        if(!hasChecked())
            return;
        if (GetPackage()->GetRestPackageSize(4) <= 0)
        {
            sendMsgCode(0, 1011);
            return;
        }
        UInt32 info = GetVar(VAR_ZHENYUAN_TIQU_CNT);
        UInt16 leftCnt = info;  //去除高16位
        UInt16 buyTimes = info >> 16;
        UInt32 lootId = GameAction()->getZhenyuanLootId((GetLev()-75)/5 + 1);
        const GData::LootItem* li = GData::lootTable[lootId];
        if(NULL == li) return;
        std::vector<GData::LootResult> lr;
        li->roll(lr);
        if (!lr.size())
            return;
        UInt32 itemId = lr[0].id;
        if(leftCnt > 0)
        {
            if(!GetPackage()->AddZhenYuan(itemId, true, true, FromZhenyuanTiQu))
                return;
            -- leftCnt;
        }
        else
        {
            UInt32 needGold = (buyTimes + 1) * 5;
			if (getGold() < needGold)
			{
				sendMsgCode(0, 1104);
				return;
			}
            if(!GetPackage()->AddZhenYuan(itemId, false, true, FromZhenyuanTiQu))
                return;
            ConsumeInfo ci(ZhenYuanCuiLian, 0, 0);
            useGold(needGold, &ci);
            ++ buyTimes;
        }
        info = (buyTimes << 16) | leftCnt;
        SetVar(VAR_ZHENYUAN_TIQU_CNT, info);
        updateZhenyuanTiQu();
    }

    void Player::addZhenyuanAttr(GData::AttrExtra& ae, Fighter * fgt)
    {
        if(!fgt || fgt->isPet()) return;
        UInt8 pos = 0xFF;
        for(UInt8 i = 0; i < 5; i++)
        {
            if(_playerData.lineup[i].fighter == fgt)
                pos = _playerData.lineup[i].pos;
        }
        switch(pos)
        {
            case 6: //前1 后3 右1 左3
                addZhenyuanAttr(ae, _playerData.zhenyuans[0], fgt);   //前1
                addZhenyuanAttr(ae, _playerData.zhenyuans[8], fgt);   //后3

                addZhenyuanAttr(ae, _playerData.zhenyuans[3], fgt);   //右1
                addZhenyuanAttr(ae, _playerData.zhenyuans[11], fgt);   //左3
                break;
            case 7: //前2 后2 右1 左3
                addZhenyuanAttr(ae, _playerData.zhenyuans[1], fgt);   //前2
                addZhenyuanAttr(ae, _playerData.zhenyuans[7], fgt);   //后2

                addZhenyuanAttr(ae, _playerData.zhenyuans[3], fgt);   //右1
                addZhenyuanAttr(ae, _playerData.zhenyuans[11], fgt);   //左3
                break;
            case 8: //前3 后1 右1 左3
                addZhenyuanAttr(ae, _playerData.zhenyuans[2], fgt);   //前3
                addZhenyuanAttr(ae, _playerData.zhenyuans[6], fgt);   //后1

                addZhenyuanAttr(ae, _playerData.zhenyuans[3], fgt);   //右1
                addZhenyuanAttr(ae, _playerData.zhenyuans[11], fgt);   //左3
                break;
            case 11: //前1 后3 右2 左2
                addZhenyuanAttr(ae, _playerData.zhenyuans[0], fgt);   //前1
                addZhenyuanAttr(ae, _playerData.zhenyuans[8], fgt);   //后3

                addZhenyuanAttr(ae, _playerData.zhenyuans[4], fgt);   //右2
                addZhenyuanAttr(ae, _playerData.zhenyuans[10], fgt);   //左2
                break;
            case 12: //前2 后2 右2 左2
                addZhenyuanAttr(ae, _playerData.zhenyuans[1], fgt);   //前2
                addZhenyuanAttr(ae, _playerData.zhenyuans[7], fgt);   //后2

                addZhenyuanAttr(ae, _playerData.zhenyuans[4], fgt);   //右2
                addZhenyuanAttr(ae, _playerData.zhenyuans[10], fgt);   //左2
                break;
            case 13: //前3 后1 右2 左2
                addZhenyuanAttr(ae, _playerData.zhenyuans[2], fgt);   //前3
                addZhenyuanAttr(ae, _playerData.zhenyuans[6], fgt);   //后1

                addZhenyuanAttr(ae, _playerData.zhenyuans[4], fgt);   //右2
                addZhenyuanAttr(ae, _playerData.zhenyuans[10], fgt);   //左2
                break;
            case 16: //前1 后3 右3 左1
                addZhenyuanAttr(ae, _playerData.zhenyuans[0], fgt);   //前1
                addZhenyuanAttr(ae, _playerData.zhenyuans[8], fgt);   //后3

                addZhenyuanAttr(ae, _playerData.zhenyuans[5], fgt);   //右3
                addZhenyuanAttr(ae, _playerData.zhenyuans[9], fgt);   //左1
                break;
            case 17: //前2 后2 右3 左1
                addZhenyuanAttr(ae, _playerData.zhenyuans[1], fgt);   //前2
                addZhenyuanAttr(ae, _playerData.zhenyuans[7], fgt);   //后2

                addZhenyuanAttr(ae, _playerData.zhenyuans[5], fgt);   //右3
                addZhenyuanAttr(ae, _playerData.zhenyuans[9], fgt);   //左1
                break;
            case 18: //前3 后1 右3 左1
                addZhenyuanAttr(ae, _playerData.zhenyuans[2], fgt);   //前3
                addZhenyuanAttr(ae, _playerData.zhenyuans[6], fgt);   //后1

                addZhenyuanAttr(ae, _playerData.zhenyuans[5], fgt);   //右3
                addZhenyuanAttr(ae, _playerData.zhenyuans[9], fgt);   //左1
                break;
            default:
                return;
        }
    }

    void Player::addZhenyuanAttr(GData::AttrExtra& ae, ItemZhenyuan * zhenyuan, Fighter * fgt)
    {
        if(!zhenyuan || !fgt) return;
        ItemZhenyuanAttr& zhyAttr = zhenyuan->getZhyAttr();
        for(int i = 0; i < 4; ++ i)
        {
            switch(zhyAttr.type[i])
            {
            case 1:
                ae.attack += zhyAttr.value[i];
                break;
            case 2:
                ae.magatk += zhyAttr.value[i];
                break;
            case 3:
                ae.defend += zhyAttr.value[i];
                break;
            case 4:
                ae.magdef += zhyAttr.value[i];
                break;
            case 5:
                ae.hp += zhyAttr.value[i];
                break;
            case 6:
                ae.toughlvl += zhyAttr.value[i];
                break;
            case 7:
                ae.action += zhyAttr.value[i];
                break;
            case 8:
                ae.hitrlvl += zhyAttr.value[i];
                break;
            case 9:
                ae.evdlvl += zhyAttr.value[i];
                break;
            case 10:
                ae.crilvl += zhyAttr.value[i];
                break;
            case 11:
                ae.pirlvl += zhyAttr.value[i];
                break;
            case 12:
                ae.counterlvl += zhyAttr.value[i];
                break;
            case 13:
                ae.mreslvl += zhyAttr.value[i];
                break;
            case 14:
                ae.criticaldmgimmune += zhyAttr.value[i] / 10000.0f;
                break;
            }
        }
        stZHYAttrConf& zhyAttrConf = GObjectManager::getZHYAttrConf();
        for(int i = 0; i < 2; ++ i)
        {
            stZhyExtraAttr * zhyea = zhyAttrConf.getExtraAttr(zhyAttr.typeExtra[i]);
            if(zhyea == NULL)
                continue;
            UInt8 type1 = zhyea->type1;
            UInt8 type2 = zhyea->type2;
            if(type1 == 1)  //全加
            {
                if(type2 == 1)  //力量
                    ae.strength += zhyAttr.valueExtra[i];
                else if(type2 == 2) //智力
                    ae.intelligence += zhyAttr.valueExtra[i];
                else if(type2 == 3) //耐力
                    ae.physique += zhyAttr.valueExtra[i];
                else if(type2 == 4) //敏捷
                    ae.agility += zhyAttr.valueExtra[i];
                else if(type2 == 5) //意志
                    ae.will += zhyAttr.valueExtra[i];
            }
            else if(type1 == 2)  //儒加
            {
                if(fgt->getClass() != e_cls_ru)
                    continue;
                if(type2 == 1)  //力量
                    ae.strength += zhyAttr.valueExtra[i];
                else if(type2 == 2) //智力
                    ae.intelligence += zhyAttr.valueExtra[i];
                else if(type2 == 3) //耐力
                    ae.physique += zhyAttr.valueExtra[i];
                else if(type2 == 4) //敏捷
                    ae.agility += zhyAttr.valueExtra[i];
                else if(type2 == 5) //意志
                    ae.will += zhyAttr.valueExtra[i];
            }
            else if(type1 == 3)  //释加
            {
                if(fgt->getClass() != e_cls_shi)
                    continue;
                if(type2 == 1)  //力量
                    ae.strength += zhyAttr.valueExtra[i];
                else if(type2 == 2) //智力
                    ae.intelligence += zhyAttr.valueExtra[i];
                else if(type2 == 3) //耐力
                    ae.physique += zhyAttr.valueExtra[i];
                else if(type2 == 4) //敏捷
                    ae.agility += zhyAttr.valueExtra[i];
                else if(type2 == 5) //意志
                    ae.will += zhyAttr.valueExtra[i];
            }
            else if(type1 == 4)  //道加
            {
                if(fgt->getClass() != e_cls_dao)
                    continue;
                if(type2 == 1)  //力量
                    ae.strength += zhyAttr.valueExtra[i];
                else if(type2 == 2) //智力
                    ae.intelligence += zhyAttr.valueExtra[i];
                else if(type2 == 3) //耐力
                    ae.physique += zhyAttr.valueExtra[i];
                else if(type2 == 4) //敏捷
                    ae.agility += zhyAttr.valueExtra[i];
                else if(type2 == 5) //意志
                    ae.will += zhyAttr.valueExtra[i];
            }
            else if(type1 == 5)  //墨加
            {
                if(fgt->getClass() != e_cls_mo)
                    continue;
                if(type2 == 1)  //力量
                    ae.strength += zhyAttr.valueExtra[i];
                else if(type2 == 2) //智力
                    ae.intelligence += zhyAttr.valueExtra[i];
                else if(type2 == 3) //耐力
                    ae.physique += zhyAttr.valueExtra[i];
                else if(type2 == 4) //敏捷
                    ae.agility += zhyAttr.valueExtra[i];
                else if(type2 == 5) //意志
                    ae.will += zhyAttr.valueExtra[i];
            }
        }
    }

	void Player::addTotalRecharge( UInt32 r )
	{
		if(r == 0)
			return;
        if(World::getPrivateRechargeAct())
            joinAllServerRecharge(r);
        setLuckyStarCondition();
        if(getLuckyStarAct())
        {
            AddVar(VAR_LUCKYSTAR_RECHARGE_TOTAL, r);
            sendLuckyStarInfo(2);
        }

		UInt32 oldVipLevel = _vipLevel;
		_playerData.totalRecharge += r;
		recalcVipLevel();
		if((cfg.limitLuckyDraw == 1 && oldVipLevel < 2) && _vipLevel >= 2)
		{
			sendModification(5, _playerData.status, false);
		}
		sendModification(7, _playerData.totalRecharge);
		if(!hasStatus(TopupRewarded))
		{
			oldVipLevel = 0;
			addStatus(TopupRewarded);
		}

        Stream stream(REQ::STATE);
        stream<<static_cast<UInt8>(0x19);
        stream<<r;
    //    stream<<_playerData.totalRecharge;
        stream<<Stream::eos;
        send(stream);

		sendVIPMails(oldVipLevel + 1, _vipLevel);
        addRC7DayRecharge(r);
        addRF7DayRecharge(r);
        addLuckyMeetRecharge(r);
        addSummerMeetRecharge(r);
        firstPotOfGold(r);
        if(World::get11Time())
        {
            UInt32 goldLeft = GetVar(VAR_AIRBOOK_RECHARGE)%30;
            AddVar(VAR_AIRBOOK_RECHARGE,r);
            Add11grade((r+goldLeft)/30*10);
            if(r>=1000 && getClan())
               SYSMSG_BROADCASTV(4956, getClan()->getName().c_str(),getCountry(), getPName());
        }
        if(World::getBaiFuBagTime())
        { 
            if(r >= 288 && GetVar(VAR_BAIFU_BAG_STATUE) == 0)
            {
                SetVar(VAR_BAIFU_BAG_STATUE,1);
                sendBaiFuBagInfo();
            }
        } 
        if(World::getXCTJTime())
        {
            UInt32 goldLeft = GetVar(VAR_XCTJ_RECHARGE)%80;
            m_Package->AddItem(16058, (goldLeft + r)/80, true, false);
            AddVar(VAR_XCTJ_RECHARGE,r);
        }
        if(World::getGGTime())
        {
            if(World::getGGTime() == 1)
            {
                UInt32 advanceOther = GetVar(VAR_GUANGGUN_ADVANCE_OTHER);
                if(advanceOther<24)
                {
                    sendGuangGunInfo();
                    UInt32 goldLeft = GetVar(VAR_GUANGGUN_RECHARGE)%100;
                    AddVar(VAR_GUANGGUN_RECHARGE,r);
                    UInt32 counts = (r+goldLeft)/100; 
                    counts = counts>24-advanceOther?24-advanceOther:counts;
                    AddVar(VAR_GUANGGUN_ADVANCE_NUM,counts);
                    AddVar(VAR_GUANGGUN_ADVANCE_OTHER,counts);
                    sendGuangGunInfo();
                }
            }
            if(World::getGGTime() == 2)
            {
                sendGuangGunInfo();
                UInt32 goldLeft = GetVar(VAR_GUANGGUN_RECHARGE)%80;
                AddVar(VAR_GUANGGUN_RECHARGE,r);
                UInt32 counts = (r+goldLeft)/80; 
                //AddVar(VAR_GUANGGUN_ADVANCE_NUM,counts);
                SYSMSGV(title, 5206);
                SYSMSGV(content, 5207);
                while(counts > 0)
                {
                    MailPackage::MailItem mitem[] = {{16021, 1}};
                    Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
                    if(counts > 255)
                    {
                        mitem[0].count = 255;
                        if(mail)
                            mailPackageManager.push(mail->id, mitem, 1, true);
                        counts -= 255;
                    }
                    else
                    {
                        mitem[0].count = counts;
                        if(mail)
                            mailPackageManager.push(mail->id, mitem, 1, true);
                        counts = 0;
                    }
                }
                sendGuangGunInfo();
            }
        }
        addRechargeNextRet(r);
        {
            GameMsgHdr hdr(0x1CA, WORKER_THREAD_WORLD, this, sizeof(_playerData.totalRecharge));
            GLOBAL().PushMsg(hdr, &_playerData.totalRecharge);
        }
        
        if (World::getRechargeActive())
        {
            UInt32 total = GetVar(VAR_RECHARGE_TOTAL);
            GameAction()->sendRechargeMails(this, total, total+r);
            SetVar(VAR_RECHARGE_TOTAL, total+r);
            SetVar(VAR_RECHARGE_TIME, TimeUtil::Now());
            sendRechargeInfo(true);
        }

        if (World::getRechargeActive3366() && atoi(m_domain) == 11)
        {
            UInt32 total = GetVar(VAR_RECHARGE_TOTAL3366);
            GameAction()->sendRechargeMails(this, total, total+r);
            SetVar(VAR_RECHARGE_TOTAL3366, total+r);
            SetVar(VAR_RECHARGE_TIME, TimeUtil::Now());
            sendRechargeInfo(true);
        }

        if(World::getJune())
        {
            UInt32 total = GetVar(VAR_JUNE_RECHARGE_TOTAL);
            UInt32 value = total % 20;
            value += r;
            total += r;
            SetVar(VAR_JUNE_RECHARGE_TOTAL, total);
            sendJuneRechargeMails(value);
        }

        UInt32 total = getBuffData(PLAYER_BUFF_YDOTR);
		if(World::_nationalDay)
        {
            if (total != (UInt32)(-1))
            {
                UInt32 oldVipLevel = calcYDVipLevel(total);
                total += r;
                UInt32 vipLevel = calcYDVipLevel(total);
                sendYDVIPMails(oldVipLevel + 1, vipLevel);
                if (vipLevel == 6)
                {
                    setBuffData(PLAYER_BUFF_YDOTR, static_cast<UInt32>(-1), true);
                }
                else
                    setBuffData(PLAYER_BUFF_YDOTR, total, true);
            }
        }
        else
        {
            if (total)
                setBuffData(PLAYER_BUFF_YDOTR, 0, true);
        }

#ifdef _FB // XXX: 单笔反利
        if (World::IsNewServer())
            GameAction()->onRechargeAct(this, r);
#endif

        sendTripodInfo();

        if(World::getRechargeActive())
        {
            GObject::RechargeTmpl::instance().addScore(this, GetVar(VAR_RECHARGE_TOTAL)-r, GetVar(VAR_RECHARGE_TOTAL));
            GObject::RechargeTmpl::instance().sendScoreInfo(this);
        }

        AddVar(VAR_FIRST_RECHARGE_VALUE, r);
        sendFirstRecharge();

        bool flag = false;

        UInt32 now = TimeUtil::Now();
        if ((GVAR.GetVar(GVAR_DISCOUNT_TYPE1) == 2)
                && GVAR.GetVar(GVAR_DISCOUNT_BEGIN1) < now
                && GVAR.GetVar(GVAR_DISCOUNT_END1) > now)
        {
            SetVar(VAR_DISCOUNT_EX1_TIME, GVAR.GetVar(GVAR_DISCOUNT_END1));
            AddVar(VAR_DISCOUNT_RECHARGE1, r);
            flag = true;
        }
        else
            SetVar(VAR_DISCOUNT_RECHARGE1, 0);
        if ((GVAR.GetVar(GVAR_DISCOUNT_TYPE2) == 2)
                && GVAR.GetVar(GVAR_DISCOUNT_BEGIN2) < now
                && GVAR.GetVar(GVAR_DISCOUNT_END2) > now)
        {
            SetVar(VAR_DISCOUNT_EX2_TIME, GVAR.GetVar(GVAR_DISCOUNT_END2));
            AddVar(VAR_DISCOUNT_RECHARGE2, r);
            flag = true;
        }
        else
            SetVar(VAR_DISCOUNT_RECHARGE2, 0);
        if ((GVAR.GetVar(GVAR_DISCOUNT_TYPE3) == 2)
                && GVAR.GetVar(GVAR_DISCOUNT_BEGIN3) < now
                && GVAR.GetVar(GVAR_DISCOUNT_END3) > now)
        {
            SetVar(VAR_DISCOUNT_EX3_TIME, GVAR.GetVar(GVAR_DISCOUNT_END3));
            AddVar(VAR_DISCOUNT_RECHARGE3, r);
            flag = true;
        }
        else
            SetVar(VAR_DISCOUNT_RECHARGE3, 0);
        if (flag)
            sendDiscountLimit();


        if (now >= GVAR.GetVar(GVAR_TOTALRECHARGEACT_S) && now <= GVAR.GetVar(GVAR_TOTALRECHARGEACT_E))
        {
            AddVar(VAR_TOTALRECHARGEACT, r);
        }

        AddVar(VAR_RECHARGE_TODAY, r);

        GameAction()->onRecharge(this, r);
        if(WORLD().getAccRecharge())
            sendTodayRechargeInfo();
        checkZCJB(r);

        AddZRYJCount(r);
        AddQZoneRecharge(r);
        if(World::getTYSSTime())
            AddLingGuo(r);//天元神兽
        //SetVar(VAR_DROP_OUT_ITEM_MARK, 0);
    }

    void Player::addRechargeNextRet(UInt32 r)
    {
        if (!World::getRechargeNextRet())
            return;
        if (World::_rechargenextretstart > World::_rechargenextretend)
            return;
        UInt32 now = TimeUtil::Now();
        if (now < World::_rechargenextretstart || now >= World::_rechargenextretend)
            return;
        UInt32 off = (now - World::_rechargenextretstart) / DAY_SECS;
        if (off > 60)
            return;
        UInt32 size = rechargs.size();
        if (off >= size)
            rechargs.resize(off+1, RNR());

        rechargs[off].date = TimeUtil::SharpDay(0, now);
        rechargs[off].recharge += r;

        Stream st(REP::DAILY_DATA);
        st << static_cast<UInt8>(14) << static_cast<UInt8>(off+1) << rechargs[off].recharge << Stream::eos;
        send(st);

        updateRNR2DB();
    }

    void Player::updateRNR2DB()
    {
        std::string str;
        UInt32 size = rechargs.size();
        for (UInt32 i = 0; i < size; ++i)
        {
            str += Itoa(rechargs[i].date);
            str += ",";
            str += Itoa(rechargs[i].recharge);
            if(i != size - 1)
                str += "|";
        }
		DB1().PushUpdateData("REPLACE INTO `rechargenextret` VALUES (%" I64_FMT "u, '%s')", getId(), str.c_str());
    }

    void Player::loadRNRFromDB(const std::string& str)
    {
        // XXX: 如果超出活动时间处理
        if (str.empty())
            return;
        StringTokenizer rs(str, "|");
        UInt32 count = rs.count();
        if (count)
        {
            rechargs.resize(count, RNR());
            for (UInt32 i = 0; i < count; ++i)
            {
                StringTokenizer t(rs[i], ",");
                if (t.count() == 2)
                {
                    rechargs[i].date = atoi(t[0].c_str());
                    rechargs[i].recharge = atoi(t[1].c_str());
                }
            }
        }
    }

    void Player::sendRNR(UInt32 now)
    {
        UInt32 size = rechargs.size();
        for (UInt32 i = 0; i < size; ++i)
        {
            UInt32 date = rechargs[i].date;
            UInt32 recharge = rechargs[i].recharge;

            if (date && recharge && (date >= TimeUtil::SharpDay(0, World::_rechargenextretstart)) &&
                    (date < TimeUtil::SharpDay(0, World::_rechargenextretend)) &&
                    (now >= (TimeUtil::SharpDay(0, date) + 13 * DAY_SECS)) &&
                    (now < (TimeUtil::SharpDay(0, date) + 13 * DAY_SECS + 3 * DAY_SECS)))
            {
                struct SendRNR
                {
                    Player* player;
                    UInt32 off;
                    UInt32 date;
                    UInt32 total;
                } rnr;

                rnr.player = this;
                rnr.off = (now - date) / (24 * 60 * 60) - 13;
                rnr.date = date;
                rnr.total = recharge;
                GameMsgHdr hdr(0x249, getThreadId(), this, sizeof(rnr));
                GLOBAL().PushMsg(hdr, &rnr);
            }
        }
    }

    void Player::sendRechargeNextRetInfo(UInt32 now)
    {
        if (now >= World::_rechargenextretstart &&
                now < (TimeUtil::SharpDay(0, World::_rechargenextretend) + 13 * DAY_SECS + 2 * DAY_SECS))
        {
            Stream st(REP::DAILY_DATA);
            UInt8 sz = rechargs.size();
            st << static_cast<UInt8>(13) << static_cast<UInt8>(sz);
            for (UInt8 i = 0; i < sz; ++i)
                st << rechargs[i].recharge;
            st << Stream::eos;
            send((st));
        }
    }

    void Player::sendTodayRechargeInfo()
    {
        Stream st(REP::DAILY_DATA);
        st << static_cast<UInt8>(19) << GetVar(VAR_RECHARGE_TODAY) << static_cast<UInt8>(GetVar(VAR_RECHARGE_CONDCNT)) << Stream::eos;
        send((st));
    }

    void Player::sendRechargeInfo(bool rank)
    {
        if (!World::getRechargeActive() && !World::getRechargeActive3366())
            return;

        UInt32 total;
        if(World::getRechargeActive())
            total = GetVar(VAR_RECHARGE_TOTAL);
        else
            total = GetVar(VAR_RECHARGE_TOTAL3366);

        Stream st(REP::DAILY_DATA);
        st << static_cast<UInt8>(12) << total << Stream::eos;
        send((st));
           
        if (rank && World::getNeedRechargeRank())
        {
            GameMsgHdr hdr(0x1C1, WORKER_THREAD_WORLD, this, sizeof(total));
            GLOBAL().PushMsg(hdr, &total);
        }
    }

    void Player::sendConsumeInfo(bool rank)
    {
        if (!World::getConsumeActive())
            return;

        UInt32 total = GetVar(VAR_CONSUME);
		Stream st(REP::DAILY_DATA);
		st << static_cast<UInt8>(15) << total << Stream::eos;
		send((st));

        if (rank && World::getNeedConsumeRank())
        {
            GameMsgHdr hdr(0x1C2, WORKER_THREAD_WORLD, this, sizeof(total));
            GLOBAL().PushMsg(hdr, &total);
        }
    }

	void Player::sendTopupMail(const char* title, const char* content, UInt32 gold, UInt8 num)
	{
		m_MailBox->newMail(NULL, 0x01, title, content);
		DBLOG1().PushUpdateData("insert into `topup_num`(`server_id`, `player_id`, `topup_gold`, `rand_num`, `topup_time`) values(%u, %" I64_FMT "u, %u, %u, %u)", cfg.serverLogId, getId(), gold, num, TimeUtil::Now());
	}

	void Player::setTotalRecharge( UInt32 r )
	{
		if(r == _playerData.totalRecharge)
			return;
		_playerData.totalRecharge = r;
		if(cfg.limitLuckyDraw == 1 && _vipLevel < 2)
		{
			recalcVipLevel();
			if(_vipLevel >= 2)
				sendModification(5, _playerData.status, false);
		}
		else
			recalcVipLevel();
		sendModification(7, _playerData.totalRecharge);
	}

	void Player::genOnlineRewardItems()
	{
        UInt32 now = TimeUtil::Now();
        _playerData.nextRewardTime = GData::GDataManager::GetOnlineAwardTime(_playerData.rewardStep) + now;
		writeOnlineRewardToDB();
	}

	void Player::writeOnlineRewardToDB()
	{
		DB1().PushUpdateData("UPDATE `player` SET `nextReward` = '%u|%u|%u|%u' WHERE `id` = %" I64_FMT "u", _playerData.rewardStep, _playerData.nextRewardItem, _playerData.nextRewardCount, _playerData.nextRewardTime, _id);
	}

	bool Player::takeOnlineReward()
	{
		UInt32 now = TimeUtil::Now();
		//if(_playerData.lastOnline + _playerData.nextRewardTime > now + 60)
		if(now < _playerData.nextRewardTime)
			return false;

        const std::vector<UInt16>& ids = GData::GDataManager::GetOnlineAward(GetClass(),  _playerData.rewardStep);
        UInt8 size = ids.size();
        if (!size)
            return false;

        for (UInt8 i = 0; i < size; i += 2)
        {
            //ItemBase* item = 
            m_Package->Add(ids[i], ((UInt8)(i+1)>=ids.size())?1:ids[i+1], true, false, FromOnlineAward);
            //if(!item)
                // return false;
                //; // XXX: ugly
        }

        UInt8 count = GData::GDataManager::GetOnlineAwardCount();
        ++_playerData.rewardStep;
		if(_playerData.rewardStep >= count) {
			_playerData.rewardStep = count;

            Stream st(REP::REWARD_DRAW);
            st << static_cast<UInt16>(-1) << static_cast<UInt8>(0);
            st << Stream::eos;
            send(st);
            return true;
        }

		genOnlineRewardItems();
		return true;
	}

	UInt32 Player::getOnlineReward()
	{
		UInt32 now = TimeUtil::Now();
		if(_playerData.nextRewardTime == 0)
		{
            _playerData.rewardStep = 0;
			genOnlineRewardItems();
		}
        else
        {
            if (_playerData.rewardStep >= GData::GDataManager::GetOnlineAwardCount())
            {
                _playerData.nextRewardTime = -1;
                return -1;
            }
        }
        if (_playerData.nextRewardTime <= now)
            return 0;
        return _playerData.nextRewardTime - now;
	}

	void Player::sendOnlineReward()
	{
		Stream st(REP::REWARD_DRAW);
        UInt32 left = getOnlineReward();
        if (left == static_cast<UInt32>(-1))
        {
            st << static_cast<UInt16>(-1) << static_cast<UInt8>(0);
            st << Stream::eos;
            send(st);
            return ;
        }
        else
            st << static_cast<UInt16>(left);

        size_t pos = st.size();
        st << static_cast<UInt8>(0);

        UInt8 n = 0;
        const std::vector<UInt16>& ids = GData::GDataManager::GetOnlineAward(GetClass(),  _playerData.rewardStep);
        UInt8 size = ids.size();
        if (size)
        {
            for (; n < size; n+=2)
            {
                st << ids[n];
                if (n+1 >= size)
                {
                    st << static_cast<UInt8>(1);
                    break;
                }
                else
                    st << static_cast<UInt8>(ids[n+1]);
            }
        }

        st.data<UInt8>(pos) = (n+1)/2;
        st << Stream::eos;
		send(st);
	}

	struct Dungeon_Enum
	{
		Player * player;
		Stream& st;
	};

	bool enum_dm(Dungeon * dg, Dungeon_Enum * de)
	{
		dg->buildInfo(de->player, de->st);
		return true;
	}

    void Player::GetDailyTask(UInt8& shimenF, UInt8& shimenMax, UInt8& yamenF, UInt8& yamenMax, UInt8& clanF, UInt8& clanMax)
    {
        //UInt32 vipLevel = getVipLevel();
        if (!isOffical() && getShiMenMax() < _playerData.smFinishCount)
        {
            _playerData.smFinishCount = 0;
            writeShiMen();
        }
        if (!isOffical() && getYaMenMax() < _playerData.ymFinishCount)
        {
            _playerData.ymFinishCount = 0;
            writeYaMen();
        }
        if (!isOffical() && getClanTaskMax() < _playerData.ctFinishCount)
        {
            _playerData.ctFinishCount = 0;
            writeClanTask();
        }

        shimenF = _playerData.smFinishCount > getShiMenMax() ? getShiMenMax() : _playerData.smFinishCount;
        shimenMax = getShiMenMax();

        yamenF = _playerData.ymFinishCount > getYaMenMax() ? getYaMenMax() : _playerData.ymFinishCount;
        yamenMax = getYaMenMax();

        clanF =  _playerData.ctFinishCount > getClanTaskMax() ? getClanTaskMax() : _playerData.ctFinishCount;
        clanMax = getClanTaskMax();
    }

    void Player::GetFuben(UInt8& copy, UInt8& copyMax, UInt8& dung, UInt8& dungMax, UInt8& format, UInt8& formatMax )
    {
        UInt32 vipLevel = getVipLevel();
        UInt8 freeCnt, goldCnt;
        playerCopy.getCount(this, &freeCnt, &goldCnt, true);

        UInt8 currentCnt, totalCnt;
        if(this->isBD() && World::getBlueDiamondAct()) {
            currentCnt = this->GetVar(VAR_DIAMOND_BLUE);
            totalCnt = 1;
            if(currentCnt > totalCnt)
                currentCnt = 0;
        } else if (this->isYD() && World::getYellowDiamondAct()) {
            currentCnt = this->GetVar(VAR_DIAMOND_YELLOW);
            totalCnt = 1;
            if(currentCnt > totalCnt)
                currentCnt = 0;
        } else {
            currentCnt = 0;
            totalCnt = 0;
        }

        UInt8 currentCnt2 = 0;
        UInt8 totalCnt2 = 0;
        if(this->isQQVIP() && World::getQQVipAct()){
            currentCnt2 = this->GetVar(VAR_QQVIP_CNT);
            totalCnt2 = 1;
            if(currentCnt2 > totalCnt2)
                currentCnt2 = 0;
        }
        copy = freeCnt + goldCnt + currentCnt + currentCnt2;
        copyMax = GObject::PlayerCopy::getFreeCount() + GObject::PlayerCopy::getGoldCount(vipLevel) + totalCnt + totalCnt2;

        checkDungeonTimeout(TimeUtil::Now());
        /*
        UInt32 now = TimeUtil::Now();
        if(now >= _playerData.dungeonEnd)
        {
            _playerData.dungeonCnt = 0;
            _playerData.dungeonCnt1 = 0;
        }
        */
        dung = _playerData.dungeonCnt;
        dungMax = GObject::Dungeon::getMaxCount() + GObject::Dungeon::getExtraCount(vipLevel);

        UInt8 fcnt = frontMap.getCount(this); // XXX: lock???
        format = GObject::FrontMap::getFreeCount()+GObject::FrontMap::getGoldCount(vipLevel)-(((fcnt&0xf0)>>4)+(fcnt&0xf));
        formatMax = GObject::FrontMap::getFreeCount()  +    GObject::FrontMap::getGoldCount(vipLevel);

    }
	void Player::sendDailyInfo()
	{
		Stream st(REP::DAILY_DATA);
		st << static_cast<UInt8>(1);
        UInt32 curtime = TimeUtil::Now();
		UInt32 vipLevel = getVipLevel();
        if (!isOffical() && getShiMenMax() < _playerData.smFinishCount)
        {
            _playerData.smFinishCount = 0;
            writeShiMen();
        }
        if (!isOffical() && getYaMenMax() < _playerData.ymFinishCount)
        {
            _playerData.ymFinishCount = 0;
            writeYaMen();
        }
        if (!isOffical() && getClanTaskMax() < _playerData.ctFinishCount)
        {
            _playerData.ctFinishCount = 0;
            writeClanTask();
        }
        if (!_playerData.clanTaskId && !isOffical() && getClanTaskMax() > _playerData.ctFinishCount)
        {
            _playerData.clanTaskId = getClanTask();
        }

        UInt8 iccnt = getMaxIcCount(vipLevel) - getIcCount();
        if (getMaxIcCount(vipLevel) < getIcCount())
            iccnt = getMaxIcCount(vipLevel);
        st << iccnt << static_cast<UInt8>(getShiMenMax() >= _playerData.smFinishCount ? getShiMenMax() - _playerData.smFinishCount : 0) << getShiMenMax() << static_cast<UInt8>(getYaMenMax() >= _playerData.ymFinishCount ? getYaMenMax() - _playerData.ymFinishCount : 0) << getYaMenMax() << static_cast<UInt8>(getClanTaskMax() > _playerData.ctFinishCount ? getClanTaskMax() - _playerData.ctFinishCount : 0);
        st << calcNextBookStoreUpdate(curtime) << calcNextTavernUpdate(curtime);
		//bossManager.buildInfo(st);
        UInt8 cnt = playerCopy.getCopySize(this);
        UInt8 freeCnt, goldCnt;
        playerCopy.getCount(this, &freeCnt, &goldCnt, true);

        UInt8 currentDiamondCnt;
        UInt8 totalDiamondCnt;
        if(this->isBD() && World::getBlueDiamondAct()) {
            currentDiamondCnt = this->GetVar(VAR_DIAMOND_BLUE);
            totalDiamondCnt = 1;
            if(currentDiamondCnt > totalDiamondCnt)
                currentDiamondCnt = 0;
        } else if (this->isYD() && World::getYellowDiamondAct()) {
            currentDiamondCnt = this->GetVar(VAR_DIAMOND_YELLOW);
            totalDiamondCnt = 1;
            if(currentDiamondCnt > totalDiamondCnt)
                currentDiamondCnt = 0;
        } else {
            currentDiamondCnt = 0;
            totalDiamondCnt = 0;
        }

        UInt8 currentCnt2 = 0;
        UInt8 totalCnt2 = 0;
        if(this->isQQVIP() && World::getQQVipAct()){
            currentCnt2 = this->GetVar(VAR_QQVIP_CNT);
            totalCnt2 = 1;
            if(currentCnt2 > totalCnt2)
                currentCnt2 = 0;
        }

        st << cnt << static_cast<UInt8>(freeCnt + goldCnt + currentDiamondCnt + currentCnt2) << static_cast<UInt8>(GObject::PlayerCopy::getFreeCount()) << static_cast<UInt8>(GObject::PlayerCopy::getGoldCount(vipLevel)) << static_cast<UInt8>(totalDiamondCnt) << static_cast<UInt8>(totalCnt2);
        if(cnt)
        {
            playerCopy.buildInfo(this, st);
        }
        UInt8 cnt_xianjie = cnt;

        checkDungeonTimeout(TimeUtil::Now());
        /*
        UInt32 now = TimeUtil::Now();
        if(now >= _playerData.dungeonEnd)
        {
            _playerData.dungeonCnt = 0;
            _playerData.dungeonCnt1 = 0;
        }
        */

        cnt = dungeonManager.size();
        st << cnt << _playerData.dungeonCnt << GObject::Dungeon::getMaxCount(0) << GObject::Dungeon::getExtraCount(vipLevel,0);
        st << _playerData.dungeonCnt1 << GObject::Dungeon::getMaxCount(1) << GObject::Dungeon::getExtraCount(vipLevel,1);
        if(cnt)
        {
            Dungeon_Enum de = {this, st};
            dungeonManager.enumerate(enum_dm, &de);
        }

        cnt = frontMap.getFrontMapSize(this);
        UInt8 fcnt = frontMap.getCount(this); // XXX: lock???
        st << cnt << static_cast<UInt8>(GObject::FrontMap::getFreeCount()+GObject::FrontMap::getGoldCount(vipLevel)-(((fcnt&0xf0)>>4)+(fcnt&0xf))) << static_cast<UInt8>(GObject::FrontMap::getFreeCount()) << static_cast<UInt8>(GObject::FrontMap::getGoldCount(vipLevel));
        if(cnt)
        {
            frontMap.buildInfo(this, st);
        }
        
        cnt = xjfrontMap.getFrontMapSize(this);
        UInt8 fcnt1 = xjfrontMap.getCount(this); // XXX: lock???
        st << cnt << static_cast<UInt8>(GObject::XJFrontMap::getFreeCount()+GObject::XJFrontMap::getGoldCount()-(((fcnt1&0xf0)>>4)+(fcnt1&0xf))) << static_cast<UInt8>(GObject::XJFrontMap::getFreeCount()) << static_cast<UInt8>(GObject::XJFrontMap::getGoldCount());
        if(cnt)
        {
            xjfrontMap.buildInfo(this, st);
        }

        st << cnt_xianjie << static_cast<UInt8>(GetVar(VAR_FAIRYCOPY_FREE) + GetVar(VAR_FAIRYCOPY_GOLD) + currentDiamondCnt + currentCnt2) << static_cast<UInt8>(GObject::PlayerCopy::getFreeCount()) << static_cast<UInt8>(GObject::PlayerCopy::getGoldCount(vipLevel)) << static_cast<UInt8>(totalDiamondCnt) << static_cast<UInt8>(totalCnt2);
        if(cnt_xianjie)
        {
            playerCopy.buildInfo(this, st);
        }
#if 0
		size_t sz;
		UInt16 * prices = Dungeon::getPrice(sz);
		st << static_cast<UInt8>(sz);
		for(size_t i = 0; i < sz; ++ i)
			st << prices[i];
#endif
		st << Stream::eos;
		send((st));

        worldBoss.sendDaily(this);
        serverWarBoss.sendDaily(this);
        //heroIsland.sendDaily(this);
        newHeroIsland.sendDaily(this);
        globalCountryBattle.sendDaily(this);
        teamCopyManager->sendDaily(this, 7);
        teamCopyManager->sendDaily(this, 11);

        if(WORLD().getAccRecharge())
            sendTodayRechargeInfo();
	}

	void Player::regenAll(bool full)
	{
		for(int i = 0; i < 5; ++ i)
		{
			Lineup& pd = _playerData.lineup[i];
			if(pd.fighter != NULL && (pd.fighter->getCurrentHP() != 0 || full))
                    pd.fighter->setCurrentHP(0);
		}
	}

    void Player::setHPPercent(UInt8 p)
    {
        for(int i = 0; i < 5; ++ i)
		{
			Lineup& pd = _playerData.lineup[i];
			if(pd.fighter != NULL)
			{
                pd.fighter->addHPPercent(p);
			}
		}
    }
    UInt8 Player::GetFullPotFighterNum()
    {
        UInt8 num = 0 ;
        std::map<UInt32, Fighter *> ::iterator it = _fighters.begin();
        while(it != _fighters.end())
        {
            if(it->second->getPotential() >= GObjectManager::getMaxPotential()/100 )
                num ++ ;
            it ++ ;
        }
        return num;
    }

    UInt8 Player::GetFullCapFighterNum()
    {
        UInt8 num = 0 ;
        std::map<UInt32, Fighter *> ::iterator it = _fighters.begin();
        while(it != _fighters.end())
        {
            if(it->second->getCapacity() >= GObjectManager::getMaxCapacity()/100 )
                num ++;
            it ++ ;
        }
        return num;
    }

	UInt8 Player::trainFighter( UInt32 id, UInt8 type )
	{
#define ITEM_TRAIN_TYPE1 506         // 补髓丹(不带保护) 资质
#define ITEM_TRAIN_TYPE2 507         // 补髓益元丹(带保护) 资质
#define ITEM_TRAIN_TYPE3 508         // 凝神丹(不带保护) 潜力
#define ITEM_TRAIN_TYPE4 509         // 凝神易经丹(带保护) 潜力
		Fighter * fgt = findFighter(id);
		if(fgt == NULL)
			return 1;

        if (type > 4 && (type&0xF) == 5)
        {
            UInt8 lock = type >> 4;
            UInt8 ret = fgt->forge(0, lock);
            if (!ret)
                fgt->updateForgeAttr();
            return ret;
        }

        bool isPotential = false;
        float p = 0;
		UInt32 rate = 0;
        UInt32 itemId = ITEM_TRAIN_TYPE1 + type - 1;

        if(type == 1 || type == 2)
        {
		    p = fgt->getCapacity();
            if(p > GObjectManager::getMaxCapacity()/100 - 0.001)
                return 1;
            std::vector<UInt32>& chance = GObjectManager::getCapacityChance();
            size_t cnt = chance.size();
            for(UInt32 idx = 0; idx < cnt; idx ++)
            {
                if(p < static_cast<float>(CHANCECOND(chance[idx]))/100)
                {
                    rate = CHANCEVALUE(chance[idx]);
                    break;
                }
            }
        }
        else if(type == 3 || type == 4)
        {
            isPotential = true;
		    p = fgt->getPotential();
            if(p > GObjectManager::getMaxPotential()/100 - 0.001)
                return 1;
            std::vector<UInt32>& chance = GObjectManager::getPotentialChance();
            size_t cnt = chance.size();
            for(UInt32 idx = 0; idx < cnt; idx ++)
            {
                if(p < static_cast<float>(CHANCECOND(chance[idx]))/100)
                {
                    rate = CHANCEVALUE(chance[idx]);
                    break;
                }
            }
        }

		Fighter * fgt_orig = globalFighters[id];
		if(fgt_orig == NULL)
			return 1;

		if(rate == 0)
			return 1;

		if(!m_Package->DelItemAny(itemId, 1, NULL, ToTrainFighter))
			return 2;

        if(isPotential)
            OnHeroMemo(MC_FIGHTER, MD_MASTER, 0, 0);
        else
            OnHeroMemo(MC_FIGHTER, MD_MASTER, 0, 1);

        bool bMainFighter = isMainFighter( fgt->getId()) ;
		if(uRand(1000) < rate)
		{
            if(isPotential)
            {
                p += 0.01f;
                p = floorf(p * 100.0f + 0.5f) / 100.0f;

                bool bFull = false;
                if(p >=  GObjectManager::getMaxPotential()/100)
                {
                    p = GObjectManager::getMaxPotential()/100;
                    bFull = true;

                }
                fgt->setPotential(p);

                if(bFull)
                {
                    //触发潜力满 成就
                    UInt8 num = GetFullPotFighterNum();

                    GameAction()->doAttainment(this, Script::FIGHTER_POT_FULL , num);
                    if(num == 10 && GetFullCapFighterNum() == 10)
                    {
                        //十个人全满
                        GameAction()->doAttainment(this, Script::TEN_FIGHTER_PC_FULL, 10);
                    }
                }

                if(bMainFighter)
                {
                    //主将潜力增加成就
                    GameAction()->doAttainment(this, Script:: MainFighterColChange ,fgt->getColor());
                    GameAction()->doAttainment(this, Script:: MainFighterFullPot ,  static_cast<UInt32>(p));

                }

                if (p >= 1.5f && p < 1.505f)
                {
                    if (isMainFighter(fgt->getId()))
                    {
                        SYSMSG_BROADCASTV(2200, getCountry(), getName().c_str(), fgt->getColor(), getName().c_str());
                    }
                    else
                    {
                        SYSMSG_BROADCASTV(2200, getCountry(), getName().c_str(), fgt->getColor(), fgt->getName().c_str());
                    }

#ifdef _FB
                    if (World::getTrainFighter() && _trainFightersAct.find(fgt->getId()) == _trainFightersAct.end())
                    {
                        GameAction()->onTrainFighterAct(this, fgt);
                        _trainFightersAct.insert(fgt->getId());
                    }
#endif
                }
            }
            else
            {
                p += 0.1f;
                p = floorf(p * 10.0f + 0.5f) / 10.0f;

                bool bFull = false;
                if(p >= GObjectManager::getMaxCapacity()/100)
                {
                    p = GObjectManager::getMaxCapacity()/100;
                    bFull = true;
                }

                fgt->setCapacity(p);
                if(bFull)
                {
                    UInt8 num = GetFullCapFighterNum();
                    //资质练满
                    GameAction()->doAttainment(this, Script::FIGHTER_CAP_FULL  , num);

                    if(num == 10 && GetFullPotFighterNum() == 10)
                    {
                        //十个人全满

                        GameAction()->doAttainment(this,Script::TEN_FIGHTER_PC_FULL  , 10);
                    }

                    if(bMainFighter)
                        //主将潜质练满
                        GameAction()->doAttainment(this, Script::MainFighterCapFull , 0);

                }

                if(bMainFighter)
                {
                    GameAction()->doAttainment(this, Script:: AddMainFighterCapacity , static_cast<UInt32>(p));
                }

                if (p >= 7.0f && p <= 7.05f)
                {
                    if (isMainFighter(fgt->getId()))
                    {
                        SYSMSG_BROADCASTV(2201, getCountry(), getName().c_str(), fgt->getColor(), getName().c_str());
                    }
                    else
                    {
                        SYSMSG_BROADCASTV(2201, getCountry(), getName().c_str(), fgt->getColor(), fgt->getName().c_str());

                    }
                }
            }
		}
		else
		{
			if(type == 1 || type == 3)
			{
                if(isPotential)
                {
                    float decp = fgt->getPotential() - 0.01f;
                    if (decp < static_cast<float>(GObjectManager::getMinPotential())/100)
                        decp = static_cast<float>(GObjectManager::getMinPotential())/100;
                    /*
                    if (decp < fgt_orig->getPotential())
                        decp = fgt_orig->getPotential();
                    */
                    fgt->setPotential(decp);
                }
                else
                {
                    float decp = fgt->getCapacity() - 0.1f;
                    if (decp < static_cast<float>(GObjectManager::getMinCapacity())/100)
                        decp = static_cast<float>(GObjectManager::getMinCapacity())/100;
                    /*
                    if (decp < fgt_orig->getCapacity())
                        decp = fgt_orig->getCapacity();
                    */
                    fgt->setCapacity(decp);
                }
			}
			return 1;
		}

        if (fgt->getPotential() + 0.005f >= 1.2f)
            fgt->getAttrType2(true);
        if (fgt->getPotential() + 0.005f >= 1.5f && fgt->getCapacity() >= 7.0f)
            fgt->getAttrType3(true);

#ifdef _FB
        if (bMainFighter && World::getFighter1368())
        {
            if (fgt->getPotential() + 0.005f >= 1.3f && fgt->getCapacity() >= 6.8f && !GetVar(VAR_FIGHTER1_3_6_8))
            {
                SetVar(VAR_FIGHTER1_3_6_8, 1);

                SYSMSG(title, 3000);
                SYSMSG(content, 3001);
                Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFD0000);
                if(mail)
                {
                    MailPackage::MailItem mitem[1] = {{30,6}};
                    mailPackageManager.push(mail->id, mitem, 1, true);

                    std::string strItems;
                    for (int i = 0; i < 1; ++i)
                    {
                        strItems += Itoa(mitem[i].id);
                        strItems += ",";
                        strItems += Itoa(mitem[i].count);
                        strItems += "|";
                    }
                    DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
                }
            }
        }
#endif

		return 0;
	}

	void Player::sendAllFightersInfoToGM()
	{
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
		{
			SYSMSG_SENDV(604, this, it->second->getId(), it->second->getColor(), it->second->getName().c_str(), it->second->getLevel(), it->second->getPotential());
		}
	}

	void Player::pendExp( UInt32 exp, bool leaveCity, bool writedb )
	{
        isDoubleExp(exp);
		_playerData.lastExp += exp;
		if(leaveCity)
			_playerData.lastExp |= 0x80000000;

        //fprintf(stderr, "%s: %s\n", __PRETTY_FUNCTION__, writedb?"true":"false");
        if (writedb)
            DB1().PushUpdateDataL("UPDATE `player` SET `lastExp` = %u WHERE `id` = %" I64_FMT "u", _playerData.lastExp, _id);
	}

	void Player::pendTael( UInt32 t )
	{
		_playerData.lastResource = (_playerData.lastResource & 0xFFFFFFFFFFFF0000ull) | ((_playerData.lastResource & 0xFFFFull) + t);
		DB1().PushUpdateData("UPDATE `player` SET `lastResource` = %u WHERE `id` = %" I64_FMT "u", _playerData.lastResource, _id);
	}

	void Player::pendCoupon( UInt32 c )
	{
		_playerData.lastResource = (_playerData.lastResource & 0xFFFFFFFF0000FFFFull) | ((((_playerData.lastResource >> 16) + static_cast<UInt64>(c)) & 0xFFFFull) << 16);
		DB1().PushUpdateData("UPDATE `player` SET `lastResource` = %u WHERE `id` = %" I64_FMT "u", _playerData.lastResource, _id);
	}

	void Player::pendCoin( UInt32 c )
	{
		_playerData.lastResource = (_playerData.lastResource & 0xFFF00000FFFFFFFFull) | ((((_playerData.lastResource >> 32) + static_cast<UInt64>(c)) & 0xFFFFFull) << 32);
		DB1().PushUpdateData("UPDATE `player` SET `lastResource` = %u WHERE `id` = %" I64_FMT "u", _playerData.lastResource, _id);
	}

	void Player::pendAchievement( UInt32 a )
	{
		_playerData.lastResource = (_playerData.lastResource & 0x000FFFFFFFFFFFFFull) | (((_playerData.lastResource >> 52) + static_cast<UInt64>(a)) << 52);
		DB1().PushUpdateData("UPDATE `player` SET `lastResource` = %u WHERE `id` = %" I64_FMT "u", _playerData.lastResource, _id);
	}

	void Player::setTavernInterval( UInt32 inter )
	{
		_tavernInterval = inter;
	}

	void Player::setTavernRate( UInt32 rate )
	{
		_tavernRate = rate;
	}

    void Player::setRecruitCost(UInt32 recruit_cost)
    {
        _recruit_cost = recruit_cost;
    }

    void Player::setShiMenActiveCount(UInt8 c)
    {
        _shiMenActiveCount = c;
    }

    void Player::setYaMenActiveCount(UInt8 c)
    {
        _yaMenActiveCount = c;
    }

    void Player::setTavernBlueCount(UInt32 tavernBlueCount)
    {
        _tavernBlueCount = tavernBlueCount;
    }

    void Player::setTavernPurpleCount(UInt32 tavernPurpleCount)
    {
        _tavernPurpleCount = tavernPurpleCount;
    }

    void Player::setTavernOrangeCount(UInt32 tavernOrangeCount)
    {
        _tavernOrangeCount = tavernOrangeCount;
    }

	void Player::setNextExtraReward( UInt32 ner )
	{
		_playerData.nextExtraReward = ner;
		DB1().PushUpdateData("UPDATE `player` SET `nextExtraReward` = %u WHERE `id` = %" I64_FMT "u", _playerData.nextExtraReward, _id);
	}

	bool Player::isDungeonPassed( UInt8 id ,UInt8 difficulty)
	{
		Dungeon * dg = dungeonManager[id];
		if(dg == NULL)
			return false;
		return dg->getFirstPass(this,difficulty) > 0;
	}

#if 0
	void Player::sendFriendActList()
	{
		size_t sz = _friendActs.size();
		Stream st(REP::FRIEND_STATUS);
		st << static_cast<UInt8>(sz);
		for(size_t i = 0; i < sz; ++ i)
		{
			appendFriendAct(st, _friendActs[i]);
		}
		st << Stream::eos;
		send(st);
	}
#endif

	void Player::appendFriendAct( Stream& st, FriendActStruct* fas )
	{
		st << fas->type << fas->player->getCountry() << fas->player->getName();
		switch(fas->type)
		{
		case 1:
		case 2:
		case 3:
		case 4:
			st << fas->target->getCountry() << fas->target->getName();
			break;
		case 5:
			st << fas->str;
			break;
		case 6:
			st << static_cast<UInt16>(fas->num);
			break;
		case 7:
		case 8:
			st << static_cast<UInt8>(fas->num);
			break;
		}
	}

#if 0
	void Player::pushFriendAct( FriendActStruct * fas )
	{
		if(_friendActs.size() > 14)
		{
			FriendActStruct * fas_ = _friendActs[0];
			delete fas_;
			_friendActs.erase(_friendActs.begin());
		}
		_friendActs.push_back(fas);
		if(_isOnline)
		{
			Stream st(REP::FRIEND_STATUS);
			st << static_cast<UInt8>(0xFF);
			appendFriendAct(st, fas);
			st << Stream::eos;
			send(st);
		}
	}
#endif

	bool Player::CheckFriendPray(UInt64 playerId)
    {
        UInt32 now = TimeUtil::Now();
        std::map<UInt64,UInt32 >::iterator it_pray =_prayFriend.find(playerId);
        if(it_pray!=_prayFriend.end() && TimeUtil::SharpDay(0, now) == TimeUtil::SharpDay(0, it_pray->second) )
            return true;
        return false;
    }
	bool Player::CheckPresentToday(UInt64 playerId)
    {
        UInt32 now = TimeUtil::Now();
        std::map<UInt64,std::vector<StuPresentBox> >::iterator it_present =_present.find(playerId);
        if(it_present!=_present.end())
        {
            std::vector<StuPresentBox> presents = it_present->second;
            for(UInt32 i =0 ;i<presents.size();++i)
                if( TimeUtil::SharpDay(0, now) == TimeUtil::SharpDay(0, presents.at(i).sendtime) )
                    return true;
        }
        return false;
    }


    bool Player::testCanAddFriend( Player * pl )
	{
		Mutex::ScopedLock lk(_mutex);
		Mutex::ScopedLock lk2(pl->getMutex());
		if(isFriendFull())
		{
			sendMsgCode(2, 1503);
			return false;
		}
		if(_hasFriend(pl))
		{
			return false;
		}
		if(_hasBlock(pl))
		{
			sendMsgCode(2, 1500);
			return false;
		}
#if 0
		if(_hasFoe(pl))
		{
			sendMsgCode(2, 1500);
			return false;
		}
#endif
		if(pl->isFriendFull())
		{
			sendMsgCode(2, 1504);
			return false;
		}
		if(pl->_hasBlock(this))
		{
			sendMsgCode(2, 1502);
			return false;
		}
#if 0
		if(pl->_hasFoe(this))
		{
			sendMsgCode(2, 1500);
			return false;
		}
#endif
		return true;
	}

	bool Player::testCanAddCFriend( Player * pl )
	{
		Mutex::ScopedLock lk(_mutex);
		Mutex::ScopedLock lk2(pl->getMutex());
		if(isCFriendFull())
			return false;

		if(_hasCFriend(pl))
			return false;

#if 0
		if(_hasBlock(pl))
		{
			sendMsgCode(2, 1500);
			return false;
		}
#endif

		if(pl->isCFriendFull())
			return false;

#if 0
		if(pl->_hasBlock(this))
		{
			sendMsgCode(2, 1502);
			return false;
		}
#endif
		return true;
	}

    bool Player::testCanAddTeamMember(Player * pl)
    {
        if(pl == NULL) return false;
		Mutex::ScopedLock lk(_mutex);
		Mutex::ScopedLock lk2(pl->getMutex());
        if(pl->GetLev() < LIMIT_LEVEL)
		{
			sendMsgCode(2, 2010, LIMIT_LEVEL);
			return false;
		}
        if(pl->getTeamArena())
		{
			sendMsgCode(2, 1336);
			return false;
		}
        if(!getTeamArena())
		{
			sendMsgCode(2, 1337);
			return false;
		}
        if(getTeamArena()->leader != this)
		{
			sendMsgCode(2, 2009);
			return false;
		}
        if(getTeamArena()->isFull())
		{
			sendMsgCode(2, 1335);
			return false;
		}
        if(getTeamArena()->isInArena())
        {
            sendMsgCode(0, 1339);
            return false;
        }
        return true;
    }

    bool Player::checkCanBuyItem(UInt32 itemId, UInt8 type)
    {
        UInt8 limitLvl = GData::store.getItem2LimitLevel(itemId, type);
        if(limitLvl == 0)
            return true;
        if(!getTeamArena())
            return false;
        if(getTeamArena()->getMemberLvl(this) >= limitLvl)
            return true;
        return false;
    }

	std::string& Player::fixName( std::string& name )
	{
        if(cfg.merged && !name.empty())if(static_cast<UInt8>(*(name.end() - 1)) >= 32 && !_playerData.name.empty())
		{
			const std::string& pn = _playerData.name;
			size_t idx = pn.size() - 1;
			for(; idx > 0; -- idx)
			{
				if(static_cast<UInt8>(pn[idx]) >= 32)
					break;
			}
			name.insert(name.end(), pn.begin() + idx + 1, pn.end());
		}
        return name;
	}

    std::string Player::getRealName()
    {
        if(cfg.merged && !_playerData.name.empty())
        {
            std::string name = _playerData.name;
            Int32 index = name.size() - 1;
            for (; index > 0; --index)
            {
                if(static_cast<UInt8>(name[index]) >= 32)
                    break;
            }
            name.resize(index + 1);
            return name;
        }
        return _playerData.name;
    }

    void Player::patchDeleteDotS(std::string& name)
    {
        if(cfg.merged && !name.empty())
        {
            UInt16 serverNo;
            std::string nameTmp = name;
            size_t pos = nameTmp.find(".S");
            if(pos == std::string::npos)
                pos = nameTmp.find(".s");
            if(pos == std::string::npos)
                return;
            if(pos + 2 >= nameTmp.size())
                return;
            std::string tmp(nameTmp.begin()+pos+2, nameTmp.end());
            serverNo = atoi(tmp.c_str());
            if(serverNo == (this->getId() >> 48))
            {
                nameTmp.erase(nameTmp.begin()+pos, nameTmp.end());
                name = nameTmp;
            }
        }
    }

    void Player::patchMergedName( UInt64 id, std::string& name )
	{
		if(cfg.merged && id >= 0x1000000000000ull)
		{
			UInt32 sid = static_cast<UInt32>(id >> 48) - 1;
			do
			{
				name.push_back(static_cast<char>((sid % 31) + 1));
				sid /= 31;
			}
			while(sid > 0);
		}
	}
#if 0
    static char nameStr[2048];
    const char* Player::patchShowName(const char* name, const UInt64 playerId)
    {
        if(cfg.merged)
        {
            unsigned short len = 0;
            const char *pname = name;
            while(pname[len] && len < 2048)
                ++len;
            strncpy(nameStr, name, len);
#if 0
            char a = nameStr[len - 1];
            char b = nameStr[len - 2];
            char serverNo = a * 31 + b;
            nameStr[len - 2] = '\0';
#else
            unsigned char a;
            unsigned char serverNo = 0;
            for(unsigned short i = len; i >= 1 && i >= len - 1; i--)
            {
                a = static_cast<unsigned char>(nameStr[i - 1]) - static_cast<unsigned char>(1);
                if(a > static_cast<unsigned char>(31))
                    break;
                serverNo = serverNo * static_cast<unsigned char>(31) + a;
                nameStr[i -1] = '\0';
            }
            serverNo += 1; //起点从0开始
#endif
            if(playerId != 0 && serverNo != static_cast<unsigned char>(playerId >> 48))
            {
                char tmp[32];
                sprintf(tmp, ".S%d", serverNo);
                strcat(nameStr, tmp);
            }
            return reinterpret_cast<const char*>(nameStr);
        }
        return name;
    }
#endif
    const char* Player::getNameNoSuffix(std::string name)
    {
        if(!cfg.merged || name.size() == 0)
        {
            _playerData.nameNoSuffix = name;
            return _playerData.nameNoSuffix.c_str();
        }
        Int32 len = name.size() - 1;
        for (; len > 0; --len)
        {
            if (static_cast<UInt8>(name[len]) >= 32)
                break;
        }
        name.resize(len+1);
        _playerData.nameNoSuffix = name;
        return _playerData.nameNoSuffix.c_str();
    }

    std::string& Player::getOriginName(std::string& name)
    {
        if(cfg.merged)
		{
			name = _playerData.name;
            size_t idx = name.size() - 1;
            for(; idx > 0; -- idx)
            {
                if(static_cast<UInt8>(name[idx]) >= 32)
                    break;
            }
            name.resize(idx+1);
        }
        else
        {
            name = _playerData.name;
        }

        return name;
    }

	void Player::sendYDVIPMails( UInt8 l, UInt8 h )
	{
		if(l < 1)
			l = 1;
		if(h > 6)
			h = 6;

		for(UInt32 j = l; j <= h; ++j)
		{
			SYSMSG(title, 2110);
			SYSMSGV(content, 2111);
			Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
			if(mail == NULL)
                return;

			MailPackage::MailItem mitem[2] = {{0,0},};
			UInt32 mcount = 0;
            std::string strItems;

			const UInt32 vipTable[7][4] =
            {
                {56,2,0,0},
                {57,3,0,0},
                {GObject::MailPackage::Coupon,1000,0,0}, // --
                {502,10,503,20},
                {515,20,0,0},
                {509,20,507,20},
                {0,0,0,0},
            };

			const UInt32 * t = vipTable[j-1];
			for(UInt32 i = 0; i < 4 && t[i] > 0; i += 2)
			{
				mitem[mcount].id = t[i];
				mitem[mcount++].count = t[i+1];
				strItems += Itoa(t[i]);
				strItems += ",";
				strItems += Itoa(t[i+1]);
				strItems += "|";
			}

			mailPackageManager.push(mail->id, mitem, mcount, true);
			DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
        }
    }

	void Player::sendVIPMails( UInt8 l, UInt8 h )
	{
		if(l < 1)
			l = 1;
		if(h > 15)
			h = 15;
		for(UInt32 j = l; j <= h; ++j)
		{
			const UInt32 vipTable[16][12] =
            {
                {450,1,0,0,0,0,0,0,0,0,0,0},
                {451,1,0,0,0,0,0,0,0,0,0,0},
                {452,1,0,0,0,0,0,0,0,0,0,0},
                {453,1,0,0,0,0,0,0,0,0,0,0},
                {454,1,0,0,0,0,0,0,0,0,0,0},
                {455,1,0,0,0,0,0,0,0,0,0,0},
                {456,1,0,0,0,0,0,0,0,0,0,0},
                {457,1,0,0,0,0,0,0,0,0,0,0},
                {458,1,0,0,0,0,0,0,0,0,0,0},
                {459,1,0,0,0,0,0,0,0,0,0,0},
                {460,1,0,0,0,0,0,0,0,0,0,0},
                {461,1,0,0,0,0,0,0,0,0,0,0},
                {462,1,0,0,0,0,0,0,0,0,0,0},
                {463,1,0,0,0,0,0,0,0,0,0,0},
                {464,1,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0},
            };

			SYSMSG(title, 256);
			SYSMSGV(content, 257, vipTable[j-1][0]);
			Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
			if(mail == NULL)
				continue;

			MailPackage::MailItem mitem[6];
			UInt32 mcount = 0;
            std::string strItems;

			const UInt32 * t = vipTable[j-1];
			for(UInt32 i = 0; i < 12 && t[i] > 0; i += 2)
			{
				mitem[mcount].id = t[i];
				mitem[mcount++].count = t[i+1];
				strItems += Itoa(t[i]);
				strItems += ",";
				strItems += Itoa(t[i+1]);
				strItems += "|";
			}

            // XXX: 改成发礼包，在礼包使用里给装备 yangyoufa@ 23/02/12 10:21:47
#if 0
            if (j >= 5) // XXX: 玩家等级橙色装备x1
            {
                UInt16 id = getRandOEquip(GetLev());
                mitem[mcount].id = id;
                mitem[mcount++].count = 1;
				strItems += Itoa(id);
				strItems += ",";
				strItems += Itoa(1);
            }
#endif

			mailPackageManager.push(mail->id, mitem, mcount, true);
			DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
		}
	}

	void Player::sendRechargeMails( UInt8 l, UInt8 h, UInt8 m )
	{
		if(l < 1)
			l = 1;
		if(h > m)
			h = m;

		for(UInt32 j = l; j <= h; ++j)
		{
			SYSMSGV(title, 2320, levelToRecharge(j));
			SYSMSGV(content, 2321, levelToRecharge(j));
			Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
			if(mail == NULL)
				continue;

#if 0
            //春节充值活动额度
			const UInt32 vipTable[16][14] =
            {
                {430,2,0,0,0,0,0,0,0,0,0,0,0,0},
                {430,2,6006,2,0,0,0,0,0,0,0,0,0,0},
                {431,2,6006,3,6008,1,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,1000,MailPackage::Coupon,20,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,2000,MailPackage::Coupon,40,0,0,0,0,0,0,0,0,0,0},
                {432,2,6006,5,507,2,509,2,6008,3,30,2,MailPackage::Coupon,500},
                {MailPackage::Tael,3000,MailPackage::Coupon,60,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,4000,MailPackage::Coupon,80,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,5000,MailPackage::Coupon,100,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,6000,MailPackage::Coupon,120,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,7000,MailPackage::Coupon,140,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,8000,MailPackage::Coupon,160,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,9000,MailPackage::Coupon,180,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Tael,10000,MailPackage::Coupon,200,0,0,0,0,0,0,0,0,0,0},
                {432,10,6008,6,507,5,509,5,30,10,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            };
            // XXX: 2012年03月充值反利活动
			const UInt32 vipTable[16][14] =
            {
                {514,3,0,0,0,0,0,0,0,0,0,0,0,0},
                {503,3,0,0,0,0,0,0,0,0,0,0,0,0},
                {516,3,0,0,0,0,0,0,0,0,0,0,0,0},
                {514,5,503,5,516,5,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,80,0,0,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,100,0,0,0,0,0,0,0,0,0,0,0,0},
                {507,2,509,2,30,10,MailPackage::Coupon,100,0,0,0,0,0,0},
                {MailPackage::Coupon,120,0,0,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,140,0,0,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,160,0,0,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,180,0,0,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,200,0,0,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,220,0,0,0,0,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,240,0,0,0,0,0,0,0,0,0,0,0,0},
                {515,10,507,10,509,10,30,10,MailPackage::Coupon,300,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            };
            //2012年5月16充值反利活动
			const UInt32 vipTable[16][14] =
            {
                {503,3,514,4,9012,5,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,50,9012,5,0,0,0,0,0,0,0,0,0,0},
                {516,3,514,6,9012,5,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,75,9013,5,0,0,0,0,0,0,0,0,0,0},
                {501,6,513,2,56,3,57,3,9013,5,0,0,0,0},
                {MailPackage::Coupon,100,9013,5,0,0,0,0,0,0,0,0,0,0},
                {515,3,505,4,9014,5,0,0,0,0,0,0,0,0},
                {MailPackage::Coupon,200,9014,5,0,0,0,0,0,0,0,0,0,0},
                {507,3,509,3,56,2,57,2,9014,5,0,0,0,0},
                {MailPackage::Coupon,300,9015,5,0,0,0,0,0,0,0,0,0,0},
                {515,10,30,10,56,5,57,5,9015,5,0,0,0,0},
                {507,3,509,3,515,3,547,5,9015,5,0,0,0,0},
                {507,5,509,5,515,5,547,5,9016,5,0,0,0,0},
                {507,7,509,7,515,7,547,5,9016,5,0,0,0,0},
                {507,10,509,10,515,10,547,5,9016,5,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            };
#else
            //2012年6月6日充值反利活动
			const UInt32 vipTable[18][14] =
            {
                {503,2,514,1,509,1,0,0,0,0,0,0,0,0},
                {500,3,56,6,57,2,509,1,0,0,0,0,0,0},
                {508,2,56,6,57,5,509,1,0,0,0,0,0,0},
                {511,6,466,6,509,1,0,0,0,0,0,0,0,0},
                {516,3,512,2,509,1,0,0,0,0,0,0,0,0},
                {5065,1,56,5,509,1,0,0,0,0,0,0,0,0},
                {503,5,56,6,57,2,509,1,0,0,0,0,0,0},
                {515,2,56,6,57,2,509,2,0,0,0,0,0,0},
                {515,2,56,6,57,5,509,2,0,0,0,0,0,0},
                {515,2,56,6,57,6,509,2,0,0,0,0,0,0},
                {549,2,56,6,57,6,509,2,0,0,0,0,0,0},
                {515,5,30,10,56,5,57,5,509,3,0,0,0,0},
                {507,5,509,5,515,5,547,5,0,0,0,0,0,0},
                {507,10,509,10,515,5,547,5,0,0,0,0,0,0},
                {507,10,509,10,515,10,547,5,0,0,0,0,0,0},
                {507,15,509,15,515,15,547,5,0,0,0,0,0,0},
                {507,20,509,20,515,20,547,10,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            };
#endif

			MailPackage::MailItem mitem[7];
			UInt32 mcount = 0;
            std::string strItems;

			const UInt32 * t = vipTable[j-1];
			for(UInt32 i = 0; i < 14 && t[i] > 0; i += 2)
			{
                if (!t[i])
                    break;

				mitem[mcount].id = t[i];
				mitem[mcount++].count = t[i+1];
				strItems += Itoa(t[i]);
				strItems += ",";
				strItems += Itoa(t[i+1]);
				strItems += "|";
			}

			mailPackageManager.push(mail->id, mitem, mcount, true);
			DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
		}
	}

    void Player::sendJuneRechargeMails(UInt32 value)
    {
        UInt32 count = value / 20;
        if(count > 0)
        {
			SYSMSGV(title, 2324);
			SYSMSG(content, 2325);
            int cnt = count / 255;
            int left = count % 255;
            std::string strItems;
            for(int i = 0; i < cnt; ++ i)
            {
                Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
                if(mail == NULL)
                    return;

                MailPackage::MailItem mitem;
                mitem.id = 9028;
                mitem.count = 255;
                strItems += Itoa(mitem.id);
                strItems += ",";
                strItems += Itoa(255);
                strItems += "|";

                mailPackageManager.push(mail->id, &mitem, 1, true);

                DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, Activity, title, content, strItems.c_str(), mail->recvTime);
            }
            if(left > 0)
            {
                Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
                if(mail == NULL)
                    return;
                MailPackage::MailItem mitem;
                mitem.id = 9028;
                mitem.count = left;
                strItems += Itoa(mitem.id);
                strItems += ",";
                strItems += Itoa(left);
                strItems += "|";

                mailPackageManager.push(mail->id, &mitem, 1, true);

                DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, Activity, title, content, strItems.c_str(), mail->recvTime);
            }
        }
    }

	void Player::sendBlockBossMail(UInt8 l, UInt8 h)
	{
		UInt16 coupon = 0;
		if(h > 24)
		{
			for(UInt8 i = l; i < h; i ++)
			{
				if(i % 4 == 0)
					coupon += 5 * (i / 4 - 5);
			}

			if(coupon > 0)
			{
				MailPackage::MailItem mitem[1] = {{MailPackage::Coupon, coupon}};
				MailItemsInfo itemsInfo(mitem, Activity, 1);
				SYSMSG(title, 545);
				SYSMSGV(content, 546, coupon);
				Mail * pmail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000, true, &itemsInfo);
				if(pmail != NULL)
				{
					mailPackageManager.push(pmail->id, mitem, 1, false);
				}
			}
		}
	}

	void Player::setTicketCount(UInt32 cnt, bool writedb)
	{
		_exchangeTicketCount = cnt;
		if(writedb)
		{
			DB1().PushUpdateData("REPLACE INTO `exchange_ticket` VALUES(%" I64_FMT "u, %u)", getId(), _exchangeTicketCount);
			DBLOG1().PushUpdateData("replace into `exchange_ticket` VALUES(%u, %" I64_FMT "u, %u)", cfg.serverLogId, getId(), _exchangeTicketCount);
		}
	}

	void Player::setBlockBossByLevel()
	{
		UInt16 index = (_bossLevel - 21) % 4;
		UInt16 npcId = 0;
		if(_bossLevel < 81)
			npcId = 4800;
		else
			npcId = 4900;
		GData::NpcGroups::iterator it = GData::npcGroups.find(npcId + index);
		if(it == GData::npcGroups.end())
		{
			_ng = NULL;
			return;
		}
		_ng = it->second;
	}


	void Player::setBossLevel(UInt8 lvl, bool writedb)
	{
		if(_bossLevel == lvl)
			return;
		_bossLevel = lvl;
		if(writedb)
			DB1().PushUpdateData("UPDATE `player` SET `bossLevel` = %u WHERE id = %" I64_FMT "u", _bossLevel, getId());
		setBlockBossByLevel();
	}


	bool Player::attackBlockBoss()
	{
		if(GetLev() < 30)
			return false;
		if(_ng == NULL)//error
			return false;
		if(_bossLevel % 4 == 0 && GetFreePackageSize() < 1)
		{
			sendMsgCode(0, 1011);
			return false;
		}
		UInt32 now = TimeUtil::Now();
		UInt32 buffLeft = getBuffData(PLAYER_BUFF_ATTACKING, now);
		if(buffLeft > now)
		{
			sendMsgCode(0, 1407, buffLeft - now);
			return false;
		}

		Battle::BattleSimulator bsim(_playerData.location, this, _ng->getName(), static_cast<UInt8>(_bossLevel));

		PutFighters(bsim, 0);
		std::vector<GData::NpcFData>& nflist = _ng->getList();
		size_t size = nflist.size();
		bsim.setFormation(1, _ng->getFormation());
		bsim.setPortrait(1, nflist[0].fighter->favor);
		Fighter *fgt_clone[25] = { NULL };
		for(size_t i = 0; i < size; ++ i)
		{
			GData::NpcFData& nfdata = nflist[i];
			fgt_clone[i] = nfdata.fighter->cloneWithEquip(NULL);
			fgt_clone[i]->setLevel(static_cast<UInt8>(_bossLevel));
			Battle::BattleFighter *bf = bsim.newFighter(1, nfdata.pos, fgt_clone[i]);
			bf->setAttrExtra(1, bf->getClass(), _bossLevel);
		}
		bsim.start();
		bsim.applyFighterHP(0, this, !hasFlag(CountryBattle | ClanBattling | ClanRankBattle));
		for(size_t i = 0; i < size; ++ i)
		{
			SAFE_DELETE(fgt_clone[i]);
		}
		Stream& packet = bsim.getPacket();
		if(packet.size() <= 8)
			return false;
		Stream st(REP::ATTACK_NPC);
		bool isWin = bsim.getWinner() == 1;
		UInt8 sz = 0;
		GData::LootResult lt;
		UInt16 couponCount = 0;
		if(isWin)
		{
			st << static_cast<UInt16>(0x0101);
			if(_bossLevel % 4 == 0)
			{
				const static UInt16 dietyFavor[] = {5825, 5826, 5827, 5828};
				const static UInt16 orangeFavor[] = {5820, 5821, 5822, 5823, 5824};
				const static UInt16 purpleFavor[] = {5813, 5814, 5815, 5816, 5817, 5818, 5819};
				if(_bossLevel < 84)
				{
					const UInt8 favorCount[] = {1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
					UInt16 index = _bossLevel / 4 - 6;
					lt.id = purpleFavor[uRand(7)];
					lt.count = favorCount[index];
				}
				else if(_bossLevel < 128)
				{
					const UInt8 favorCount[] = {2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4};
					UInt16 index = _bossLevel / 4 - 21;
					lt.id = orangeFavor[uRand(5)];
					lt.count = favorCount[index];
				}
				else
				{
					lt.id = dietyFavor[uRand(4)];
					if(_bossLevel < 144)
						lt.count = 2;
					else if(_bossLevel < 160)
						lt.count = 3;
					else
						lt.count = 4;
				}
				couponCount = 5 * (_bossLevel / 4 - 5);//fix /////////
				pendCoupon(couponCount);
				m_Package->AddItem(lt.id, lt.count, true, true);
				_lastLoot.push_back(lt);
				sz = 1;
				addStatus(TopupRewarded);
			}

			setBossLevel(_bossLevel + 1);
			UInt8 buffer[7];
			*reinterpret_cast<UInt8 *>(buffer) = GetLev();
			*reinterpret_cast<UInt8 *>(buffer + 1) = _bossLevel;
			*reinterpret_cast<UInt16 *>(buffer + 2) = couponCount;
			*reinterpret_cast<UInt16 *>(buffer + 4) = lt.id;
			*reinterpret_cast<UInt8 *>(buffer + 6) = static_cast<UInt8>(lt.count);
			GameMsgHdr hdr(0x1A4, WORKER_THREAD_WORLD, this, 7);
			GLOBAL().PushMsg(hdr, buffer);

		}
		else
		{
			st << static_cast<UInt16>(0x0100);
		}
		st << 0 << static_cast<UInt8>(0);
		st << sz;
		if(sz != 0)
			st << lt.id << lt.count;
		st.append(&packet[8], packet.size() - 8);
        st << static_cast<UInt64>(0);
		st << Stream::eos;
		send(st);

		setBuffData(PLAYER_BUFF_ATTACKING, 2 * bsim.getTurns() + now);

		return isWin;
	}

    void Player::OnDoAttainment(UInt32 attId,   UInt32 param)
    {
        GameAction()->doAttainment(this, attId, param);
    }

    void Player::OnHeroMemo(UInt8 chapter, UInt8 diff, UInt8 group, UInt8 item)
    {
        if (CURRENT_THREAD_ID() != getThreadId())
        {
            UInt8 msg[4] = {chapter, diff, group, item};
            GameMsgHdr h(0x240,  getThreadId(), this, sizeof(msg));
            GLOBAL().PushMsg(h, &msg);
        }
        else
            GetHeroMemo()->setMemo(chapter, diff, group, item, 1);
    }

    void Player::OnShuoShuo(UInt8 idx)
    {
        if (!World::getShuoShuo())
            return;
        if (CURRENT_THREAD_ID() != getThreadId())
        {
            GameMsgHdr h(0x243,  getThreadId(), this, sizeof(idx));
            GLOBAL().PushMsg(h, &idx);
        }
        else
        {
            GetShuoShuo()->setShuoSafe(idx);
            if (idx == SS_PUBTST_PKG)
            {
                char action[16] = "";
                snprintf (action, 16, "F_%d", 1101);
                udpLog("916", action, "", "", "", "", "act");
            }
        }
    }

	void Player::setClan(Clan * c)
	{
		if(c == _clan)
			return;
		_clan = c;
		rebuildBattleName();

        //加入帮会成就
        if(IsMainThread() == false  &&  CURRENT_THREAD_ID() <= WORKER_THREAD_NEUTRAL)
            GameAction()->doAttainment(this,Script::JOIN_CLAN,0 );
	}

	void Player::testBattlePunish()
	{
		UInt32 atktime = _buffData[PLAYER_BUFF_ATTACKING];
		if(atktime == 0)
			return;
		if(atktime > TimeUtil::Now())
			_playerData.battlecdtm = atktime;
	}

	void Player::rebuildBattleName()
	{
#ifdef _ARENA_SERVER
        char numstr[16];
        sprintf(numstr, "%u\n", _playerData.title);
        GameServer * gs = gameServers(_channelId, _serverId);
        if(gs != NULL)
        {
            char chstr[16];
            sprintf(chstr, ".S%u", _serverId);
            _battleName = gs->getChannel() + chstr + "\n" + numstr + _playerData.name;
            _displayName = _playerData.name + "@" + gs->getChannel() + chstr;
        }
        else
        {
            _battleName = std::string("\n") + numstr + _playerData.name;
            _displayName = _playerData.name;
        }
#else
		char numstr[16];
        //char separator[2] = {32, 0};
        char separator[] = {"\n "}; //分隔符是回车加空格

        std::string sepStr(separator);
		sprintf(numstr, "%u", _playerData.title);
		_battleName.clear();
		_battleName = getClanName();

		char numstr2[16];
        UInt32 clanTitle = getCurClanTitle();
		sprintf(numstr2, "%u", clanTitle);
        /*
        if(cfg.merged && !_battleName.empty() && static_cast<UInt8>(*(_battleName.end() - 1)) < 32)
		{
			sprintf(numstr, ".S%u", static_cast<UInt8>(*(_battleName.end() - 1)));
			_battleName.erase(_battleName.end() - 1);
			_battleName += numstr;
		}
        */
		//_battleName = _battleName + "\n" + numstr + "\n" + _playerData.name;
		//_battleName = _battleName + sepStr + numstr + sepStr + _playerData.name + sepStr + numstr2;
		_battleName = numstr2 + sepStr + _battleName + sepStr + numstr + sepStr + _playerData.name;
#endif
	}

#ifdef _ARENA_SERVER
    void Player::setEntered( UInt8 e )
    {
        if(_playerData.entered == e)
            return;
        _playerData.entered = e;
        DB().PushUpdateData("UPDATE `player` SET `entered` = %u WHERE `id` = %" I64_FMT "u", e, _id);
    }

    UInt64 Player::getOriginId(UInt64 id)
    {
        int channelId = static_cast<int>(id >> 40) & 0xFF, serverId = static_cast<int>(id >> 48);
        if(gameServers.isMerged(channelId, serverId))
            return id & 0xFFFF00FFFFFFFFFFull;
        return id & 0xFFFFFFFFFFull;
    }

    UInt64 Player::getOriginId()
    {
        if(gameServers.isMerged(_channelId, _serverId))
            return _id & 0xFFFF00FFFFFFFFFFull;
        return _id & 0xFFFFFFFFFFull;
    }

    int Player::getRealServerId()
    {
        GameServer * gs = gameServers(_channelId, _serverId);
        if(gs == NULL)
            return 0;
        if(gs->getMainId() < 0)
            return _serverId;
        return gs->getMainId();
    }

    int Player::getRealCSId()
    {
        GameServer * gs = gameServers(_channelId, _serverId);
        if(gs == NULL)
            return 0;
        if(gs->getMainId() < 0)
            return (_serverId << 8) + _channelId;
        return (gs->getMainId() << 8) + _channelId;
    }
#endif

	void Player::writeBookStoreIds()
	{
		DB1().PushUpdateData("UPDATE `player` SET `bookStore` = '%u|%u|%u|%u|%u|%u|%u' WHERE `id` = %" I64_FMT "u", _playerData.bookStore[0], _playerData.bookStore[1], _playerData.bookStore[2], _playerData.bookStore[3], _playerData.bookStore[4], _playerData.bookStore[5], _nextBookStoreUpdate, _id);
	}

	inline UInt32 getBookPriceById(UInt32 id)
	{
        UInt32 deftael = 5000;
        const std::vector<UInt32>& bookprice = GData::GDataManager::GetFlushBookPrice();
        if (!bookprice.size())
            return deftael;
        for (UInt32 i = 0; i < bookprice.size(); i+=2)
        {
            if (bookprice[i] == id)
                return bookprice[i+1];
        }
        return deftael;
	}

	void Player::listBookStore(UInt8 type)
	{
        Stream st(REP::BOOK_SHOP_LIST);
        if (GetLev() < 10 && !type && GetTaskMgr()->HasCompletedTask(5) && !GetTaskMgr()->HasSubmitedTask(5)) {
            st << static_cast<UInt16>(0);
            _playerData.bookStore[0] = 1200;
            _playerData.bookStore[1] = 1201;
            _playerData.bookStore[2] = 1204;
            _playerData.bookStore[3] = 1205;
            _playerData.bookStore[4] = 1207;
            _playerData.bookStore[5] = 1208;
        } else {
            UInt32 curtime = TimeUtil::Now();
            UInt16 money = 0;
            int count = 0;

            if(type == 1)
            {
                if(_nextBookStoreUpdate == 0 || curtime >= _nextBookStoreUpdate)
                {
                    count = 1;
                    updateNextBookStoreUpdate(curtime);
                }
                else
                {
                    count = 1;
                    money = GData::moneyNeed[GData::BOOK_LIST].tael;
                }

                // updateNextBookStoreUpdate(curtime);
            }

            if(type > 0 && _playerData.tael < money)
            {
                sendMsgCode(1, 1100);
                return;
            }

            if(count > 0)
            {
                const std::vector<UInt32>& factor = GData::GDataManager::GetFlushBookFactor(type);
                if (!factor.size())
                    return;
                UInt32 totalfactor = factor[0];

                do
                {
                    int i = 0;
                    for(; i < 6; ++ i)
                    {
                        UInt32 rnd = uRand(totalfactor);
                        UInt32 j = 1;
                        for (; j < factor.size(); j += 2)
                        {
                            if (rnd <= factor[j])
                                break;
                        }
                        ++j;

                        UInt32 iid = factor[j];
                        if(iid == 0)
                        {
                            _playerData.bookStore[i] = 0;
                        }
                        else
                        {
                            _playerData.bookStore[i] = iid;
                        }
                    }
                    --count;
                }
                while(count > 0);

                st << calcNextBookStoreUpdate(curtime);
                writeBookStoreIds();

                if (money)
                {
                    ConsumeInfo ci(FlushBookStore, 0, 0);
                    useTael(money, &ci);
                }
            }
            else
            {
                st << calcNextBookStoreUpdate(curtime);
            }
        }

		for(int i = 0; i < 6; ++ i)
		{
			st << _playerData.bookStore[i] << getBookPriceById(_playerData.bookStore[i]);
		}
		st << Stream::eos;
		send(st);
        /*
        if(type > 0)
            GameAction()->doAty(this, AtyBookStore, 0 , 0);
        */
	}

	UInt16 Player::calcNextBookStoreUpdate(UInt32 curtime)
	{
		if(_nextBookStoreUpdate > curtime)
			return static_cast<UInt16>(_nextBookStoreUpdate - curtime);
		return 0;
	}

	UInt32 Player::purchaseBook( UInt8 idx )
	{
		if(idx > 5 || _playerData.bookStore[idx] == 0)
			return 0;
		UInt16 iid = _playerData.bookStore[idx];
		UInt32 price = getBookPriceById(iid);
		if(_playerData.tael < price)
		{
			sendMsgCode(0, 1100);
			return 0;
		}
		if(!m_Package->AddItem(iid, 1, true))
		{
			sendMsgCode(2, 1011);
			return 0;
		}
		_playerData.bookStore[idx] = 0;
		writeBookStoreIds();
		ConsumeInfo ci(PurchaseBook,0,0);
		useTael(price,&ci);
		return iid;
	}

	void Player::updateNextBookStoreUpdate(UInt32 curtime)
	{
        UInt32 tmp = _bookStoreInterval;
        if((this->getPlatform() == 10 && World::getQQGameAct()) || (this->getPlatform() == 11 && World::get3366PrivilegeAct()) || ((getPlatform() == 1 || getPlatform() == 2) && World::getQzonePYPrivilegeAct()))
            tmp /= 2;
        if(tmp == 0)
            tmp = 1;
        _nextBookStoreUpdate = (curtime + tmp) / tmp * tmp;
	}

	UInt8 Player::unLockSecondPWD(std::string pwd)
	{
		UInt32 now = TimeUtil::Now();
		if(getBuffLeft(PLAYER_BUFF_PWDLOCK, now) != 0)
			return 0xFF;
		else if(_pwdInfo.errCount == 0xFF)
			_pwdInfo.errCount = 0;
		if(_pwdInfo.isLocked == 0)
			return 0;
		if(_pwdInfo.secondPWD == pwd)
		{
			_pwdInfo.errCount = 0;
			_pwdInfo.isLocked = 0;
			return 0;
		}
		_pwdInfo.errCount ++;
		if(_pwdInfo.errCount >= 5)
		{
			setBuffData(PLAYER_BUFF_PWDLOCK, now + 600);
			_pwdInfo.errCount = 0xFF;
		}
		return _pwdInfo.errCount;
	}

	void Player::lockSecondPWD()
	{
		if(_pwdInfo.secondPWD.empty())
			return;
		_pwdInfo.isLocked = 1;
	}

	void Player::setSecondPWDDB(std::string pwd, std::string question, std::string answer)
	{
		_pwdInfo.secondPWD = pwd;
		_pwdInfo.questionForPWD = question;
		_pwdInfo.answerForPWD = answer;
	}

	UInt8 Player::activeSecondPWD(std::string pwd, std::string question, std::string answer)
	{
		if(pwd.length() != 6)
			return 1;
		if(question.length() > 30 || answer.length() > 30)
			return 1;
		if(!_pwdInfo.secondPWD.empty())
			return 1;
        if (GetLev() < 30)
            return 1;
		_pwdInfo.secondPWD = pwd;
		_pwdInfo.questionForPWD = question;
		_pwdInfo.answerForPWD = answer;
		_pwdInfo.isLocked = 1;
		char questionTmp[256];
		char answerTmp[256];
		mysql_escape_string(questionTmp, _pwdInfo.questionForPWD.c_str(), _pwdInfo.questionForPWD.length()>255?255:_pwdInfo.questionForPWD.length());
		mysql_escape_string(answerTmp, _pwdInfo.answerForPWD.c_str(), _pwdInfo.answerForPWD.length()>255?255:_pwdInfo.answerForPWD.length());
		DB1().PushUpdateData("INSERT INTO `pass_word` VALUES(%" I64_FMT "u, '%s', '%s', '%s')", _id, _pwdInfo.secondPWD.c_str(), questionTmp, answerTmp);
		Stream st;
		makeSenconPWDInfo(st);
		send(st);
		return 0;
	}

	UInt8 Player::deactiveSecondPWD(std::string answer, bool force)
	{
		if(!force && answer != _pwdInfo.answerForPWD)
			return 1;
		_pwdInfo.errCount = 0;
		_pwdInfo.secondPWD.clear();
		_pwdInfo.answerForPWD.clear();
		_pwdInfo.questionForPWD.clear();
		DB1().PushUpdateData("DELETE FROM `pass_word` WHERE `playerId` = %" I64_FMT "u", _id);
		Stream st;
		makeSenconPWDInfo(st);
		send(st);
		return 0;
	}

	UInt8 Player::forgetSecondPWD(std::string pwd, std::string answer)
	{
		if(answer != _pwdInfo.answerForPWD)
			return 1;
		_pwdInfo.errCount = 0;
		_pwdInfo.secondPWD = pwd;
		DB1().PushUpdateData("UPDATE `pass_word` SET `password` = '%s' WHERE `playerId` =  %" I64_FMT "u", _pwdInfo.secondPWD.c_str(), _id);
		return 0;
	}

	UInt8 Player::changeSecondPWD(std::string oldPWD, std::string newPWD)
	{
		if(oldPWD != _pwdInfo.secondPWD)
			return 1;
		if(_pwdInfo.secondPWD == newPWD)
			return 0;
		if(newPWD.length() != 6)
			return 1;
		_pwdInfo.secondPWD = newPWD;
		DB1().PushUpdateData("UPDATE `pass_word` SET `password` = '%s' WHERE `playerId` =  %" I64_FMT "u", _pwdInfo.secondPWD.c_str(), _id);
		return 0;
	}

	void Player::makeSenconPWDInfo(Stream& st)
	{
		st.init(REP::SECOND_PWD);
		if(!_pwdInfo.secondPWD.empty())
			st << static_cast<UInt8>(0) << _pwdInfo.questionForPWD;
		else
			st << static_cast<UInt8>(1);
		st << Stream::eos;
	}

	bool Player::hasChecked()
	{
		if(!_pwdInfo.secondPWD.empty() && _pwdInfo.isLocked != 0)
		{
            UInt32 left = getBuffLeft(PLAYER_BUFF_PWDLOCK, TimeUtil::Now());
			if(left != 0)
			{
				sendMsgCode(0, 1009, left);
				return false;
			}
			Stream st(REP::PWD_DAILOG);
			st << Stream::eos;
			send(st);
			return false;
		}
		return true;
	}


	void Player::autoCB( bool add /*= true*/ )
	{
		if(add)
		{
			globalCountryBattle.addAutoCB(this);
			addStatus(AutoCB);
		}
		else
		{
			removeStatus(AutoCB);
			globalCountryBattle.delAutoCB(this);
		}
	}

    void Player::payPractice(UInt8 place, UInt16 slot, UInt8 type, UInt8 priceType, UInt8 time, UInt8 prot)
    {
        practicePlace.pay(this, place, slot, type, priceType, time, prot);
    }

    void Player::addPracticeFighter(UInt32* fighters, size_t size)
    {
        practicePlace.sitdown(this, fighters, size);
    }

    float Player::getPracticeBufFactor()
    {
        float factor = 0.0f;
        if(getBuffData(PLAYER_BUFF_ADVANCED_P_HOOK, TimeUtil::Now()))
        {
            factor = 0.2f;
        }
        else if(getBuffData(PLAYER_BUFF_PRACTICE1, TimeUtil::Now()))
        {
            factor = 0.5f;
        }
#if 0
        if(getBuffData(PLAYER_BUFF_PRACTICE2, TimeUtil::Now()))
        {
            return 0.5f;
        }
#else
        else if(getBuffData(PLAYER_BUFF_PROTECT, TimeUtil::Now()))
        {
            factor = 0.2f;
        }
#endif
        // 限时vip特权
       UInt32 VipType =GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
       if(in7DayFromCreated() && VipType >4 )
           VipType -= 2 ;
        if(inVipPrivilegeTime()&&(VipType==0||VipType ==1 ||VipType ==3 ))
            factor += 1.0f;

        if(getBuffData(PLAYER_BUFF_CLANTREE3))
            factor += 0.1f;
        //仙界传奇(服战) 修为加成
        float fuzhanRatio = 0.0f;
        if(getBuffData(SERVERWAR_BUFF_XIUWEI1))
            fuzhanRatio = (float)SERVERWAR_VALUE_XIUWEI1 / 100;
        else if(getBuffData(SERVERWAR_BUFF_XIUWEI2))
            fuzhanRatio = (float)SERVERWAR_VALUE_XIUWEI2 / 100;
        else if(getBuffData(SERVERWAR_BUFF_XIUWEI3))
            fuzhanRatio = (float)SERVERWAR_VALUE_XIUWEI3 / 100;
        else if(getBuffData(SERVERWAR_BUFF_XIUWEI4))
            fuzhanRatio = (float)SERVERWAR_VALUE_XIUWEI4 / 100;
        else if(getBuffData(SERVERWAR_BUFF_XIUWEI5))
            fuzhanRatio = (float)SERVERWAR_VALUE_XIUWEI5 / 100;
        factor += fuzhanRatio;

        if(getBuffData(PLAYER_BUFF_CLAN1) > 0)
            factor += 0.5f;
        else if(getBuffData(PLAYER_BUFF_CLAN2) > 0)
            factor += 0.3f;
        else if(getBuffData(PLAYER_BUFF_CLAN3) > 0)
            factor += 0.2f;

        if(getBuffData(PLAYER_BUFF_NEW_CLAN1) > 0)
            factor += 0.5f;
        else if(getBuffData(PLAYER_BUFF_NEW_CLAN2) > 0)
            factor += 0.3f;
        else if(getBuffData(PLAYER_BUFF_NEW_CLAN3) > 0)
            factor += 0.2f;

        if(getBuffData(PLAYER_BUFF_TYSS) > 0)
            factor += 0.5f;
        return factor;
    }

    float Player::getPracticeIncByDiamond()
    {
        if(this->isBD() && World::getBlueDiamondAct())
        {
            return 0.1f;
        }
        else if(this->isYD() && World::getYellowDiamondAct())
        {
            return 0.1f;
        }
        else
        {
            return 0.0f;
        }
    }

    float Player::getPracticeIncByQQVip()
    {
        if(isQQVIP() && World::getQQVipAct())
        {
            return 0.1f;
        }
        else
        {
            return 0.0f;
        }
    }

    bool Player::accPractice()
    {
        UInt32 goldUse = GData::moneyNeed[GData::INSTANTPRACTICE].gold;
        if(getGold() < goldUse)
        {
            Stream st(REP::PRACTICE_HOOK_ADD);
            st << static_cast<UInt8>(1) << Stream::eos;
            send(st);
            return false;
        }

        GameMsgHdr hdr1(0x17D, WORKER_THREAD_WORLD, this, 0);
        GuangGunCompleteTask(0,32);
        GLOBAL().PushMsg(hdr1, NULL);
        return true;
    }

    bool Player::OperationTaskAction(int type)
    {
        switch (type)
        {
            case 0:
                return GameAction()->RunOperationTaskAction0(this, 6);
                break;
            default:
                break;
        }
        return true;
    }

    void Player::OnSelectCountry()
    {

        GameAction()->doAttainment(this,  Script::SELECT_COUNTRY , 0);
    }
    void Player::setCountry(UInt8 cny)
    {
        if(0 == cny)
            udpLog("zhenying", "F_130822_1", "", "", "", "", "act");
        else if(1 == cny)
            udpLog("zhenying", "F_130822_2", "", "", "", "", "act");

        _playerData.country = cny;
		DB1().PushUpdateData("UPDATE `player` SET `country` = %u WHERE `id` = %" I64_FMT "u", cny, getId());

		Stream st(REP::USER_INFO_CHANGE);
		st << static_cast<UInt8>(0x11) << static_cast<UInt32>(cny) << Stream::eos;
		send(st);
    }

    void Player::startAutoCopy(UInt8 id, UInt8 mtype = 0)
    {
        playerCopy.autoBattle(this, id, 0, mtype);
    }

    void Player::cancelAutoCopy(UInt8 id)
    {
        playerCopy.autoBattle(this, id, 1);
    }

    void Player::instantAutoCopy(UInt8 id)
    {
        playerCopy.autoBattle(this, id, 2);
    }

    void Player::sendAutoCopy()
    {
        playerCopy.sendAutoCopy(this);
    }

    void Player::startAutoTeamCopy(UInt32 id)
    {
        teamCopyManager->autoBattle(this, id, 0);
    }

    void Player::cancelAutoTeamCopy(UInt32 id)
    {
        teamCopyManager->autoBattle(this, id, 1);
    }

    void Player::instantAutoTeamCopy(UInt32 id)
    {
        teamCopyManager->autoBattle(this, id, 2);
    }

    void Player::sendAutoTeamCopy()
    {
        teamCopyManager->sendAutoTeamCopy(this);
    }

    void Player::startAutoFrontMap(UInt8 id, UInt8 mtype = 0)
    {
        frontMap.autoBattle(this, id, 0, mtype);
    }

    void Player::cancelAutoFrontMap(UInt8 id)
    {
        frontMap.autoBattle(this, id, 1);
    }

    void Player::instantAutoFrontMap(UInt8 id)
    {
        frontMap.autoBattle(this, id, 2);
    }

    void Player::sendAutoFrontMap()
    {
        frontMap.sendAutoFrontMap(this);
    }

    void Player::startAutoXJFrontMap(UInt8 id, UInt8 mtype = 0)
    {
        xjfrontMap.autoBattle(this, id, 0, mtype);
    }

    void Player::cancelAutoXJFrontMap(UInt8 id)
    {
        xjfrontMap.autoBattle(this, id, 1);
    }

    void Player::instantAutoXJFrontMap(UInt8 id)
    {
        xjfrontMap.autoBattle(this, id, 2);
    }

    void Player::sendAutoXJFrontMap()
    {
        xjfrontMap.sendAutoFrontMap(this);
    }

    void Player::AddPracticeExp(const PracticeFighterExp* pfexp)
    {
        if(!pfexp)
            return;

        if(pfexp->goldUse)
        {
            if(getGold() < pfexp->goldUse)
            {
                Stream st(REP::PRACTICE_HOOK_ADD);
                st << static_cast<UInt8>(1) << Stream::eos;
                send(st);
                return;
            }
            else
            {
                Stream st(REP::PRACTICE_HOOK_ADD);
                st << static_cast<UInt8>(0) << Stream::eos;
                send(st);
            }
            ConsumeInfo ci(InstantPracticeAcc,0,0);
            useGold(pfexp->goldUse,&ci);

            for(int i = 0; i < MAX_PRACTICE_FIGHTRES; ++ i)
            {
                Fighter* fgt = findFighter(pfexp->fids[i]);
                if(fgt && pfexp->counts[i])
                {
                    UInt32 extraPExp = 0;
                    UInt32 pExp = fgt->getPracticeInc() * pfexp->counts[i];
                    UInt32 VipType = GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);  
                    if(in7DayFromCreated() && VipType >4 )
                         VipType -= 2 ;
                    if(inVipPrivilegeTime()&&(VipType==0||VipType ==1 ||VipType ==3 ) )
                        extraPExp = fgt->getBasePExpEach() * pfexp->counts[i] * 1.0f;
                    isDoubleExp(pExp);

                    UInt32 pexpAdd = 0;
                    UInt32 pexpBase = fgt->getBasePExpEach() * pfexp->counts[i];
                    if(getBuffData(PLAYER_BUFF_CLAN1) > 0)
                        pexpAdd = pexpBase * 0.5f;
                    else if(getBuffData(PLAYER_BUFF_CLAN2) > 0)
                        pexpAdd = pexpBase * 0.3f;
                    else if(getBuffData(PLAYER_BUFF_CLAN3) > 0)
                        pexpAdd = pexpBase * 0.2f;
                    
                    if(getBuffData(PLAYER_BUFF_NEW_CLAN1) > 0)
                        pexpAdd = pexpBase * 0.5f;
                    else if(getBuffData(PLAYER_BUFF_NEW_CLAN2) > 0)
                        pexpAdd = pexpBase * 0.3f;
                    else if(getBuffData(PLAYER_BUFF_NEW_CLAN3) > 0)
                        pexpAdd = pexpBase * 0.2f;
                    
                    if(getBuffData(PLAYER_BUFF_TYSS) > 0)
                        pexpAdd += pexpBase * 0.5f;

                    fgt->addPExp(pExp + pexpAdd, true, false, extraPExp);
                }
            }

            UInt32 now = TimeUtil::Now();
            UInt32 duration = 60*60;
            UInt8 type = 0;
            UInt32 p = getBuffData(PLAYER_BUFF_ADVANCED_P_HOOK, now);
            if(!p)
                p = getBuffData(PLAYER_BUFF_PROTECT, now);
            if (!p)
            {
                p = getBuffData(PLAYER_BUFF_PRACTICE1, now);
                type = 1;
            }
            UInt32 left = 0;
            if (p > 0)
                left = p - now;

            if (left >= duration)
            {
                left -= duration;
                if (type == 0)
                {
                    if(getBuffData(PLAYER_BUFF_ADVANCED_P_HOOK, now))
                        setBuffData(PLAYER_BUFF_ADVANCED_P_HOOK, left+now);
                    else
                        setBuffData(PLAYER_BUFF_PROTECT, left+now);
                }
                else
                    setBuffData(PLAYER_BUFF_PRACTICE1, left+now);
            }
            else if (left)
            {
                if (type == 0)
                {
                    if(getBuffData(PLAYER_BUFF_ADVANCED_P_HOOK, now))
                        setBuffData(PLAYER_BUFF_ADVANCED_P_HOOK, 0);
                    else
                        setBuffData(PLAYER_BUFF_PROTECT, 0);
                }
                else
                    setBuffData(PLAYER_BUFF_PRACTICE1, 0);
            }
        }
        else
        {
            for(int i = 0; i < MAX_PRACTICE_FIGHTRES; ++ i)
            {
                Fighter* fgt = findFighter(pfexp->fids[i]);
                if(fgt && pfexp->counts[i])
                {
                    UInt32 extraPExp = 0;
                    UInt32 pExp = fgt->getPracticeInc() * pfexp->counts[i];
                    UInt32 VipType = GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);  
                    if( in7DayFromCreated() && VipType >4 )
                        VipType -= 2 ;
                    if(inVipPrivilegeTime() && ( VipType==0||VipType ==1 ||VipType ==3 ) )
                        extraPExp = fgt->getBasePExpEach() * pfexp->counts[i] * 1.0f;
                    isDoubleExp(pExp);

                    UInt32 pexpAdd = 0;
                    UInt32 pexpBase = fgt->getBasePExpEach() * pfexp->counts[i];
                    if(getBuffData(PLAYER_BUFF_CLAN1) > 0)
                        pexpAdd = pexpBase * 0.5f;
                    else if(getBuffData(PLAYER_BUFF_CLAN2) > 0)
                        pexpAdd = pexpBase * 0.3f;
                    else if(getBuffData(PLAYER_BUFF_CLAN3) > 0)
                        pexpAdd = pexpBase * 0.2f;
                    
                    if(getBuffData(PLAYER_BUFF_NEW_CLAN1) > 0)
                        pexpAdd = pexpBase * 0.5f;
                    else if(getBuffData(PLAYER_BUFF_NEW_CLAN2) > 0)
                        pexpAdd = pexpBase * 0.3f;
                    else if(getBuffData(PLAYER_BUFF_NEW_CLAN3) > 0)
                        pexpAdd = pexpBase * 0.2f;
                    
                    if(getBuffData(PLAYER_BUFF_TYSS) > 0)
                        pexpAdd += pexpBase * 0.5f;

                    fgt->addPExp(pExp + pexpAdd, true, false, extraPExp);
                }
            }
        }
    }

    void Player::RollYDGem()
    {
        std::vector<UInt32> ydGem = GObjectManager::getYDGem();
        _playerData.ydGemId = ydGem[uRand(ydGem.size())];
		DB1().PushUpdateData("UPDATE `player` SET `ydgemid` = %u WHERE `id` = %" I64_FMT "u", _playerData.ydGemId, getId());
    }

    void Player::checkQQAward()
    {
        UInt32 now = TimeUtil::Now();
        UInt8 qqvipl = 0;
        UInt8 flag = 0;

        if (_playerData.qqvipl >= 20 && _playerData.qqvipl < 40) // 20-29 - 3366, 30-39 - Q+ 40-49 - qqvip
        {
            qqvipl = _playerData.qqvipl1;
            flag = 8*(_playerData.qqvipl1 / 10);
        }
        else
        {
            if (_playerData.qqvipl >= 40)
            {
                qqvipl = _playerData.qqvipl;
                flag = 8*((_playerData.qqvipl-20) / 10);
            }
            else
            {
                qqvipl = _playerData.qqvipl;
                flag = 8*(_playerData.qqvipl / 10);
            }
        }

        if(flag)
        {
            if(qqvipl % 10 == 0)
                qqvipl = 0;
            else
                qqvipl = qqvipl%10 + 1;
        }

        if(now >= _playerData.qqawardEnd)
        {
            _playerData.qqawardEnd = TimeUtil::SharpDay(1, now);
            _playerData.qqawardgot &= 0xFCFC;
            DB1().PushUpdateData("UPDATE `player` SET `qqawardEnd` = %u, `qqawardgot` = %u WHERE `id` = %" I64_FMT "u", _playerData.qqawardEnd, _playerData.qqawardgot, getId());
            RollYDGem();
        }

        if(isQQVIP())
        {
            if(GetFreePackageSize() >= 1 && GetVar(VAR_QQVIP) == 0)
            {
                SetVar(VAR_QQVIP, 1);
                GetPackage()->AddItem2(9084, 1, true, true);
            }
        }
        else if( !(_playerData.qqawardgot & (0x80<<flag)) && qqvipl )
        {
            if(GetFreePackageSize() < 1)
            {
                sendMsgCode(2, 1011);
            }
            else
            {
                _playerData.qqawardgot |= (0x80<<flag);
                if(flag)
                    GetPackage()->AddItem2(7, 1, true, true);
                else
                    GetPackage()->AddItem2(67, 1, true, true);
                DB1().PushUpdateData("UPDATE `player` SET `qqawardgot` = %u WHERE `id` = %" I64_FMT "u", _playerData.qqawardgot, getId());
            }
        }

        if(_playerData.ydGemId == 0)
        {
            RollYDGem();
        }
    }

    void Player::sendYellowDiamondInfo()
    {
        checkQQAward();

        bool blue = false;
        bool qplus = false;
        UInt8 domain = atoi(m_domain);
        if (domain == 11 && _playerData.qqvipl >= 20 && _playerData.qqvipl < 40)
        {
            Stream st(REP::YD_INFO);

            UInt8 qqvipl = _playerData.qqvipl % 10;
            st << qqvipl << _playerData.qqvipyear << static_cast<UInt8>(GetVar(VAR_AWARD_3366|(GetVar(VAR_HHBAWARD_GOT) << 3)));
            UInt8 maxCnt = GObjectManager::getD3D6MaxCount();
            st << maxCnt;
            st << static_cast<UInt8>(1);
            for(UInt8 i = 0; i < maxCnt; ++ i)
            {
                std::vector<YDItem>& ydItem = GObjectManager::getD3D6Item(i);
                UInt8 itemCnt = ydItem.size();
                st << itemCnt;
                for(int j = 0; j < itemCnt; ++ j)
                {
                    UInt32 itemId = ydItem[j].itemId;
                    if(GetItemSubClass(itemId) == Item_Gem)
                        itemId = _playerData.ydGemId;

                    st << itemId << ydItem[j].itemNum;
                }
            }
            st << static_cast<UInt8>(0);
            st << Stream::eos;
            send(st);

            blue = true;
        }
        else if (domain == 4 && _playerData.qqvipl >= 30 && _playerData.qqvipl < 40)
        {
            // TODO:
            Stream st(REP::YD_INFO);

            UInt8 qqvipl = _playerData.qqvipl % 10;
            st << qqvipl << _playerData.qqvipyear << static_cast<UInt8>(GetVar(VAR_AWARD_QPLUS));
            UInt8 maxCnt = GObjectManager::getQPlusMaxCount();
            st << maxCnt;
            st << static_cast<UInt8>(1);
            for(UInt8 i = 0; i < maxCnt; ++ i)
            {
                std::vector<YDItem>& ydItem = GObjectManager::getQPlusItem(i);
                UInt8 itemCnt = ydItem.size();
                st << itemCnt;
                for(int j = 0; j < itemCnt; ++ j)
                {
                    UInt32 itemId = ydItem[j].itemId;
                    if(GetItemSubClass(itemId) == Item_Gem)
                        itemId = _playerData.ydGemId;

                    st << itemId << ydItem[j].itemNum;
                }
            }
            st << static_cast<UInt8>(0);
            st << Stream::eos;
            send(st);

            qplus = true;
        }

        if (_playerData.qqvipl < 20 || _playerData.qqvipl >= 40 || blue || qplus)
        {
            Stream st(REP::YD_INFO);

            UInt8 qqvipl = 0;
            UInt8 flag = 0;

            if (blue)
            {
                flag = 8*(_playerData.qqvipl1 / 10);
                qqvipl = _playerData.qqvipl1 % 10;
            }
            else
            {
                if(qplus /*&& World::getQQVipAct()*/ && _playerData.qqvipl1 >= 40 && _playerData.qqvipl1 <= 49)
                {
                    flag = 8*((_playerData.qqvipl1-20) / 10);
                    qqvipl = _playerData.qqvipl1 % 10;
                }
                else if (_playerData.qqvipl >= 40)
                {
                    flag = 8*((_playerData.qqvipl-20) / 10);
                    qqvipl = _playerData.qqvipl % 10;
                }
                else
                {
                    flag = 8*(_playerData.qqvipl / 10);
                    qqvipl = _playerData.qqvipl % 10;
                }
            }
            st << qqvipl << _playerData.qqvipyear << static_cast<UInt8>(((_playerData.qqawardgot>>flag)|(GetVar(VAR_HHBAWARD_GOT) << 3))& 0x0B);
            UInt8 maxCnt = GObjectManager::getYDMaxCount();
            if(flag == 8)
                st << static_cast<UInt8>(maxCnt - 1);
            else if (flag == 16)
                st << static_cast<UInt8>(maxCnt - 1);
            else
                st << maxCnt;
            st << static_cast<UInt8>(0);

            UInt8 factor = 1;
            if (_playerData.qqvipl >= 1 && _playerData.qqvipl <= 10 && (domain == 1 || domain == 2 || domain == 4) && World::getYDMDAct())
                factor = 2;

            for(UInt8 i = 0; i < maxCnt; ++ i)
            {
                if(flag == 8 && (i == 0 || i > 7))
                    continue;
                if (flag == 16 && i > 6)
                    continue;
                std::vector<YDItem>& ydItem = GObjectManager::getYDItem(i);
                UInt8 itemCnt = ydItem.size();
                st << itemCnt;
                for(int j = 0; j < itemCnt; ++ j)
                {
                    UInt32 itemId = ydItem[j].itemId;
                    if(GetItemSubClass(itemId) == Item_Gem)
                        itemId = _playerData.ydGemId;

                    st << itemId << static_cast<UInt8>(ydItem[j].itemNum*factor);
                }
            }

            std::vector<YDItem>& ydItem = GObjectManager::getYearYDItem();
            UInt8 itemCnt = ydItem.size();
            st << itemCnt;
            for(UInt8 j = 0; j < itemCnt; ++ j)
                st << ydItem[j].itemId << static_cast<UInt8>(ydItem[j].itemNum*factor);
            st << Stream::eos;
            send(st);
        }
    }

    UInt8 Player::rcvYellowDiamondAward(UInt8 type, UInt8 d3d6)
    {
        checkQQAward();
        UInt8 nRes = 0;
        Stream st(REP::YD_AWARD_RCV);

        UInt8 domain = atoi(m_domain);
            if(type == 3 &&_playerData.isHHBlue &&!GetVar(VAR_HHBAWARD_GOT))
             {
                if(GetPackage()->GetRestPackageSize() > 0)
                {
                    nRes = 5;
                    SetVar(VAR_HHBAWARD_GOT, 1);

                    GetPackage()->AddItem2(503,1, true, true);
                }
                else
                {
                    sendMsgCode(2, 1011);
                }
             }
        if (domain == 11 && _playerData.qqvipl >= 20 && _playerData.qqvipl < 40 && d3d6 == 1)
        {
            UInt8 qqvipl = _playerData.qqvipl % 10;
           if (!qqvipl)
                return 0;

            UInt32 award = GetVar(VAR_AWARD_3366);
            if (!award)
            {
                std::vector<YDItem>& ydItem = GObjectManager::getD3D6Item(qqvipl - 1);
                UInt8 itemCnt = ydItem.size();
                if(GetPackage()->GetRestPackageSize() > ydItem.size() - 1)
                {
                    nRes = 3;
                    SetVar(VAR_AWARD_3366, 1);
                    for(int j = 0; j < itemCnt; ++ j)
                    {
                        UInt32 itemId = ydItem[j].itemId;
                        if(GetItemSubClass(itemId) == Item_Gem)
                            itemId = _playerData.ydGemId;

                        GetPackage()->AddItem2(itemId, ydItem[j].itemNum, true, true);
                    }

#ifndef _WIN32
#ifdef _FB
#else
                    dclogger.d3d6(this);
#endif
#endif // _WIN32
                }
                else
                {
                    sendMsgCode(2, 1011);
                }
            }
        }
        else if (domain == 4 && _playerData.qqvipl >= 30 && _playerData.qqvipl < 40 && d3d6/*qplus*/ == 1)
        {
            UInt8 qqvipl = _playerData.qqvipl % 10;

            UInt32 award = GetVar(VAR_AWARD_QPLUS);
            if (!award)
            {
                std::vector<YDItem>& ydItem = GObjectManager::getQPlusItem(qqvipl);
                UInt8 itemCnt = ydItem.size();
                if(GetPackage()->GetRestPackageSize() > ydItem.size() - 1)
                {
                    nRes = 4;
                    SetVar(VAR_AWARD_QPLUS, 1);
                    for(int j = 0; j < itemCnt; ++ j)
                    {
                        UInt32 itemId = ydItem[j].itemId;
                        if(GetItemSubClass(itemId) == Item_Gem)
                            itemId = _playerData.ydGemId;

                        GetPackage()->AddItem2(itemId, ydItem[j].itemNum, true, true);
                    }
                }
                else
                {
                    sendMsgCode(2, 1011);
                }
            }
        }
        else if (_playerData.qqvipl < 20 || _playerData.qqvipl >= 40 || (domain == 4 && _playerData.qqvipl1 >= 40) ||
                ((domain == 11 || domain == 4) && d3d6 == 0 && _playerData.qqvipl1 > 0))
        {
            UInt8 qqvipl = 0;
            UInt8 flag = 0;
            if ((domain == 11 || domain == 4) && d3d6 == 0 && _playerData.qqvipl1 > 0)
            {
                if (/*World::getQQVipAct() && */_playerData.qqvipl1 >= 40 && _playerData.qqvipl1 <= 49)
                {
                    qqvipl = _playerData.qqvipl1;
                    flag = 8*((_playerData.qqvipl1-20) / 10);
                }
                else
                {
                    qqvipl = _playerData.qqvipl1;
                    flag = 8*(_playerData.qqvipl1 / 10);
                }
            }
            else
            {
                if (_playerData.qqvipl >= 40)
                {
                    qqvipl = _playerData.qqvipl;
                    flag = 8*((_playerData.qqvipl-20) / 10);
                }
                else
                {
                    qqvipl = _playerData.qqvipl;
                    flag = 8*(_playerData.qqvipl / 10);
                }
            }

            if(flag == 8)
            {
                if(qqvipl % 10 == 0)
                    qqvipl = 0;
                else
                    qqvipl = qqvipl%10 + 1;
            }
            else if (flag == 16)
            {
                qqvipl %= 10;
            }

            UInt8 factor = 1;
            if (_playerData.qqvipl >= 1 && _playerData.qqvipl <= 10 && (domain == 1 || domain == 2 || domain == 4) && World::getYDMDAct())
                factor = 2;

            if(type == 1 && !(_playerData.qqawardgot & (0x1<<flag)) && qqvipl != 0)
            {
                std::vector<YDItem>& ydItem = GObjectManager::getYDItem(qqvipl - 1);
                UInt8 itemCnt = ydItem.size();
                if(GetPackage()->GetRestPackageSize() > ydItem.size() - 1)
                {
                    nRes = 1;
                    _playerData.qqawardgot |= (0x1<<flag);
                    for(int j = 0; j < itemCnt; ++ j)
                    {
                        UInt32 itemId = ydItem[j].itemId;
                        if(GetItemSubClass(itemId) == Item_Gem)
                            itemId = _playerData.ydGemId;

                        GetPackage()->AddItem2(itemId, factor*ydItem[j].itemNum, true, true);
                    }

#ifndef _WIN32
#ifdef _FB
#else
                    dclogger.blue(this);
#endif
#endif // _WIN32
                }
                else
                {
                    sendMsgCode(2, 1011);
                }
            }
            else if(type == 2 && !(_playerData.qqawardgot & (0x2<<flag)) && _playerData.qqvipyear != 0)
            {
                std::vector<YDItem>& ydItem = GObjectManager::getYearYDItem();
                UInt8 itemCnt = ydItem.size();
                if(GetPackage()->GetRestPackageSize() > ydItem.size() - 1)
                {
                    nRes = 2;
                    _playerData.qqawardgot |= (0x2<<flag);

                    for(int j = 0; j < itemCnt; ++ j)
                        GetPackage()->AddItem2(ydItem[j].itemId, factor*ydItem[j].itemNum, true, true);
                }
                else
                {
                    sendMsgCode(2, 1011);
                }
            }
            

        }
        if(nRes && nRes != 5)
        {
            DB1().PushUpdateData("UPDATE `player` SET `qqawardgot` = %u WHERE `id` = %" I64_FMT "u", _playerData.qqawardgot, getId());
        }

        st << nRes << Stream::eos;
        send(st);

        return nRes;
    }

	void Player::incPIcCount( )
	{
        checkPIcCount();
		++ _playerData.picCount;
        DB1().PushUpdateData("UPDATE `player` SET piccount = %u, nextpicreset = %u where `id`= %" I64_FMT "u", _playerData.picCount, _playerData.nextPIcReset, _id);
	}


    UInt8 Player::getPIcCount()
    {
        checkPIcCount();
        int nVipLevel = getVipLevel();
        UInt8 cnt = PracticePlace::_picCnt[nVipLevel];
        if(World::getNewYearSpeedTime())
            cnt += GetVar(VAR_NEWYEAR_PRATICE_COUNT);
        if ( cnt < _playerData.picCount)
            _playerData.picCount = 0;
        return cnt - _playerData.picCount;
    }

    void Player::checkPIcCount()
    {
		UInt32 now = TimeUtil::Now();
		if(now >= _playerData.nextPIcReset)
		{
            if(World::getNewYearSpeedTime() && World::getNewYearSpeedTime(_playerData.nextPIcReset))
            {
                UInt8 day = (TimeUtil::SharpDay(0, now) - _playerData.nextPIcReset )/86400 ;
                UInt8 oldValue = PracticePlace::_picCnt[getVipLevel()];
                UInt32 value =  oldValue*(day +1 )+ GetVar(VAR_NEWYEAR_PRATICE_COUNT) - _playerData.picCount;
                if(value + oldValue > 255 )
                    SetVar(VAR_NEWYEAR_PRATICE_COUNT,255 - oldValue);
                else
                    SetVar(VAR_NEWYEAR_PRATICE_COUNT,value);
            }
			_playerData.nextPIcReset = TimeUtil::SharpDay(1, now);
            _playerData.picCount = 0;
            DB1().PushUpdateData("UPDATE `player` SET piccount = %u, nextpicreset = %u where `id`= %" I64_FMT "u", _playerData.picCount, _playerData.nextPIcReset, _id);
		}
    }

    void Player::setLineupDirty(bool dirty)
    {
		for(int i = 0; i < 5; ++ i)
		{
			GObject::Fighter * fgt = getLineup(i).fighter;
			if(fgt != NULL)
				fgt->setDirty(dirty);
		}
    }

    void Player::setFightersDirty( bool bDirty )
    {
        for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
        {
            it->second->setDirty(bDirty);
        }
        return;
    }

    bool Player::IsFighterEquipEnchantLev(UInt8 en, UInt8 num)
    {
        UInt8 cur = 0;
        for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
        {
            if(it->second->IsEquipEnchantLev(en))
            {
                cur ++;
                if(cur >= num)
                    return true;
            }
        }

       return false;

    }

    bool Player::enchanted8( UInt32 id )
    {
       if (!id) return false;
       size_t sz = _enchantEqus.size();

        for (size_t i = 0; i < sz; ++i)
        {
            if (id == _enchantEqus[i])
                return true;
        }
        _enchantEqus.push_back(id);
        return false;
    }

    void Player::sendEnchanted8Box()
    {
        SYSMSG(title, 2126);
        SYSMSG(content, 2127);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {
            MailPackage::MailItem mitem[2] = {{507,5}, {509,5}};
            mailPackageManager.push(mail->id, mitem, 2, true);

            std::string strItems;
            strItems += Itoa(mitem[0].id);
            strItems += ",";
            strItems += Itoa(mitem[0].count);
            strItems += "|";
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
        }
    }

    void Player::sendTripodInfo()
    {
        if (!m_hasTripod)
            newTripodData();

        if (getVipLevel() > 2 && m_td.quality < 3)
        {
            m_td.quality = 3;
            m_td.needgen = 1;
        }

        Stream st(REP::TRIPOD_INFO);
        st << static_cast<UInt8>(0);
        st << m_td.fire;
        st << m_td.quality;

        int ret = genAward(st);
        if (ret == 2)
            DB6().PushUpdateData("UPDATE `tripod` SET `soul` = %u, `fire` = %u, `quality` = %u, `awdst` = %u, `regen` = %u, `itemId` = %u, `num` = %u WHERE `id` = %" I64_FMT "u", m_td.soul, m_td.fire, m_td.quality, m_td.awdst, m_td.needgen, m_td.itemId, m_td.num, getId());

        st << static_cast<UInt32>(MAX_TRIPOD_SOUL) << m_td.soul << Stream::eos;
        send(st);
    }

    int Player::genAward()
    {
        if (m_td.needgen) {
            UInt32 loot = GData::GDataManager::GetTripodAward(m_td.fire, 5-m_td.quality); // 0-橙,1-紫,2-蓝,3-绿
            const GData::LootItem* li = GData::lootTable[loot];
            if (li)
            {
                std::vector<GData::LootResult> lr;
                li->roll(lr);
                if (lr.size())
                {
                    m_td.itemId = lr[0].id;
                    m_td.num = lr[0].count;
                    m_td.needgen = 0;
                    return 2;
                }
            }
            return 0;
        }
        return 1;
    }

    int Player::genAward(Stream& st)
    {
        int ret = genAward();
        if (ret) {
            st << m_td.num;
            st << m_td.itemId;
        } else {
            st << static_cast<UInt8>(0);
            st << static_cast<UInt32>(0);
        }
        return ret;
    }

    static UInt8 tripod_factor[4][4] =
    {
        {30,    0,      0,      0},
        {50,    70,     0,      0},
        {0,     50,     100,    0},
        {0,     0,      30,     100}
    };

    bool Player::addItem(UInt32 itemid, UInt16 num, UInt8 bind)
    {
        if (!itemid || !num)
            return false;

        Package* pk = GetPackage();
        if (!pk) return false;

        if (!World::canDestory(itemid))
            return false;

        ItemBase* ib = NULL;
        ib = pk->FindItem(itemid, bind);
        if(!ib)
            pk->GetLingshi(itemid);
        if (ib)
        {
            if (ib->Count() < num)
                return false;
            if (IsLingShi(ib->getClass()) || ib->getClass() == Item_Mount || ib->getClass() == Item_MountChip)
                return false;

            m_td.soul += (ib->getEnergy() * num);
            UInt8 quality = 0;
            if(IsLingbaoTypeId(ib->GetTypeId()))
                quality = static_cast<ItemLingbao *>(ib)->getLbColor();
            else if(IsZhenYuanItem(ib->GetTypeId()))
                quality = static_cast<ItemZhenyuan *>(ib)->getZhyAttr().color;
            else
                quality = ib->getQuality();
            quality = quality > 1 ? quality - 2 : 0;
            for (UInt16 j = 0; j < num; ++j)
            {
                int rnd = uRand(100);
                for (int i = 0; i < 4; ++i)
                {
                    if (tripod_factor[quality][i] && rnd <= tripod_factor[quality][i])
                    {
                        if (m_td.quality < i+2)
                        {
                            m_td.quality = i+2; // 2-绿,3-蓝,4-紫,5-橙
                            m_td.needgen = 1;
                        }
                        break;
                    }
                }
            }

            if (getVipLevel() >= 3)
            {
                if (m_td.quality < 3)
                {
                    m_td.quality = 3;
                    m_td.needgen = 1;
                }
            }

            if (m_td.quality > 5)
            {
                m_td.quality = 5;
                m_td.needgen = 1;
            }

            if (IsEquipId(itemid))
            {
                pk->DelEquip(itemid, ToDesdroy);
            }
            else
            {
                pk->DelItem(itemid, num, bind, ToDesdroy);
            }
        }

        {
            Stream st(REP::TRIPOD_INFO);
            st << static_cast<UInt8>(2);
            st << static_cast<UInt8>(m_td.needgen);
            st << Stream::eos;
            send(st);
        }

        if (m_td.needgen)
            genAward();

        if (m_td.soul >= MAX_TRIPOD_SOUL)
        {
            PopTimerEvent(this, EVENT_PLAYERPRTRIPOD, getId());
            m_td.soul = MAX_TRIPOD_SOUL;
            m_td.awdst = 1;
            m_td.needgen = 0;
        }

        DB6().PushUpdateData("UPDATE `tripod` SET `soul` = %u, `quality` = %u, `awdst` = %u, `regen` = %u, `itemId` = %u, `num` = %u WHERE `id` = %" I64_FMT "u",
                m_td.soul, m_td.quality, m_td.awdst, m_td.needgen, m_td.itemId, m_td.num, getId());
        return true;
    }

    static UInt16 fire_begin = 47;
    static UInt16 fire_end = 51;
    static UInt8 fire_id2bit[] = {16/*47*/, 8/*48*/, 4/*49*/, 2/*50*/, 1/*51*/};
    static UInt8 fire_com[] = {24,20,18,17,12,10,9,6,5,3};
    static UInt8 fire_factor[][6] =
    {
        {0,     0,      100,    0,      0,      0},
        {0,     0,      0,      0,      100,    0},
        {0,     0,      0,      0,      0,      100},
        {0,     0,      0,      100,    0,      0},
        {0,     85,     100,    0,      0,      0},
        {0,     60,     100,    0,      0,      0},
        {30,    95,     0,      100,    0,      0},
        {0,     60,     0,      0,      100,    0},
        {85,    0,      0,      100,    0,      0},
        {60,    0,      0,      100,    0,      0},
    };

    void Player::makeFire(UInt32 id1, UInt32 id2)
    {
        Stream st(REP::TRIPOD_INFO);
        if (id1 < fire_begin)
            id1 = fire_begin;
        if (id2 < fire_begin)
            id2 = fire_begin;
        if (id1 > fire_end)
            id1 = fire_end;
        if (id2 > fire_end)
            id2 = fire_end;

        ItemBase* ib1 = GetPackage()->GetItem(id1, true);
        if (!ib1)
            ib1 = GetPackage()->GetItem(id1);
        if (!ib1) {
            SYSMSG_SEND(2003, this);
            return;
        }
        ItemBase* ib2 = GetPackage()->GetItem(id2, true);
        if (!ib2)
            ib2 = GetPackage()->GetItem(id2);
        if (!ib2) {
            SYSMSG_SEND(2003, this);
            return;
        }

        UInt32 id = fire_id2bit[id1-fire_begin] | fire_id2bit[id2-fire_begin];
        int i = 0;
        while (i < 10)
        {
            if (id == fire_com[i])
                break;
            ++i;
        }
        UInt8 rnd = uRand(100);
        int j = 0;
        while (j < 6)
        {
            if (fire_factor[i][j] && rnd <= fire_factor[i][j])
                break;
            ++j;
        }
        if (j < 6)
            m_td.fire = j+1;

        m_td.needgen = 1;

        st << static_cast<UInt8>(1);
        st << m_td.fire;
        st << m_td.quality;
        genAward(st);
        st << Stream::eos;
        send(st);
        DB6().PushUpdateData("UPDATE `tripod` SET `fire` = %u, `regen` = %u, `itemId` = %u, `num` = %u WHERE `id` = %" I64_FMT "u",
                m_td.fire, m_td.needgen, m_td.itemId, m_td.num, getId());

        GetPackage()->DelItem2(ib1, 1);
        GetPackage()->DelItem2(ib2, 1);
        SYSMSG_SEND(2002, this);

        GameAction()->doStrong(this, SthTripodFire , 0, 0);
        GuangGunCompleteTask(0,31);
    }

    void Player::getAward()
    {
        if (GetPackage()->IsFull())
        {
            sendMsgCode(0, 1011);
            return;
        }

        if (m_td.awdst != 1)
            return;

        if (!genAward())
            return;

        if (IsEquipTypeId(m_td.itemId))
        {
            GetPackage()->AddEquip(m_td.itemId, true, false, FromTripod);
            tripodUdpLog(1140, m_td.itemId);
        }
        else
        {
            GetPackage()->AddItem(m_td.itemId, m_td.num, true, false, FromTripod);
            tripodUdpLog(1140, m_td.itemId, m_td.num);
        }

        m_td.fire = 0;
        if (getVipLevel() > 2)
            m_td.quality = 3;
        else
            m_td.quality = 2;
        m_td.needgen = 1;
        m_td.awdst = 0;
        m_td.soul = 0;
        m_td.itemId = 0;
        m_td.num = 0;
        DB6().PushUpdateData("UPDATE `tripod` SET `soul`=0, `fire`=0, `quality`=%u, `awdst`=0, `itemId`=0, `num`=0, `regen`=1 WHERE `id` = %" I64_FMT "u",
                m_td.quality, getId());
        runTripodData(m_td);
        sendTripodInfo();
    }

    void Player::getAward(UInt8 type, UInt8 opt)
    {
        switch(type)
        {
        case 1:
            // 搜搜地图
            getSSDTAward(opt);
            break;
        case 2:
            // 欢乐大转盘
            getHappyAward(opt);
            break;
        case 3:
            // 今日目标
            getTargetAward(opt);
            break;
        case 4:
            // 回流今日目标
            getTargetAwardRF(opt);
            break;

        case 5:
            getSoSoMapAward();
            break;
        case 6:
            getNewRegisterAward(opt);
            break;
        case 7:
            //推广用注册玩家登录奖励领取
            getAwardFromAD();
            break;
        case 8:
            //回流用户新区道具奖
            getAwardFromRF();
            break;
        case 9:
            //领取礼物卡
            getAwardGiftCard();
            break;
        case 10:
            getAwardBirthday(opt);
            break;
        case 11:
            getAwardLogin(opt);
            break;
        case 12:
            getAwardBlueDiamond(opt);
            break;
        case 13:
            get11DailyAward(opt);
            break;
        case 14:
            getSSToolbarAward();
        case 15:
            getThanksGivingDay(opt);
            break;
        case 16:
            getConsumeAward();
            break;
        case 17:
            getDiamondInfo(opt);
            break;
        case 18:
            getLevelAward(opt);
            break;
        case 19:
            //QQ浏览器奖励
            getQQExplorerAward(opt);
            break;
        case 20:
            //QQ导航奖励
            getQQNavigationAward(opt);
            break;
        case 21:
            //QQ音乐奖励
            getQQMusicAward(opt);
            break;
        case 22:
            //QQ财付通奖励
            getQQTenpayAward(opt);
            break;
        case 23:
            //QQIM快速登录奖励
            getQQIMQuickLoginAward(opt);
            break;
        case 24:
            //装备继承补偿
            getEquipMoveAward(opt);
            break;
        case 25:
            //御剑等级回馈
            getVipLevelAward(opt);
            break;
        case 26:
            //QQ秀合作
            getQQXiuAward(opt);
            break;
        case 27:
            if (World::getSummerFlow())
            { 
                if(opt ==1)
                    getAwardFromSurmmeFlowr();
                sendSummerFlowInfo();
            }
            if(World::getSummerFlow3Time())
            {
                if(opt ==1 )
                    getAwardFromSummerFlow3();
                sendSummerFlow3LoginInfo();
            } 
        
            break;
        case 28:
            if(opt)
                getSummerFlow3OnlineAward(opt);
            sendSummerFlow3TimeInfo();
            break;
        case 29:
            //阵营检索
            checkZhenying();
            break;
        case 30:
            getAirBookLoginAward(opt);
            break;
        case 31:
            getAirBookOnlineAward();
                break;
        case 32:
            getGameBoxAward(opt);
                break;
        case 33:
                { 
                    if(opt>0)
                        getQZoneRechargeAward(opt);
                    sendQZoneRechargeAwardInfo();
                }
                break;
        case 34:
                {
                    if(opt>0)
                        getHappyValueAward(opt);
                    sendHappyValueInfo();
                    UInt32 grade = GetVar(VAR_YEARHAPPY_VALUE);
                    GameMsgHdr hdr1(0x1DA, WORKER_THREAD_WORLD, this, sizeof(grade));
                    GLOBAL().PushMsg(hdr1, &grade);
                }
                break;
        case 35:
            getQTAward(opt);
            break;
        case 36:
            setQTSign();
            break;
        case 37:
            getMicroCloudAward(opt);
            break;
        }
    }

   
    void Player::GMSetQTNUM(UInt8 num)
    {
        SetVar(VAR_QT_REGIST_NUM, num);
        SetVar(VAR_QT_AWARD_MARK, 0);

        UInt32 state = GetVar(VAR_QT_AWARD_MARK);
        UInt32 regState = GetVar(VAR_QT_REGIST_MARK);
        for(UInt8 pos=0; pos<num; pos++)
        {
            regState = SET_BIT(regState, pos);
        }
        SetVar(VAR_QT_REGIST_MARK, regState);
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(35);
        st << static_cast<UInt8>(state) << regState << Stream::eos;
        send(st);
        
    }
    void Player::setQTSpecialMark()
    {
        UInt32 day = 0;
        UInt32 mon = 0;
        UInt32 year = 0;
        TimeUtil::GetDMY(&day, &mon, &year);
        if(year != 2013 || mon != 12 || day < 13 || day > 31)
            return;
        
        UInt32 specialMark = GetVar(VAR_QT_SPECIAL_MARK);
        if(0 == specialMark)
        {
            SetVar(VAR_QT_REGIST_NUM, 6);
            SetVar(VAR_QT_SPECIAL_MARK, 1);
            SetVar(VAR_QT_REGIST_MARK, 63);
        }
        
    }

    void Player::setQTSign()
    {
        //UInt32 registSign = GetVar(VAR_QT_REGIST_SIGN);
        UInt32 day = 0;
        UInt32 mon = 0;
        UInt32 year = 0;
        TimeUtil::GetDMY(&day, &mon, &year);
        UInt32 state = GetVar(VAR_QT_REGIST_MARK);
        UInt8 dayRegistMark = GET_BIT(state, (day-1));
        if(0 == dayRegistMark)
        {
            state = SET_BIT(state, (day-1));
            SetVar(VAR_QT_REGIST_MARK, state);
            AddVar(VAR_QT_REGIST_NUM, 1);

            UInt32 awardState = GetVar(VAR_QT_AWARD_MARK);
            Stream st(REP::GETAWARD);
            st << static_cast<UInt8>(35);
            st << static_cast<UInt8>(awardState) << state << Stream::eos;
            send(st);
        }
    }

    void Player::getQTAward(UInt8 opt)
    {
        UInt32 state = GetVar(VAR_QT_AWARD_MARK);
        
        if(opt >= 1 && opt <= 5)
        {
            if (GetPackage()->GetRestPackageSize() < 6)
            {
                sendMsgCode(0, 1011);
                return;
            }

            bool res = false;
            UInt8 regNum = GetVar(VAR_QT_REGIST_NUM);
            if(1 == opt)
            {
                if(regNum >= 1)
                    res = true;
            }
            else if(5 == opt)
            {
                if(regNum >= 25)
                    res = true;
            }
            else
            {
                if(regNum >= ((opt - 1) * 5))
                    res = true;
            }

            UInt8 mark = GET_BIT(state, (opt-1));
            if(mark == 0 && res)
            {
                switch(opt)
                {
                    case 1:
                        {
                            GetPackage()->AddItem(56, 1, true, false, FromQTAward);
                            GetPackage()->AddItem(57, 1, true, false, FromQTAward);
                            GetPackage()->AddItem(15, 1, true, false, FromQTAward);
                        }
                        break;
                    case 2:
                        {
                            GetPackage()->AddItem(9371, 3, true, false, FromQTAward);
                            GetPackage()->AddItem(9390, 3, true, false, FromQTAward);
                        }
                        break;
                    case 3:
                        {
                            GetPackage()->AddItem(49, 2, true, false, FromQTAward);
                            GetPackage()->AddItem(50, 2, true, false, FromQTAward);
                        }
                        break;
                    case 4:
                        {
                            GetPackage()->AddItem(30, 1, true, false, FromQTAward);
                            GetPackage()->AddItem(503, 2, true, false, FromQTAward);
                        }
                        break;
                    case 5:
                        {
                            GetPackage()->AddItem(1126, 1, true, false, FromQTAward);
                            GetPackage()->AddItem(134, 1, true, false, FromQTAward);
                            GetPackage()->AddItem(1325, 1, true, false, FromQTAward);
                        }
                        break;
                }
                state = SET_BIT(state, (opt-1));
                SetVar(VAR_QT_AWARD_MARK, state);
            }
        }

        UInt32 registState = GetVar(VAR_QT_REGIST_MARK);
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(35);
        st << static_cast<UInt8>(state) << registState << Stream::eos;
        send(st);
    }

    void Player::checkZhenying()
    {
        UInt8 zyState = 0;

        if(g_eMeiCount >= g_kunLunCount)
           zyState = 1;
        
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(29);
        st << zyState << Stream::eos;
        send(st);
    }

    void Player::changeZYAward(UInt8 countryType)
    {
        UInt16 mark = 0;
        if(0 == countryType)
            mark = 4939;
        else
            mark = 4940;

        SYSMSG(title, 4938);
        SYSMSGV(content, mark);

        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {
            MailPackage::MailItem mitem[2] = {{GObject::MailPackage::Coupon,30}, {503, 2}};
            mailPackageManager.push(mail->id, mitem, 2, true);
        }
    }

    void Player::getQQXiuAward(UInt8 opt)
    {
        UInt8 state = GetVar(VAR_QQXIU_AWARD);

        if (GetPackage()->GetRestPackageSize() < 6 && opt == 1)
        {
            sendMsgCode(0, 1011);

            return;
        }

        if(opt == 1 && state == 0)
        {
            getCoupon(20);
            GetPackage()->AddItem(503, 2, true, false, FromQQXiu);
            GetPackage()->AddItem(1126, 2, true, false, FromQQXiu);
            GetPackage()->AddItem(49, 2, true, false, FromQQXiu);
            GetPackage()->AddItem(50, 2, true, false, FromQQXiu);

            SetVar(VAR_QQXIU_AWARD, 1);
            state = 1;
        }
            
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(26);
        st << state << Stream::eos;
        send(st);
    }

    void Player::getVipLevelAward(UInt8 opt)
    {
        if(opt > getVipLevel())
        {
            sendMsgCode(0, 1003);

            return;
        }

        if (GetPackage()->GetRestPackageSize() < 6 && opt > 0)
        {
            sendMsgCode(0, 1011);

            return;
        }

        UInt32 state = GetVar(VAR_VIPLEVEL_AWARD);

        if(opt > 0)
        {
            UInt8 pos = opt - 1;
            UInt8 mark = GET_BIT_MARK(state, pos);

            if(opt > 0 && mark == 0)
            {
                UInt8 res = GameAction()->onVipLevelAward(this, opt);
                if(1 == res)
                {
                    state = SET_BIT(state, pos);
                    SetVar(VAR_VIPLEVEL_AWARD, state);
                }
                else if(2 == res)
                {
                    sendMsgCode(0, 1090);

                    return;
                }
                else if(3 == res)
                {
                    sendMsgCode(0, 1003);

                    return;
                }
                else
                {
                    return;
                }
            }
        }

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(25);
        st << state << Stream::eos;
        send(st);
    }

    void Player::getEquipMoveAward(UInt8 opt)
    {   
        return; //暂时不上

        int count = 0;

        UInt8 state = GetVar(VAR_EQUIP_MOVE_AWARD);

        if(0 == state)
        {
            count = int(getFighterEquipAward() + GetPackage()->getPackageEquipCount());

            if(0 == count)
            {
                count = 1;
            }

            if(1 == opt)
            {

                if(GetPackage()->GetRestPackageSize() < 6)
                {
                    sendMsgCode(0, 1011);

                     return;
                }

                GetPackage()->AddItem(503, count, true, false, FromEquipMoveAward);

                SetVar(VAR_EQUIP_MOVE_AWARD, 1);

                count = -1;
            }
        }
        else
        {
            count = -1;
        }

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(24);
        st << count << Stream::eos;
        send(st);
    }

    UInt32 Player::getFighterEquipAward()
    {
        UInt32 count = 0;

        std::map<UInt32, Fighter *>::iterator it = _fighters.begin();

        for (; it != _fighters.end(); ++it)
        {
            Fighter* fgt = it->second;

            ItemEquip* e[8] = {fgt->getWeapon(), fgt->getArmor(0), fgt->getArmor(1),
                               fgt->getArmor(2), fgt->getArmor(3), fgt->getArmor(4),
                               fgt->getAmulet(), fgt->getRing()};

            for (int i = 0; i < 8; ++i)
            {
                if(e[i] && e[i]->getReqLev() >= 60)
                {
                   if(Item_Weapon == e[i]->getClass())
                   {
                       switch(e[i]->getItemEquipData().enchant)
                       {
                           case 6:
                               count += 1;
                               break;
                           case 7:
                               count += 2;
                               break;
                           case 8:
                               count += 10;
                               break;
                           case 9:
                               count += 30;
                               break;
                           case 10:
                               count += 50;
                               break;
                           case 11:
                               count += 100;
                               break;
                           case 12:
                               count += 150;
                               break;
                       }
                   }
                   else
                   {
                       switch(e[i]->getItemEquipData().enchant)
                       {
                           case 6:
                               count += 1;
                               break;
                           case 7:
                               count += 2;
                               break;
                           case 8:
                               count += 5;
                               break;
                           case 9:
                               count += 10;
                               break;
                           case 10:
                               count += 20;
                               break;
                           case 11:
                               count += 40;
                               break;
                           case 12:
                               count += 70;
                               break;
                       }
                   }
                }
            }
        }
       
        return count;
    }

    void Player::getQQTenpayAward(UInt8 opt)
    {
        UInt8 state = GetVar(VAR_QQTENPAY_AWARD);
        UInt8 state1 = GetVar(VAR_QQTENPAY_LOTTERY);
        int idx = -1;

        if (GetPackage()->GetRestPackageSize() < 6 && (opt == 1 || opt == 2))
        {
            sendMsgCode(0, 1011);

            return;
        }

        if(opt == 1 && state == 0)
        {
            GetPackage()->AddItem(9371, 2, true, false, FromQQTenpay);
            GetPackage()->AddItem(503, 1, true, false, FromQQTenpay);
            GetPackage()->AddItem(515, 1, true, false, FromQQTenpay);
            GetPackage()->AddItem(509, 1, true, false, FromQQTenpay);
            GetPackage()->AddItem(50, 10, true, false, FromQQTenpay);

            SetVar(VAR_QQTENPAY_AWARD, 1);
            state = 1;
            udpLog("huodong", "F_130620_1", "", "", "", "", "act");
        }
        else if(opt == 2 && state1 == 0)
        {
            idx = GameAction()->RunBlueDiamondAward(this, 6);
            if(idx <= 0)
                return;
            SetVar(VAR_QQTENPAY_LOTTERY, 1);
            state1 = 1;
        }
            
        UInt8 states = state | (state1 << 1);
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(22);
        st << states << idx << Stream::eos;
        send(st);
    }

    void Player::getQQIMQuickLoginAward(UInt8 opt)
    {
        UInt8 state = GetVar(VAR_QQIM_QUICK_LOGIN_AWARD);

        if(GetPackage()->GetRestPackageSize() < 6 && 1 == opt)
        {
            sendMsgCode(0, 1011);

            return;
        }

        if(state == 0 && opt == 1)
        {
            GetPackage()->AddItem(50, 1, true, false, FromQQIMQuickLogin);
            GetPackage()->AddItem(509, 1, true, false, FromQQIMQuickLogin);
            GetPackage()->AddItem(9367, 1, true, false, FromQQIMQuickLogin);
            GetPackage()->AddItem(9369, 1, true, false, FromQQIMQuickLogin);
            GetPackage()->AddItem(15, 1, true, false, FromQQIMQuickLogin);

            SetVar(VAR_QQIM_QUICK_LOGIN_AWARD, 1);
            state = 1;
        }

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(23);
        st << state << Stream::eos;
        send(st);
    }

    void Player::getQQMusicAward(UInt8 opt)
    {
        UInt8 state = GetVar(VAR_QQMUSIC_DAY_AWARD);

        if (GetPackage()->GetRestPackageSize() < 6 && opt == 1)
        {
			sendMsgCode(0, 1011);

            return;
        }

        if(opt == 1 && state == 0)
        {
            GetPackage()->AddItem(134, 1, true, false, FromQQMusic);
            GetPackage()->AddItem(1325, 1, true, false, FromQQMusic);
            GetPackage()->AddItem(50, 1, true, false, FromQQMusic);
            GetPackage()->AddItem(49, 1, true, false, FromQQMusic);
            GetPackage()->AddItem(30, 1, true, false, FromQQMusic);

            SetVar(VAR_QQMUSIC_DAY_AWARD, 1);

            state = 1;
        }

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(21);
        st << state << Stream::eos;
        send(st);
    }

    void Player::getQQNavigationAward(UInt8 opt)
    {
        UInt8 states = 0;

        UInt8 dayAward = GetVar(VAR_QQNAVIGATION_DAY_AWARD);
        UInt8 weekAward = GetVar(VAR_QQNAVIGATION_WEEK_AWARD);
        UInt8 firstLoginAward = GetVar(VAR_QQNAVIGATION_FIRST_LOGIN_AWARD);

        if(getVia() == "ssgw_qqdh")
        {

            if (GetPackage()->GetRestPackageSize() < 6 && opt >= 1 && opt <= 3) 
            {
			    sendMsgCode(0, 1011);

                return;
            }

            if(opt == 1 && dayAward == 0)  //领取QQ导航每天奖励
            {
                GetPackage()->AddItem(15, 1, true, false,FromQQNavigation);
                GetPackage()->AddItem(48, 1, true, false, FromQQNavigation);
                SetVar(VAR_QQNAVIGATION_DAY_AWARD, 1);
                dayAward = 1;
            }
            else if(opt == 2 && weekAward == 0)  //领取QQ导航每月奖励
            {
                GetPackage()->AddItem(133, 1, true, false,FromQQNavigation);
                GetPackage()->AddItem(1325, 1, true, false, FromQQNavigation);
                SetVar(VAR_QQNAVIGATION_WEEK_AWARD, 1);
                weekAward = 1;
            }
            else if(opt == 3 && firstLoginAward == 0)  //领取QQ导航首次登录奖励
            {
                GetPackage()->AddItem(503, 1, true, false,FromQQNavigation);
                GetPackage()->AddItem(500, 1, true, false, FromQQNavigation);
                GetPackage()->AddItem(50, 1, true, false, FromQQNavigation);
                GetPackage()->AddItem(49, 1, true, false, FromQQNavigation);
                SetVar(VAR_QQNAVIGATION_FIRST_LOGIN_AWARD, 1);
                firstLoginAward = 1;
            }

            states = (dayAward + 1) | (weekAward + 1) << 2 | (firstLoginAward + 1) << 4;
        }
        else
        {
            if(1 == dayAward)
            {
                dayAward += 1;
            }

            if(1 == weekAward)
            {
                weekAward += 1;
            }

            if(1 == firstLoginAward)
            {
                firstLoginAward += 1;
            }
            
            states = dayAward | weekAward << 2 | firstLoginAward << 4;
        }

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(20);
        st << states << Stream::eos;
        send(st);
    }

    void Player::getMicroCloudAward(UInt8 opt)
    {
        UInt8 state = GetVar(VAR_MicroCloud_AWARD);
        if(1 == opt && 0 == state)
        {
            GetPackage()->AddItem(503, 3, true, false, FromMicroCloudAward);
            GetPackage()->AddItem(500, 3, true, false, FromMicroCloudAward);
            GetPackage()->AddItem(48, 3, true, false, FromMicroCloudAward);
            GetPackage()->AddItem(440, 3, true, false, FromMicroCloudAward);
            SetVar(VAR_MicroCloud_AWARD, 1);
            state = 1;
        }

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(37);
        st << state << Stream::eos;
        send(st);
    }

    void Player::getQQExplorerAward(UInt8 opt)
    {
        UInt8 v = GetVar(VAR_QQEXPLORER_AWARD);
        if(opt == 1 && v == 0)
        {
            GetPackage()->AddItem(503, 1, true, false, FromQQExplorer);
            GetPackage()->AddItem(514, 1, true, false, FromQQExplorer);
            GetPackage()->AddItem(1325, 1, true, false, FromQQExplorer);
            GetPackage()->AddItem(134, 1, true, false, FromQQExplorer);
            GetPackage()->AddItem(509, 1, true, false, FromQQExplorer);
            SetVar(VAR_QQEXPLORER_AWARD, 1);
            v = 1;
        }

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(19);
        st << v << Stream::eos;
        send(st);
    }

    void Player::getSSToolbarAward()
    {
        if (!World::getSSToolbarAct())
            return;
        if (GetPackage()->GetRestPackageSize() < 6)
        {
			sendMsgCode(0, 1011);
            return;
        }
        if (GetVar(VAR_AWARD_SSTOOLBAR) == 0 )
        {
            GetPackage()->Add(509, 1, true);
            GetPackage()->Add(50, 1, true);
            GetPackage()->Add(49, 1, true);
            GetPackage()->Add(133, 1, true);
            GetPackage()->Add(500, 1, true);
            GetPackage()->Add(56, 1, true);
            SetVar(VAR_AWARD_SSTOOLBAR, 1);
            udpLog("huodong", "F_10000_16", "", "", "", "", "act");
        }
        sendSSToolbarInfo();
    }
    void Player::sendSSToolbarInfo()
    {
        if (!World::getSSToolbarAct())
            return;
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(14);
        UInt8 res = GetVar(VAR_AWARD_SSTOOLBAR);
        st << res << Stream::eos;
        send(st);
    }
    void Player::get11DailyAward(UInt8 opt)
    {
        if(!World::get11Act())
            return;

        if(opt == 1) 
        {
            if(GetVar(VAR_ACT_LOGIN_AWARD) != 0)
                return;
            if(!GameAction()->Run11ActAward(this, opt))
                return;
            SetVar(VAR_ACT_LOGIN_AWARD, 1);
        }
        else if(opt == 2) 
        {
            if(GetVar(VAR_ACT_LOGIN_AWARD_VIP) != 0 || getVipLevel() == 0)
                return;
            if(!GameAction()->Run11ActAward(this, opt))
                return;
            SetVar(VAR_ACT_LOGIN_AWARD_VIP, 1);
        }     

        send11DailyInfo();
    }

    void Player::send11DailyInfo()
    {
        if(!World::get11Act())
            return;

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(13);
        UInt8 normal_award = GetVar(VAR_ACT_LOGIN_AWARD);
        UInt8 vip_award = GetVar(VAR_ACT_LOGIN_AWARD_VIP);
        st << normal_award << vip_award << Stream::eos;
        send(st);
    }

    void Player::getSSDTAward(UInt8 opt)
    {
        if(!World::getSSDTAct() || opt > 3)
            return;

        UInt8 status = GetVar(VAR_AWARD_SSDT_2);
        // 点亮每日旗帜
        if(opt == 0)
        {
            if(GetVar(VAR_AWARD_SSDT_1))
                return;
            if(!GameAction()->RunSSDTAward(this, opt))
                return;

            ++ status;
            SetVar(VAR_AWARD_SSDT_1, 1);
            SetVar(VAR_AWARD_SSDT_2, status);
        }
        else
        {
            static UInt8 flags[] = {1, 2, 4, 7};
            if( (1 << opt) & (status >> 4) )
                return;
            if(flags[opt] > (status & 0x0F))
                return;
            if(!GameAction()->RunSSDTAward(this, opt))
                return;

            status |= (1 << (opt + 4));
            SetVar(VAR_AWARD_SSDT_2, status);
        }

        sendSSDTInfo();
    }

    void Player::sendSSDTInfo()
    {
        if(!World::getSSDTAct())
            return;

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(1);
        UInt8 status = GetVar(VAR_AWARD_SSDT_2);
        if(GetVar(VAR_AWARD_SSDT_1))
            status |= (1 << 4);
        st << status << Stream::eos;
        send(st);
    }

    void Player::getNewRegisterAward(UInt8 opt)
    {
        if(opt != 0 && opt != 1)
            return;
        if(GetLev() > 1)
            return;
        if(opt == 1)
        {
            if(1 != GetVar(VAR_AWARD_NEWREGISTER))
                return;
			std::vector<GData::LootResult>::iterator it;
			for(it = _RegisterAward.begin(); it != _RegisterAward.end(); ++ it)
			{
				m_Package->ItemNotify(it->id, it->count);
			}
			_RegisterAward.clear();
            SetVar(VAR_AWARD_NEWREGISTER, 2);
        }
        else{
            if(GetVar(VAR_AWARD_NEWREGISTER))
                return;
            UInt8 idx = 0;
            if( 0 == (idx = GameAction()->RunNewRegisterAward(this)) )
                return;
            sendNewRegisterAward(idx);
            SetVar(VAR_AWARD_NEWREGISTER, 1);
        }
    }

    void Player::sendNewRegisterAward(UInt8 idx)
    {
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(6);
        st << idx;
        st << Stream::eos;
        send(st);
    }

    void Player::sendGameBoxAward()
    {
        UInt8 daily_idx = 0;
        UInt8 new_idx = 0;
        if(GetVar(VAR_GAMEBOX_DAILY) == 2)
            daily_idx = 1; 
        if(GetVar(VAR_GAMEBOX_NEW) == 2)
            new_idx = 1;    
        UInt8 idx = (daily_idx<< 1) | new_idx;
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(32);
        st << idx ;
        st << Stream::eos;
        send(st);
    }
    
    void Player::getAwardFromAD()
    {
        if(GetVar(VAR_AWARD_NEWREGISTER))
            return;
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(7);
        UInt8 succ = GameAction()->RunNewRegisterAwardAD_RF(this, 1);
        if(succ)
            SetVar(VAR_AWARD_NEWREGISTER, 3);
        st << succ << Stream::eos;
        send(st);
    }

    void Player::getAwardFromRF()
    {
        if(GetVar(VAR_AWARD_NEWREGISTER))
            return;
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(8);
        UInt8 succ = GameAction()->RunNewRegisterAwardAD_RF(this, 2);
        if(succ)
            SetVar(VAR_AWARD_NEWREGISTER, 4);
        st << succ << Stream::eos;
        send(st);
    }
    void Player::getAwardFromSurmmeFlowr()   //暑期回流
    {
        if (!World::getSummerFlow())
            return;
        UInt32 type = GetVar(VAR_SUMMERFLOW_TYPE);
        UInt32 Award = GetVar(VAR_SUMMERFLOW_AWARD);
        if(type == 0||Award==1)
            return ;
        UInt8 succ = GameAction()->RunSummerFlowAward(this, type);
        if(succ)
        {
            SetVar(VAR_SUMMERFLOW_AWARD, 1);
            SetVar(VAR_SUMMERFLOW_TYPE,0);
            char str[16] = {0};
            sprintf(str, "F_130722_%d", type);
            udpLog("shuqihuiliu", str, "", "", "", "", "act");
        }
    } 
    void Player::getAwardFromSummerFlow3()   //暑期回流3
    {
        if (!World::getSummerFlow3Time())
            return;
        UInt32 type = GetVar(VAR_SUMMERFLOW3_TYPE);
        UInt32 Award = GetVar(VAR_SUMMERFLOW3_TYPE_AWARD);
        if(type == 0||Award==1)
            return ;
        UInt8 succ = GameAction()->RunSummerFlowAward(this, type);
        if(succ)
        {
            SetVar(VAR_SUMMERFLOW3_TYPE_AWARD, 1);
            char str[16] = {0};
            sprintf(str, "F_130722_%d", type);
            udpLog("shuqihuiliu", str, "", "", "", "", "act");
        }
    } 
    void Player::getAwardFromSummerMeet()   //暑期，奇遇
    {
        if (!World::getSummerMeetTime())
            return;
        UInt32 type = GetVar(VAR_SUMMER_MEET_TYPE);
        UInt32 Award = GetVar(VAR_SUMMER_MEET_TYPE_AWARD);
        if(type == 0||Award==1 || type > 3)
            return ;
        UInt8 succ = GameAction()->RunSummerMeetAward(this, type);
        if(succ)
        {
            SetVar(VAR_SUMMER_MEET_TYPE_AWARD, 1);
            sendSummerMeetRechargeInfo();
            SetVar(VAR_SUMMER_MEET_TYPE,5);
            char str[16] = {0};
            sprintf(str, "F_130722_%d", type+4);
            udpLog("shuqihuiliu", str, "", "", "", "", "act");
        }
    } 
    void Player::getAwardGiftCard()
    {
        if(GetVar(VAR_AWARD_NEWREGISTER))
            return;
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(9);
        UInt8 succ = GameAction()->RunNewRegisterAwardAD_RF(this, 3);
        if(succ)
            SetVar(VAR_AWARD_NEWREGISTER, 5);
        st << succ << Stream::eos;
        send(st);
    }

    void Player::getAwardBirthday(UInt8 opt)
    {
    #define NUM 3
        if(opt != 0 && opt != 1 && opt != 2)
            return;
        UInt32 day = 1;
        UInt32 mon = 1;
        UInt32 year = 2012;
        TimeUtil::GetDMY(&day, &mon, &year);
        if(year != 2012 || mon != 9 || day < 16 || day > 30)
            return;
        UInt8 num = GetVar(VAR_AWARD_BIRTHDAY);
        if(opt == 2){    //邀请好友成功
            if(num >= NUM) return;
            Stream st(REP::GETAWARD);
            st << static_cast<UInt8>(10) << static_cast<UInt8>(0);
            st << static_cast<UInt8>(2 - num) << static_cast<UInt8>(1)<< Stream::eos;
            send(st);
            SetVar(VAR_AWARD_BIRTHDAY, num + NUM);
        }
        else if(opt == 1){  //领奖
			std::vector<GData::LootResult>::iterator it;
			for(it = _BirthdayAward.begin(); it != _BirthdayAward.end(); ++ it)
			{
				m_Package->ItemNotify(it->id, it->count);
			}
			_BirthdayAward.clear();
            OnShuoShuo(SS_SLLP);
        }
        else if(opt == 0){  //抽奖
            UInt8 flag = 0;
            if(num >= NUM){ //已邀请过好友
                num -= NUM;
                if(num < 0 || num >= NUM)
                    num = 2;
                flag = 1;
                if(num >= 2) return;
            }
            else{
                if(num >= 1) //未邀请过好友
                    return;
            }
            UInt8 id = GameAction()->RunBirthdayAward(this);
            if(!id) return;
            {
                Stream st(REP::GETAWARD);
                st << static_cast<UInt8>(10) << id << Stream::eos;
                send(st);
            }
            SetVar(VAR_AWARD_BIRTHDAY, flag ? (num + 1 + NUM) : (num + 1));
            {
                Stream st(REP::GETAWARD);
                st << static_cast<UInt8>(10) << static_cast<UInt8>(0);
                st << static_cast<UInt8>(flag ? (2 - num - 1) : 0) << flag << Stream::eos;
                send(st);
            }
        }
    #undef NUM
    }
    void Player::CheckCanAwardBirthday()
    {
        UInt32 day = 1;
        UInt32 mon = 1;
        UInt32 year = 2012;
        TimeUtil::GetDMY(&day, &mon, &year);
        if(year == 2012 && mon == 9 && day >= 16 && day <= 30){
            //生日罗盘许愿星(周年庆活动)
            UInt8 num = GetVar(VAR_AWARD_BIRTHDAY);
            UInt8 flag = 0;
            if(num >= 3){
                num -= 3;
                if(num < 0 || num >= 3)
                    num = 2;
                flag = 1;
            }
            Stream st(REP::GETAWARD);
            st << static_cast<UInt8>(10) << static_cast<UInt8>(0);
            st << static_cast<UInt8>(flag ? (2 - num) : (1 - num)) << flag << Stream::eos;
            send(st);
        }
    }
    
    void Player::getAwardLogin(UInt8 opt)
    {
        if(opt == 1) //领奖
        {
            if(1 != GetVar(VAR_AWARD_LOGIN))
                return;
            //10.14登录抽奖合作与生日罗盘许愿星(周年庆活动)相同的抽奖
			std::vector<GData::LootResult>::iterator it;
			for(it = _BirthdayAward.begin(); it != _BirthdayAward.end(); ++ it)
			{
				m_Package->ItemNotify(it->id, it->count);
			}
			_BirthdayAward.clear();
            SetVar(VAR_AWARD_LOGIN, 2);
        }
        else if(opt == 0) //抽奖
        {
            if(GetVar(VAR_AWARD_LOGIN))
                return;
            UInt8 idx = 0;
            if( 0 == (idx = GameAction()->RunBirthdayAward(this)) )
                return;
            Stream st(REP::GETAWARD);
            st << static_cast<UInt8>(11) << idx << Stream::eos;
            send(st);
            SetVar(VAR_AWARD_LOGIN, 1);
        }
        else if(opt == 2) //告诉客户端可以抽奖
        {
            if(GetVar(VAR_AWARD_LOGIN))
                return;
            if(World::getLoginAward())
            {
                Stream st(REP::GETAWARD);
                st << static_cast<UInt8>(11) << static_cast<UInt8>(0) << Stream::eos;
                send(st);
            }
        }
    }

    void Player::getAwardBlueDiamond(UInt8 opt)
    {
        if(opt >= 1) //抽奖
        {
            UInt8 idx = 0;
            if( 0 == (idx = GameAction()->RunBlueDiamondAward(this, opt)) )
                return;
            Stream st(REP::GETAWARD);
            st << static_cast<UInt8>(12) << idx << Stream::eos;
            send(st);
            getDiamondInfo(opt);
            blueDiamondAwardUdpLog(opt);
        }
    }
    void Player::blueDiamondAwardUdpLog(UInt8 type)
    {
            char str[16] = {0};
            sprintf(str, "F_130531_%d", type);
            udpLog("choujiangquan", str, "", "", "", "", "act");
    }

    void Player::cFriendAwardUdpLog(UInt8 type)
    {
            char str[16] = {0};
            sprintf(str, "F_1077_%d", type);
            udpLog("inviteLuckyDraw", str, "", "", "", "", "act");
    }

    void Player::getDiamondInfo(UInt8 opt)
    {
        static UInt32 s_varId[] = {196, 197, 245};
        if (opt == 0 || opt > 3)
            return;
        UInt32 id = s_varId[opt-1];
        UInt8 num = GetVar(id);
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(17) << opt << num << Stream::eos;
        send(st);
    }
    void Player::getLevelAward(UInt8 opt)
    {
        if(GetLev() < 28)
            return;
        UInt32 opTime = TimeUtil::MkTime(cfg.openYear, cfg.openMonth, cfg.openDay);
        if(opTime <= TimeUtil::MkTime(2013, 5, 3))
            return;
        if(opt && !hasChecked())
            return;
        if(!GameAction()->RunLevelAward(this, opt))
            return;
        LevelAwardActUdpLog(opt);
        getLevelAwardInfo();
    }
    void Player::LevelAwardActUdpLog(UInt8 type)
    {
        UInt32 level = GetLev();
        char action[16] = "";
        snprintf (action, 16, "F_10000_%d_%u", type, level);
        udpLog("LevelAward", action, "", "", "", "", "act");
    }
    void Player::getLevelAwardInfo()
    {
        UInt32 var_lev = GetVar(VAR_LEVEL_AWARD);
        UInt32 lev = GetLev();
        if(lev < 28)
            return;
        UInt32 opTime = TimeUtil::MkTime(cfg.openYear, cfg.openMonth, cfg.openDay);
        UInt8 suc = (var_lev == lev);
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(18) << suc;
        st << static_cast<UInt8>(opTime <= TimeUtil::MkTime(2013, 5, 3) ? 0 : 1);
        st << Stream::eos;
        send(st);
    }
    void Player::getConsumeAward()
    {
        static int s_items[2][8] ={
            {515,507,509,503,1325,47,134,1717},
            {515,507,509,503,1325,47,134,5026}
            };
        if (!World::getConsumeAwardAct())
            return;
        /*
        if (!is3366AndBD())
            return;
        */
        if (GetVar(VAR_CONSUME)/300 > GetVar(VAR_CONSUME_AWARD_COUNT))
        {
            UInt8 opt = 1; //1:普通用户 2:3366蓝钻
           // if (atoi(getDomain()) == 11 && isBD())
            UInt8 idx = GameAction()->RunConsumeAward(this, opt);
            if (idx > 0)
            {
                AddVar(VAR_CONSUME_AWARD_COUNT, 1);
                sendConsumeAwardInfo(idx);

                char str[64] = {0};
                sprintf(str, "F_10001_0118_%d", s_items[opt-1][idx-1]);
                udpLog("huodong", str, "", "", "", "", "act");
            }
        }
    }
    void Player::getWeiboAward(UInt8 opt, std::string key)
    {
        if (GetPackage()->GetRestPackageSize() < 2)
        {
            sendMsgCode(0, 1011);
            return;
        }
        UInt8 v = GetVar(VAR_WEIBO_AWARD_GOT);
        if (1 == opt)//微信
        {
            if (key != "27036")
            {
                sendMsgCode(0, 1043);
                return;
            }
            if ((v&0x01) == 0)
            {
                getCoupon(20);
                m_Package->Add(503,1,true);
                m_Package->Add(514,1,true);
                v |= 0x01;
                SetVar(VAR_WEIBO_AWARD_GOT, v);
            }
        }
        if (2 == opt) //微博
        {
            if((v&0x02) == 0)
            {
                getCoupon(10);
                m_Package->Add(134,1,true);
                v |= 0x02;
                SetVar(VAR_WEIBO_AWARD_GOT, v);
            }
        }
        sendWeiboAwardInfo();
    }
    void Player::sendWeiboAwardInfo()
    {
        Stream st(REP::ACTIVITY_REWARD);
        st << static_cast<UInt8>(13) << static_cast<UInt8>(GetVar(VAR_WEIBO_AWARD_GOT)) << Stream::eos;
        send(st);
    }
    void Player::sendConsumeAwardInfo(UInt8 idx)
    {
        if (!World::getConsumeAwardAct())
            return;
        /*
        if (!is3366AndBD())
            return;
        */
        UInt8 opt = 1; //1:普通用户 2:3366蓝钻
        //if (atoi(getDomain()) == 11 && isBD())
        int v = int(GetVar(VAR_CONSUME)/300) - GetVar(VAR_CONSUME_AWARD_COUNT);
        if (v < 0)
            v = 0;
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(16) << opt << idx << v << Stream::eos;
        send(st);
    }

    void Player::getThanksGivingDay(UInt8 opt)
    {
        if(!World::getThanksgiving())
            return;
        if(opt == 0) //免费领取
        {
            if(GetVar(VAR_TGDT) & 0x01)
                return;
            if(GameAction()->RunThanksGivingDayAward(this, 1))
            {
                UInt32 var = GetVar(VAR_TGDT) | 0x01;
                SetVar(VAR_TGDT, var);
                Stream st(REP::GETAWARD);
                st << static_cast<UInt8>(15) << static_cast<UInt8>(4) << Stream::eos;
                send(st);
                udpLog("huodong", "F_10000_15", "", "", "", "", "act");
            }
        }
        if(opt == 1) //付费领取(30仙石)
        {
            if(!hasChecked())
                return;
            if(GetVar(VAR_TGDT) & 0x02)
                return;
			if (getGold() < 30)
			{
				sendMsgCode(0, 1104);
				return;
			}
            if(GameAction()->RunThanksGivingDayAward(this, 2))
            {
                UInt32 var = GetVar(VAR_TGDT) | 0x02;
                SetVar(VAR_TGDT, var);
                ConsumeInfo ci(ThanksGivingDay, 0, 0);
                useGold(30, &ci);
                Stream st(REP::GETAWARD);
                st << static_cast<UInt8>(15) << static_cast<UInt8>(5) << Stream::eos;
                send(st);
            }
        }
        if(opt == 2) //告诉客户端领取情况
        {
            Stream st(REP::GETAWARD);
            st << static_cast<UInt8>(15) << static_cast<UInt8>(GetVar(VAR_TGDT)) << Stream::eos;
            send(st);
        }
    }

    void Player::getHappyAward(UInt8 opt)
    {
        if(opt == 6)
        {
			std::vector<GData::LootResult>::iterator it;
			for(it = _lastLoot.begin(); it != _lastLoot.end(); ++ it)
			{
				m_Package->ItemNotify(it->id, it->count);
			}
			_lastLoot.clear();
        }

        if(!World::getJune() || opt > 5)
            return;

        UInt16 itemId = 0;
        UInt8 status = GetVar(VAR_JUNE_ITEM);
        // 转到转盘
        if(opt == 0)
        {
            UInt32 happy = GetVar(VAR_JUNE_HAPPY);
            if(happy < 20)
                return;
            if(0 == (itemId = GameAction()->RunHappyAward(this, opt)))
                return;

            GData::LootResult lt;
            lt.id = itemId;
            lt.count = 1;
            _lastLoot.push_back(lt);
            SetVar(VAR_JUNE_HAPPY, happy - 20);
        }
        else
        {
            if( (1 << (opt - 1)) & status )
                return;
            if(0 == GameAction()->RunHappyAward(this, opt))
                return;

            status |= (1 << (opt - 1));
            SetVar(VAR_JUNE_ITEM, status);
        }

        sendHappyInfo(itemId);
    }

    void Player::getTargetAward(UInt8 opt)
    {
        UInt8 idx = 1;
        // 转到转盘
        if(opt == 0 && 1 == GetVar(VAR_CLAWARD2))
        {
            idx = GameAction()->RunTargetAward(this);
            SetVar(VAR_CLAWARD2, 2);
            Stream st(REP::GETAWARD);
            st << static_cast<UInt8>(3);
            st << idx;
            st << Stream::eos;
            send(st);
        }
        else if(opt == 1)
        {
			std::vector<GData::LootResult>::iterator it;
			for(it = _lastLoot.begin(); it != _lastLoot.end(); ++ it)
			{
				m_Package->ItemNotify(it->id, it->count);
			}
			_lastLoot.clear();
        }
    }

    void Player::getTargetAwardRF(UInt8 opt)
    {
        UInt8 idx = 1;
        // 转到转盘
        if(opt == 0 && 1 == GetVar(VAR_CTSAWARDRF))
        {
            idx = GameAction()->RunTargetAwardRF(this);
            SetVar(VAR_CTSAWARDRF, 2);
            Stream st(REP::GETAWARD);
            st << static_cast<UInt8>(4);
            st << idx;
            st << Stream::eos;
            send(st);
        }
        else if(opt == 1)
        {
			std::vector<GData::LootResult>::iterator it;
			for(it = _lastLoot.begin(); it != _lastLoot.end(); ++ it)
			{
				m_Package->ItemNotify(it->id, it->count);
			}
			_lastLoot.clear();
        }
    }

    void Player::lastLootPush(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _lastLoot.push_back(lt);
    }

    void Player::RegisterAward(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _RegisterAward.push_back(lt);
    }

    void Player::BirthdayAward(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _BirthdayAward.push_back(lt);
    }

    void Player::lastQueqiaoAwardPush(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _lastQueqiaoAward.push_back(lt);
    }

    void Player::checkLastQueqiaoAward()
    {
        std::vector<GData::LootResult>::iterator it;
        for(it = _lastQueqiaoAward.begin(); it != _lastQueqiaoAward.end(); ++ it)
        {
            m_Package->ItemNotify(it->id, it->count);
        }
        _lastQueqiaoAward.clear();
    }

    void Player::checkLastCFTicketsAward()
    {
        Stream st(REP::CFRIEND);
        st << static_cast<UInt8>(4);
        st << getName() << getCountry();
        st << static_cast<UInt8>(_lastCFTicketsAward.size());
        std::vector<GData::LootResult>::iterator it;
        for(it = _lastCFTicketsAward.begin(); it != _lastCFTicketsAward.end(); ++ it)
        {
            if(it->id == COUPON_ID)
                checkLastBattled();
            else if(it->id != 0)
                GetPackage()->ItemNotify(it->id, it->count);
            st << static_cast<UInt16>(it->id);
            st << static_cast<UInt8>(it->count);
        }
        _lastCFTicketsAward.clear();
        st << Stream::eos;
        NETWORK()->Broadcast(st);
    }

    void Player::lastCFTicketsAward(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _lastCFTicketsAward.push_back(lt);
    }

    void Player::sendHappyInfo(UInt16 itemId)
    {

        if(!World::getJune())
            return;

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(2);
        UInt32 happy = GetVar(VAR_JUNE_HAPPY);
        UInt8 status = GetVar(VAR_JUNE_ITEM);
        st << happy << static_cast<UInt8>(happy >= 20 ? 1 : 0) << itemId << status << Stream::eos;
        send(st);
    }

    void Player::getYearActAward(UInt8 type)
    {
        bool ret = false;
        if(GetPackage()->GetRestPackageSize() < 9)
        {
            sendMsgCode(0, 1011);
            return;
        }
        Stream st(REP::COUNTRY_ACT);
        UInt8 subType = 1;
        st << subType;
        st << type;
        if(type == 1)
        {
            if(GetVar(VAR_YEAR_SWORDSMAN))
                return;
            ret = GameAction()->onGetYearActAward(this, type);
            if(ret)
            {
                SetVar(VAR_YEAR_SWORDSMAN, 1);
                st << static_cast<UInt8>(1);
                st << Stream::eos;
                send(st);
                OnShuoShuo(SS_PUBTST_PKG);
                char action[16] = "";
                snprintf (action, 16, "F_%d_%d", 1098, 1);
                udpLog("916", action, "", "", "", "", "act");
            }
        }
        else if(type == 2)
        {
            UInt8 status = GetVar(VAR_YEAR_NOBLE);
            UInt8 newStatus;
            if(atoi(m_domain) == 11)
            {
                if(is3366AndLevel4() && (status & 0x08) == 0)
                {
                    char action[16] = "";
                    snprintf (action, 16, "F_%d_%d", 1098, 5);
                    udpLog("916", action, "", "", "", "", "act");
                    newStatus = status | 0x08;
                }
                else
                    return;
            }
            else if(isBD())
            {
                if((status & 0x01) == 0)
                {
                    newStatus = status | 0x01;
                    char action[16] = "";
                    snprintf (action, 16, "F_%d_%d", 1098, 2);
                    udpLog("916", action, "", "", "", "", "act");
                }
                else
                    return;
            }
            else if(isYD())
            {
                if((status & 0x02) == 0)
                {
                    char action[16] = "";
                    snprintf (action, 16, "F_%d_%d", 1098, 3);
                    udpLog("916", action, "", "", "", "", "act");
                    newStatus = status | 0x02;
                }
                else
                    return;
            }
            else if(isQQVIP())
            {
                if((status & 0x04) == 0)
                {
                    char action[16] = "";
                    snprintf (action, 16, "F_%d_%d", 1098, 4);
                    udpLog("916", action, "", "", "", "", "act");
                    newStatus = status | 0x04;
                }
                else
                    return;
            }
            else
                return;
            ret = GameAction()->onGetYearActAward(this, type);
            if(ret)
            {
                SetVar(VAR_YEAR_NOBLE, newStatus);
                st << static_cast<UInt8>(1);
                st << Stream::eos;
                send(st);
            }
        }
    }

    void Player::getQgameGiftAward()
    {
        if(atoi(m_domain) != 10)
            return;
        if(GetLev() < 40)
            return;
        if(GetVar(VAR_QGAME_GIFT) == 0)
        {

            MailPackage::MailItem item[5] = {{512, 1}, {49, 1}, {50, 1}, {548, 1}, {551, 1}};
            sendMailItem(2382, 2383, item, 5);
            SetVar(VAR_QGAME_GIFT, 1);

        }
    }

    void Player::sendYearActInfo()
    {
        Stream st(REP::COUNTRY_ACT);
        Stream st2(REP::COUNTRY_ACT);
        UInt8 type;
        UInt8 result;

        UInt8 opt = 1;
        st << opt;
        st2 << opt;

        type = 1;
        st << type;
        if(GetVar(VAR_YEAR_SWORDSMAN) > 0)
            result = 3;
        else
            result = 2;
        st << result;
        st << Stream::eos;
        send(st);

        type = 2;
        st2 << type;
#if 0
        if(GetVar(VAR_YEAR_NOBLE) > 0)
            result = 3;
        else
        {
            if(isBD() || isYD() || isQQVIP() || is3366AndLevel4())
                result = 2;
            else
                result = 4;
        }
#else
        /*
         * 0x01:蓝钻(不考虑3366)
         * 0x02:黄钻
         * 0x04:QQ会员
         * 0x08:3366且大于等于4级
         */
        UInt8 status = GetVar(VAR_YEAR_NOBLE);
        if(atoi(m_domain) == 11)
        {
            if(is3366AndLevel4())
            {
                if(status & 0x08)
                    result = 3;
                else
                    result = 2;
            }
            else
                result = 4;
        }
        else if(isBD())
        {
            if(status & 0x01)
                result = 3;
            else
                result = 2;
        }
        else if(isYD())
        {
            if(status & 0x02)
                result = 3;
            else
                result = 2;
        }
        else if(isQQVIP())
        {
            if(status & 0x04)
                result = 3;
            else
                result = 2;
        }
        else
            result = 4;
#endif
        st2 << result;
        st2 << Stream::eos;
        send(st2);
    }

    void Player::lastKillMonsterAwardPush(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _lastKillMonsterAward.push_back(lt);
    }

    void Player::lastExJobAwardPush(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _lastExJobAward.push_back(lt);
    }

    void Player::checkLastExJobAward()
    {
        std::vector<GData::LootResult>::iterator it;
        for(it = _lastExJobAward.begin(); it != _lastExJobAward.end(); ++ it)
        {
            m_Package->ItemNotify(it->id, it->count);
        }
        _lastExJobAward.clear();
    }

    void Player::lastExJobStepAwardPush(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _lastExJobStepAward.push_back(lt);
    }

    void Player::checkLastExJobStepAward()
    {
        std::vector<GData::LootResult>::iterator it;
        for(it = _lastExJobStepAward.begin(); it != _lastExJobStepAward.end(); ++ it)
        {
            m_Package->ItemNotify(it->id, it->count);
        }
        _lastExJobStepAward.clear();
    }

    void Player::lastNew7DayTargetAwardPush(UInt16 itemId, UInt16 num)
    {
        GData::LootResult lt;
        lt.id = itemId;
        lt.count = num;
        _lastNew7DayTargetAward.push_back(lt);
    }

    void Player::checkLastKillMonsterAward()
    {
        std::vector<GData::LootResult>::iterator it;
        for(it = _lastKillMonsterAward.begin(); it != _lastKillMonsterAward.end(); ++ it)
        {
            m_Package->ItemNotify(it->id, it->count);
        }
        _lastKillMonsterAward.clear();
    }

    void Player::checkLastNew7DayTargetAward()
    {
        std::vector<GData::LootResult>::iterator it;
        for(it = _lastNew7DayTargetAward.begin(); it != _lastNew7DayTargetAward.end(); ++ it)
        {
            m_Package->ItemNotify(it->id, it->count);
        }
        _lastNew7DayTargetAward.clear();
    }

    void Player::sendNewRC7DayInfo(UInt8 type /* = 0 */)
    {
        // 发送新注册七日活动页面信息
        switch (type)
        {
            case 0:
                sendNewRC7DayLogin();
                sendNewRC7DayRecharge();
                sendNewRC7DayTarget();
                break;
            case 1:
                sendNewRC7DayLogin();
                break;
            case 2:
                sendNewRC7DayRecharge();
                break;
            case 3:
                sendNewRC7DayTarget();
                break;
            default:
                break;
        }
    }

    void Player::sendNewRC7DayLogin()
    {
        // 发送新注册七日活动登录奖励页面信息
        Stream st(REP::NEWRC7DAY);
        UInt32 loginAward = GetVar(VAR_CTSLANDING_AWARD);
        UInt32 totalLoginAward = GetVar(VAR_CTSLANDING_AWARD2);
        st << static_cast<UInt8> (1);
        st << static_cast<UInt8> (loginAward);
        st << static_cast<UInt8> (totalLoginAward);
        st << Stream::eos;
        send(st);

        GameMsgHdr hdr1(0x266, getThreadId(), this, 0);
        GLOBAL().PushMsg(hdr1, NULL);
    }

    void Player::sendNewRC7DayRecharge()
    {
        // 发送新注册七日活动充值奖励页面信息
        Stream st(REP::NEWRC7DAY);
        st << static_cast<UInt8> (2);
        UInt32 totalRecharge = GetVar(VAR_RC7DAYRECHARGE);
        UInt32 rechargeAward = GetVar(VAR_RC7DAYWILL);
        UInt8 wishIndex = rechargeAward & 0xff;
        UInt8 wishType = (rechargeAward >> 8) & 0xff;
        st << static_cast<UInt8>(wishIndex);
        st << static_cast<UInt8>(wishType);
        st << static_cast<UInt32>(totalRecharge);
        st << Stream::eos;
        send(st);
    }

    void Player::sendNewRC7DayTarget(UInt8 idx /* = 0 */)
    {
        // 发送新注册七日活动每日目标页面信息
        Stream st(REP::NEWRC7DAY);
        UInt32 awardIndex = GetVar(VAR_CLAWARD2);
        UInt32 count = GetVar(VAR_CTS_TARGET_COUNT);
        st << static_cast<UInt8> (3);
        st << static_cast<UInt16>(awardIndex); // 抽奖情况bit表
        st << static_cast<UInt8>(count);  // 剩余抽奖次数
        if (idx)
            st << static_cast<UInt8>(idx);
        st << Stream::eos;
        send(st);
    }

    void Player::SetQQBoardValue()
    {
        if(!World::getHalloweenAct())
            return;
        UInt32 begin = TimeUtil::MkTime(2013, 10, 28);
        UInt32 now = TimeUtil::Now();
        UInt32 off =(TimeUtil::SharpDay(0, now)-TimeUtil::SharpDay(0, begin))/86400 +1;
        if(now < begin)
            return ;
        if(off > 7)
            return ;
        UInt32 QQBoard = GetVar(VAR_QQBOARD);
        QQBoard |= 1 << (off - 1);
        SetVar(VAR_QQBOARD, QQBoard);
    }
    void Player::SetLuckyMeetValue()
    {
        if(!World::getLuckyMeet())
            return ;
        UInt32 LuckyMeet = GetVar(VAR_LUCKYMEET);
        //std::string  openid = getOpenId();
        //char  key1[16] = "uid_asss_act";
    //    if(!LuckyMeet &&! GObject::dclogger.checkActiveOpenid(key1,(char*)openid.c_str()))
      //      return;
        UInt32 begin =GVAR.GetVar(GVAR_LUCKYMEET_BEGIN) ;
        UInt32 end =GVAR.GetVar(GVAR_LUCKYMEET_END) ;
        UInt32 now = TimeUtil::Now();
        UInt32 off =(TimeUtil::SharpDay(0, now)-TimeUtil::SharpDay(0, begin))/86400 +1;
        if(now < begin || now >end )
            return ;
        if(off!= 1 && !(LuckyMeet&(1<<(off-1)))&&!(LuckyMeet&(1<<(off-2))))
          SetVar(VAR_LUCKYMEET_AWARD , 0); 
        LuckyMeet |= 1 << (off - 1);
        SetVar(VAR_LUCKYMEET, LuckyMeet);
    }
    void Player::SetSummerMeetValue()
    {
        if(!World::getSummerMeetTime())
            return ;
        UInt32 SummerMeetLogin = GetVar(VAR_SUMMER_MEET_LOGIN);
        UInt32 SummerMeetType  = GetVar(VAR_SUMMER_MEET_TYPE);
        if(!SummerMeetType)
        {
            std::string  openid = getOpenId();
            char  key1[32] = "uid_asss_summermeet_";
            UInt32 type = GObject::dclogger.checkActiveOpenid(key1,(char*)openid.c_str());
            if(type>0 && type < 4)
            {
                SetVar(VAR_SUMMER_MEET_TYPE,type);
                SetVar(VAR_SUMMERFLOW_AWARD,1);
            }
            else 
                return ;
        }
        UInt32 begin =GVAR.GetVar(GVAR_SUMMER_MEET_BEGIN) ;
        UInt32 end =GVAR.GetVar(GVAR_SUMMER_MEET_END) ;
        UInt32 now = TimeUtil::Now();
        UInt32 off =(TimeUtil::SharpDay(0, now)-TimeUtil::SharpDay(0, begin))/86400 +1;
        if(now < begin || now >end )
            return ;
        if(off!= 1 && !(SummerMeetLogin&(1<<(off-1)))&&!(SummerMeetLogin&(1<<(off-2))))
            SetVar(VAR_SUMMER_MEET_LOGIN_AWARD , 0); 
        SummerMeetLogin |= 1 << (off - 1);
        SetVar(VAR_SUMMER_MEET_LOGIN, SummerMeetLogin);
        sendSummerMeetInfo();
    }
    void Player::SetSummerFlow3Value()
    {
        if(!World::getSummerFlow3Time())
            return ;
        UInt32 SummerMeetType  = GetVar(VAR_SUMMERFLOW3_TYPE);
        if(!SummerMeetType)
        {
            std::string  openid = getOpenId();
            char  key1[32] = "uid_asss_summerflow3_";
            UInt32 type = GObject::dclogger.checkActiveOpenid(key1,(char*)openid.c_str());
            if(type>0 && type < 5)
            {
                SetVar(VAR_SUMMERFLOW3_TYPE,type);
            }
            else 
                return ;
        }
    }
    void Player::sendQQBoardLoginInfo()
    {
        if(!World::getHalloweenAct())
            return;
        Stream st(REP::RC7DAY);  //协议
        UInt32 QQBoard = GetVar(VAR_QQBOARD);
        UInt32 QQBoardAward = GetVar(VAR_QQBOARD_AWARD);
        UInt32 i=0;
        UInt32 count=0 ;
        while(i<16)
        {
            if(QQBoard & (1 << i++ ))
                ++count;
        }
        st << static_cast<UInt8>(15);
        st << static_cast<UInt8>(count);   //连续登陆天数
        st <<QQBoardAward;   //领取的奖励号
        st << Stream::eos;
        send(st);
    }
    void Player::sendLuckyMeetLoginInfo()
    {
        Stream st(REP::RC7DAY);  //协议
        UInt32 LuckyMeet = GetVar(VAR_LUCKYMEET);
        UInt32 LuckyMeetRechargeAward = GetVar(VAR_LUCKYMEET_RECHARGE_AWARD);
        UInt32 LuckyMeetAward = GetVar(VAR_LUCKYMEET_AWARD);   //登录奖励
        UInt32 LuckyMeetRecharge = GetVar(VAR_LUCKYMEET_RECHARGE);
        UInt32 LuckyMeetVip = GetVar(VAR_LUCKYMEET_VIP);
        UInt32 LuckyMeetStrenthAward = GetVar(VAR_LUCKYMEET_STRENTH_AWARD);
        UInt32 max = 0 ;
        UInt32 i=0;
        UInt32 count=0 ;
        if(!LuckyMeet)
            return ;
        while(i<16)
        {
            if(LuckyMeet & (1 << i++ ))
                ++count;
            else 
            {
                if(count != 0)
                 {
                     max = count ;
                     count =0;
                 }
            }
        }
        st << static_cast<UInt8>(16);
        st << static_cast<UInt8>(max);   //连续登陆天数
        st << static_cast<UInt8>(LuckyMeetVip);
        st << (LuckyMeetRecharge);
        st << static_cast<UInt8>(LuckyMeetAward);   //领取的奖励号
        st << static_cast<UInt8>(LuckyMeetStrenthAward);  
        st <<static_cast<UInt8>(LuckyMeetRechargeAward);
        st << Stream::eos;
        send(st);
    }
    void Player::getNewRC7DayLoginAward(UInt8 val, UInt8 off)
    {
        // 申请领取新注册七天登录奖励 (包括补签和累计登录）
        UInt32 ctslanding = GetVar(VAR_CTSLANDING);
        UInt32 ctslandingAward = GetVar(VAR_CTSLANDING_AWARD);
        UInt32 ctslandingAward2 = GetVar(VAR_CTSLANDING_AWARD2);
        UInt32 cts = 0;  // 累计登录
        UInt32 ctsAwd = 0;
        for (int i = off; i >= 0; --i)
        {
            if (ctslanding & (1<<i))
                ++cts;
            if (ctslandingAward & (1 << i))
                ++ctsAwd;
        }
        if (val == 0)
            return;
        if (val <= 7)
        {
            // 领取签到登录奖励
            if (val < off + 1)
            {
                // 补签，需要消耗10仙石
                if (ctslandingAward & (1<<(val - 1)))
                    return;
                if (!GameAction()->RunNewRC7DayLoginAward(this, val))
                    return;
                ConsumeInfo ci(RC7DayLogin, 0, 0);
                useGold(10, &ci);

                ctslanding |= (1<<(val - 1));
                SetVar(VAR_CTSLANDING, ctslanding);

                ctslandingAward |= (1<<(val - 1));
                SetVar(VAR_CTSLANDING_AWARD, ctslandingAward);
                sendNewRC7DayLogin();
                newRC7DayUdpLog(1143, val);
            }
            else if (val == off + 1)
            {
                // 正常签到登录奖励
                if (ctslandingAward & (1<<(val - 1)))
                    return;

                if (!GameAction()->RunNewRC7DayLoginAward(this, val))
                    return;

                ctslandingAward |= (1<<(val - 1));
                SetVar(VAR_CTSLANDING_AWARD, ctslandingAward);
                sendNewRC7DayLogin();
                newRC7DayUdpLog(1142, val);
            }
            else
            {
                // 穿越签到，不予理会
            }
        }
        else if (val <= 11)
        {
            // 领取累计签到
            val -= 7;
            if (val <= ctsAwd)
            {
                if (1<<(val - 1) & ctslandingAward2)
                {
                    // 已经领取过了
                    sendMsgCode(0, 1340);
                }
                else
                {
                    // 正常领取
                    if (!GameAction()->RunNewRC7DayLoginAward2(this, val))
                        return;

                    ctslandingAward2 |= 1 << (val - 1);
                    SetVar(VAR_CTSLANDING_AWARD2, ctslandingAward2);
                    sendNewRC7DayLogin();
                    newRC7DayUdpLog(1144 + val - 1);
                }
            }
            else
            {
                // 穿越领取累计登录奖励，不予理会
            }
        }
    }
    void Player::getQQBoardInstantLoginAward(UInt8 val)
    {
        // 申请领取新注册七天登录奖励 (包括补签和累计登录）
        UInt32 QQBoard = GetVar(VAR_QQBOARD);
        UInt32 ctslandingAward = GetVar(VAR_QQBOARD_AWARD);
        UInt32 i=0;
        UInt32 count=0 ;
        while(i < 7)
        {
            if(QQBoard & (1 << i++ ))
                ++count;
        }
        if (val == 0 || val > count)
            return;
        // 正常签到登录奖励
        if(ctslandingAward & (1<<((val-1)/2)))
            return ;
        if (!GameAction()->RunQQBoardInstantLoginAward(this, val))
            return;
        ctslandingAward |= (1<<((val - 1)/2));
        SetVar(VAR_QQBOARD_AWARD, ctslandingAward);
        sendQQBoardLoginInfo();
    }
    void Player::getLuckyMeetAward(UInt8 idx,UInt8 index)
    {
        if(!World::getLuckyMeet())
            return ;
        switch(idx)
        {
            case 1:
                getLuckyMeetInstantLoginAward(index);
                break;
            case 3:
                getLuckyMeetRechargeAward(index);
                break;
            case 2:
                getLuckyMeetStrenthAward(index);
                break;
        }
        sendLuckyMeetLoginInfo();
    }
    //蜀山奇遇连续登录奖励
    void Player::getLuckyMeetInstantLoginAward(UInt8 val)
    {
        UInt32 LuckyMeet = GetVar(VAR_LUCKYMEET);
        UInt32 ctslandingAward = GetVar(VAR_LUCKYMEET_AWARD);
        UInt32 max = 0 ;
        UInt32 i=0;
        UInt32 count=0 ;
        while(i<16)
        {
            if(LuckyMeet & (1 << i++ ))
                ++count;
            else 
            {
                if(count != 0)
                 {
                     max = count ;
                     count =0;
                 }
            }
        }
        if (val == 0 || (val != max && max < 8))
            return;
        // 正常签到登录奖励
        if( max>7 )
            val =7; 
        if(ctslandingAward & (1<<(max-1)))
            return ;
        if(!GameAction()->RunLuckyMeetInstantLoginAward(this, val))
        {
            return;
        }
        ctslandingAward |= (1<<(max - 1));
        ctslandingAward |= (1<<(val - 1));
        SetVar(VAR_LUCKYMEET_AWARD, ctslandingAward);
        char str[16] = {0};
        sprintf(str, "F_130801_%d",4+val);
        udpLog("shushanqiyu", str, "", "", "", "", "act");
    }
    //蜀山奇遇充值奖励
    void Player::getLuckyMeetRechargeAward(UInt8 val)
    {
        UInt32 Recharge[][4]={{10,30,60,100},{10,50,100,200},{100,500,1000,2000}};
        UInt32 viplev = getVipLevel();
        UInt32 index = 0;
        if(viplev >=1 )
            index = 1;
        if(viplev > 4)
            index =2;
        UInt32 recharge = GetVar(VAR_SUMMER_MEET_RECHARGE);
        if(val<1||val>4)
            return ;
        if(recharge < Recharge[index][val-1])
            return ;
        UInt32 ctslandingAward = GetVar(VAR_LUCKYMEET_RECHARGE_AWARD);
        if(ctslandingAward & (1<<(val-1)))
            return ;
        if (!GameAction()->RunLuckyMeetRechargeAward(this, val))
            return;
        ctslandingAward |= (1<<(val - 1));
        SetVar(VAR_LUCKYMEET_RECHARGE_AWARD, ctslandingAward);
        char str[16] = {0};
        sprintf(str, "F_130801_%d", val);
        udpLog("shushanqiyu", str, "", "", "", "", "act");
    }

    void Player::getLuckyMeetStrenthAward(UInt8 val)
    {
        UInt32 souls = GetStrengthenMgr()->GetSouls();
        if(val*25 > souls)
            return ;
        UInt32 ctslandingAward = GetVar(VAR_LUCKYMEET_STRENTH_AWARD);
        if(ctslandingAward & (1<<(val-1)))
            return ;
        if (!GameAction()->RunLuckyMeetStrengthAward(this, val))
            return;
        ctslandingAward |= (1<<(val - 1));

        SetVar(VAR_LUCKYMEET_STRENTH_AWARD, ctslandingAward);
        char str[16] = {0};
        sprintf(str, "F_130801_%d", 11+val);
        udpLog("shushanqiyu", str, "", "", "", "", "act");
    }
    void Player::getSummerMeetAward(UInt8 idx,UInt8 index)
    {
        if(!World::getSummerMeetTime())
            return ;
        switch(idx)
        {
            case 1:
                getSummerMeetInstantLoginAward(index);
                break;
            case 2:
                getSummerMeetStrenthAward(index);
                break;
            case 3:
                getSummerMeetRechargeAward(index);
                break;
            case 4:
                getAwardFromSummerMeet();
                break;
        }
        sendSummerMeetInfo();
    }
    //蜀山奇遇连续登录奖励
    void Player::getSummerMeetInstantLoginAward(UInt8 val)
    {
        UInt32 LuckyMeet = GetVar(VAR_SUMMER_MEET_LOGIN);
        UInt32 ctslandingAward = GetVar(VAR_SUMMER_MEET_LOGIN_AWARD);
        UInt32 max = 0 ;
        UInt32 i=0;
        UInt32 count=0 ;
        while(i<16)
        {
            if(LuckyMeet & (1 << i++ ))
                ++count;
            else 
            {
                if(count != 0)
                 {
                     max = count ;
                     count =0;
                 }
            }
        }
        if (val == 0 || (val != max && max < 8))
            return;
        // 正常签到登录奖励
        if( max>7 )
            val =7; 
        if(ctslandingAward & (1<<(max-1)))
            return ;
        if(!GameAction()->RunLuckyMeetInstantLoginAward(this, val))
        {
            return;
        }
        ctslandingAward |= (1<<(max - 1));
        ctslandingAward |= (1<<(val - 1));
        SetVar(VAR_SUMMER_MEET_LOGIN_AWARD, ctslandingAward);
        char str[16] = {0};
        sprintf(str, "F_130801_%d",4+val);
        udpLog("shushanqiyu", str, "", "", "", "", "act");
    }
    //蜀山奇遇充值奖励
    void Player::getSummerMeetRechargeAward(UInt8 val)
    {
        UInt32 Recharge[]={10,50,100,300,600,1000,2000};
        UInt32 recharge = GetVar(VAR_SUMMER_MEET_RECHARGE);
        if(val<1||val>7)
            return ;
        if(recharge < Recharge[val-1])
            return ;
        UInt32 ctslandingAward = GetVar(VAR_SUMMER_MEET_RECHARGE_AWARD);
        if(ctslandingAward & (1<<(val-1)))
            return ;
        if (!GameAction()->RunSummerMeetRechargeAward(this, val))
            return;
        ctslandingAward |= (1<<(val - 1));
        SetVar(VAR_SUMMER_MEET_RECHARGE_AWARD, ctslandingAward);
        char str[16] = {0};
        sprintf(str, "F_130801_%d", val+15);
        udpLog("shushanqiyu", str, "", "", "", "", "act");
    }

    void Player::getSummerMeetStrenthAward(UInt8 val)
    {
        //UInt32 souls = GetStrengthenMgr()->GetSouls();
        UInt32 ScoreNeed[] = {50,100,150,200,280,380,500,800};
        if(val<1 ||val >8)
            return ;
        UInt32 score = getSummerMeetTotalScore();
        if(ScoreNeed[val-1] > score)
            return ;
        UInt32 ctslandingAward = GetVar(VAR_SUMMER_MEET_STRENTH_AWARD);
        if(ctslandingAward & (1<<(val-1)))
            return ;
        if (!GameAction()->RunLuckyMeetStrengthAward(this, val))
            return;
        ctslandingAward |= (1<<(val - 1));

        SetVar(VAR_SUMMER_MEET_STRENTH_AWARD, ctslandingAward);
        char str[16] = {0};
        sprintf(str, "F_130801_%d", 22+val);
        udpLog("shushanqiyu", str, "", "", "", "", "act");
    }
    void Player::getSummerFlow3OnlineAward(UInt8 val)
    {
        if(!World::getSummerFlow3Time())
            return ;
        if(val<1 ||val > 4)
            return;
        UInt32 time[]={10*60,30*60,60*60,150*60};
        UInt32 OnlineTime  = GetOnlineTimeToday();
        if(OnlineTime < time[val-1])
            return ;
        UInt32 ctslandingAward = GetVar(VAR_SUMMERFLOW3_TIME_AWARD);
        if(ctslandingAward & (1<<(val-1)))
            return ;
        if(!GameAction()->RunSummerFlow3OnlineAward(this, val))
        {
            return;
        }
        ctslandingAward |= (1<<(val - 1));
        SetVar(VAR_SUMMERFLOW3_TIME_AWARD, ctslandingAward);
        char str[16] = {0};
        sprintf(str, "F_130722_%d",10+val);
        udpLog("shushanqiyu", str, "", "", "", "", "act");
    }
    void Player::getNewRC7DayRechargeAward(UInt8 val)
    {
        // 申请领取新注册七天充值奖励 (神龙许愿)
        // val 1-7 七龙珠奖励bit图（1为点亮，0为未点亮）， 
        //     8-11 声望，荣誉，修为，经验
        UInt32 totalRecharge = GetVar(VAR_RC7DAYRECHARGE);
        UInt32 rechargeAward = GetVar(VAR_RC7DAYWILL);
        UInt8 wishIndex = rechargeAward & 0xff;
        UInt8 wishType = (rechargeAward >> 8) & 0xff;

        if (val == 0 || val > 11)
            return;

        if (val <= 7)
        {
            // 点亮龙珠
            if (!(wishIndex & (0x01 << (val - 1))))
            {
                if (GameAction()->RunNewRC7DayRechargeAward(this, val, totalRecharge))
                {
                    wishIndex |= 0x01 << (val - 1);
                    SetVar(VAR_RC7DAYWILL, static_cast<UInt32>(wishType) << 8 | wishIndex);
                    newRC7DayUdpLog(1154, val);
                }
            }
        }
        else if (val <= 11)
        {
            // 神龙许愿
            if (wishIndex == 127 && !wishType)
            {
                if (GameAction()->onRC7DayWill(this, val - 7))
                {
                    wishType = val - 7;
                    SetVar(VAR_RC7DAYWILL, static_cast<UInt32>(wishType) << 8 | wishIndex);
                    newRC7DayUdpLog(1148 + val - 8);
                }
            }
        }

        sendNewRC7DayRecharge();
    }
    
    void Player::getNewRC7DayTargetAward(UInt8 val)
    {
        // 申请领取新注册七天每日目标奖励 
        // val 0:转盘开始 1:转盘结束
        UInt8 idx = 0;
        switch (val)
        {
            case 0:
                {
                    if (!_lastNew7DayTargetAward.empty()) // 转盘正在转
                        return;
                    UInt8 count = GetVar(VAR_CTS_TARGET_COUNT);
                    if (count)
                    {
                        idx = GameAction()->RunNewRC7DayTargetAward(this);
                        if (idx)
                        {
                            --count;
                            SetVar(VAR_CTS_TARGET_COUNT, count);
                            newRC7DayUdpLog(1153);
                        }
                    }
                }
                break;
            case 1:
                {
                    std::vector<GData::LootResult>::iterator it;
                    for(it = _lastNew7DayTargetAward.begin(); it != _lastNew7DayTargetAward.end(); ++ it)
                    {
                        m_Package->ItemNotify(it->id, it->count);
                    }
                    _lastNew7DayTargetAward.clear();
                }
                break;
            default:
                break;
        }
        sendNewRC7DayTarget(idx);
    }

    TripodData& Player::runTripodData(TripodData& data, bool init)
    {
        if (&data != &m_td)
            m_td = data;

        bool update = false;
        if(getVipLevel() > 2 && m_td.quality < 3)
        {
            m_td.quality = 3;
            update = true;
        }

        EventPlayerTripod* event = new (std::nothrow) EventPlayerTripod(this, 60, MAX_TRIPOD_SOUL/POINT_PERMIN);
        if (!event) return nulltd;
        PushTimerEvent(event);

        if (init && m_td.itemId && m_td.num && m_td.needgen)
        {
            m_td.needgen = 0;
            update = true;
        }

        if (update)
        {
            DB6().PushUpdateData("UPDATE `tripod` SET `regen` = %u, `quality` = %u WHERE `id` = %" I64_FMT "u",
                    m_td.needgen, m_td.quality, getId());
        }
        m_hasTripod = true;
        return m_td;
    }

    TripodData& Player::newTripodData()
    {
        DB6().PushUpdateData("REPLACE INTO `tripod`(`id`, `soul`, `fire`, `quality`, `awdst`, `regen`, `itemId`, `num`) VALUES(%" I64_FMT "u, %u, %u, %u, %u, %u, %u,%u)" , getId(), m_td.soul, m_td.fire, m_td.quality, m_td.awdst, m_td.needgen, m_td.itemId, m_td.num);
        return runTripodData(m_td);
    }

    // XXX: 光棍节强化光棍补偿
    void Player::sendSingleEnchant(UInt8 enchant)
    {
        if (enchant && enchant <= 10)
        {
            MailPackage::MailItem item1[3] = {{514, 1}, {507, 5},{509, 5}};
            MailPackage::MailItem item2[3] = {{514, 2}, {507, 5},{509, 5}};
            MailPackage::MailItem item3[3] = {{514, 3}, {507, 5},{509, 5}};
            MailPackage::MailItem item4[3] = {{514, 5}, {507, 5},{509, 5}};
            MailPackage::MailItem item5[3] = {{514, 10},{507, 5},{509, 5}};
            MailPackage::MailItem item6[3] = {{515, 10},{507, 5},{509, 5}};
            MailPackage::MailItem item7[3] = {{515, 20},{507, 5},{509, 5}};
            MailPackage::MailItem item8[3] = {{515, 30},{507, 5},{509, 5}};

            MailPackage::MailItem* item[8] = {item1,item2,item3,item4,item5,item6,item7,item8};

            sendMailItem(2205, 2206, item[enchant-1], 3);
        }
    }

    void Player::sendOldRC7DayAward()
    {
        // 老版本转换成新版本的注册七日签到补偿
        MailPackage::MailItem item1[3] = {{MailPackage::Coupon,20},{56, 2}, {57, 2}};
        MailPackage::MailItem item2[4] = {{MailPackage::Coupon,20},{502, 5}, {503, 2},{15,5}};
        MailPackage::MailItem item3[4] = {{MailPackage::Coupon,30},{500, 5}, {501, 2},{15,5}};
        MailPackage::MailItem item4[4] = {{MailPackage::Coupon,30},{509, 1}, {507, 1},{511,3}};
        MailPackage::MailItem item5[5] = {{MailPackage::Coupon,40},{509, 1}, {507, 1},{5025,1},{512,4}};
        MailPackage::MailItem item6[5] = {{MailPackage::Coupon,40},{509, 1}, {507, 1},{514,5},{515,2}};
        MailPackage::MailItem item7[6] = {{MailPackage::Coupon,50},{509, 1}, {507, 1},{517,5},{134,2},{15,5}};
        UInt16 size[7] = {3,4,4,4,5,5,6};

        MailPackage::MailItem* item[7] = {item1,item2,item3,item4,item5,item6,item7};


        UInt32 now = TimeUtil::Now();
        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
        if (created_sharp > now_sharp)
            return; // 创建时间错误（穿越了）

        if (now_sharp - created_sharp > 7 * 24*60*60)
            return; // 玩家注册时间超过7日，无法参与活动

        UInt32 off = CREATE_OFFSET(created_sharp, now_sharp);
        if (off >= 7)
            return; // 玩家注册时间超过7日，无法参与活动

        UInt32 ctslanding = GetVar(VAR_CTSLANDING);
        UInt32 ctslandingAward = GetVar(VAR_CTSLANDING_AWARD);
        for (UInt8 i = 0; i < off; ++i)
        {
            if (ctslanding & (0x01<<i))
            {
                SYSMSG(title, 2207);
                SYSMSGV(content, 2208, i + 1);
                Mail * mail = GetMailBox()->newMail(NULL, 0x21, title, content, 0xFFFD0000/*free*/);
                if (mail)
                {
                    mailPackageManager.push(mail->id, item[i], size[i], true);

                    std::string strItems;
                    for (int j = 0; j < size[i]; ++j)
                    {
                        strItems += Itoa(item[i][j].id);
                        strItems += ",";
                        strItems += Itoa(item[i][j].count);
                        strItems += "|";
                    }

                    DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, BuChangNewRC7Day, title, content, strItems.c_str(), mail->recvTime);

                    ctslandingAward |= (1<<i);
                    SetVar(VAR_CTSLANDING_AWARD, ctslandingAward);
                }
            }
            if (GetLev() >= 47)
            {
                UInt32 targetVal = GetVar(VAR_CLAWARD2);
                if (!(targetVal & TARGET_LEVEL))
                {
                    targetVal |= TARGET_LEVEL;
                    AddVar(VAR_CTS_TARGET_COUNT, 1);
                    SetVar(VAR_CLAWARD2, targetVal);
                    //newRC7DayUdpLog(1152, 1);
                }
            }
        }

    }
    /*
    void Player::resetThanksgiving()
    {
        SetVar(VAR_TGDT, 0);
        _playerData.lastOnline = TimeUtil::Now(); // XXX: hack
        if (isOnline())
        {
            PopTimerEvent(this, EVENT_TIMETICK, getId());
            EventPlayerTimeTick* event = new(std::nothrow) EventPlayerTimeTick(this, TGD_ONLINE_TIME, 1, 1);
            if (event) PushTimerEvent(event);
        }
    }
    */
    TeamData* Player::getTeamData()
    {
        return m_teamData;
    }

    void Player::setTeamData(TeamData* td)
    {
        m_teamData = td;
    }

    PetTeamData* Player::getPetTeamData()
    {
        return m_petTeamData;
    }

    void Player::setPetTeamData(PetTeamData* td)
    {
        m_petTeamData = td;
    }

    CopyTeamPage& Player::getCopyTeamPage()
    {
        return m_ctp;
    }

    PetCopyTeamPage& Player::getPetCopyTeamPage()
    {
        return m_pctp;
    }

    void Player::clearCopyTeamPage()
    {
        memset(&m_ctp, 0, sizeof(m_ctp));
    }

    void Player::clearPetCopyTeamPage()
    {
        memset(&m_pctp, 0, sizeof(m_pctp));
    }

    TeamCopyPlayerInfo* Player::getTeamCopyPlayerInfo()
    {
        return m_tcpInfo;
    }

    PetTeamCopyPlayerInfo* Player::getPetTeamCopyPlayerInfo()
    {
        return m_ptcpInfo;
    }
    HoneyFall* Player::getHoneyFall()
    {
        return m_hf;
    }

    void Player::addClanSkillFromDB(UInt8 skillId, UInt8 level)
    {
        ClanSkill& cs = m_clanSkill[skillId];
        cs.id = skillId;
        cs.level = level;
    }

    void Player::buildClanTechSkill()
    {
        UInt8 skillNum = GData::clanSkillTable.size();
        for(UInt8 i = 1; i < skillNum; ++ i)
            addClanSkill(i);
    }

    void Player::addClanSkill(UInt8 skillId)
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(skillId);
        if(it != m_clanSkill.end())
            return;

        ClanSkill& cs = m_clanSkill[skillId];
        cs.id = skillId;
        cs.level = 0;

        DB5().PushUpdateData("REPLACE INTO `clan_skill`(`playerId`, `skillId`, `level`) VALUES(%" I64_FMT "u, %u, 0)", getId(), skillId);
    }

    UInt8 Player::getClanSkillLevel(UInt8 skillId)
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(skillId);
        if(it == m_clanSkill.end())
            return 0xFF;

        ClanSkill& cs = it->second;
        return cs.level;
    }

    UInt8 Player::clanSkillLevelUp(UInt8 skillId)
    {
        if(m_csFlag != 1)
            return 3;

        Stream st(REP::CLAN_SKILL);
        st << static_cast<UInt8>(8) << skillId;

        UInt8 res = 0;
        do
        {
            std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(skillId);
            if(it == m_clanSkill.end())
            {
                res = 3;
                break;
            }

            ClanSkill& cs = it->second;
            ++ cs.level;
            DB5().PushUpdateData("UPDATE `clan_skill` SET `level` = %u WHERE `playerId` = %" I64_FMT "u and `skillId`=%u", cs.level, getId(), skillId);

            if(skillId == CLAN_SKILL_MAXSOUL)
            {
                for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
                {
                    Fighter * fgt = it->second;
                    fgt->sendMaxSoul();
                }
            }

            showClanSkill(skillId);

            if (skillId == CLAN_SKILL_ACTION && cs.level == 3)
                OnHeroMemo(MC_CONTACTS, MD_ADVANCED, 0, 2);
        } while(false);

        st << res;
        st << Stream::eos;
        send(st);

        GameMsgHdr hdr1(0x1F3, WORKER_THREAD_WORLD, this, 0);
        GLOBAL().PushMsg(hdr1, NULL);
        GameAction()->doStrong(this,SthSkillUp , 0, 0);

        return res;
    }

    void Player::makeClanSkillInfo(Stream& st)
    {
        UInt8 cnt = static_cast<UInt8>(m_clanSkill.size());
        UInt8 skillNum = GData::clanSkillTable.size();
        if(cnt < skillNum)
        {
            buildClanTechSkill();
            cnt = static_cast<UInt8>(m_clanSkill.size());
        }

        st << cnt;
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.begin();
        for (; it != m_clanSkill.end(); ++ it)
            st << it->second.id << it->second.level;

        return;
    }

    void Player::makeClanSkillInfo(Stream& st, UInt8 skillId)
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(skillId);
        if(it == m_clanSkill.end())
            return;

        ClanSkill& skill = it->second;
        st << skill.id << skill.level;
        return;
    }

    void Player::listClanSkills()
    {
        Stream st(REP::CLAN_SKILL);
        st << static_cast<UInt8>(6);
        makeClanSkillInfo(st);
        st << Stream::eos;
        send(st);
    }

    void Player::showClanSkill(UInt8 skillId)
    {
        Stream st(REP::CLAN_SKILL);
        st << static_cast<UInt8>(7);
        makeClanSkillInfo(st, skillId);
        st << Stream::eos;
        send(st);
    }

    float Player::getClanSkillHPEffect()
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_HP);
        if(it == m_clanSkill.end())
            return 0;

        ClanSkill& skill = it->second;
        return GData::clanSkillTable[skill.id][skill.level].value;
    }

    float Player::getClanSkillAtkEffect()
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_ATTACK);
        if(it == m_clanSkill.end())
            return 0;

        ClanSkill& skill = it->second;
        return GData::clanSkillTable[skill.id][skill.level].value;
    }

    float Player::getClanSkillDefendEffect()
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_DEFEND);
        if(it == m_clanSkill.end())
            return 0;

        ClanSkill& skill = it->second;
        return GData::clanSkillTable[skill.id][skill.level].value;
    }

    float Player::getClanSkillMagAtkEffect()
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_MAGATK);
        if(it == m_clanSkill.end())
            return 0;

        ClanSkill& skill = it->second;
        return GData::clanSkillTable[skill.id][skill.level].value;
    }

    float Player::getClanSkillMagDefentEffect()
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_MAGDEF);
        if(it == m_clanSkill.end())
            return 0;

        ClanSkill& skill = it->second;
        return GData::clanSkillTable[skill.id][skill.level].value;
    }

    float Player::getClanSkillActionEffect()
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_ACTION);
        if(it == m_clanSkill.end())
            return 0;

        ClanSkill& skill = it->second;
        return GData::clanSkillTable[skill.id][skill.level].value;
    }

    float Player::getClanSkillHitrLvlEffect()
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_HITRATE);
        if(it == m_clanSkill.end())
            return 0;

        ClanSkill& skill = it->second;
        return GData::clanSkillTable[skill.id][skill.level].value;
    }

    float Player::getClanSkillMaxSoulEffect()
    {
        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_MAXSOUL);
        if(it == m_clanSkill.end())
            return 0;

        ClanSkill& skill = it->second;
        return GData::clanSkillTable[skill.id][skill.level].value;
    }

    float Player::getClanStatueHPEffect()
    {
        if (_clan == NULL)
            return 0;
        UInt16 level = _clan->getStatueLevel();
        return static_cast<float>(GData::clanStatueTable[level].exHp);
    }

    float Player::getClanStatueAtkEffect()
    {
        if (_clan == NULL)
            return 0;
        UInt16 level = _clan->getStatueLevel();
        return static_cast<float>(GData::clanStatueTable[level].exAttack);
    }

    float Player::getClanStatueDefendEffect()
    {
        if (_clan == NULL)
            return 0;
        UInt16 level = _clan->getStatueLevel();
        return static_cast<float>(GData::clanStatueTable[level].exDefend);
    }

    float Player::getClanStatueMagAtkEffect()
    {
        if (_clan == NULL)
            return 0;
        UInt16 level = _clan->getStatueLevel();
        return static_cast<float>(GData::clanStatueTable[level].exMagAtk);
    }

    float Player::getClanStatueMagDefentEffect()
    {
        if (_clan == NULL)
            return 0;
        UInt16 level = _clan->getStatueLevel();
        return static_cast<float>(GData::clanStatueTable[level].exMagDef);
    }

    float Player::getClanStatueActionEffect()
    {
        if (_clan == NULL)
            return 0;
        UInt16 level = _clan->getStatueLevel();
        return static_cast<float>(GData::clanStatueTable[level].exAction);
    }

    float Player::getClanStatueHitrLvlEffect()
    {
        if (_clan == NULL)
            return 0;
        UInt16 level = _clan->getStatueLevel();
        return static_cast<float>(GData::clanStatueTable[level].exHitRate);
    }

    void  Player::AddStatueExp(UInt32 exp)
    {
        if (_clan == NULL)
            return;
        _clan->addStatueExp(exp);
    }

    void Player::SubStatueExp(UInt32 exp)
    {
        if (_clan == NULL)
            return;
        _clan->subStatueExp(exp);
    }

    float Player::getClanBuildingHPEffect()
    {
        if (_clan == NULL)
            return 0;
        const ClanBuildingOwner* buildingOwner = _clan->getBuildingOwner();
        if (buildingOwner)
            return static_cast<float>(buildingOwner->getAddVal(ClanBuilding::eClanBuildingHP) + buildingOwner->getLeftAttr(5));
        return 0;
    }

    float Player::getClanBuildingPhyAtkEffect()
    {
        if (_clan == NULL)
            return 0;
        const ClanBuildingOwner* buildingOwner = _clan->getBuildingOwner();
        if (buildingOwner)
            return static_cast<float>(buildingOwner->getAddVal(ClanBuilding::eClanBuildingPhyAtk) + buildingOwner ->getLeftAttr(0));
        return 0;
    }

    float Player::getClanBuildingMagAtkEffect()
    {
        if (_clan == NULL)
            return 0;
        const ClanBuildingOwner* buildingOwner = _clan->getBuildingOwner();
        if (buildingOwner)
            return static_cast<float>(buildingOwner->getAddVal(ClanBuilding::eClanBuildingMagAtk) + buildingOwner ->getLeftAttr(0));
        return 0;
    }
    float Player::getClanBuildingMagDefEffect()
    {
        if (_clan == NULL)
            return 0;
        const ClanBuildingOwner* buildingOwner = _clan->getBuildingOwner();
        if (buildingOwner)
            return static_cast<float>(buildingOwner->getAddVal(ClanBuilding::eClanBuildingMagAtk));
        return 0;
    }
    float Player::getClanBuildingPhyDefEffect()
    {
        if (_clan == NULL)
            return 0;
        const ClanBuildingOwner* buildingOwner = _clan->getBuildingOwner();
        if (buildingOwner)
            return static_cast<float>(buildingOwner->getAddVal(ClanBuilding::eClanBuildingMagAtk));
        return 0;
    }

    float Player::getClanBuildingActionEffect()
    {
        if (_clan == NULL)
            return 0;
        const ClanBuildingOwner* buildingOwner = _clan->getBuildingOwner();
        if (buildingOwner)
            return static_cast<float>(buildingOwner->getAddVal(ClanBuilding::eClanBuildingAction) + buildingOwner ->getLeftAttr(4));
        return 0;
    }

    void Player::onBlueactiveday()
    {
        // XXX: 原来是为蓝钻准备的，现在全平台也要了
        //if (!(atoi(m_domain) == 11 || atoi(m_domain) == 10))
        //    return;

        UInt32 online = GetOnlineTimeToday();
        UInt32 maxOnline = 60 * 60;
        if (!cfg.GMCheck)
            maxOnline = 60;
        if (online < maxOnline)
        {
            EventPlayerTimeTick* event = new(std::nothrow) EventPlayerTimeTick(this, maxOnline - online, 1, 2);
            if (event) PushTimerEvent(event);
        }
        else if (!GetVar(VAR_BLUE_ACTIVE_GET))
        {
            GameAction()->onBlueactiveday(this);
        }
    }

    void Player::sendShusanLoveTitleCard(int pos)
    {
        if (!pos || pos > 3)
            return;
        MailPackage::MailItem item[3][2] =
        {
            {{442, 1}, {443, 1},},
            {{444, 1}, {445, 1},},
            {{446, 1}, {447, 1},},
        };
        sendMailItem(2331, 2332, &item[pos-1][0], 2, false);
    }

    void Player::sendMayDayTitleCard(int pos)
    {
        if (!pos || pos > 3)
            return;
        MailPackage::MailItem item[3] =
        {
            {9009, 1},
            {9007, 1},
            {9008, 1},
        };
        sendMailItem(2354, 2355, &item[pos-1], 1, false);
    }

    void Player::sendJuneHappyTitleCard(int pos)
    {
        if (!pos || pos > 2)
            return;
        MailPackage::MailItem item[2] =
        {
            {9029, 1},
            {9030, 1},
        };
        sendMailItem(2356, 2357, &item[pos-1], 1, false);
    }

    void Player::sendPExpCard(int pos)
    {
        if (!pos || pos > 1)
            return;
        MailPackage::MailItem item[1] =
        {
            {9089, 1},
        };
        sendMailItem(3002, 3002, &item[pos-1], 1, false);
    }

    void Player::sendRechargeRankAward(int pos, int total, std::map<int, std::pair<Player*, int> >& f7)
    {
        if (!pos/* || pos > 7*/ || !total)
            return;
#if 0
        MailPackage::MailItem item[7][3] =
        {
            {{9076,30},{509,30},{9177,10},},
            {{9076,20},{509,10},{9177,5},},
            {{9076,10},{509,10},{9177,2},},
            {{9076,5},{509,5},{9177,1},},
            {{9076,5},{509,5},{9177,1},},
            {{9076,5},{509,5},{9177,1},},
            {{9076,5},{509,5},{9177,1},},
        };

        SYSMSGV(_title, 4026, pos);
        SYSMSGV(_content, 4027, pos);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, _title, _content, 0xFFFE0000);
        if(mail)
        {
            MailPackage::MailItem* mitem = &item[pos-1][0];
            UInt32 size = 3;
            std::string strItems;
            for (UInt32 i = 0; i < size; ++i)
            {
                strItems += Itoa(mitem[i].id);
                strItems += ",";
                strItems += Itoa(mitem[i].count);
                strItems += "|";
            }
            mailPackageManager.push(mail->id, mitem, size, true);
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, _title, _content, strItems.c_str(), mail->recvTime);
        }
#else
        lua_tinker::table yaf7 = GameAction()->getTable();
        for (int i = 0; i < 7; ++i)
        {
            std::map<int, std::pair<Player*, int> >::iterator it = f7.find(i+1);
            if (it == f7.end())
                break;

            lua_tinker::table tmp = GameAction()->getTable();
            tmp.set(1, it->second.first);
            tmp.set(2, it->second.second);

            yaf7.set(i+1, tmp);
        }
        GameAction()->sendRechargeRankAward(this, pos, total, yaf7);
#endif
    }

    void Player::sendConsumeRankAward(int pos)
    {
        if (!pos || pos > 7)
            return;
#if 0
        MailPackage::MailItem item[1][1] =
        {
            {{444, 1},},
        };
        sendMailItem(2331, 2332, &item[pos-1][0], 1, false);
#else
        GameAction()->sendConsumeRankAward(this, pos);
#endif
    }

    void Player::sendPopularityRandAward(int popularity)
    {
        // TODO: 发送称号卡
    }

    void Player::sendKillMonsterRankAward(UInt8 index, Int32 pos)
    {
        if (index > 3 || !pos || pos > 1)
            return;
        MailPackage::MailItem item[4][1] =
        {
            {{1395, 1},},
            {{1396, 1},},
            {{1397, 1},},
            {{1398, 1},},
        };
        sendMailItem(2372, 2373, &item[index][0], 1, false);
    }

    void Player::sendCreateMail()
    {
#ifdef _FB
#else
        /** deleted by qiwy 2012-12-07 **/
#if 0
        SYSMSG(title, 2335);
        SYSMSG(content, 2336);
        GetMailBox()->newMail(NULL, 0x12, title, content);

        MailPackage::MailItem item[5] = {{9161, 1}, {9162, 1}, {9164, 1}, {9165, 1}, {9166, 1}};
        sendMailItem(4028, 4028, item, 5);
#endif
#endif
    }

    void Player::sendOpenAct(UInt32 day)
    {
#ifdef _FB
        SYSMSGV(title, 4006, day);
        SYSMSGV(content, 4007, day);
        GetMailBox()->newMail(NULL, 0x12, title, content);
#endif
    }

    void Player::initHeroMemo()
    {
        if(GetLev() >= 45)
            GetHeroMemo()->setMemo(MC_FIGHTER, MD_STARTED, 0, 2, 1);
        if (getClan())
            GetHeroMemo()->setMemo(MC_CONTACTS, MD_ADVANCED, 0, 0, 1);

        for (std::map<UInt32, Fighter*>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
        {
            Fighter * fgt = it->second;
            if (fgt->getAcupointsBit(1) >= 1 && fgt->getAcupointsBit(1) <= 3)
                GetHeroMemo()->setMemo(MC_CITTA, MD_STARTED, 1, 0, 1);
            if (fgt->getAcupointsBit(2) == 3)
                GetHeroMemo()->setMemo(MC_CITTA, MD_STARTED, 1, 1, 1);
            if (fgt->getAcupointsBit(3) == 3)
                GetHeroMemo()->setMemo(MC_CITTA, MD_STARTED, 1, 2, 1);
        }

        if (getFrendsNum() >= 10)
            GetHeroMemo()->setMemo(MC_CONTACTS, MD_STARTED, 0, 2, 1);
        if (getFrendsNum() >= 5)
            GetHeroMemo()->setMemo(MC_CONTACTS, MD_STARTED, 0, 1, 1);
        if (getFrendsNum() >= 1)
            GetHeroMemo()->setMemo(MC_CONTACTS, MD_STARTED, 0, 0, 1);

        if (_fighters.size() > 9)
        {
            GetHeroMemo()->setMemo(MC_FIGHTER, MD_ADVANCED, 0, 1, 1);
            GetHeroMemo()->setMemo(MC_FIGHTER, MD_ADVANCED, 0, 2, 1);
        }

        std::map<UInt8, ClanSkill>::iterator it = m_clanSkill.find(CLAN_SKILL_ACTION);
        if(it != m_clanSkill.end())
        {
            ClanSkill& cs = it->second;
            if (cs.level >= 3)
                GetHeroMemo()->setMemo(MC_CONTACTS, MD_ADVANCED, 0, 2, 1);
        }
    }

    void Player::initShuoShuo()
    {
        if (GetLev() >= 40)
            GetShuoShuo()->setShuoSafe(SS_40);
        if (GetLev() >= 50)
            GetShuoShuo()->setShuoSafe(SS_50);
        if (GetLev() >= 60)
            GetShuoShuo()->setShuoSafe(SS_60);
        if (GetLev() >= 70)
            GetShuoShuo()->setShuoSafe(SS_70);
        if (GetLev() >= 80)
            GetShuoShuo()->setShuoSafe(SS_80);
        if (GetLev() >= 90)
            GetShuoShuo()->setShuoSafe(SS_90);
        if (GetLev() >= 100)
            GetShuoShuo()->setShuoSafe(SS_100);
    }

    void Player::sendDeamonAwardsInfo()
    {
        if(m_dpData->itemNum != 0 || m_dpData->attacker != NULL)
        {
            Stream st(REP::TOWN_DEAMON);
            st << static_cast<UInt8>(0x08);
            std::string name = "";
            if(m_dpData->attacker)
                name = m_dpData->attacker->getName();

            st << m_dpData->quitLevel << static_cast<UInt16>(m_dpData->itemId) << static_cast<UInt8>(m_dpData->itemNum) << name;
            st << Stream::eos;
            send(st);
        }
    }

    void Player::getDeamonAwards()
    {
        if(m_dpData->itemNum == 0 && m_dpData->attacker == NULL)
        {
            return;
        }
        if(m_dpData->itemNum != 0)
        {
            if(GetFreePackageSize(1) > m_dpData->itemNum/99)
            {
                struct AddItemInfo
                {
                    UInt32 id;
                    UInt16 num;
                    UInt8 bind;
                    UInt8 fromWhere;
                };

                AddItemInfo item;
                item.id = m_dpData->itemId;
                item.num = m_dpData->itemNum;
                item.bind = true;
                item.fromWhere = FromTownDeamon;
                GameMsgHdr hdr1(0x259, getThreadId(), this, sizeof(AddItemInfo));
                GLOBAL().PushMsg(hdr1, &item);

                m_dpData->itemId = 0;
                m_dpData->itemNum = 0;
                m_dpData->quitLevel = 0;
                m_dpData->attacker = NULL;
                DB3().PushUpdateData("UPDATE `towndeamon_player` SET `itemId`=0, `itemNum`=0, `quitLevel`=0, `attacker`=0 WHERE `playerId` = %" I64_FMT "u", getId());
            }
            else
                sendMsgCode(2, 1011);
        }
        else
        {
            m_dpData->quitLevel = 0;
            m_dpData->attacker = NULL;
            DB3().PushUpdateData("UPDATE `towndeamon_player` SET `quitLevel`=0, `attacker`=0 WHERE `playerId` = %" I64_FMT "u", getId());
        }
    }

    void Player::setInvitedBy(UInt64 id, bool writedb)
    {
        if (!id)
            return;
        if (_invitedBy)
            return;
        _invitedBy = id;
        if (writedb)
        {
            DB3().PushUpdateData("REPLACE INTO `cfriend_awards` (`playerId`, `invitedId`, `awards`) VALUES (%" I64_FMT "u, %" I64_FMT "u, '')", _id, id);
            GetCFriend()->setCFriendSafe(CF_INVITED);
        }
    }

    void Player::offlineAutoExp(UInt32 now)
    {
        SpotData * spotData = GetMapSpot();
        if (!worldBoss.needAutoBattle(_playerData.location) || !spotData || spotData->m_Type != 9)
            return;

        UInt32 lastOffline = GetVar(VAR_OFFLINE);
        if (!lastOffline)
            return;
        if (now < lastOffline)
            return;
        UInt32 left = getLeftTimes();
        if (!left)
            return;

        UInt32 interval = 60;
        UInt32 passed = (now-lastOffline)/60;
        UInt32 maxcount = getAutoBattleCount();
        UInt32 count = left;
        UInt32 rleft = passed > left ? 0 : left - passed;
        UInt32 rcount = passed > left ? left : passed;
        if (rcount > maxcount)
            rcount = maxcount;
		UInt32 final = now + interval * rleft;

		EventAutoBattle* event = new(std::nothrow) EventAutoBattle(this, interval, count, /*ng*/NULL, final);
		if (event == NULL) return;
        for (UInt32 i = 0; i < rcount; ++i)
        {
            event->Process(0);
            event->Next();
        }

        if (rleft)
        {
            PushTimerEvent(event);
            addFlag(Training);
        }
        else
        {
            delete event;
            event = NULL;
        }

        setLeftTimes(rleft);
    }

    void Player::offlineExp(UInt32 now)
    {
        if (GetLev() <= 30)
            return;
        UInt32 lastOffline = GetVar(VAR_OFFLINE);
        if (!lastOffline)
            lastOffline = _playerData.lastOnline;
        if (now < lastOffline)
            return;
        UInt32 offline = now - lastOffline;
        if (offline < 24 * 60 * 60)
            return;
        offline -= 24 * 60 * 60;
        if (!offline)
            return;

        UInt8 lvl = GetLev();
        UInt8 yalvl = lvl;
        if (lvl > 99)
            yalvl = 99;
        UInt64 exp = (offline/60)*((lvl-10)*(yalvl/10)*5+25)*0.8f;
        AddVar(VAR_OFFLINE_EXP, exp);
        AddVar(VAR_OFFLINE_PEXP, offline/60);
        AddVar(VAR_OFFLINE_EQUIP, offline);
        SetVar(VAR_OFFLINE, now);
    }

    void Player::getOfflineExp()
    {
        UInt32 equip = GetVar(VAR_OFFLINE_EQUIP);
        if(equip)
        {
            if(GetPackage()->GetRestPackageSize() < this->_equipAward.size())
            {
                sendMsgCode(0, 1011);
                return;
            }
            for(UInt16 i = 0; i < this->_equipAward.size(); i++)
            {
                if(IsEquipTypeId(this->_equipAward[i].id))
                    m_Package->AddEquip(this->_equipAward[i].id, true, false, FromPExp);
                else
                    m_Package->AddItem(this->_equipAward[i].id, this->_equipAward[i].count, true, false, FromPExp);
            }
            SetVar(VAR_OFFLINE_EQUIP, 0);
        }
        UInt32 exp = GetVar(VAR_OFFLINE_EXP);
        if (exp)
        {
            AddExp(exp);
            SetVar(VAR_OFFLINE_EXP, 0);
        }

        UInt32 pexp = GetVar(VAR_OFFLINE_PEXP);
        if (pexp)
        {
            for(int i = 0; i < 5; ++i)
            {
                GObject::Fighter * fgt = getLineup(i).fighter;
                if(fgt != NULL)
                {
                    UInt32 pExp = pexp*fgt->getPExpNoBuf()*0.8f;
                    fgt->addPExp(pExp);
                }
            }
            SetVar(VAR_OFFLINE_PEXP, 0);
        }
    }

    void Player::sendSecondInfo()
    {
		for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
        {
            Fighter* fgt = it->second;
            fgt->send2ndSoulInfo();
        }
    }

    void Player::useToken(UInt8 type)
    {
        if (type > 2)
            return;

        if (GetPackage()->GetRestPackageSize() < 3)
        {
            sendMsgCode(0, 1011);
            return;
        }

        if (!GetVar(VAR_GOLD_TOKEN+type))
            return;

        static UInt16 items[3][4] = {
            {515,509,507,47},
            {503,1325,134,516},
            {8000,551,517,500},
        };

        bool same = true;
        UInt16 ids[3] = {0,};
        URandom rnd(time(NULL));

        for (UInt8 i = 0; i < 3; ++i)
        {
            UInt8 idx = rnd(sizeof(items[type])/sizeof(UInt16));
            ids[i] = items[type][idx];
            if (i && ids[i] != ids[i-1])
                same = false;
        }

        if (same)
        {
            GetPackage()->Add(ids[0], 6, true, false);
        }
        else
        {
            for (UInt8 i = 0; i < 3; ++i)
            {
                GetPackage()->Add(ids[i], 1, true, false);
            }
        }

        Stream st(REP::TOKEN);
        st << static_cast<UInt8>(1) << ids[0] << ids[1] << ids[2] << Stream::eos;
        send(st);

        SetVar(VAR_GOLD_TOKEN+type, GetVar(VAR_GOLD_TOKEN+type)-1);
        sendTokenInfo();

        if (type == 0 && !same)
            SYSMSG_BROADCASTV(4060, _playerData.country, _playerData.name.c_str(), ids[0], ids[1], ids[2]);
        if (type == 0 && same)
            SYSMSG_BROADCASTV(4061, _playerData.country, _playerData.name.c_str(), ids[0]);
    }

    void Player::sendTokenInfo()
    {
        Stream st(REP::TOKEN);
        st << static_cast<UInt8>(0) << GetVar(VAR_GOLD_TOKEN) << GetVar(VAR_TAEL_TOKEN) << GetVar(VAR_COIN_TOKEN) << Stream::eos;
        send(st);
    }

    void Player::sendDiscountLimit()
    {
        // 发送给客户端的有关限购的相关数据
        Stream st(REP::STORE_DISLIMIT);
        for (UInt8 type = 4; type < 7; ++type)
        {
            // 发送活动限购三栏的种类，时间和剩余数量
            UInt32 max = GData::store.getDiscountLimit(type);
            UInt8 offset = GData::store.getDisTypeVarOffset(type);
            UInt32 used = GetVar(GObject::VAR_DISCOUNT_1+offset);

            if (offset == 0xff)
            {
                st << static_cast<UInt8>(type);
                st << static_cast<UInt8>(0);
                st << static_cast<UInt32>(0);
                st << static_cast<UInt32>(0);
                st << static_cast<UInt32>(0);
                continue;
            }


            UInt32 time = GetVar(GObject::VAR_DISCOUNT_SP_1_TIME + type - 4);
            UInt32 now  = TimeUtil::Now();
            if (time < now)
            {
                // 还没购买过该限购
                SetVar(GObject::VAR_DISCOUNT_1+offset, 0);
                time = GData::store.getEndTimeByDiscountType(type);
                SetVar(GObject::VAR_DISCOUNT_SP_1_TIME + type - 4, time);
                used = 0;
            }

            if (used >= max)
            {
                // 购买已经超过限购次数
                used = max;
                SetVar(GObject::VAR_DISCOUNT_1+offset, used);
            }

            UInt32 count = 0; // 限购剩余的购买次数

            // 检查开始限购开始时间
            time = GData::store.getBeginTimeByDiscountType(type);
            if (time > now)
            {
                // 活动限购还未开始
                SetVar(GObject::VAR_DISCOUNT_SP_1_TIME + type - 4, 0);
                st << static_cast<UInt8>(type);
                st << static_cast<UInt8>(0);
                st << static_cast<UInt32>(0);
                st << static_cast<UInt32>(0);
                st << static_cast<UInt32>(0);
                continue;
            }

            // 检查结束时间
            time = GData::store.getEndTimeByDiscountType(type);
            if (time < now)
            {
                // 活动限购已经结束
                SetVar(GObject::VAR_DISCOUNT_SP_1_TIME + type - 4, 0);
                st << static_cast<UInt8>(type);
                st << static_cast<UInt8>(0);
                st << static_cast<UInt32>(0);
                st << static_cast<UInt32>(0);
                st << static_cast<UInt32>(0);
                continue;
            }

            UInt8 exType = 0;
            UInt32 exValue = 0;

            exType = GData::store.getExDiscount(type, exValue);
            UInt32 goldVal = 0;
            switch(exType)
            {
                case 1:
                    if (GetVar(VAR_DISCOUNT_EX1_TIME + type - 4) < now)
                    {
                        SetVar(VAR_DISCOUNT_EX1_TIME + type - 4, time);
                        SetVar(VAR_DISCOUNT_CONSUME1 + type - 4, 0);
                    }
                    goldVal = GetVar(VAR_DISCOUNT_CONSUME1 + type - 4);
                    break;
                case 2:
                    if (GetVar(VAR_DISCOUNT_EX1_TIME + type - 4) < now)
                    {
                        SetVar(VAR_DISCOUNT_EX1_TIME + type - 4, time);
                        SetVar(VAR_DISCOUNT_RECHARGE1 + type - 4, 0);
                    }
                    goldVal = GetVar(VAR_DISCOUNT_RECHARGE1 + type - 4);
                    break;
                default:
                    break;
            }

            if (exValue && exValue >= goldVal)
                goldVal = exValue - goldVal;
            else
                goldVal = 0;

            time -= now;    // 正在限购活动中, 计算剩余时间
            count = max - used;

            st << static_cast<UInt8>(type);
            st << static_cast<UInt8>(exType);
            st << static_cast<UInt32>(goldVal);
            st << static_cast<UInt32>(time); // 限购剩余时间 （0表示没有限购或者还未开始）
            st << static_cast<UInt32>(count);
        }
        st << Stream::eos;
        send(st);

        // 再发送一个完整的三五八折协议
        Stream st2(REP::STORE_DISLIMIT);
        for (UInt8 type = 7; type < 10; ++type)
        {
            UInt8 offset = GData::store.getDisTypeVarOffset(type);
            UInt32 max = GData::store.getDiscountLimit(type);
            if (offset == 0xff)
            {
                st2 << static_cast<UInt8>(type);
                st2 << static_cast<UInt8>(0);
                st2 << static_cast<UInt32>(0);
                st2 << static_cast<UInt32>(0);
                st2 << static_cast<UInt32>(0);
                continue;
            }
            UInt32 used = GetVar(GObject::VAR_DISCOUNT_1+offset);
            if (used >= max)
            {
                used = max;
                SetVar(GObject::VAR_DISCOUNT_1+offset, used);
            }
            UInt32 count = max - used;

            UInt32 time = GData::store.getEndTimeByDiscountType(type);
            UInt32 now = TimeUtil::Now();
            if (time < now)
                time = 0;
            else
                time -= now;

            st2 << static_cast<UInt8>(type);
            st2 << static_cast<UInt8>(0);
            st2 << static_cast<UInt32>(0);
            st2 << static_cast<UInt32>(time);
            st2 << static_cast<UInt32>(count);
        }
        st2 << Stream::eos;
        send(st2);
    }

    void Player::continuousLogin(UInt32 now)
    {
        if (!World::getRC7Day())
            return;

        if (now < getCreated())
            return;

        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
        if (created_sharp > now_sharp)
            return;

        if (now_sharp - created_sharp > 7 * DAY_SECS)
            return;

        UInt32 ctslanding = GetVar(VAR_CTSLANDING);
        UInt32 off = CREATE_OFFSET(created_sharp, now_sharp);
        if (off >= 7)
            return;
        ctslanding |= (1<<off);
        SetVar(VAR_CTSLANDING, ctslanding);
    }

    void Player::continuousLoginRF(UInt32 now)
    {
        UInt32 rf = GetVar(VAR_INRF7DAY);
        if (now < rf)
            return;

        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 rf_sharp = 0;
        if (rf)
            rf_sharp = TimeUtil::SharpDay(0, rf);

        UInt32 lastOffline = GetVar(VAR_OFFLINE);
        if (!lastOffline)
            return;
        UInt32 last_sharp = TimeUtil::SharpDay(0, lastOffline);

        bool inact = false;
        if (now_sharp - last_sharp > 14 * DAY_SECS)
        {
            rf = now;
            rf_sharp = TimeUtil::SharpDay(0, rf);
            SetVar(VAR_INRF7DAY, now);

            if (GetVar(VAR_CTSLANDINGRF))
                SetVar(VAR_CTSLANDINGRF, 0);
            if (GetVar(VAR_RF7DAYRECHARGE))
                SetVar(VAR_RF7DAYRECHARGE, 0);
            if (GetVar(VAR_RF7DAYWILL))
                SetVar(VAR_RF7DAYWILL, 0);
            if (GetVar(VAR_RF7DAYTURNON))
                SetVar(VAR_RF7DAYTURNON, 0);
            if (GetVar(VAR_CTSAWARDRF))
                SetVar(VAR_CTSAWARDRF, 0);
            if (GetVar(VAR_CLAWARDRF))
                SetVar(VAR_CLAWARDRF, 0);
            if (GetVar(VAR_CL3DAYRF))
                SetVar(VAR_CL3DAYRF, 0);
            inact = true;
        }
        else if (now_sharp - rf_sharp <= 7 * DAY_SECS)
            inact = true;

        if (!inact)
            return;

        UInt32 ctslanding = GetVar(VAR_CTSLANDINGRF);
        UInt32 off = CREATE_OFFSET(rf_sharp, now_sharp);
        if (off >= 7)
            return;
        ctslanding |= (1<<off);
        SetVar(VAR_CTSLANDINGRF, ctslanding);
    }
    void Player::SetMemCach()
    {
        initMemcache();
        char key[MEMCACHED_MAX_KEY] = {0};
        char value[][32] ={"07","14","30","90","01","02","03","04"};
        size_t len = snprintf(key, sizeof(key), "uid_asss_summerflow_9545942");
        size_t vlen = strlen(value[0]);
        MemcachedSet(key, len, value[3], vlen, 0);
    }
    void Player::continuousLoginSummerFlow()
    {
    /*    UInt32 SummerFlowType = GetVar(VAR_SUMMERFLOW_TYPE);
        if(SummerFlowType!= 0)
            return ;
        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 lastOffline = GetVar(VAR_OFFLINE);
        if (!lastOffline)
            return;
        UInt32 last_sharp = TimeUtil::SharpDay(0, lastOffline);
     *
     */
        if (!World::getSummerFlow())
            return;
        UInt32 SummerAward = GetVar(VAR_SUMMERFLOW_AWARD);
        UInt32 SummerType  = GetVar(VAR_SUMMERFLOW_TYPE);
        if(SummerAward != 0 || SummerType!=0)
            return ;
/*
        initMemcache();
        char key[MEMCACHED_MAX_KEY] = {0};
        size_t len = snprintf(key, sizeof(key), "uid_asss_grp_01");
        char value[32]={0};
        if (memcinited)
            MemcachedGet(key, len, value, sizeof(value));
        UInt8 days = atoi(value);
*/
        std::string  openid = getOpenId();
        UInt8  days = GObject::dclogger.checkGRPOpenid((char*)openid.c_str());
        if(days == 7)
            SetVar(VAR_SUMMERFLOW_TYPE, 1);
        else if(days == 14 )
            SetVar(VAR_SUMMERFLOW_TYPE, 2);
        else if(days == 30 )
            SetVar(VAR_SUMMERFLOW_TYPE, 3);
        else if(days == 90 )
            SetVar(VAR_SUMMERFLOW_TYPE, 4);
        return;  
    }
    UInt8 Player::getRPLoginDay()
    {
        UInt32 now = TimeUtil::Now();
        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
        if (created_sharp > now_sharp)
            return 0;

        if (now_sharp - created_sharp > 7 * DAY_SECS)
            return 0;

        UInt32 ctslanding = GetVar(VAR_CTSLANDING);
        UInt32 off = CREATE_OFFSET(created_sharp, now_sharp);
        if (off >= 7)
            return 0;
        UInt32 cts = 0;
        for (int i = off; i >= 0; --i)
        {
            if (ctslanding & (1<<i))
                ++cts;
            else
                break;
        }

        return cts;
    }
    void Player::sendYearRPInfo()
    {
        UInt8 cts = getRPLoginDay();
        if (cts == 0)
            return;

        UInt32 rpValue = GetVar(VAR_RP_VALUE);
        UInt8 packageType = rpValue;
        if (packageType > 0 && packageType < 4)
        {
            UInt8 packageGot = rpValue >> 8;
            UInt8 rewardGot = GetVar(VAR_RP_REWARD_GOT);

            Stream st(REP::RC7DAY);
            st << static_cast<UInt8>(8);
            st << static_cast<UInt8>(0);
            st << packageType << packageGot << cts << rewardGot;
            st << Stream::eos;
            send(st);
        }
    }
    void Player::sendSummerFlowInfo()
    {
        if (!World::getSummerFlow())
            return;
       
        UInt32 SummerFlowType = GetVar(VAR_SUMMERFLOW_TYPE);
        UInt32 SummerFlowAward = GetVar(VAR_SUMMERFLOW_AWARD);
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(27);
        st << static_cast<UInt8>(SummerFlowAward);
        st << static_cast<UInt8>(SummerFlowType);
        st << Stream::eos;
        send(st);
    }
    void Player::sendSummerMeetInfo()
    {
        if (!World::getSummerMeetTime())
            return;
        UInt32 SummerMeetType = GetVar(VAR_SUMMER_MEET_TYPE);
        UInt32 SummerMeetTypeAward = GetVar(VAR_SUMMER_MEET_TYPE_AWARD);
        if(SummerMeetType==0 || SummerMeetTypeAward == 0 )
            return ;
        UInt32 SummerMeetLogin = GetVar(VAR_SUMMER_MEET_LOGIN);
        UInt32 SummerMeetRechargeAward = GetVar(VAR_SUMMER_MEET_RECHARGE_AWARD);
        UInt32 SummerMeetLoginAward = GetVar(VAR_SUMMER_MEET_LOGIN_AWARD);   //登录奖励
        UInt32 SummerMeetRecharge = GetVar(VAR_SUMMER_MEET_RECHARGE);
        UInt32 SummerMeetStrenthAward = GetVar(VAR_SUMMER_MEET_STRENTH_AWARD);
        UInt32 max = 0 ;
        UInt32 i=0;
        UInt32 count=0 ;
        while(i<16)
        {
            if(SummerMeetLogin & (1 << i++ ))
                ++count;
            else 
            {
                if(count != 0)
                 {
                     max = count ;
                     count =0;
                 }
            }
        }
        Stream st(REP::RC7DAY);  //协议
        st << static_cast<UInt8>(18);
        st << static_cast<UInt8>(max);   //连续登陆天数
        st << (SummerMeetRecharge);
        st << static_cast<UInt16>(SummerMeetLoginAward);   //领取的奖励号
        st << static_cast<UInt8>(SummerMeetStrenthAward);  
        st <<static_cast<UInt8>(SummerMeetRechargeAward);
        st << Stream::eos;
        send(st);
        sendSummerMeetScoreInfo();
    }
    void Player::sendSummerMeetRechargeInfo()
    {
        if (!World::getSummerMeetTime())
              return;
        UInt32 SummerMeetType = GetVar(VAR_SUMMER_MEET_TYPE);
        UInt32 SummerMeetTypeAward = GetVar(VAR_SUMMER_MEET_TYPE_AWARD);
        if(SummerMeetType < 1 ||SummerMeetType > 3 )
            return ;
        Stream st(REP::RC7DAY);  //协议
        st << static_cast<UInt8>(17);
        st << static_cast<UInt8>(SummerMeetType);
        st << static_cast<UInt8>(SummerMeetTypeAward);
        st << Stream::eos;
        send(st);
    
    }
    void Player::sendSummerFlow3TimeInfo()
    {
        if (!World::getSummerFlow3Time())
              return;
        UInt32 SummerMeetType = GetVar(VAR_SUMMERFLOW3_TYPE);
        if(SummerMeetType < 1 ||SummerMeetType > 4 )
            return ;
        UInt32 SummerFlow3Time = GetOnlineTimeToday();
        //std::cout<<SummerFlow3Time<<std::endl;
        UInt32 SummerFlow3TimeAward = GetVar(VAR_SUMMERFLOW3_TIME_AWARD);
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(28);
        st << SummerFlow3Time;
        st << static_cast<UInt8>(SummerFlow3TimeAward);
        st << Stream::eos;
        send(st);
    }
    void Player::sendSummerFlow3LoginInfo()
    {
        if (!World::getSummerFlow3Time())
              return;
        UInt32 SummerMeetType = GetVar(VAR_SUMMERFLOW3_TYPE);
        if(SummerMeetType < 1 ||SummerMeetType > 4 )
            return ;
        UInt32 SummerMeetTypeAward = GetVar(VAR_SUMMERFLOW3_TYPE_AWARD);
        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(27);
        st << static_cast<UInt8>(SummerMeetTypeAward);
        st << static_cast<UInt8>(SummerMeetType);
        st << Stream::eos;
        send(st);
    }
    
    void Player::sendRC7DayInfo(UInt32 now)
    {
        if (!World::getRC7Day())
            return;

        if (now < getCreated())
            return;

        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
        if (created_sharp > now_sharp)
            return;

        if (now_sharp - created_sharp > 7 * DAY_SECS)
            return;

        UInt32 ctslanding = GetVar(VAR_CTSLANDING);
        UInt32 off = CREATE_OFFSET(created_sharp, now_sharp);
        if (off >= 7)
            return;

        UInt32 cts = 0;
        for (int i = off; i >= 0; --i)
        {
            if (ctslanding & (1<<i))
                ++cts;
            else
                break;
        }

        UInt32 t = 0;
        UInt32 cts3 = 0;
        for (int i = off; i >= 0; --i)
        {
            if (ctslanding & (1<<i))
                ++t;
            else
            {
                if (cts3 < t)
                    cts3 = t;
                t = 0;
            }
        }
        if (cts3 < t)
            cts3 = t;

        Stream st(REP::RC7DAY);
        st << static_cast<UInt8>(0);
        st << GetVar(VAR_RC7DAYRECHARGE);
        st << static_cast<UInt8>(GetVar(VAR_RC7DAYTURNON));
        st << static_cast<UInt8>(GetVar(VAR_CTSAWARD));
        st << static_cast<UInt8>(cts);
        st << static_cast<UInt8>(GetVar(VAR_CLAWARD));
        st << static_cast<UInt8>(cts3);
        st << static_cast<UInt8>(GetVar(VAR_CL3DAY));
        st << static_cast<UInt8>(GetVar(VAR_RC7DAYWILL));
        st << static_cast<UInt8>(off + 1);
        st << static_cast<UInt8>(GetVar(VAR_CLAWARD2));
        st << Stream::eos;
        send(st);
    }

    void Player::sendRF7DayInfo(UInt32 now)
    {
        UInt32 rf = GetVar(VAR_INRF7DAY);
        if (!rf || now < rf)
            return;

        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 rf_sharp = TimeUtil::SharpDay(0, rf);
        if (now_sharp - rf_sharp > 7 * DAY_SECS)
            return;

        UInt32 ctslanding = GetVar(VAR_CTSLANDINGRF);
        UInt32 off = CREATE_OFFSET(rf_sharp, now_sharp);
        if (off >= 7)
            return;

        UInt32 cts = 0;
        for (int i = off; i >= 0; --i)
        {
            if (ctslanding & (1<<i))
                ++cts;
            else
                break;
        }

        UInt32 t = 0;
        UInt32 cts3 = 0;
        for (int i = off; i >= 0; --i)
        {
            if (ctslanding & (1<<i))
                ++t;
            else
            {
                if (cts3 < t)
                    cts3 = t;
                t = 0;
            }
        }
        if (cts3 < t)
            cts3 = t;

        Stream st(REP::RF7DAY);
        st << static_cast<UInt8>(0);
        st << GetVar(VAR_RF7DAYRECHARGE);
        st << static_cast<UInt8>(GetVar(VAR_RF7DAYTURNON));
        st << static_cast<UInt8>(cts);
        st << static_cast<UInt8>(GetVar(VAR_CLAWARDRF));
        st << static_cast<UInt8>(cts3);
        st << static_cast<UInt8>(GetVar(VAR_CL3DAYRF));
        st << static_cast<UInt8>(GetVar(VAR_RF7DAYWILL));
        st << static_cast<UInt8>(off + 1);
        st << static_cast<UInt8>(GetVar(VAR_CTSAWARDRF)); // 抽奖
        st << Stream::eos;
        send(st);
    }
    const int g_rpCoupon[3] = {365,365,365};
    const int g_rpServerCoupon[3] = {88,188,365};
    const int g_rp1Items[][2] = {
    {15, 20}, {510, 10}, {56, 10}, {57, 10}, {502, 100},
    {514, 10}, {508, 10}, {506, 10},{1700, 1},{0,0}};
    const int g_rp2Items[][2] = {
    {15, 30}, {56, 20}, {57, 20}, {502, 100}, {503,20},
    {515, 10}, {508, 10}, {506, 10},{1700, 1},{0,0}};
    const int g_rp3Items[][2] = {
    {15, 50}, {515, 20}, {509, 20}, {507, 20},
    {1700, 1}, {1701, 1}, {1704, 1}, {1705,1},{0,0}};
    const int g_rpRewardItems[][2] = {{15,1},{502,2},{509,1}};

    const int g_rpServer1Items[][2] = {
    {15, 20}, {510, 10}, {56, 10}, {57, 10}, {502, 100},
    {514, 10}, {508, 10}, {506, 10},{0,0}};
    const int g_rpServer2Items[][2] = {
    {15, 30}, {56, 20}, {57, 20}, {502, 100}, {503,20},
    {508, 10}, {506, 10},{1700, 1},{0,0}};
    const int g_rpServer3Items[][2] = {
    {15, 50}, {515, 20}, {509, 20}, {507, 20},{1325,20},
    {134,20}, {1700, 1}, {1701, 1}, {0,0}};

    void Player::getYearRPPackage()
    {
        UInt32 rpValue = GetVar(VAR_RP_VALUE);
        UInt8 packageType = rpValue;
        if (packageType > 0)
        {
            UInt8 packageGot = rpValue >> 8;
            if (packageGot == 1)
            {
                Stream st(REP::RF7DAY);
                st << static_cast<UInt8>(8);
                st << static_cast<UInt8>(1);
                st << Stream::eos;
                send(st);
                return;
            }
            const int (*pItems)[2];
            if (1 == packageType)
            {
                if (cfg.rpServer)
                {
                    getCoupon(g_rpServerCoupon[0]);
                    pItems = g_rpServer1Items;
                }
                else
                {
                    getCoupon(g_rpCoupon[0]);
                    pItems = g_rp1Items;
                }
                for (UInt8 i = 0; pItems[i][0] != 0; ++i)
                    GetPackage()->Add(pItems[i][0], pItems[i][1], true);

                udpLog("rpPacket", "F_1100_1", "", "", "", "", "act");
            }
            else if (2 == packageType)
            {
                if (cfg.rpServer)
                {
                    getCoupon(g_rpServerCoupon[1]);
                    pItems = g_rpServer2Items;
                }
                else
                {
                    getCoupon(g_rpCoupon[1]);
                    pItems = g_rp2Items;

                }
                for (UInt8 i = 0; pItems[i][0] != 0; ++i)
                    GetPackage()->Add(pItems[i][0], pItems[i][1], true);

                udpLog("rpPacket", "F_1100_2", "", "", "", "", "act");
            }
            else if (3 == packageType)
            {
                if (cfg.rpServer)
                {
                    getCoupon(g_rpServerCoupon[2]);
                    pItems = g_rpServer3Items;
                }
                else
                {
                    getCoupon(g_rpCoupon[2]);
                    pItems = g_rp3Items;

                }
                for (UInt8 i = 0; pItems[i][0] != 0; ++i)
                    GetPackage()->Add(pItems[i][0], pItems[i][1], true);

                udpLog("rpPacket", "F_1100_3", "", "", "", "", "act");
            }
            rpValue += (0xFF+1);
            SetVar(VAR_RP_VALUE, rpValue);

            sendYearRPInfo();
        }
    }
    void Player::getYearRPReward()
    {
        UInt8 cts = getRPLoginDay();
        if (cts == 0)
            return;

        UInt8 isGot = GetVar(VAR_RP_REWARD_GOT);
        if (isGot == 1)
        {
            Stream st(REP::RF7DAY);
            st << static_cast<UInt8>(8);
            st << static_cast<UInt8>(2);
            st << Stream::eos;
            send(st);
            return;
        }
        cts = cts > 3 ? 3 : cts;
        getCoupon(10*cts);
        for (int i = 0; i < 3; ++i)
        {
           GetPackage()->Add(g_rpRewardItems[i][0], g_rpRewardItems[i][1]*cts, true);
        }
        SetVar(VAR_RP_REWARD_GOT, 1);

        sendYearRPInfo();
    }
    void Player::sendFishUserInfo()
    {
        UInt32 rpValue = GetVar(VAR_RP_VALUE);
        UInt8 type = 0;
        switch(rpValue)
        {
        case e_pf_buyu:
            type = 9;
            break;
        case e_pf_louyi:
            type = 11;
            break;
        case e_pf_shenma:
            type = 12;
            break;
        case e_pf_konglong:
            type = 13;
            break;
        case e_pf_xiaoyu:
            type = 14;
            break;
        default:
            return;
        }

        UInt32 v = GetVar(VAR_FISHUSER_AWARD);
        UInt8 idx = 0;
        for(int i = 6; i >= 0; -- i)
        {
            if(v & (0x01 << i))
            {
                idx = i + 1;
                break;
            }
        }

        if(0 == GetVar(VAR_TUIGUAN_AWARD_GOT))
            ++ idx;

        if (idx > 7)
        {
            if((v&0x80) != 0)
                return;
            else
                idx = 7;
        }

        Stream st(REP::RC7DAY);
        st << type;
        st << static_cast<UInt8>(idx);
        st << static_cast<UInt8>(v);
        st << static_cast<UInt8>(v>>27);
        st << Stream::eos;
        send(st);
    }
    void Player::getFishUserPackage(UInt8 idx)
    {
        /*
        if (GetLev() < 45)
            return;
        UInt32 rpValue = GetVar(VAR_RP_VALUE);
        if (rpValue != e_pf_buyu && rpValue != e_pf_louyi
                && rpValue != e_pf_shenma && rpValue != e_pf_konglong
                && rpValue != e_pf_xiaoyu)
            return;

        UInt32 v = GetVar(VAR_FISHUSER_AWARD);
        if ((v&0x80) == 0)
        {
            if (GetPackage()->GetRestPackageSize() < 3)
            {
                sendMsgCode(0, 1011);
            }
            else
            {
                GetPackage()->Add(1277,1,true);
                GetPackage()->Add(30,1,true);
                GetPackage()->Add(1325,5,true);
                v |= 0x80;
                SetVar(VAR_FISHUSER_AWARD, v);
                if(0 == GetVar(VAR_TUIGUAN_AWARD_GOT) && ((v&0x7F) == 0x7F))
                    SetVar(VAR_TUIGUAN_AWARD_GOT, 1);
            }
        }
        */
        if (idx > 4)
            return;
        UInt32 rpValue = GetVar(VAR_RP_VALUE);
        if (rpValue != e_pf_buyu && rpValue != e_pf_louyi
                && rpValue != e_pf_shenma && rpValue != e_pf_konglong
                && rpValue != e_pf_xiaoyu)
            return;

        UInt32 v = GetVar(VAR_FISHUSER_AWARD);
        //27-31位存储推广的专属成长礼包领取状态 10、20、30、40、45级
        if (v & (0x01 << (idx+27)))
            return;
        if (idx != 4 && GetLev() < (idx+1)*10)
            return;
        if (idx == 4 && GetLev() < 45)
            return;
        if (GameAction()->onFishUserPackage(this, idx))
        {
            v |= (0x01 << (idx+27));
            SetVar(VAR_FISHUSER_AWARD, v);
        }
        sendFishUserInfo();
    } 
    void Player::getFishUserAward()
    {
        static const MailPackage::MailItem s_items[][3] = {
            {{15,5},{1604,1},{56,2}},
            {{15,5},{503,10},{56,5}},
            {{15,5},{514,10},{56,5}},
            {{15,5},{515,3},{56,5}},
            {{15,5},{1610,1},{56,5}},
            {{15,5},{509,5},{56,10}},
            {{15,5},{226,1},{56,10}}
        };

        UInt32 rpValue = GetVar(VAR_RP_VALUE);
        if (rpValue != e_pf_buyu && rpValue != e_pf_louyi
                && rpValue != e_pf_shenma && rpValue != e_pf_konglong
                && rpValue != e_pf_xiaoyu)
            return;

        UInt8 idx = 0;
        UInt32 v = GetVar(VAR_FISHUSER_AWARD);
        for(int i = 6; i >= 0; -- i)
        {
            if(v & (0x01 << i))
            {
                idx = i + 1;
                break;
            }
        }

        if(0 == GetVar(VAR_TUIGUAN_AWARD_GOT))
            ++ idx;

        if (idx > 7 || idx == 0)
            return;
        if ((v&(0x01<<(idx-1))) == 0)
        {
            if (GetPackage()->GetRestPackageSize() < 3)
            {
                sendMsgCode(0, 1011);
                return;
            }
            getCoupon(50);
            for (UInt8 i = 0; i < 3; ++i)
            {
                GetPackage()->Add(s_items[idx-1][i].id, s_items[idx-1][i].count, true);
            }
            v |= (0x01<<(idx-1));
            SetVar(VAR_FISHUSER_AWARD, v); 
            SetVar(VAR_TUIGUAN_AWARD_GOT, 1);
        }
        sendFishUserInfo();
    }
    void Player::getContinuousReward(UInt8 type, UInt8 idx)
    {
        if (!World::getRC7Day())
            return;

        UInt32 now = TimeUtil::Now();
        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
        if (created_sharp > now_sharp)
            return;

        if (now_sharp - created_sharp > 7 * DAY_SECS)
            return;

        UInt32 ctslanding = GetVar(VAR_CTSLANDING);
        UInt32 off = CREATE_OFFSET(created_sharp, now_sharp);
        if (off >= 7)
            return;

        UInt32 cts = 0;
        for (int i = off; i >= 0; --i)
        {
            if (ctslanding & (1<<i))
                ++cts;
            else
                break;
        }

#if 0
        if (type == 1 && !GetVar(VAR_CTSAWARD))
        {
            GameAction()->onCLLoginReward(this, cts);
            SetVar(VAR_CTSAWARD, 1);
            Stream st(REP::RC7DAY);
            st << static_cast<UInt8>(1);
            st << Stream::eos;
            send(st);
            return;
        }
#endif
        if (type == 2 && !GetVar(VAR_CLAWARD) && cts)
        {
            GameAction()->onCLLoginReward(this, cts);
            SetVar(VAR_CLAWARD, 1);

            Stream st(REP::RC7DAY);
            st << static_cast<UInt8>(2);
            st << Stream::eos;
            send(st);
            return;
        }

        if (type == 3 && !GetVar(VAR_CL3DAY))
        {
            UInt32 t = 0;
            UInt32 cts3 = 0;
            for (int i = off; i >= 0; --i)
            {
                if (ctslanding & (1<<i))
                    ++t;
                else
                {
                    if (cts3 < t)
                        cts3 = t;
                    t = 0;
                }
            }
            if (cts3 < t)
                cts3 = t;

            if (cts3 >= 3)
            {
                if (addFighterFromItem(9011, 0))
                {
                    // GameAction()->onCL3DayReward(this);
                    SetVar(VAR_CL3DAY, 1);

                    Stream st(REP::RC7DAY);
                    st << static_cast<UInt8>(3);
                    st << Stream::eos;
                    send(st);
                    return;
                }
            }
        }

        if (idx && type == 4 && !GetVar(VAR_RC7DAYWILL))
        {
            if (GameAction()->onRC7DayWill(this, idx))
            {
                SetVar(VAR_RC7DAYWILL, idx);

                Stream st(REP::RC7DAY);
                st << static_cast<UInt8>(4);
                st << static_cast<UInt8>(idx);
                st << Stream::eos;
                send(st);
                return;
            }
        }
    }

    void Player::setContinuousRFAward(UInt32 no)
    {
        if (GetVar(VAR_CTSAWARDRF))
            return;

        UInt32 now = TimeUtil::Now();
        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 rf = GetVar(VAR_INRF7DAY);
        UInt32 rf_sharp = TimeUtil::SharpDay(0, rf);
        if (!rf || now < rf)
            return;
        if (now_sharp - rf_sharp > 7 * DAY_SECS)
            return;
        UInt32 off = CREATE_OFFSET(rf_sharp, now_sharp) + 1;

        if (off == no)
        {
            SetVar(VAR_CTSAWARDRF, 1);
            sendRF7DayInfo(now);
        }
    }

    void Player::getContinuousRewardRF(UInt8 type, UInt8 idx)
    {
        UInt32 now = TimeUtil::Now();
        UInt32 rf = GetVar(VAR_INRF7DAY);
        if (!rf || now < rf)
            return;

        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 rf_sharp = TimeUtil::SharpDay(0, rf);

        if (now_sharp - rf_sharp > 7 * DAY_SECS)
            return;

        UInt32 ctslanding = GetVar(VAR_CTSLANDINGRF);
        UInt32 off = CREATE_OFFSET(rf_sharp, now_sharp);
        if (off >= 7)
            return;

        UInt32 cts = 0;
        for (int i = off; i >= 0; --i)
        {
            if (ctslanding & (1<<i))
                ++cts;
            else
                break;
        }
#if 0 // XXX: 走 0x13
#ifdef _FB
        if (type == 1 && !GetVar(VAR_CTSAWARDRF))
        {
            GameAction()->onCLLoginRewardRF(this, 0, type);
            SetVar(VAR_CTSAWARDRF, 1);
            Stream st(REP::RF7DAY);
            st << static_cast<UInt8>(1);
            st << Stream::eos;
            send(st);
            return;
        }
#else
        if (type == 1 && GetVar(VAR_CTSAWARDRF) == 1)
        {
            UInt16 id = GameAction()->onCLLoginRewardRF(this, cts, type);
            if (!id)
                return;
            SetVar(VAR_CTSAWARDRF, 2);
            Stream st(REP::RF7DAY);
            st << static_cast<UInt8>(1);
            st << id;
            st << Stream::eos;
            send(st);
            return;
        }
#endif
#endif
        if (type == 2 && !GetVar(VAR_CLAWARDRF) && cts)
        {
            GameAction()->onCLLoginRewardRF(this, cts, type);
            SetVar(VAR_CLAWARDRF, 1);

            Stream st(REP::RF7DAY);
            st << static_cast<UInt8>(2);
            st << Stream::eos;
            send(st);
            return;
        }

        if (type == 3 && !GetVar(VAR_CL3DAYRF))
        {
            UInt32 t = 0;
            UInt32 cts3 = 0;
            for (int i = off; i >= 0; --i)
            {
                if (ctslanding & (1<<i))
                    ++t;
                else
                {
                    if (cts3 < t)
                        cts3 = t;
                    t = 0;
                }
            }
            if (cts3 < t)
                cts3 = t;

            if (cts3 >= 3)
            {
                if (GameAction()->onCLLoginRewardRF(this, cts3, type))
                {
                    SetVar(VAR_CL3DAYRF, 1);

                    Stream st(REP::RF7DAY);
                    st << static_cast<UInt8>(3);
                    st << Stream::eos;
                    send(st);
                    return;
                }
            }
        }

        if (idx && type == 4 && !GetVar(VAR_RF7DAYWILL))
        {
            if (GameAction()->onRC7DayWill(this, idx))
            {
                SetVar(VAR_RF7DAYWILL, idx);

                Stream st(REP::RF7DAY);
                st << static_cast<UInt8>(4);
                st << static_cast<UInt8>(idx);
                st << Stream::eos;
                send(st);
                return;
            }
        }
    }

    void Player::sendMDSoul(UInt8 type, UInt32 id)
    {
 //       if (!World::getMayDay() && !World::getCompassAct())
 //           return;
        Stream st(REP::USESOUL);
        if (type == 0)
        {
            st << static_cast<UInt8>(0);
            st << GetVar(VAR_MDSOUL) << Stream::eos;
        }
        else if (type == 1)
        {
            st << static_cast<UInt8>(1);
            st << id << Stream::eos;
        }
        send(st);
    }

    void Player::getMDItem(UInt8 v)
    {
//        if (!World::getMayDay() && !World::getCompassAct())
//            return;

        UInt32 soul = GetVar(VAR_MDSOUL);
        if (!soul)
            return;

        UInt8 type = 0;
        UInt32 subsoul = 0;
        /*if (soul >= 100)
        {
            type = 1;
            subsoul = 100;
        }
        else if (soul >= 20)
        {
            type = 2;
            subsoul = 20;
        }
        else if (soul >= 10)
        */
        {
            type = 3;
            subsoul = 10;
        }
        if (soul < subsoul)
            return;

        if (!type)
            return;
        if (GetPackage()->IsFull())
        {
            sendMsgCode(0, 1011);
            return;
        }

        UInt32 itemId  = GameAction()->onUseMDSoul(this, type, v);
        if (!itemId)
            return;

        sendMDSoul(1, itemId);

        char str[64] = {0};
        sprintf(str, "F_10000_0118_%d", itemId);
        udpLog("huodong", str, "", "", "", "", "act");

        soul -= subsoul;
        SetVar(VAR_MDSOUL, soul);
    }

    void Player::useMDSoul(UInt8 v)
    {
//        if (!World::getMayDay() && !World::getCompassAct())
//            return;

/*        UInt32 soul = GetVar(VAR_MDSOUL);
        if (!soul)
            return;

        UInt8 type = 0;
        UInt32 subsoul = 0;
        if (soul >= 100)
        if (soul >= 100)
        {
            type = 1;
            subsoul = 100;
        }
        else if (soul >= 20)
        {
            type = 2;
            subsoul = 20;
        }
        else if (soul >= 10)
  
        {
            type = 3;
            subsoul = 10;
        }
        if (soul < subsoul)
            return;

        if (!type)
            return;

        if (!_mditem)
            return;
*/
        std::vector<MDItem>* itemVec = &_mditemVec1;
        if (v == 2)
            itemVec = &_mditemVec2;
        for(std::vector<MDItem>::iterator it=itemVec->begin(); it != itemVec->end(); ++it)
        {
	        m_Package->ItemNotify(it->id, it->count);
        }
        sendMDSoul(0);
        itemVec->clear();
    }

    void Player::svrSt(UInt8 type)
    {
        Stream st(REP::SVRST);
        st << type;
        if (type == 1)
        {
            st << TimeUtil::Now() << Stream::eos;
        }
        else if (type == 2)
        {
            st << getCreated() << Stream::eos;
        }
        else if (type == 3)
        {
            st << GetVar(VAR_INRF7DAY) << Stream::eos;
        }
        else if (type == 4)
        {
            st << World::getOpenTime() << Stream::eos;
        }
 
        send(st);
    }

    void Player::turnOnRC7Day()
    {
        if (!World::getRC7Day())
            return;

        UInt32 offset = GetVar(VAR_RC7DAYTURNON);
        if (offset >= 7)
            return;
        UInt32 total = GetVar(VAR_RC7DAYRECHARGE);
        if (GameAction()->onTurnOnRC7Day(this, total, offset))
        {
            SetVar(VAR_RC7DAYTURNON, offset+1);

            Stream st(REP::RC7DAY);
            st << static_cast<UInt8>(6) << static_cast<UInt8>(GetVar(VAR_RC7DAYTURNON));
            st << Stream::eos;
            send(st);
        }
    }

    void Player::turnOnRF7Day()
    {
        UInt32 now = TimeUtil::Now();
        UInt32 rf = GetVar(VAR_INRF7DAY);
        if (!rf || now < rf)
            return;

        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 rf_sharp = TimeUtil::SharpDay(0, rf);

        if (now_sharp - rf_sharp > 7 * DAY_SECS)
            return;

        UInt32 offset = GetVar(VAR_RF7DAYTURNON);
        if (offset >= 7)
            return;
        UInt32 total = GetVar(VAR_RF7DAYRECHARGE);
        if (GameAction()->onTurnOnRF7Day(this, total, offset))
        {
            SetVar(VAR_RF7DAYTURNON, offset+1);

            Stream st(REP::RF7DAY);
            st << static_cast<UInt8>(6) << static_cast<UInt8>(GetVar(VAR_RF7DAYTURNON));
            st << Stream::eos;
            send(st);
        }
    }

    void Player::addRC7DayRecharge(UInt32 r)
    {
        if (!World::getRC7Day())
            return;
        AddVar(VAR_RC7DAYRECHARGE, r);
        
        sendNewRC7DayRecharge();

        Stream st(REP::RC7DAY);
        st << static_cast<UInt8>(5) << GetVar(VAR_RC7DAYRECHARGE);
        st << Stream::eos;
        send(st);
    }

    void Player::addRF7DayRecharge(UInt32 r)
    {
        UInt32 now = TimeUtil::Now();
        UInt32 rf = GetVar(VAR_INRF7DAY);
        if (!rf || now < rf)
            return;

        UInt32 rf_sharp = TimeUtil::SharpDay(0, rf);
        UInt32 now_sharp = TimeUtil::SharpDay(0, now);

        if (now_sharp - rf_sharp > 7 * DAY_SECS)
            return;

        AddVar(VAR_RF7DAYRECHARGE, r);

        Stream st(REP::RF7DAY);
        st << static_cast<UInt8>(5) << GetVar(VAR_RF7DAYRECHARGE);
        st << Stream::eos;
        send(st);
    }
    void Player::addLuckyMeetRecharge(UInt32 r)
    {
        UInt32 now = TimeUtil::Now();
        UInt32 rf =GVAR.GetVar(GVAR_LUCKYMEET_BEGIN);
        UInt32 rf2 = GVAR.GetVar(GVAR_LUCKYMEET_END);
        if (!rf || now < rf ||rf > rf2)
            return;
        AddVar(VAR_LUCKYMEET_RECHARGE, r);
    }
    void Player::addSummerMeetRecharge(UInt32 r)
    {
        UInt32 now = TimeUtil::Now();
        UInt32 rf =GVAR.GetVar(GVAR_SUMMER_MEET_BEGIN);
        UInt32 rf2 = GVAR.GetVar(GVAR_SUMMER_MEET_END);
        if (!rf || now < rf ||now > rf2)
            return;
        AddVar(VAR_SUMMER_MEET_RECHARGE, r);
        getSummerMeetScore(10,r);
        sendSummerMeetInfo();
    }

    void Player::recvYBBuf(UInt8 type)
    {
        if(this->isQQVIP() && World::getQQVipAct() && type == 2)
        {
            UInt32 qqbuf = GetVar(VAR_QQVIP_BUF);
            if(!qqbuf)
            {
                UInt32 now = TimeUtil::Now();
                setBuffData(PLAYER_BUFF_QQVIPBUF, now + 60 * 60);
                SetVar(VAR_QQVIP_BUF, 1);
                //sendYBBufInfo(0, 1);
                sendYBBufInfo(GetVar(VAR_YBBUF), GetVar(VAR_QQVIP_BUF));
            }
            return;
        }
        if (type == 3)
        {
            if (GetVar(VAR_JOYVIP_BUFF_GOT) == 0)
            {
                addBuffData(PLAYER_BUFF_JOYBUFF, 3600);
                SetVar(VAR_JOYVIP_BUFF_GOT, 1);
                sendYBBufInfo(GetVar(VAR_YBBUF), GetVar(VAR_QQVIP_BUF), 1);
            }
        }
        if ( type == 4)
        {
            if (getBuffData(PLAYER_BUFF_JOYBUFF, TimeUtil::Now()) >= TimeUtil::Now() + 99*3600)
                return;

            if (getGold() >= 5)
            {
                ConsumeInfo ci(BUYJOYBUFF,0,0);
                useGold(5, &ci);
                addBuffData(PLAYER_BUFF_JOYBUFF, 3600);
                sendYBBufInfo(GetVar(VAR_YBBUF), GetVar(VAR_QQVIP_BUF), GetVar(VAR_JOYVIP_BUFF_GOT)+0x02);
              //pl->udpLog("tianjie", "F_1108_1", "", "", "", "", "act");
            }
            else
                sendYBBufInfo(GetVar(VAR_YBBUF), GetVar(VAR_QQVIP_BUF), GetVar(VAR_JOYVIP_BUFF_GOT)+0x00); 
        }

        if((this->isBD() && World::getBlueDiamondAct()) || (this->isYD() && World::getYellowDiamondAct()))
        {
            UInt32 ybbuf = GetVar(VAR_YBBUF);
            UInt32 ybuf = (ybbuf >> 16) & 0xFFFF;
            UInt32 bbuf = ybbuf & 0xFFFF;

            // type = 0 黄钻 1 蓝钻

            bool r = false;
            UInt32 now = TimeUtil::Now();
            if (!ybuf && type == 0)
            {
                setBuffData(PLAYER_BUFF_YBUF, now + 60 * 60);
                ybuf = 1;
                r = true;
            }

            if (!bbuf && type == 1)
            {
                setBuffData(PLAYER_BUFF_BBUF, now + 60 * 60);
                bbuf = 1;
                r = true;
            }

            if (r)
            {
                ybbuf = (ybuf << 16) | bbuf;
                SetVar(VAR_YBBUF, ybbuf);
            }

            //sendYBBufInfo(ybbuf, 0);
            sendYBBufInfo(GetVar(VAR_YBBUF), GetVar(VAR_QQVIP_BUF));
        }
    }

    void Player::sendYBBufInfo(UInt32 ybbuf, UInt32 qqvipbuf, UInt8 joy)
    {
        Stream st(REP::YBBUF);
        UInt8 qqbuf = qqvipbuf ? true : false;
        //st << static_cast<UInt8>((ybbuf >> 16) & 0xFFFF) << static_cast<UInt8>(ybbuf & 0xFFFF) << qqbuf << Stream::eos;
        if (joy == 0)
            joy = GetVar(VAR_JOYVIP_BUFF_GOT);
        st << static_cast<UInt8>((ybbuf >> 16) & 0xFFFF) << static_cast<UInt8>(ybbuf & 0xFFFF) << qqbuf << joy << Stream::eos;
        send(st);
    }

    void Player::adjustAthlBuffData(UInt32 type)
    {
        UInt32 now = TimeUtil::Now();
        UInt32 leftTime = 0;
        UInt32 flag = 0;
        UInt8 count = 0;
        UInt8 index;
        if(type & Battle::BattleFighter::AthlEnh1)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL1))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL1) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL1, now + leftTime);
            flag = PLAYER_BUFF_ATHL1;
        }
        else if(type & Battle::BattleFighter::AthlEnh2)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL2))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL2) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL2, now + leftTime);
            flag = PLAYER_BUFF_ATHL2;
        }
        else if(type & Battle::BattleFighter::AthlEnh3)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL3))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL3) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL3, now + leftTime);
            flag = PLAYER_BUFF_ATHL3;
        }
        else if(type & Battle::BattleFighter::AthlEnh4)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL4))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL4) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL4, now + leftTime);
            flag = PLAYER_BUFF_ATHL4;
        }
        else if(type & Battle::BattleFighter::AthlEnh5)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL5))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL5) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL5, now + leftTime);
            flag = PLAYER_BUFF_ATHL5;
        }
        else if(type & Battle::BattleFighter::AthlEnh6)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL6))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL6) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL6, now + leftTime);
            flag = PLAYER_BUFF_ATHL6;
        }
        else if(type & Battle::BattleFighter::AthlEnh7)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL7))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL7) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL7, now + leftTime);
            flag = PLAYER_BUFF_ATHL7;
        }
        else if(type & Battle::BattleFighter::AthlEnh8)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL8))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL8) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL8, now + leftTime);
            flag = PLAYER_BUFF_ATHL8;
        }
        else if(type & Battle::BattleFighter::AthlEnh9)
        {
            leftTime = ATHL_BUFF_SECS;
            if(getBuffData(PLAYER_BUFF_ATHL9))
            {
                leftTime = getBuffData(PLAYER_BUFF_ATHL9) - now + ATHL_BUFF_SECS;
                if(leftTime > ATHL_BUFF_SECS_MAX)
                    leftTime = ATHL_BUFF_SECS_MAX;
            }
            setBuffData(PLAYER_BUFF_ATHL9, now + leftTime);
            flag = PLAYER_BUFF_ATHL9;
        }

        if(flag == 0)
            return;
        count = 1;
        Stream st(REP::ATHLETICS_REFRESH_MARTIAL);
        st << static_cast<UInt8>(5);
        st << count;
        index = flag - PLAYER_BUFF_ATHL1;
        st << index;
        leftTime = getBuffData(flag) - now;
        st << leftTime;
        st << Stream::eos;
        send(st);
    }

    void Player::adjustAthlBuffData2(UInt32 type)
    {
        UInt32 now = TimeUtil::Now();
        UInt32 time = ATHL_BUFF_SECS_1;
        UInt32 flag = 0;
        UInt8 index;

        if(type & Battle::BattleFighter::AthlEnh31)
        {
            setBuffData(PLAYER_BUFF_ATHL11, now + time);
            flag = PLAYER_BUFF_ATHL11;
        }
        else if(type & Battle::BattleFighter::AthlEnh32)
        {
            setBuffData(PLAYER_BUFF_ATHL22, now + time);
            flag = PLAYER_BUFF_ATHL22;
        }
        else if(type & Battle::BattleFighter::AthlEnh33)
        {
            setBuffData(PLAYER_BUFF_ATHL33, now + time);
            flag = PLAYER_BUFF_ATHL33;
        }
        else if(type & Battle::BattleFighter::AthlEnh34)
        {
            setBuffData(PLAYER_BUFF_ATHL44, now + time);
            flag = PLAYER_BUFF_ATHL44;
        }
        else if(type & Battle::BattleFighter::AthlEnh35)
        {
            setBuffData(PLAYER_BUFF_ATHL55, now + time);
            flag = PLAYER_BUFF_ATHL55;
        }
        else if(type & Battle::BattleFighter::AthlEnh36)
        {
            setBuffData(PLAYER_BUFF_ATHL66, now + time);
            flag = PLAYER_BUFF_ATHL66;
        }
        else if(type & Battle::BattleFighter::AthlEnh37)
        {
            setBuffData(PLAYER_BUFF_ATHL77, now + time);
            flag = PLAYER_BUFF_ATHL77;
        }

        if(flag == 0)
            return;

        index = flag - PLAYER_BUFF_ATHL11;
        time = getBuffData(flag) - now;
        Stream st(REP::ATHLETICS_REFRESH_MARTIAL);
        st << static_cast<UInt8>(5);
        st << 1;
        st << index;
        st << time;
        st << Stream::eos;
        send(st);
    }

    void Player::sendAthlBufInfo()
    {
        UInt32 leftTime;
        Stream st(REP::ATHLETICS_REFRESH_MARTIAL);
        st << static_cast<UInt8>(5);
        UInt8 count = 0;
        UInt8 index;
        for(index = PLAYER_BUFF_ATHL1; index <= PLAYER_BUFF_ATHL9; index++)
        {
            if(getBuffData(index) > 0)
                count++;
        }
        st << count;
        for(index = PLAYER_BUFF_ATHL1; index <= PLAYER_BUFF_ATHL9; index++)
        {
            if(getBuffData(index) > 0)
            {
                st << static_cast<UInt8>(index - PLAYER_BUFF_ATHL1);
                leftTime = getBuffData(index) - TimeUtil::Now();
                st << leftTime;
            }
        }
        st << Stream::eos;
        send(st);
    }

    bool Player::isCopyPassed(UInt8 copyid)
    {
        TeamCopyPlayerInfo* tcpInfo = getTeamCopyPlayerInfo();
        if (!tcpInfo)
            return false;
        return tcpInfo->getPass(copyid);
    }

    bool Player::hasRealItemAward(UInt32 id)
    {
        return realItemAwardMgr.hasAward(id);
    }

    void Player::getRealItemAward(UInt32 id)
    {
        realItemAwardMgr.getAward(this, id);
    }

    void Player::IDIPAddItem(UInt16 itemId, UInt16 num, bool bind)
    {
        SYSMSGV(title, 4004, itemId);
        SYSMSGV(content, 4005, itemId, num);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFD0000/*free*/);
        if(mail)
        {
            MailPackage::MailItem mitem[1] = {{itemId,num}};
            mailPackageManager.push(mail->id, mitem, 1, bind);
            std::string strItems;
            for (int i = 0; i < 1; ++i)
            {
                strItems += Itoa(mitem[i].id);
                strItems += ",";
                strItems += Itoa(mitem[i].count);
                strItems += "|";
            }
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
        }

        if (itemId == 10197 || itemId == 10198 || itemId == 10199)
        {
            udpLog("huodong", Itoa(itemId).c_str(), "", "", "", "", "act");
        }
    }

    int Player::IDIPBuy(UInt32 itemId, UInt32 num, UInt32 price, std::string& err, bool bind)
    {
        const GData::ItemBaseType* ibt = GData::itemBaseTypeManager[itemId];
        if (!ibt)
        {
            err = "物品不存在";
            return -101;
        }

        if (!num)
        {
            err = "购买的物品个数不对";
            return -102;
        }

        if (getGold() < price)
        {
            err = "仙石不足";
            return -103;
        }

        if (GetPackage()->GetRestPackageSize() < (num+ibt->maxQuantity)/ibt->maxQuantity)
        {
            err = "背包空间不足";
            return -104;
        }

        err = "购买成功";

        struct IDIPBuyItemInfo
        {
            UInt32 itemId;
            UInt32 num;
            UInt32 bind;
            UInt32 price;
        };
        IDIPBuyItemInfo ibi;
        ibi.itemId = itemId;
        ibi.num = num;
        ibi.bind = bind;
        ibi.price = price;
        GameMsgHdr hdr1(0x268, getThreadId(), this, sizeof(ibi));
        GLOBAL().PushMsg(hdr1, &ibi);

        return 0;
    }

    void Player::sendFourCopAct()
    {
        UInt16 lengxueCnt;
        UInt16 wuqingCnt;
        UInt16 tieshouCnt;
        UInt16 zhuimingCnt;

        lengxueCnt = static_cast<UInt16>(GetVar(VAR_LX_CNT));
        wuqingCnt = static_cast<UInt16>(GetVar(VAR_WQ_CNT));
        tieshouCnt = static_cast<UInt16>(GetVar(VAR_TS_CNT));
        zhuimingCnt = static_cast<UInt16>(GetVar(VAR_ZM_CNT));

        Stream st(REP::FOURCOP);
        st << static_cast<UInt8>(0) << lengxueCnt << wuqingCnt << tieshouCnt << zhuimingCnt << Stream::eos;
        send(st);
    }

    bool Player::inArenaCommitCD()
    {
        UInt32 now = TimeUtil::Now();
        if(now < m_arenaCommitCD)
            return true;

        m_arenaCommitCD = now + 60;
        return false;
    }
    bool Player::inLeftAddrCommitCD()
    {
        UInt32 now = TimeUtil::Now();

        if(now < m_LeftAddrCommitCD)
            return true;

        m_LeftAddrCommitCD = now + 60;
        return false;
    }

    bool Player::inArenaTeamCommitCD()
    {
        UInt32 now = TimeUtil::Now();
        if(now < m_arenaTeamCommitCD)
            return true;

        m_arenaTeamCommitCD = now + 60;
        return false;
    }

    UInt16 Player::getServerWarChallengeCD()
    {
        UInt32 now = TimeUtil::Now();
        if(now >= m_serverWarChallengeCD)
            return 0;

        return  m_serverWarChallengeCD - now;
    }
    bool Player::inServerWarChallengeCD()
    {
        UInt32 now = TimeUtil::Now();
        if(now < m_serverWarChallengeCD)
            return true;

        m_serverWarChallengeCD = now + 300;
        return false;
    }
    bool Player::inServerWarCommitCD()
    {
        UInt32 now = TimeUtil::Now();
        if(now < m_serverWarCommitCD)
            return true;

        m_serverWarCommitCD = now + 60;
        return false;
    }

    void Player::appendLineup2( Stream& st)
    {
        st << getFormation();
        size_t offset = st.size();
        UInt8 c = 0;
        st << c;
        for(UInt8 i = 0; i < 5; ++ i)
        {
            Lineup& pdata = getLineup(i);
            if(pdata.available())
            {
                ++c;
                st << pdata.pos << static_cast<UInt16>(pdata.fid);
                Fighter * fgt = pdata.fighter;

                st << fgt->getLevel() << fgt->getPotential() << fgt->getCapacity();
                st << fgt->getMaxSoul() << fgt->getPeerlessAndLevel();
                fgt->getAllUpSkillAndLevel(st);
                fgt->getAllPSkillAndLevel4Arena(st);
                fgt->getAllSSAndLevel(st);
                fgt->getAllSGAndValue(st);
                fgt->getAllLingshiSkillAndLevel2Arena(st);
                fgt->getAllLbSkills(st);

                fgt->getAttrExtraEquip(st);

                st << fgt->getSoulExtraAura();
                st << fgt->getSoulAuraLeft();
                st << fgt->getSoulSkillSoulOut();
                st << fgt->getPortrait();
                fgt->appendElixirAttr2(st);
                st << fgt->getSoulSkillProtect();
            }
        }
        st.data<UInt8>(offset) = c;
    }

    void Player::appendPetOnBattle( Stream& st)
    {
        if(_onBattlePet)
        {
            st << static_cast<UInt16>(_onBattlePet->getId());
            st << _onBattlePet->getLevel() << _onBattlePet->getPotential() << _onBattlePet->getCapacity();
            st << _onBattlePet->getMaxSoul() << _onBattlePet->getPeerlessAndLevel();
            _onBattlePet->getAllUpSkillAndLevel(st);
            _onBattlePet->getAllPSkillAndLevel4Arena(st);
            _onBattlePet->getAllSSAndLevel(st);
            _onBattlePet->getAllSGAndValue(st);
            _onBattlePet->getAllLingshiSkillAndLevel2Arena(st);
            _onBattlePet->getAllLbSkills(st);

            _onBattlePet->getAttrExtraEquip(st);

            st << _onBattlePet->getSoulExtraAura();
            st << _onBattlePet->getSoulAuraLeft();
            st << _onBattlePet->getSoulSkillSoulOut();
            st << _onBattlePet->getPortrait();
            _onBattlePet->appendElixirAttr2(st);
            st << _onBattlePet->getSoulSkillProtect();
        }
        else
        {
            st << static_cast<UInt16>(0);
        }
    }

    void Player::SendNextdayTime(UInt32 nextDay)
    {
        Stream st(REP::SVRST);
        st << static_cast<UInt8>(1);
        st << nextDay << Stream::eos;
        send(st);
        ActivityMgr* mgr = this->GetActivityMgr();
        mgr->CheckTimeOver();
        UInt8 day = TimeUtil::MonthDay(nextDay);
        Stream st1(REP::ACTIVITY_SIGNIN);
        st1 << static_cast<UInt8>(0x00);
        st1 << static_cast<UInt32>(mgr->GetScores());
        st1 << static_cast<UInt16>(mgr->GetOneDayRecord(day));
        st1 << mgr->GetContinueSignInCnt(day);
        st1 << Stream::eos;
        send(st1);
    }

#ifdef _FB
    void Player::sendLevelAward()
    {
        if (GetLev() < 60)
            return;

        UInt32 t = 0;
        if (GetLev() < 65)
            t = 500;
        else if (GetLev() >= 65 && GetLev() < 70)
            t = 1000;
        else
            t = 2000;
        SYSMSG(title, 4008);
        SYSMSGV(content, 4009, GetLev(), t);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFD0000/*free*/);
        if(mail)
        {
            MailPackage::MailItem mitem[1] = {{0xA000,t},};
            mailPackageManager.push(mail->id, mitem, 1);
            std::string strItems;
            for (int i = 0; i < 1; ++i)
            {
                strItems += Itoa(mitem[i].id);
                strItems += ",";
                strItems += Itoa(mitem[i].count);
                strItems += "|";
            }
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, VipAward, title, content, strItems.c_str(), mail->recvTime);
        }
    }
#endif

#ifdef _FB
    void Player::equipForge(UInt32 fighterId, UInt32 itemId, UInt32 num)
    {
        UInt32 fi = fighterId << 16 | itemId;
        UInt32& on = _forges[fi];
        if (on < num)
        {
            on = num;
            GameAction()->onEquipForge(this, itemId, num);
        }
    }
#endif

    void Player::getSoSoMapAward()
    {
        UInt32 now = TimeUtil::Now();
        if (!World::_sosomapbegin || now < World::_sosomapbegin)
            return;

        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 soso_sharp = TimeUtil::SharpDay(0, World::_sosomapbegin);

        if (now_sharp - soso_sharp > 7 * DAY_SECS)
            return;

        UInt32 off = CREATE_OFFSET(soso_sharp, now_sharp);
        if (off >= 7)
            return;

        UInt32 soso = GetVar(VAR_SOSOMAPAWARD);
        bool got = (soso>>off)&0x1;
        if (got)
            return;

        GameAction()->onSoSoMapAward(this, off);

        soso |= (1<<off);
        SetVar(VAR_SOSOMAPAWARD, soso);

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(5) << static_cast<UInt8>(0) << Stream::eos;
        send(st);
    }

    void Player::sendSoSoMapInfo()
    {
        UInt32 now = TimeUtil::Now();

        if (!World::_sosomapbegin || now < World::_sosomapbegin)
            return;

        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        UInt32 soso_sharp = TimeUtil::SharpDay(0, World::_sosomapbegin);

        if (now_sharp - soso_sharp > 7 * DAY_SECS)
            return;

        UInt32 off = CREATE_OFFSET(soso_sharp, now_sharp);
        if (off >= 7)
            return;

        UInt32 soso = GetVar(VAR_SOSOMAPAWARD);
        bool got = (soso>>off)&0x1;

        Stream st(REP::GETAWARD);
        st << static_cast<UInt8>(5) << static_cast<UInt8>(got?0:1) << Stream::eos;
        send(st);
    }

    void Player::getKillMonsterAward()
    {
        if (GetPackage()->GetRestPackageSize() < 1)
        {
            sendMsgCode(0, 1011);
            return;
        }
        if(GetPackage()->GetItemAnyNum(16049) < 1)
        {
            return;
        }
        GetPackage()->DelItemAny(16049, 1);
        GameAction()->onGetKillMonsterReward(this);
        udpLog("916", "F_1099", "", "", "", "", "act");
    }

    void Player::consumeGold(UInt32 c)
    {
       if (World::getConsumeActive())
        {
            UInt32 total = GetVar(VAR_CONSUME);
            GameAction()->sendConsumeMails(this, total, total+c);
            //SetVar(VAR_CONSUME, total+c);
            sendConsumeInfo(true);
        }
        if (World::getConsume918())
        {
            UInt32 total = GetVar(VAR_CONSUME_918);
            if (total < 100)
            {
                if (total+c >= 100)
                {
                    MailPackage::MailItem item = {515,2};
                    sendMailItem(5100, 5101, &item, 1, true);
                }
            }
            int gold = 0;
            int coupon = 0;
            if (total < 1000 && total+c>=1000)
            {
                gold = 1000;
                coupon = 300;
                SYSMSGV(title, 5103);
                SYSMSGV(content, 5104, gold, coupon, coupon);
                GetMailBox()->newMail(NULL, 0x21, title, content);
            }
            if (total < 5000 && total+c>=5000)
            {
                gold = 5000;
                coupon = 500;
                SYSMSGV(title, 5103);
                SYSMSGV(content, 5104, gold, coupon, coupon);
                GetMailBox()->newMail(NULL, 0x21, title, content);

            }
            if (total < 10000 && total+c>=10000)
            {
                gold = 10000;
                coupon = 700;
                SYSMSGV(title, 5103);
                SYSMSGV(content, 5104, gold, coupon, coupon);
                GetMailBox()->newMail(NULL, 0x21, title, content);

            }
            if (total < 50000 && total+c>=50000)
            {
                gold = 50000;
                coupon = 3500;
            }
            if (gold > 0)
            {
                SYSMSGV(title, 5103);
                SYSMSGV(content, 5104, gold, coupon, coupon);
                GetMailBox()->newMail(NULL, 0x21, title, content);
            }
            AddVar(VAR_CONSUME_918, c);

            Stream st(REP::DAILY_DATA);
		    st << static_cast<UInt8>(17) << total+c << Stream::eos;
		    send((st));

            udpLog("consumeGold", "F_1103", "", "", "", "", "act", c);
        }
        if (World::getConsumeAwardAct())
        {
            AddVar(VAR_CONSUME, c);
            sendConsumeAwardInfo(0);
        }
    }

    static const UInt32 s_task1ColorScore[] = {100, 200, 300, 400}; //日常任务的积分
    static const UInt32 s_tjTask1MaxCount = 5;       //天劫日常任务1的最大可完成数
    static const UInt32 s_tjTask2MaxScore = 16000;    //天劫日常任务2的最大捐献积分
    static const UInt8  s_tjTask2Score[4] = {200, 200, 200, 200};
    static const UInt8  s_tjTask2ExpMulti[4] = {30, 30, 30, 30};
    static const UInt8  s_tjTask3CopyCount = 50;
    static const UInt8  s_tjTask3AutoTime  = 30;
    static const UInt8  s_task3ExpMulti = 8;
    static const UInt8  s_task3Score    = 50;
    void Player::OnDoTianjieTask(UInt8 eventId, UInt8 cmd, UInt8 id)
    {
        Stream st(REQ::TIANJIE);
        UInt8 type = 0;
        UInt8 rcmd = 0;
        if (1 == eventId)
        {
            type = 1;
            switch (cmd)
            {
                //查询列表
            case 0:
                {
                    st << type << rcmd;
                    //获取数据列表
                    getTjTask1Data(st);
                    st << Stream::eos;

                    send(st);
                }
                break;
                //攻击据点 默认攻击
            case 1:
            case 2:
                {
                    UInt8 res = attackTjEvent1(id, cmd);
                    if (res > 0)
                    {
                        UInt8 rcmd = res;
                        st << type << rcmd << Stream::eos;
                        send(st);
                    }
                }
                break;
                //刷新任务
            case 3:
                {
                    if (GetVar(VAR_TJ_TASK1_NUMBER) >= 5)
                    {
                        rcmd = 1;
                    }
                    else if (getTael() < 500)
                    {
                        rcmd = 3;
                    }
                    if (rcmd > 0)
                    {
                        st << type << rcmd << Stream::eos;
                        send(st);
                        return;
                    }
                    ConsumeInfo ci(TianjieTask, 0, 0);
                    useTael(500, &ci);

                    memset(_playerData.tjEvent1, 0, sizeof(_playerData.tjEvent1));
                    memset(_playerData.tjColor1, 0, sizeof(_playerData.tjColor1));
                    memset(_playerData.tjExp1,   0, sizeof(_playerData.tjExp1));
                    for (int i = 0; i < 3; ++i)
                        GObject::Tianjie::instance().randomTask1Data(GetLev(),_playerData.tjEvent1[i], _playerData.tjColor1[i], _playerData.tjExp1[i]);

                    st << type << rcmd;
                    getTjTask1Data(st, true);
                    st << Stream::eos;
                    send(st);
                }
                break;
           default:
                break;
            }
        }
        else if (2 == eventId)
        {
            type = 2;
            UInt32 score = GetVar(VAR_TJ_TASK2_SCORE);
            switch (cmd)
            {
                    //查询列表
                case 0:
                    {
                        st << type << rcmd;
                        getTjTask2Data(st);
                        st << Stream::eos;
                        send(st);
                    }
                    break;
                    //捐款
                case 1:
                    {
                        if (score >= s_tjTask2MaxScore) //达到上限
                        {
                            rcmd = 5;
                            st << type << rcmd << Stream::eos;
                            send(st);
                            return;
                        }
                        int tjScore = 0;
                        if (0 == id) //白银
                        {
                            if (getTael() < 1000)
                            {
                                rcmd = 1; //银币不足
                                st << type << rcmd << Stream::eos;
                                send(st);
                                return;
                            }
                            ConsumeInfo ci(TianjieTask, 0, 0);
                            useTael(1000, &ci);
                            AddVar(VAR_TJ_TASK2_TAEL, 1);
                            tjScore = s_tjTask2Score[0];

                            udpLog("tianjie", "F_1109_3", "", "", "", "", "act");
                        }
                        else if (1 == id) //仙石
                        {
                            if (getGold() < 10)
                            {
                                rcmd = 2; //仙石不足
                                st << type << rcmd << Stream::eos;
                                send(st);
                                return;
                            }
                            ConsumeInfo ci(TianjieTask, 0, 0);
                            useGold(10, &ci);
                            AddVar(VAR_TJ_TASK2_GOLD, 1);
                            tjScore = s_tjTask2Score[1];
                            udpLog("tianjie", "F_1109_1", "", "", "", "", "act");
                        }
                        else if (2 == id) //礼券
                        {
                            if (getCoupon() < 10)
                            {
                                rcmd = 3; //不足
                                st << type << rcmd << Stream::eos;
                                send(st);
                                return;
                            }
                            ConsumeInfo ci(TianjieTask, 0, 0);
                            useCoupon(10, &ci);
                            AddVar(VAR_TJ_TASK2_COUPON, 1);
                            tjScore = s_tjTask2Score[2];
                            udpLog("tianjie", "F_1109_2", "", "", "", "", "act");
                        }
                        else if (3 == id) //天劫印记
                        {
                            if (!GetPackage()->DelItemAny(9138, 1))
                            {
                                rcmd = 4; //印记不足
                                st << type << rcmd << Stream::eos;
                                send(st);
                                return;
                            }
                            AddVar(VAR_TJ_TASK2_TJYJ, 1);
                            tjScore = s_tjTask2Score[3];
                            udpLog("tianjie", "F_1109_4", "", "", "", "", "act");
                        }
                        if (tjScore > 0)
                        {
                            int exp = TIANJIE_EXP(GetLev()) * s_tjTask2ExpMulti[id];
                            addExpOrTjScore(exp, tjScore, false, false);

                            AddVar(VAR_TJ_TASK2_SCORE, tjScore);
                        }
                        st << type << rcmd;
                        getTjTask2Data(st);
                        st << Stream::eos;
                        send(st);
                    }
                    break;
                default:
                    break;
            }
        }
        else if (3 == eventId)
        {
            type = 3;
            switch (cmd)
            {
            case 0: //列表
                break;
            case 1: //前往破阵
                {
                    if(GetVar(VAR_TJ_TASK3_COPYID) == 0)
                        SetVar(VAR_TJ_AUTO_FRONTMAP_END_TIME, TimeUtil::Now());
                    UInt32 now = TimeUtil::Now();
                    if(TimeUtil::SharpDay(0, now) != TimeUtil::SharpDay(0, GetVar(VAR_TJ_AUTO_FRONTMAP_END_TIME)))
                    {
                        SetVar(VAR_TJ_TASK3_COPYID, 0);
                        SetVar(VAR_TJ_AUTO_FRONTMAP_END_TIME, now);
                    }

                    if (GetVar(VAR_TJ_TASK3_COPYID) >= 51)
                    {
                        rcmd = 1;
                        st << type << rcmd << Stream::eos;
                        send(st);
                        return;
                    }
                    attackTjEvent3(id);
                }
                break;
            case 2: //自动破阵
                {
                    processAutoTlz();
                }
                break;
            case 3: //自动完成
                {
                    completeAutoTlz();
                }
                break;
            default:
                break;
            }
        }
    }
    UInt8 Player::attackTjEvent1(UInt8 id, UInt8 cmd)
    {
        if (id > 3)
            return 4;

        if (GetVar(VAR_TJ_TASK1_NUMBER) >= 5)
            return 1;

        if (cmd == 2 && getGold() < 5) //双倍奖励
            return 2; //仙石不足

        bool res = attackTianjieNpc(_playerData.tjEvent1[id], cmd, false);
        if (res)
        {
            if (2 == cmd)
            {
                ConsumeInfo ci(TianjieTask, 0, 0);
                useGold(5, &ci);
            }
            int taskScore = s_task1ColorScore[_playerData.tjColor1[id]] * cmd;

            int exp = _playerData.tjExp1[id] * cmd;
            addExpOrTjScore(exp, taskScore, false, true);

            AddVar(VAR_TJ_TASK1_NUMBER, 1);

            _playerData.tjEvent1[id] = 0;
            _playerData.tjColor1[id] = 0;
            _playerData.tjExp1[id] = 0;

            if (cmd == 1)
                udpLog("tianjie", "F_1111", "", "", "", "", "act");
            else if (cmd == 2)
                udpLog("tianjie", "F_1112", "", "", "", "", "act");
        }
        Stream st(REQ::TIANJIE);
        st <<  static_cast<UInt8>(1) << static_cast<UInt8>(0);
        //获取数据列表
        getTjTask1Data(st);
        st << Stream::eos;
        send(st);
        return 0;
    }


   UInt8 Player::attackTjEvent3(UInt8 id)
   {
        UInt8 copyid = GetVar(VAR_TJ_TASK3_COPYID);
        if (copyid > s_tjTask3CopyCount) return 1;

        if (0 == copyid)
        {
            copyid = 1;
            AddVar(VAR_TJ_TASK3_COPYID, 1);
        }
        bool res = GObject::Tianjie::instance().attackTlz(this, copyid);
        if (res)
        {
            copyid++;
            AddVar(VAR_TJ_TASK3_COPYID, 1);
            int exp = TIANJIE_EXP(GetLev()) * s_task3ExpMulti;
            addExpOrTjScore(exp, s_task3Score, false, true);

            Stream st(REQ::TIANJIE);
            st << static_cast<UInt8>(3) << static_cast<UInt8>(0);
            getTjTask3Data(st);
            st << Stream::eos;
            send(st);

            if (copyid == 51)
            {
                udpLog("tianjie", "F_1114", "", "", "", "", "act");
            }
        }
        return 0;
   }
   void Player::getTjTask1Data(Stream& st, bool isRefresh)
   {
        if (isRefresh || GetVar(VAR_TJ_TASK1_NUMBER) == 0) //今日还没做任务
        {
            for (int i = 0; i < 3; ++i)
            {
                if (_playerData.tjEvent1[i] == 0)
                {
                    GObject::Tianjie::instance().randomTask1Data(GetLev(),_playerData.tjEvent1[i], _playerData.tjColor1[i], _playerData.tjExp1[i]);
                }
            }
        }
        UInt8 type = 0;
        int value[3] = {0};
        value[0] = _playerData.tjExp1[0];
        value[1] = _playerData.tjExp1[1];
        value[2] = _playerData.tjExp1[2];
        for (int i = 0; i < 3; ++i)
        {
            GData::NpcGroups::iterator it = GData::npcGroups.find(_playerData.tjEvent1[i]);
            if(it != GData::npcGroups.end())
            {
		        GData::NpcGroup * ng = it->second;
                value[i] +=  TIANJIE_EXP(GetLev()) * ng->getExp();
            }
        }
        if (GObject::Tianjie::instance().isPlayerInTj(GetLev()))
        {
            type = 1;
            value[0] = value[0] * 2 / TIANJIE_EXP(GetLev()) + s_task1ColorScore[_playerData.tjColor1[0]];
            value[1] = value[1] * 2 / TIANJIE_EXP(GetLev()) + s_task1ColorScore[_playerData.tjColor1[1]];
            value[2] = value[2] * 2 / TIANJIE_EXP(GetLev()) + s_task1ColorScore[_playerData.tjColor1[2]];
        }
        UInt8 num1 = 5-GetVar(VAR_TJ_TASK1_NUMBER);
        st << num1 << type;
        st << _playerData.tjEvent1[0] << _playerData.tjColor1[0] << value[0];
        st << _playerData.tjEvent1[1] << _playerData.tjColor1[1] << value[1];
        st << _playerData.tjEvent1[2] << _playerData.tjColor1[2] << value[2];

   }
   void Player::getTjTask2Data(Stream& st)
   {
       short n1 = GetVar(VAR_TJ_TASK2_TAEL);
       short n2 = GetVar(VAR_TJ_TASK2_GOLD);
       short n3 = GetVar(VAR_TJ_TASK2_COUPON);
       short n4 = GetVar(VAR_TJ_TASK2_TJYJ);
       UInt8 percent = GetVar(VAR_TJ_TASK2_SCORE)*100/s_tjTask2MaxScore;      //捐献百分比
       int exp2 = TIANJIE_EXP(GetLev()) * s_tjTask2ExpMulti[0] ; //经验
       int score = s_tjTask2Score[0];
       if (GObject::Tianjie::instance().isPlayerInTj(GetLev()))
       {
           score += exp2*2/TIANJIE_EXP(GetLev());
           exp2 = 0;
       }
       st << n1 << n2 << n3 << n4 << percent << exp2 << score;
   }
   void Player::getTjTask3Data(Stream& st)
   {
       UInt8 finish = 0;
       UInt8 copyid = GetVar(VAR_TJ_TASK3_COPYID);
       if (copyid >= (s_tjTask3CopyCount+1)) //已完成
       {
           finish = 1;
            UInt32 now = TimeUtil::Now();
            if(TimeUtil::SharpDay(0, now) != TimeUtil::SharpDay(0, GetVar(VAR_TJ_AUTO_FRONTMAP_END_TIME)))
            {
                SetVar(VAR_TJ_TASK3_COPYID, 0);
                SetVar(VAR_TJ_AUTO_FRONTMAP_END_TIME, now);
                finish = 0;
                copyid = 0;
            }
       }
       if (copyid == 0) copyid = 1;

       UInt8 percent = (copyid-1) * 100/ s_tjTask3CopyCount;
       int exp3 = TIANJIE_EXP(GetLev()) * s_task3ExpMulti;
       int score = s_task3Score;
       int time3 = 0;
       if (hasFlag(Player::AutoTlz))
           time3 = (s_tjTask3CopyCount-copyid+1) * s_tjTask3AutoTime;
       if (GObject::Tianjie::instance().isPlayerInTj(GetLev()))
       {
           score += exp3*2/TIANJIE_EXP(GetLev());
           exp3 = 0;
       }

       st << finish << static_cast<UInt8>(copyid-1) << percent << time3 << exp3 << score;
   }
   void Player::addExpOrTjScore(int exp, int score, bool isEventScore, bool isEndScore)
   {
       int eventScore = 0;
       //天劫事件的经验转换为天劫积分
       if (isEventScore) eventScore = score;

       if (GObject::Tianjie::instance().isPlayerInTj(GetLev()))
       {
           if (isEventScore)
               eventScore += exp*2/TIANJIE_EXP(GetLev());
           score += exp*2/TIANJIE_EXP(GetLev());;
       }
       else if (isEndScore) //战斗结束后再加经验
       {
           pendExp(exp);
       }
       else                 //立即加经验
       {
           AddExp(exp);
       }
       if (isEndScore)
       {
           if (isEventScore)
               _playerData.lastTjEventScore += eventScore;
           _playerData.lastTjTotalScore += score;
       }
       if (eventScore > 0)
       {
           int oldScore = GetVar(VAR_TJ_EVENT_PRESTIGE);
           AddVar(VAR_TJ_EVENT_PRESTIGE, eventScore);
           //捐款不会超过40000积分
           GObject::Tianjie::instance().setEvent2MaxScore(this);
           GObject::Tianjie::instance().insertToEventSortMap(this, GetVar(VAR_TJ_EVENT_PRESTIGE), oldScore);
           GObject::Tianjie::instance().updateEventData(this);
           GObject::Tianjie::instance().broadEventTop1(this);

           GObject::Tianjie::instance().udplogScore(this, eventScore, 1);

           if (!isEndScore)
           {
               SYSMSG_SENDV(167, this, eventScore);
               SYSMSG_SENDV(169, this, eventScore);
           }
       }
       if (score > 0)
       {
           AddVar(VAR_TJ_TASK_PRESTIGE, score);
           GObject::Tianjie::instance().insertToScoreSortMap(this, GetVar(VAR_TJ_TASK_PRESTIGE),GetVar(VAR_TJ_TASK_PRESTIGE)-score);
           GObject::Tianjie::instance().updateRankData(this);

           GObject::Tianjie::instance().udplogScore(this, score, 0);

           if (!isEndScore)
           {
               SYSMSG_SENDV(168, this, score);
               SYSMSG_SENDV(170, this, score);
           }
       }
   }
   void Player::clearTjTaskData()
   {
       memset(_playerData.tjEvent1, 0, sizeof(_playerData.tjEvent1));
       memset(_playerData.tjColor1, 0, sizeof(_playerData.tjColor1));
       memset(_playerData.tjExp1, 0, sizeof(_playerData.tjExp1));

       cancleAutoTlz();
   }
   void Player::processAutoTlz()
   {
       Stream st(REQ::TIANJIE);
       UInt8 type = 3;
       UInt8 rcmd = 0;
       if (hasFlag(Player::AutoTlz))
           return;

       if (GetVar(VAR_TJ_TASK3_COPYID) >= (s_tjTask3CopyCount+1))
       {
           rcmd = 1;
           st << type << rcmd << Stream::eos;
           send(st);
           return;
       }
       else if (GetVar(VAR_TJ_TASK3_COPYID) == 0)
       {
           SetVar(VAR_TJ_TASK3_COPYID, 1);
       }
       if (getTael() < 1000)
       {
           rcmd = 3; //银币不足
           st << type << rcmd << Stream::eos;
           send(st);
           return;
       }
       ConsumeInfo ci(TianjieTask, 0, 0);
       useTael(1000, &ci);

       addFlag(Player::AutoTlz);

       int count = s_tjTask3CopyCount+1 - GetVar(VAR_TJ_TASK3_COPYID);
       EventTlzAuto* event = new(std::nothrow) EventTlzAuto(this, s_tjTask3AutoTime, count);
       if (event == NULL) return;
       PushTimerEvent(event);
       SetVar(VAR_TJ_AUTO_FRONTMAP_END_TIME, TimeUtil::Now());

       event->notify(true);

       udpLog("tianjie", "F_1116", "", "", "", "", "act");
   }
   void Player::cancleAutoTlz()
   {
       if (hasFlag(Player::AutoTlz))
       {
           //删除定时事件
           PopTimerEvent(this, EVENT_TLZAUTO, getId());
           delFlag(Player::AutoTlz);
       }
   }
   void Player::completeAutoTlz()
   {
       Stream st(REQ::TIANJIE);
       UInt8 type = 3;
       UInt8 rcmd = 0;
       if (!hasFlag(Player::AutoTlz))
           return;

       if (GetVar(VAR_TJ_TASK3_COPYID) >= (s_tjTask3CopyCount+1))
       {
           rcmd = 1;
       }
       if (getGold() < 10)
       {
           rcmd = 2; //xs不足
       }
       if (rcmd > 0 )
       {
           st << type << rcmd << Stream::eos;
           send(st);
           return;
       }
       ConsumeInfo ci(TianjieTask, 0, 0);
       useGold(10, &ci);

       int currCopyId = GetVar(VAR_TJ_TASK3_COPYID);
       if (currCopyId == 0)
           currCopyId = 1;
       int copyCount = s_tjTask3CopyCount - currCopyId + 1;

       SetVar(VAR_TJ_TASK3_COPYID, (s_tjTask3CopyCount+1));
       //加积分和经验
       int exp = TIANJIE_EXP(GetLev()) * s_task3ExpMulti * copyCount;
       addExpOrTjScore(exp, s_task3Score*copyCount, false);

       st << type << rcmd;
       getTjTask3Data(st);
       st << Stream::eos;
       send(st);
       //删除定时事件
       PopTimerEvent(this, EVENT_TLZAUTO, getId());
       delFlag(Player::AutoTlz);

       udpLog("tianjie", "F_1115", "", "", "", "", "act");
   }
   
   void Player::setOpenId(const std::string& openid, bool load /* = false */)
   {
       if (!strncmp(m_openid, openid.c_str(), 256))
           return;
       strncpy(m_openid, openid.c_str(), 256);
       m_openid[255] = '\0';
       if (!load)
       {
           DB1().PushUpdateData("UPDATE `player` SET `openid` = '%s' WHERE `id` = %" I64_FMT "u", m_openid, getId());
       }
   }

   JobHunter* Player::getJobHunter()
   {
       if (GetVar(VAR_EX_JOB_ENABLE) < 2)
           return NULL;
       if (!_jobHunter)
       {
           _jobHunter = new JobHunter(this);
       }
       return _jobHunter;
   }

   void Player::setJobHunter(std::string& fighterList, std::string& mapInfo, UInt8 progress,
           UInt8 posX, UInt8 posY, UInt8 earlyPosX, UInt8 earlyPosY, UInt32 stepCount, UInt8 slotVal1, UInt8 slotVal2, UInt8 slotVal3)
   {
       if (_jobHunter)
           return;
       _jobHunter = new JobHunter(this, fighterList, mapInfo, progress, posX, posY, earlyPosX, earlyPosY, stepCount, slotVal1, slotVal2, slotVal3);
   }

   void Player::sendAutoJobHunter()
   {
       if (!getJobHunter())
           return;
       _jobHunter->SendAutoInfo();
   }

   void Player::setDreamer(UInt8 progress, UInt8 level, UInt8 maxX, UInt8 maxY, UInt8 maxGrid,
           const std::string& mapInfo, UInt8 posX, UInt8 posY, UInt8 earlyPosX, UInt8 earlyPosY,
           UInt8 timeConsume, UInt8 remainTime, UInt8 keysCount, 
           UInt8 eyesCount, UInt8 eyeTime, UInt8 eyeX, UInt8 eyeY)
   {
       if (_dreamer)
           return;
       _dreamer = new Dreamer(this, progress, level, maxX, maxY, maxGrid, mapInfo,
               posX, posY, earlyPosX, earlyPosY, timeConsume, remainTime, keysCount, 
               eyesCount, eyeTime, eyeX, eyeY);
   }


EventTlzAuto::EventTlzAuto( Player * player, UInt32 interval, UInt32 count)
	: EventBase(player, interval, count)
{
}

void EventTlzAuto::Process(UInt32 leftCount)
{
    bool forceCancel = false;
    int curRate = GObject::Tianjie::instance().getTjCurRate();
    if(((5 == curRate || 0 == curRate) && GObject::Tianjie::instance().isFinish()) || ((4 == curRate || 5 == curRate) && GObject::Tianjie::instance().isTjExecute()))
        forceCancel = true;
    else
    {
        m_Player->AddVar(VAR_TJ_TASK3_COPYID, 1);

        notify();
    }
    if (leftCount == 0 || forceCancel)
    {
        PopTimerEvent(m_Player, EVENT_TLZAUTO,  m_Player->getId());
        m_Player->delFlag(Player::AutoTlz);
        UInt32 now = TimeUtil::Now();
        if(TimeUtil::SharpDay(0, now) != TimeUtil::SharpDay(0, m_Player->GetVar(VAR_TJ_AUTO_FRONTMAP_END_TIME)))
        {
            m_Player->SetVar(VAR_TJ_TASK3_COPYID, 0);
            m_Player->SetVar(VAR_TJ_AUTO_FRONTMAP_END_TIME, TimeUtil::Now());
        }
        if(forceCancel)
            notify();
    }
}

void EventTlzAuto::complete() const
{
}
void EventTlzAuto::notify(bool isBeginAuto)
{
    int copyid = m_Player->GetVar(VAR_TJ_TASK3_COPYID);
    if (!isBeginAuto)
    {
        int exp = TIANJIE_EXP(m_Player->GetLev()) * s_task3ExpMulti;
        m_Player->addExpOrTjScore(exp, s_task3Score, false);
    }
    if (copyid  >= (s_tjTask3CopyCount+1))
    {
        m_Player->delFlag(Player::AutoTlz);
        m_Player->udpLog("tianjie", "F_1114", "", "", "", "", "act");
    }

    if(!m_Player->isOnline())
        return;

    Stream st(REQ::TIANJIE);
    UInt8 type = 3;
    UInt8 cmd = 0;

    st << type << cmd;
    m_Player->getTjTask3Data(st);
    st << Stream::eos;

    m_Player->send(st);
}

    void Player::sendQixiInfo()
    {
        Stream st(REP::ACTIVE);
        st << static_cast<UInt8>(0x01) << static_cast<UInt8>(0x01) << static_cast<UInt8>(0x01);
        if(m_qixi.lover)
            st << m_qixi.lover->getName();
        else
            st << "";

        st << m_qixi.bind << m_qixi.pos << m_qixi.event;
        st << Stream::eos;
        send(st);

        GameMsgHdr hdr1(0x255, getThreadId(), this, 0);
        GLOBAL().PushMsg(hdr1, NULL);
    }

    void Player::divorceQixi()
    {
        /*
        if(!m_qixi.bind)
            return;
        */
        Player* pl = m_qixi.lover;
        if(!pl) return;
        m_qixi.lover = NULL;
        m_qixi.bind = 0;

        pl->beDivorceQixi(this);
        qixiUdpLog(1085);

		DB1().PushUpdateData("UPDATE `qixi` SET `lover`=0, `bind`=0 WHERE `playerId` = %" I64_FMT "u", getId());
        WORLD().DivorceQixiPair(this);
        sendQixiInfo();
    }

    void Player::postQixiEyes(Player* pl)
    {
        if(m_qixi.bind)
            return;

        if(!_hasFriend(0, pl))
            return;
        m_qixi.lover = pl;
        UInt8 bind = pl->beQixiEyes(this);
        onQixiEyesResp(bind);
        if(m_qixi.bind)
        {
            WORLD().UpdateQixiScore(this, m_qixi.lover);
        }
        qixiUdpLog(1084);

		DB1().PushUpdateData("REPLACE INTO `qixi` (`pos`, `event`, `score`, `bind`, `lover`, `playerId`) VALUES(%u, %u, %u, %u, %" I64_FMT "u, %" I64_FMT "u)", m_qixi.pos, m_qixi.event, m_qixi.score, m_qixi.bind, pl->getId(), getId());
    }

    void Player::roamingQueqiao(UInt8 pos)
    {
        if (GetPackage()->GetRestPackageSize() < 1)
        {
            sendMsgCode(0, 1011);
            return;
        }
        if(false == GetPackage()->DelItemAny(qixiTmpl._qixiItem, 1, NULL, ToQixi))
        {
            return;
        }
        udpLog("qixi", "I_9122_2", "", "", "", "", "act");

        UInt8 pos2 = GameAction()->onRoamingQueqiao(this, pos);

        qixiUdpLog(1083);
        Stream st(REP::ACTIVE);
        st << static_cast<UInt8>(0x01) << static_cast<UInt8>(0x03) << pos2;
        st << Stream::eos;
        send(st);
    }

    void Player::beDivorceQixi(Player* pl)
    {
        if(m_qixi.lover != pl)
            return;

        m_qixi.bind = 0;

        sendMsgCode(0, qixiTmpl._divorceMsgCode);
		DB1().PushUpdateData("UPDATE `qixi` SET `bind`=0 WHERE `playerId` = %" I64_FMT "u", getId());
        sendQixiInfo();
    }

    UInt8 Player::beQixiEyes(Player* pl)
    {
        UInt8 bind = 0;
        if(m_qixi.bind || m_qixi.lover != pl)
        {
            bind = 0;
        }
        else
        {
            m_qixi.bind = 1;
            bind = 1;

            DB1().PushUpdateData("UPDATE `qixi` SET `bind`=%u WHERE `playerId` = %" I64_FMT "u", bind, getId());
            sendQixiInfo();
        }

        return bind;
    }

    void Player::onQixiEyesResp(UInt8 bind)
    {
        m_qixi.bind = bind;

        Stream st(REP::ACTIVE);
        st << static_cast<UInt8>(0x01) << static_cast<UInt8>(0x02) << bind;
        st << Stream::eos;
        send(st);

        //sendQixiInfo();
    }

    void Player::postRoamResult(UInt8 pos, UInt8 event, UInt8 score)
    {
        struct Roam
        {
            UInt8 pos;
            UInt8 event;
            UInt8 score;
        };

        Roam roam;
        roam.pos = pos;
        roam.event = event;
        roam.score = score;

		GameMsgHdr hdr(0x1F9, WORKER_THREAD_WORLD, this, sizeof(Roam));
		GLOBAL().PushMsg(hdr, &roam);
    }

    void Player::qixiStepAdvance(UInt8 pos, UInt8 event, UInt8 score)
    {
        m_qixi.pos = pos;
        m_qixi.event = event;
        m_qixi.score += score;

        if(m_qixi.lover == NULL && m_qixi.score == score)
            DB1().PushUpdateData("REPLACE INTO `qixi` (`pos`, `event`, `score`, `bind`, `lover`, `playerId`) VALUES(%u, %u, %u, %u, 0, %" I64_FMT "u)", m_qixi.pos, m_qixi.event, m_qixi.score, m_qixi.bind, getId());
        else
            DB1().PushUpdateData("UPDATE `qixi` SET `pos`=%u, `event`=%u, `score`=%u WHERE `playerId` = %" I64_FMT "u", pos, event, m_qixi.score, getId());
        if(m_qixi.bind)
            WORLD().UpdateQixiScore(this, m_qixi.lover);
    }

    void Player::resetQixi()
    {
        m_qixi.bind = 0;
        m_qixi.lover = NULL;
        DB1().PushUpdateData("UPDATE `qixi` SET `bind`=0, `lover`=0 WHERE `playerId` = %" I64_FMT "u", getId());
    }

    void Player::resetSnow()
    {
        m_snow.bind = 0;
        m_snow.lover = NULL;
        DB1().PushUpdateData("UPDATE `snow` SET `bind`=0, `lover`=0 WHERE `playerId` = %" I64_FMT "u", getId());
    }

    void Player::sendSnowInfo()
    {
        Stream st(REP::ACTIVE);
        st << static_cast<UInt8>(0x05) << static_cast<UInt8>(0x01) << static_cast<UInt8>(0x01);
        UInt32 score = m_snow.score;
        if(m_snow.lover && m_snow.bind)
        {
            st << m_snow.lover->getName();
    //        score += m_snow.lover->getSnowScore();
        }
        else
            st << "";

        st << score << static_cast<UInt8>(m_snow.bind) << static_cast<UInt16>(GetVar(VAR_SNOW_AWARD));
        st << Stream::eos;
        send(st);
    }

    void Player::divorceSnowLover()
    {
        if(!m_snow.bind)
            return;
        Player* pl = m_snow.lover;
        m_snow.lover = NULL;
        m_snow.bind = 0;

        pl->beDivorceSnowLover(this);
       // qixiUdpLog(1085);

		DB1().PushUpdateData("UPDATE `snow` SET `lover`=0, `bind`=0 WHERE `playerId` = %" I64_FMT "u", getId());
        WORLD().DivorceSnowPair(this);
        sendSnowInfo();
    }
    void Player::beDivorceSnowLover(Player* pl)
    {
        if(m_snow.lover != pl)
            return;

        m_snow.bind = 0;
        m_snow.lover = NULL;

        sendMsgCode(0, 1034);
		DB1().PushUpdateData("UPDATE `snow` SET `bind`=0,`lover`=0 WHERE `playerId` = %" I64_FMT "u", getId());
        sendSnowInfo();
    }

    void Player::postSnowLover(Player* pl)
    {
        if(m_snow.bind)
            return;

        if(!_hasFriend(0, pl))
            return;
        m_snow.lover = pl;
        UInt8 bind = pl->beSnowLoverBind(this);
        onSnowLoverResp(bind);
        if(m_snow.bind)
        {
            WORLD().UpdateSnowScore(this, m_snow.lover);
        }
       // qixiUdpLog(1084);

		DB1().PushUpdateData("REPLACE INTO `snow` (`score`, `bind`, `lover`, `playerId`) VALUES(%u, %u, %" I64_FMT "u, %" I64_FMT "u)", m_snow.score, m_snow.bind, pl->getId(), getId());
    }
    UInt8 Player::beSnowLoverBind(Player* pl)
    {
        UInt8 bind = 0;
        if(m_snow.bind || m_snow.lover != pl)
        {
            bind = 0;
        }
        else
        {
            m_snow.bind = 1;
            bind = 1;

            DB1().PushUpdateData("UPDATE `snow` SET `bind`=%u WHERE `playerId` = %" I64_FMT "u", bind, getId());
            sendSnowInfo();
        }

        return bind;
    }
    void Player::onSnowLoverResp(bool bind)
    {
        m_snow.bind = bind;

        Stream st(REP::ACTIVE);
        st << static_cast<UInt8>(0x05) << static_cast<UInt8>(0x02);
        st << static_cast<UInt8>(bind);
        st << Stream::eos;
        send(st);
    }
    UInt8 Player::useSnowItem(UInt32 num)
    {
        //9275
        if (GetPackage()->DelItemAny(16019, num))
        {
            UInt32 oldScore = m_snow.score;

            UInt32 minScore = num * 3;
            UInt32 maxScore = num * 5;
            UInt32 score = minScore + uRand(maxScore-minScore);
            m_snow.score += score;
            AddPExp(199*num);

            //sendSnowScoreAward();
            //if (m_snow.bind && m_snow.lover != NULL)
            //    m_snow.lover->sendSnowScoreAward();
            if (oldScore < 300 && m_snow.score >= 300)
            {
                SYSMSG(title, 4112);
                SYSMSGV(ctx, 4113, 300);
                Mail * mail = GetMailBox()->newMail(NULL, 0x21, title, ctx, 0xFFFE0000);
                if (mail)
                {
                    MailPackage::MailItem item = {1637,1};
                    mailPackageManager.push(mail->id, &item, 1, true);
                }
            }
            WORLD().UpdateSnowScore(this, m_snow.lover);
            if (NULL !=  m_snow.lover)
		        DB1().PushUpdateData("REPLACE INTO `snow` (`score`, `bind`, `lover`, `playerId`) VALUES(%u, %u, %" I64_FMT "u, %" I64_FMT "u)", m_snow.score, m_snow.bind, m_snow.lover->getId(), getId());
            else
		        DB1().PushUpdateData("REPLACE INTO `snow` (`score`, `bind`, `lover`, `playerId`) VALUES(%u, %u, 0, %" I64_FMT "u)", m_snow.score, m_snow.bind, getId());

            return 0;
        }
        return 1;
    }

    void Player::sendSnowScoreAward()
    {
        static  MailPackage::MailItem s_item[][3] = {
            {{1637,1}},
            {{401,5},{547,5}},
            {{509,2},{507,2}},
            {{503,10},{516,10}},
            {{134,5},{1325,5},{9076,5}},
            {{1325,10},{134,10},{9076,10}}
        };
        static int s_itemCount[]= {1,2,2,2,3,3};
        static UInt32 s_score[] = {300, 900, 1800, 3000, 5100, 9900};
        UInt32 score = m_snow.score;
        //if (NULL != m_snow.lover && m_snow.bind)
        //score += m_snow.lover->getSnowScore();
        UInt32 v =  GetVar(VAR_SNOW_AWARD) >> 8; //邮件是否已发的标志
        for (UInt8 i = 0; i < sizeof(s_score)/sizeof(s_score[0]); ++i)
        {
            if (score < s_score[i])
                break;
            if (((v>>i) & 0x01) == 0)
            {
                SYSMSG(title, 4102);
                SYSMSGV(ctx, 4103, s_score[i]);
                Mail * mail = GetMailBox()->newMail(NULL, 0x21, title, ctx, 0xFFFE0000);
                if (mail)
                {
                    mailPackageManager.push(mail->id, s_item[i], s_itemCount[i], true);
                    v |= (0x01 << i);
                }
            }
        }
        if (v > (GetVar(VAR_SNOW_AWARD) >> 8))
        {
            v  = v << 8;
            v |= GetVar(VAR_SNOW_AWARD);
            SetVar(VAR_SNOW_AWARD, v);
        }
    }
    UInt8 Player::getSnowAward(UInt16 type)
    {
        static  MailPackage::MailItem s_item1[4] = {{56,3},{57,3},{9371,3},{15,3}};
        static  MailPackage::MailItem s_item2[4] = {{514,3},{9371,3},{500,3},{15,3}};
        static  MailPackage::MailItem s_item3[4] = {{503,3},{512,3},{516,2},{513,3}};
        static  MailPackage::MailItem s_item4[4] = {{1325,2},{134,2},{547,3},{551,3}};
        static  MailPackage::MailItem s_item5[4] = {{56,5},{547,5},{512,5},{503,5}};
        static  MailPackage::MailItem s_item6[4] = {{509,3},{507,3},{501,5},{513,5}};
        static  MailPackage::MailItem s_item7[4] = {{503,5},{516,5},{501,5},{505,5}};
        static  MailPackage::MailItem s_item8[4] = {{134,8},{1325,8},{9076,8},{507,8}};
        static  MailPackage::MailItem s_item9[4] = {{9498,15},{134,15},{9076,10},{509,15}};
  
        if(GetPackage()->GetRestPackageSize() < 4)
        {
            sendMsgCode(0, 1011);
            return 2;
        }
        UInt16 v = GetVar(VAR_SNOW_AWARD);
        if (v&type)
            return 3;

        UInt32 score = m_snow.score;
        // if (m_snow.lover != NULL && m_snow.bind)
        //     score += m_snow.lover->getSnowScore();
        
        UInt32 needScore = 0;
        MailPackage::MailItem* pItems = NULL;
        switch (type)
        {
            case 0x01:
                needScore = 40;
                pItems = s_item1;
                break;
            case 0x02:
                needScore = 100;
                pItems = s_item2;
                break;
            case 0x04:
                needScore = 180;
                pItems = s_item3;
                break;
            case 0x08:
                needScore = 300;
                pItems = s_item4;
                break;
            case 0x10:
                needScore = 450;
                pItems = s_item5;
                break;
            case 0x20:
                needScore = 900;
                pItems = s_item6;
                break;
            case 0x40:
                needScore = 1500;
                pItems = s_item7;
                break;
            case 0x80:
                needScore = 2550;
                pItems = s_item8;
                break;
            case 0x100:
                needScore = 4950;
                pItems = s_item9;
                break;
        }
        if (needScore > score)
            return 1;
        if (pItems != NULL)
        {
            for (int i = 0; i < 4; ++i)
            {
                if (pItems[i].id == 0 )
                    break;
                m_Package->Add(pItems[i].id, pItems[i].count, true);
            }
            v |= type;
            SetVar(VAR_SNOW_AWARD, v);
        }
        return 0;
    }

    void Player::cleanPileSnow()
    {
        SetVar(VAR_SNOW_AWARD, 0);
        m_snow.lover = NULL;
        m_snow.bind = 0;
        m_snow.score = 0;

        DB1().PushUpdateData("DELETE FROM `snow` WHERE `playerId` = %" I64_FMT "u", getId());

        WORLD().SnowClear();
    }

    void  Player::setForbidSale(bool b, bool isAuto /* = false */)
    {
        _isForbidSale = b;
        if (isAuto)
        {
            // 服务器自助查询OpenAPI封杀交易，udp上报一下
            udpLog("svr_forbid_sale", "success", "", "", "", "", "act_tmp");
        }
    }

    void Player::postKillMonsterRoamResult(UInt32 pos, UInt8 curType, UInt8 curCount, UInt8 tips)
    {
        struct _Roam
        {
            UInt32 _pos;
            UInt8 _curType;
            UInt8 _curCount;
            UInt8 _tips;
        }curRoam = {pos, curType, curCount, tips};

		GameMsgHdr hdr(0x1FE, WORKER_THREAD_WORLD, this, sizeof(curRoam));
		GLOBAL().PushMsg(hdr, &curRoam);
    }

    void Player::killMonsterStepAdvance(UInt32 pos, UInt8 curType, UInt8 curCount, UInt8 tips)
    {
        SetVar(VAR_ZYCM_POS, pos);
        if(curType == 1)
            AddVar(VAR_XIAGU_CNT, curCount);
        else if(curType == 2)
            AddVar(VAR_ROUQING_CNT, curCount);
        else if(curType == 3)
            AddVar(VAR_CAIFU_CNT, curCount);
        else if(curType == 4)
            AddVar(VAR_CHUANQI_CNT, curCount);

        if(GetVar(VAR_ZYCM_TIPS) != tips)
            SetVar(VAR_ZYCM_TIPS, tips);

        WORLD().UpdateKillMonsterRank(this, curType, curCount);
    }

    ///////////////////////////////////////////////
    // 帮派副本相关

    // 帮派副本相关
    ///////////////////////////////////////////////
    bool Player::checkTrumpMutually(UInt32 trumpid)
    {
        static UInt32 muttrumps[][4] = {
            {1529, 1532, 0, 0},
            {1530, 1533, 0, 0},
            {1531, 1534, 0, 0},
            {1650, 1653, 1671, 1672},
            {1651, 1654, 0, 0},
            {1652, 1655, 0, 0},
        };
        if ((trumpid >= 1529 && trumpid <= 1534)
                || (trumpid >= 1650 && trumpid <= 1655) || (trumpid >= 1671 && trumpid <= 1672))
        {
            size_t i = 0;
            for (; i < sizeof(muttrumps)/(sizeof(UInt32)*4); ++i)
            {
                if (trumpid == muttrumps[i][0] || trumpid == muttrumps[i][1] || trumpid == muttrumps[i][2] || trumpid == muttrumps[i][3])
                    break;
            }
            if(i == sizeof(muttrumps)/(sizeof(UInt32)*4))
                return false;

            for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
            {
                Fighter* fgt = it->second;
                UInt32 trumpids[32];
                size_t c = fgt->getAllTrumpTypeId(trumpids, sizeof(trumpids)/sizeof(UInt32));
                if (!c)
                    continue;
                for (size_t j = 0; j < c; ++j)
                {
                    if (!trumpids[j])
                        continue;
                    if (trumpids[j] == muttrumps[i][0] || trumpids[j] == muttrumps[i][1] || trumpids[j] == muttrumps[i][2] || trumpids[j] == muttrumps[i][3])
                    {
                        sendMsgCode(0, 1032);
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool Player::checkInnateTrumpMutually(UInt32 innateTrumpid)
    {
        static UInt32 muttrumps[][2] = {
            {1529, 1532},
            {1530, 1533},
            {1531, 1534},
            {1650, 1653},
            {1651, 1654},
            {1652, 1655},
            {1541, 1541},
            {1542, 1542},
            {1544, 1544},
            {1670, 1670}
        };

        if ((innateTrumpid >= 1529 && innateTrumpid <= 1534) ||
            (innateTrumpid >= 1650 && innateTrumpid <= 1655)
         || (innateTrumpid >= 1541 && innateTrumpid <= 1542)
         || (innateTrumpid >= 1544 && innateTrumpid <= 1544)
         || (innateTrumpid >= 1670 && innateTrumpid <= 1670)
         )
        {
            size_t i = 0;
            for (; i < sizeof(muttrumps)/(sizeof(UInt32)*2); ++i)
            {
                if (innateTrumpid == muttrumps[i][0] || innateTrumpid == muttrumps[i][1])
                    break;
            }

            for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
            {
                Fighter* fgt = it->second;
                UInt32 innateTrumpId = fgt->getInnateTrumpTypeId();

                if (innateTrumpId == muttrumps[i][0] || innateTrumpId == muttrumps[i][1])
                {
                    sendMsgCode(0, 1032);
                    return true;
                }
            }
        }
        return false;
    }

    UInt32 Player::getEventState(UInt32 type)
    {
        if (!World::getTgcEvent())
            return 0;

        switch (type)
        {
            case 1:
                {
                    ItemBase* ib = GetPackage()->GetItem(9188, true);
                    if (!ib)
                        return 0;
                    return 1;
                }
                break;
            case 2:
                {
                    ItemBase* ib = GetPackage()->GetItem(9273, true);
                    if (!ib)
                        return 0;
                    return 1;
                }
                break;
            default:
                break;
        }
        return 0;
    }

    UInt32 Player::getBattlePoint()
    {
        UInt32 bp = 0;
        if(CURRENT_THREAD_ID() == getThreadId())
        {
            for(int j = 0; j < 5; ++ j)
            {
                Fighter* fighter = _playerData.lineup[j].fighter;
                if(fighter)
                    bp += fighter->getBattlePoint();
            }
            if(_onBattlePet)
                bp += _onBattlePet->getBattlePoint();

            pushPetInfo2Leaderboard();
        }
        else
        {
            GameMsgHdr hdr(0x267, getThreadId(), this, 0);
            GLOBAL().PushMsg(hdr, NULL);

            for(int j = 0; j < 5; ++ j)
            {
                Fighter* fighter = _playerData.lineup[j].fighter;
                if(fighter)
                    bp += fighter->getBattlePoint_Dirty();
            }
            if(_onBattlePet)
                bp += _onBattlePet->getBattlePoint_Dirty();
        }

        return bp;
    }

    void Player::calcLingbaoBattlePoint()
    {
        if(CURRENT_THREAD_ID() == getThreadId())
        {
            UInt32 value = 0;
            _maxLingbaoBattlePoint = 0;
            for(int j = 0; j < 5; ++ j)
            {
                Fighter* fighter = _playerData.lineup[j].fighter;
                if(fighter)
                {
                    value = fighter->calcLingbaoBattlePoint();
                    _maxLingbaoBattlePoint = value > _maxLingbaoBattlePoint? value:_maxLingbaoBattlePoint;
                }
            }
        }
        else
        {
            GameMsgHdr hdr(0x353, getThreadId(), this, 0);
            GLOBAL().PushMsg(hdr, NULL);
        }

    }

    void Player::recalcLingbao()
    {
        if(CURRENT_THREAD_ID() == getThreadId())
        {
            UInt32 value = 0;
            _maxLingbaoBattlePoint = 0;
            for(int j = 0; j < 5; ++ j)
            {
                Fighter* fighter = _playerData.lineup[j].fighter;
                if(fighter)
                {
                    value = fighter->recalcLingbao();
                    _maxLingbaoBattlePoint = value > _maxLingbaoBattlePoint? value:_maxLingbaoBattlePoint;
                }
            }
        }

    }
    
    void Player::setMaxLingbaoBattlePoint(UInt32 value)
    {
        _maxLingbaoBattlePoint = value;
    }


    UInt32 Player::getMaxLingbaoBattlePoint()
    {
        return _maxLingbaoBattlePoint;
    }

    UInt32 Player::getBaseBattlePoint()
    {
        UInt32 bp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                bp += fighter->calcBaseBattlePoint();
        }
        return bp;
    }

    UInt32 Player::getEquipBattlePoint()
    {
        UInt32 bp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                bp += fighter->calcEquipBattlePoint();
        }
        return bp;
    }

    UInt32 Player::getSkillBattlePoint()
    {
        UInt32 bp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                bp += fighter->calcSkillBattlePoint();
        }
        return bp;
    }

    UInt32 Player::getCittaBattlePoint()
    {
        UInt32 bp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                bp += fighter->calcCittaBattlePoint();
        }
        return bp;
    }

    UInt32 Player::get2ndSoulBattlePoint()
    {
        UInt32 bp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                bp += fighter->calc2ndSoulBattlePoint();
        }
        return bp;
    }

    UInt32 Player::getClanBattlePoint()
    {
        UInt32 bp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                bp += fighter->calcClanBattlePoint();
        }
        return bp;
    }

    UInt32 Player::getLingbaoBattlePoint()
    {
        UInt32 bp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                bp += fighter->calcLingbaoBattlePoint1();
        }
        return bp;
    }

    UInt32 Player::getFormBattlePoint()
    {
        UInt32 bp = 0;
        for(int j = 0; j < 5; ++ j)
        {
            Fighter* fighter = _playerData.lineup[j].fighter;
            if(fighter)
                bp += fighter->calcFormBattlePoint();
        }
        return bp;
    }

    void Player::sendCompareBP(Player * player)
    {
        if(!player) return;
        Stream st(REP::COMPARE_BP);
        st << getId() << GetLev() << getName();
        st << getBaseBattlePoint();
        st << getEquipBattlePoint();
        st << getSkillBattlePoint();
        st << getCittaBattlePoint();
        st << get2ndSoulBattlePoint();
        st << getClanBattlePoint();
        FairyPet * pet = getBattlePet();
        if(pet)
            st << static_cast<UInt32>(pet->getBattlePoint());
        else
            st << static_cast<UInt32>(0);
        st << getLingbaoBattlePoint();
        st << getFormBattlePoint();
        st << getCountry();
        Fighter * fgt = getMainFighter();
        if(fgt)
            st << static_cast<UInt8>(fgt->getId()) << fgt->getSex();
        else
            st << static_cast<UInt8>(0) << static_cast<UInt8>(0);
        st << Stream::eos;
        player->send(st);
    }

    void Player::verifyFighter()
    {
        Fighter* mfgt = NULL;
        bool find = false;
        UInt8 maxLevel = 0;
        for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
        {
            Fighter* fgt = it->second;
            if(fgt->getLevel() > maxLevel)
                maxLevel = fgt->getLevel();
            if(fgt->isMainFighter())
            {
                if(!mfgt)
                    mfgt = fgt;
                else if( fgt->getLevel() <= mfgt->getLevel())
                {
                    DB1().PushUpdateData("DELETE FROM `fighter` where `id`=%d and `playerId`=%" I64_FMT "u", fgt->getId(), _id);
                    std::map<UInt32, Fighter *>::iterator tmp = it;
                    -- tmp;
                    _fighters.erase(it);
                    delete fgt;
                    find = true;
                    it = tmp;
                }
                else
                {
                    DB1().PushUpdateData("DELETE FROM `fighter` where `id`=%d and `playerId`=%" I64_FMT "u", mfgt->getId(), _id);
                    _fighters.erase(mfgt->getId());
                    delete mfgt;
                    mfgt = fgt;
                    find = true;
                }
            }
        }

        if(find)
        {
            bool first = false;
            bool lfind = false;
            for(int i = 0; i < 5; ++ i)
            {
                Lineup& lup = _playerData.lineup[i];
                if(lup.fid < 10)
                {
                    if(!first)
                    {
                        if(lup.fid != mfgt->getId())
                            lfind = true;
                        lup.fid = mfgt->getId();
                        lup.fighter = mfgt;
                        first = true;
                    }
                    else
                    {
                        lfind = true;
                        lup.fid = 0;
                        lup.fighter = NULL;
                    }
                }
            }
            if(lfind)
                storeFighters();
        }

        if(mfgt->getLevel() < maxLevel)
        {
            mfgt->resetLevelAndExp(maxLevel);
            mfgt->reload2ndSoul();
        }
    }

    bool Player::hasTitle(UInt8 title)
    {
        std::map<UInt8, UInt32>::iterator it = _playerData.titleAll.find(title);
        if(it == _playerData.titleAll.end())
            return false;
        return true;
    }

    bool Player::checkTitleTimeEnd(UInt8 title, UInt32& timeLeft)
    {
        UInt32 now = TimeUtil::Now();
        std::map<UInt8, UInt32>::iterator it = _playerData.titleAll.find(title);
        if(it == _playerData.titleAll.end())
            return false;

        timeLeft = 0;
        if(it->second == 0)
            return true;

        if(it->second > now)
        {
            timeLeft = it->second - now;
            return true;
        }

        _playerData.titleAll.erase(title);
        changeTitle(0);
        return false;
    }

    bool Player::makeTitleAllInfo(Stream& st)
    {
        bool flag = false;
        std::map<UInt8, UInt32>& titleAll = _playerData.titleAll;
        UInt8 cnt = titleAll.size();
        size_t offset = st.size();
        st << cnt;
        for(std::map<UInt8, UInt32>::iterator it = titleAll.begin(); it != titleAll.end();)
        {
            UInt32 timeLeft = 0;
            std::map<UInt8, UInt32>::iterator tmp = it;
            ++ tmp;
            if(checkTitleTimeEnd(it->first, timeLeft))
            {
                st << it->first << static_cast<UInt32>(timeLeft);
            }
            else
            {
                flag = true;
                -- cnt;
            }
            it = tmp;
        }
        st.data<UInt8>(offset) = cnt;

        return flag;
    }

    void Player::writeTitleAll()
    {
        std::map<UInt8, UInt32>& titleAll = _playerData.titleAll;
        UInt8 cnt = titleAll.size();
        std::string title = "";

        if(!cnt)
        {
            _playerData.titleAll[0] = 0;
            title += "0,0|";
        }

        for(std::map<UInt8, UInt32>::iterator it = titleAll.begin(); it != titleAll.end(); ++ it)
        {
            title += Itoa(it->first);
            title += ',';
            title += Itoa(it->second);
            title += '|';
        }

        DB1().PushUpdateData("UPDATE `player` SET `titleAll` = '%s' WHERE `id` = %" I64_FMT "u", title.c_str(), getId());
    }
    UInt8 Player::fightTransform(UInt16 fFighterId, UInt16 tFighterId, UInt8 type)
    {
        UInt8 res = 0;
        Fighter * fFgt = findFighter(fFighterId);
        Fighter * tFgt = findFighter(tFighterId);
        if (NULL == fFgt || NULL == tFgt)
            return 1;
        if (isMainFighter(fFighterId) || isMainFighter(tFighterId))
            return 2;
        if (fFgt->getLevel() < 70 || tFgt->getLevel() < 70)
            return 3;
        res = canTransform(fFgt, tFgt, type);
        if (res > 0 )
            return res;
        if ((res = transformUseMoney(fFgt, tFgt, type)) > 0)
            return res;

        if (type & 0x01)
            res = transformExp(fFgt, tFgt);
        if ((type & 0x02) && res==0)
            transformPotential(fFgt, tFgt);
        //if ((type & 0x04) && res==0)
        //    transformCapacity(fFgt, tFgt);
        if ((type & 0x08) && res==0)
            res = transformSoul(fFgt, tFgt);
        if ((type & 0x10) && res==0)
            transformElixir(fFgt, tFgt);
        if ((type &0x20) && res==0)
            transfromXingchen(fFgt, tFgt);
        if ((type &0x40) && res==0)
            transfromLingbaoLevel(fFgt, tFgt);
        if ((type &0x80) && res==0)
            transfromIncense(fFgt, tFgt);

        return res;
    }
    UInt8 Player::canTransform(Fighter * fFgt, Fighter * tFgt, UInt8 type)
    {
    //    if ((type & 0x01) && (tFgt->getLevel() >= GetLev()))
    //            return 4;
        if (type & 0x01)
        {
            if (fFgt->getLingshiNum() > 0 || tFgt->getLingshiNum() > 0)
                return 7;
        }
        if ((type & 0x02 || type & 0x04) && GetPackage()->GetRestPackageSize() < 1)
            return 5;
        if ((type & 0x08) && (fFgt->getSecondSoul() == NULL || tFgt->getSecondSoul() == NULL))
            return 6;
        return 0;
    }

    UInt8 Player::transformUseMoney(Fighter * fFgt, Fighter * tFgt, UInt8 type)
    {
        UInt32 money = 0;
        UInt32 moneys[5] = {0};
        UInt8 val1 = 0;
        if (type & 0x01)
        {
             money += 10;
             moneys[0] += 10;
        }
        if (type & 0x02)
        {
            float p = std::max(fFgt->getPotential(), tFgt->getPotential());
            if (p >= 1.80f)
            {
                money += 100;
                moneys[1] += 100;
                val1 = 4;
            }
            else if (p >= 1.50f)
            {
                money += 60;
                moneys[1] += 60;
                val1 = 3;
            }
            else if (p >= 1.20f)
            {
                money += 30;
                moneys[1] += 30;
                val1 = 2;
            }
            else
            {
                money += 10;
                moneys[1] += 10;
                val1 = 1;
            }

            float c = std::max(fFgt->getCapacity(),tFgt->getCapacity());
            if (c >= 9.0f)
            {
                money += 100;
                moneys[1] += 100;
            }
            else if (c >= 8.0f)
            {
                money += 60;
                moneys[1] += 60;
            }
            else if (c >= 7.0f)
            {
                money += 30;
                moneys[1] += 30;
            }
            else
            {
                money += 10;
                moneys[1] += 10;
            }
        }
        if (type & 0x08)
        {

            SecondSoul* fSoul = fFgt->getSecondSoul();
            SecondSoul* tSoul = tFgt->getSecondSoul();
            //元神境界
            UInt8 f = fSoul->getStateLevel();
            UInt8 t = tSoul->getStateLevel();
            //元神等级
            UInt8 fPracLev = fSoul->getPracticeLevel();
            UInt8 tPracLev = tSoul->getPracticeLevel();
            //星宿
            UInt8 fXinxiu = fSoul->getXinxiu();
            UInt8 tXinxiu = tSoul->getXinxiu();
            money += (std::max(f,t) * 10);
            money += abs(int(fPracLev-tPracLev))*1;
            moneys[2] += (std::max(f,t) * 10);
            moneys[2] += abs(int(fPracLev-tPracLev))*1;
            if (fXinxiu != tXinxiu)
            {
                money += 50;
                moneys[2] += 50;
            }
        }
        if (type & 0x10)
        {
            UInt32 f = 0;
            UInt32 t = 0;
            for (UInt8 i = 0; i < 14; ++i)
            {
                f += fFgt->getElixirAttrByOffset(i);
                t += tFgt->getElixirAttrByOffset(i);
            }
            money += abs(int(f-t))*1;
            moneys[3] += abs(int(f-t))*1;
        }
        if (type & 0x20)
        {
            UInt8 fLevel = fFgt->getXingchenLvl();
            UInt8 tLevel = tFgt->getXingchenLvl();

            money += abs(int(fLevel - tLevel)) * 10;
            moneys[4] += abs(int(fLevel - tLevel)) * 10;
        }
        //34是测试区
        if(getGold() < money && cfg.serverNum != 34)
	    {
            sendMsgCode(0, 1101);
            return 10;
        }
        if (money > 0 && cfg.serverNum != 34)
        {
            ConsumeInfo ci(FightTransform,0,0);
            useGold(money, &ci);
        }

        transformUdpLog(1164, type, moneys, val1);
        
        return 0;
    }

    UInt8 Player::transformExp(Fighter * fFgt, Fighter * tFgt)
    {
     //   UInt64 exp_70 = GData::expTable.getLevelMin(70);
     //   UInt64 exp_add = fFgt->getExp() - exp_70;
     //   tFgt->addExp(exp_add);
        UInt64 fExp = fFgt->getExp();
        UInt64 tExp = tFgt->getExp();
        UInt8 fLev = fFgt->getLevel();
        UInt8 tLev = tFgt->getLevel();
        fFgt->setLevelAndExp(tLev, tExp);
        tFgt->setLevelAndExp(fLev, fExp);
        return 0;
    }
    //潜力和资质,天赋
    UInt8 Player::transformPotential(Fighter * fFgt, Fighter * tFgt)
    {
        //天赋对换
        UInt8 fAttrType1 = fFgt->getAttrType1();
        UInt8 fAttrType2 = fFgt->getAttrType2();
        UInt8 fAttrType3 = fFgt->getAttrType3();
        UInt8 tAttrType1 = tFgt->getAttrType1();
        UInt8 tAttrType2 = tFgt->getAttrType2();
        UInt8 tAttrType3 = tFgt->getAttrType3();

        UInt16 fAttrValue1 = fFgt->getAttrValue1();
        UInt16 fAttrValue2 = fFgt->getAttrValue2();
        UInt16 fAttrValue3 = fFgt->getAttrValue3();
        UInt16 tAttrValue1 = tFgt->getAttrValue1();
        UInt16 tAttrValue2 = tFgt->getAttrValue2();
        UInt16 tAttrValue3 = tFgt->getAttrValue3();

        fFgt->setAttrType1(tAttrType1);
        fFgt->setAttrType2(tAttrType2, true);
        fFgt->setAttrType3(tAttrType3, true);
        fFgt->setAttrValue1(tAttrValue1);
        fFgt->setAttrValue2(tAttrValue2, true);
        fFgt->setAttrValue3(tAttrValue3, true);

        tFgt->setAttrType1(fAttrType1);
        tFgt->setAttrType2(fAttrType2, true);
        tFgt->setAttrType3(fAttrType3, true);
        tFgt->setAttrValue1(fAttrValue1);
        tFgt->setAttrValue2(fAttrValue2, true);
        tFgt->setAttrValue3(fAttrValue3, true);

        float fp = fFgt->getPotential();
        float tp = tFgt->getPotential();
        float fc = fFgt->getCapacity();
        float tc = tFgt->getCapacity(); 
        fFgt->setPotential(tp);
        tFgt->setPotential(fp);
        fFgt->setCapacity(tc);
        tFgt->setCapacity(fc);

        //卸载第一个被动法宝
        GObject::ItemEquip* p =NULL;
        if ( tp < 1.50f || tc < 7.0f)
        {
           p =  fFgt->setTrump(p, 1, true);
           if (p != NULL)
               GetPackage()->AddExistEquip(p);
        }
        GObject::ItemEquip* p1 =NULL;
        if ( fp < 1.50f || fc < 7.0f)
        {
           p1 =  tFgt->setTrump(p1, 1, true);
           if (p1 != NULL)
               GetPackage()->AddExistEquip(p1);
        }
 
        fFgt->updateForgeAttr(true);
        tFgt->updateForgeAttr(true);
        return 0;
    }
    //资质
    UInt8 Player::transformCapacity(Fighter * fFgt, Fighter * tFgt)
    {
        float f = fFgt->getCapacity();
        float t = tFgt->getCapacity();
        fFgt->setCapacity(t);
        tFgt->setCapacity(f);

        //卸载第一个被动法宝
        GObject::ItemEquip* p =NULL;
        if ( t < 7.0)
        {
            p =  fFgt->setTrump(p, 1, true);
            if (p != NULL)
                GetPackage()->AddExistEquip(p);
        }
        if (t < 7.0f && f >= 7.0f)
        {
            tFgt->getAttrType2(true);
            tFgt->getAttrType3(true);
        }
        return 0;
    }
    UInt8 Player::transformSoul(Fighter * fFgt, Fighter * tFgt)
    {
        SecondSoul* fSoul = fFgt->getSecondSoul();
        SecondSoul* tSoul = tFgt->getSecondSoul();
        if (NULL == fSoul || NULL ==tSoul)
            return 6;
        UInt32 f = fSoul->getStateExp();
        UInt32 t = tSoul->getStateExp();
        UInt32 fLev = fSoul->getStateLevel();
        UInt32 tLev = tSoul->getStateLevel();
        fSoul->setStateExp(tLev, t);
        tSoul->setStateExp(fLev, f);

        //元神等级
        UInt8 fPracLev = fSoul->getPracticeLevel();
        UInt8 tPracLev = tSoul->getPracticeLevel();
        if (fPracLev != tPracLev)
        {
            fSoul->setPracticeLevel(tPracLev);
            tSoul->setPracticeLevel(fPracLev);
        }
        //星宿
        UInt8 fXinxiu = fSoul->getXinxiu();
        UInt8 tXinxiu = tSoul->getXinxiu();
        if (fXinxiu != tXinxiu)
        {
            fSoul->setXinxiu(tXinxiu);
            tSoul->setXinxiu(fXinxiu);
        }
        //原始散仙卸载所有心法
        fFgt->offAllCitta();
        tFgt->offAllCitta();

        fFgt->send2ndSoulInfo();
        tFgt->send2ndSoulInfo();

        fFgt->sendMaxSoul();
        tFgt->sendMaxSoul();
        return 0;
    }

    //换功星辰
    UInt8 Player::transfromXingchen(Fighter * fFgt, Fighter * tFgt)
    {
         Xingchenzhen & fFgtxingchen = fFgt->getXingchen();
         Xingchenzhen & tFgtxingchen = tFgt->getXingchen();
         Xingchenzhen swapXingchen = fFgtxingchen;
         fFgtxingchen = tFgtxingchen;
         tFgtxingchen = swapXingchen;

         fFgt->updateDBxingchen();
         tFgt->updateDBxingchen();
         fFgt->setDirty();
         tFgt->setDirty();

         fFgt->sendXingchenInfo(0);
         tFgt->sendXingchenInfo(0);

         return 0;
    }
    UInt8 Player::transfromLingbaoLevel(Fighter * fFgt, Fighter * tFgt)
    {
         for(UInt8 i = 0; i< fFgt->getMaxLingbaos() ; ++i)
         {
             UInt8 swapLevel = tFgt->getLingbaoLevel(i); 
             tFgt->setLingbaoLevel(i,fFgt->getLingbaoLevel(i));
             fFgt->setLingbaoLevel(i,swapLevel);

             UInt32 swapFall = tFgt->getLingbaoFall(i); 
             tFgt->setLingbaoFall(i,fFgt->getLingbaoFall(i));
             fFgt->setLingbaoFall(i,swapFall);
             tFgt->updateLingbaoLevelToDB(i);
             fFgt->updateLingbaoLevelToDB(i);
             tFgt->updateLingbaoFallToDB(i);
             fFgt->updateLingbaoFallToDB(i);
         }
         fFgt->setDirty();
         tFgt->setDirty();

         Stream st(REP::EXTEND_PROTOCAOL);
         st <<static_cast<UInt8>(0x01);
         st <<static_cast<UInt8>(0x03);
         st << static_cast<UInt16>(fFgt->getId());
         fFgt->getAllLingbaoLevelAndFall(st);
         st << static_cast<UInt16>(tFgt->getId());
         tFgt->getAllLingbaoLevelAndFall(st);
         st <<Stream::eos;
         send(st);
        
         return 0;
    }

    UInt8 Player::transfromIncense(Fighter * fFgt, Fighter * tFgt)
    { 
        UInt32 value = fFgt ->getIncense();
        fFgt->setIncense(tFgt->getIncense());
        tFgt->setIncense(value);
        Stream st(REP::EXTEND_PROTOCAOL);
        st <<static_cast<UInt8>(0x04);
        st <<static_cast<UInt8>(0x03);
        st << static_cast<UInt16>(fFgt->getId());
        st << static_cast<UInt32>(fFgt->getIncense());
        st << static_cast<UInt16>(tFgt->getId());
        st << static_cast<UInt32>(tFgt->getIncense());
        st <<Stream::eos;
        send(st);
        tFgt->UpdateIncenseToDB();
        fFgt->UpdateIncenseToDB();
        return 0;
    } 

void Player::transformElixir(Fighter * fFgt, Fighter * tFgt)
    {
        for (UInt8 i = 0; i < 14; ++i)
        {
            Int32 f = fFgt->getElixirAttrByOffset(i);
            Int32 t = tFgt->getElixirAttrByOffset(i);
            if (f != t)
            {
                fFgt->addElixirAttrByOffset(i, t-f);
                tFgt->addElixirAttrByOffset(i, f-t);
                if (i == 5)
                {
                    fFgt->offAllCitta();
                    tFgt->offAllCitta();
                }
            }
        }
    }

    void Player::ArenaExtraAct(UInt8 type, UInt8 opt)
    {
        UInt32 now = TimeUtil::Now();
        UInt8 week = TimeUtil::GetWeekDay(now);
        UInt32 t1 = TimeUtil::SharpDayT(0, now) + ARENA_SINGUP_START;
        UInt32 t2 = TimeUtil::SharpDayT(0, now) + ARENA_SINGUP_END;
        UInt32 t3 = TimeUtil::SharpDayT(0, now) + ARENA_SUFFER_END;
        static UInt32 broadfreq;
        UInt8 curtype;

        if(!GObject::arena.active())
            return;
        if(week < ARENA_WEEK_START || week > ARENA_WEEK_END)
            return;
        if(now < t1)
            return;

        curtype = week - ARENA_WEEK_START;
        if(WORLD().getArenaHeroId(0) == 0)
            WORLD().setArenaInfo(curtype);
        if(WORLD().getArenaHeroId(0) == 0)
            return;
        if(now >= t2 && World::getArenaTotalCnt() == 0)
        {
            WORLD().setArenaTotalCntEnum();
        }

        UInt32 totalCnt = WORLD().getArenaTotalCnt();
        UInt32 totalSufferCnt = totalCnt * 24 / 5;

        switch(type)
        {
            case 0:
            {
                Stream st(REP::SERVER_ARENA_EXTRA_ACT);
                st << week;
                st << type;
                for(UInt8 i = 0; i < 5; i++)
                {
                    st << WORLD().getArenaName(i);
                    st << WORLD().getArenaHeroId(i);
                }
                st << totalSufferCnt << Stream::eos;
                send(st);
                if(now >= t1 && now < t2)
                    ArenaExtraAct(1+ARENA_ACT_SYSTEM, 0);
                else if(now >= t2 && now < t3)
                    ArenaExtraAct(2+ARENA_ACT_SYSTEM, 0);
                else
                    ArenaExtraAct(3, 0);
            }
            break;
            case 1:
            case 1+ARENA_ACT_SYSTEM:
            {
                if(type < ARENA_ACT_SYSTEM)
                {
                    if(now >= t2)
                        return;
                    UInt8 supportId = opt;
                    if(supportId == 0 || supportId > 5)
                        return;
                    SetVar(VAR_ARENA_SUPPORT, supportId);
                    if(week == ARENA_WEEK_START)
                        SetVar(VAR_ARENA_SUPPORT_TUE, supportId);
                    else
                        SetVar(VAR_ARENA_SUPPORT_WED, supportId);
                }
                Stream st(REP::SERVER_ARENA_EXTRA_ACT);
                st << week;
                st << static_cast<UInt8>(1);
                UInt32 seconds = 0;
                if(now >= t1 && now < t2)
                    seconds = t2 - now;
                st << static_cast<UInt8>(GetVar(VAR_ARENA_SUPPORT)) << seconds;
                st << Stream::eos;
                send(st);
            }
            break;
            case 2:
            case 2+ARENA_ACT_SYSTEM:
            {
                if(type < ARENA_ACT_SYSTEM)
                {
                    if(now < t2 || now >= t3)
                        return;
                    if(getBuffLeft(PLAYER_BUFF_SUFFER) >= 5)//5秒误差
                        return;
                    UInt8 sufferId = opt;
                    if(sufferId == 0 || sufferId > 5)
                        return;
                    if(World::stArena.sufferCnt[sufferId-1] >= totalSufferCnt)
                        return;

                    ++broadfreq;
                    UInt32 pexp = 1000;
                    GameMsgHdr hdr2(0x238, getThreadId(), this, sizeof(pexp));
                    GLOBAL().PushMsg(hdr2, &pexp);

                    setBuffData(PLAYER_BUFF_SUFFER, TimeUtil::Now() + 30);
                    World::stArena.sufferCnt[sufferId-1] += 1;
                    World::stArena.lasttime[sufferId-1] = now;

                    if(World::stArena.sufferCnt[sufferId-1] == totalSufferCnt)
                    {
                        UInt32 moneyArena = 500;
                        SYSMSGV(title, 736);
                        SYSMSGV(content, 738, moneyArena);
                        GetMailBox()->newMail(NULL, 0x01, title, content);
                        GameMsgHdr hdr(0x251, getThreadId(), this, sizeof(moneyArena));
                        GLOBAL().PushMsg(hdr, &moneyArena);
                        broadfreq = 5;
                    }
                }
                Stream st(REP::SERVER_ARENA_EXTRA_ACT);
                st << week;
                st << static_cast<UInt8>(2);

                UInt32 seconds = 0;
                if(now >= t2 && now < t3)
                    seconds = t3 - now;
                st << static_cast<UInt8>(GetVar(VAR_ARENA_SUPPORT)) << seconds << static_cast<UInt16>(getBuffLeft(PLAYER_BUFF_SUFFER));
                for(UInt8 i = 0; i < 5; i++)
                {
                    st << World::stArena.sufferCnt[i];
                }
                st << Stream::eos;
                send(st);
                if(broadfreq >= 5)
                {
                    broadfreq = 0;

                    Stream st(REP::SERVER_ARENA_EXTRA_ACT);
                    st << week;
                    st << static_cast<UInt8>(4);
                    for(UInt8 i = 0; i < 5; i++)
                    {
                        st << World::stArena.sufferCnt[i];
                    }
                    st << Stream::eos;
                    NETWORK()->Broadcast(st);
                }
                }
                break;
                case 3:
                {
                    if(GObject::World::stArena.rank[0] == 0 && GObject::World::stArena.rank[1] == 0 && GObject::World::stArena.rank[2] == 0 && GObject::World::stArena.rank[3] == 0 && GObject::World::stArena.rank[4] == 0)
                    {
                        ValueSort cur;
                        ValueSortType resultRank;
                        for(UInt8 i = 0; i < 5; i++)
                        {
                            cur.sufferCnt = World::stArena.sufferCnt[i];
                            cur.lastTime = World::stArena.lasttime[i];
                            cur.name = World::stArena.name[i];
                            resultRank.insert(cur);
                        }
                        for(UInt8 i = 0; i < 5; i++)
                        {
                            UInt8 j = 0;
                            for(ValueSortType::iterator iter = resultRank.begin(), e = resultRank.end(); iter != e && j < 5; ++iter, ++j)
                            {
                                if(iter->name == World::stArena.name[i])
                                    break;
                            }
                            World::stArena.rank[i] = j + 1;
                        }
                    }
                    Stream st(REP::SERVER_ARENA_EXTRA_ACT);
                    st << week;
                    st << type;
                    st << static_cast<UInt8>(GetVar(VAR_ARENA_SUPPORT));
                    for(UInt8 i = 0; i < 5; i++)
                    {
                        st << World::stArena.sufferCnt[i];
                        st << World::stArena.rank[i];
                    }
                    st << Stream::eos;
                    send(st);
                }
                break;
                 default:
                break;
            }
        }
    bool Player::hasFighterWithClass(UInt8 cls)
    {
        for ( std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
        {
            if (it->second->getClass() == cls)
                return true;
        }
        return false;
        
    }


    static UInt32 newRecharge[] = {10, 88, 188, 588};
    void Player::FirstRechargeAct(UInt8 step, UInt8 type, UInt8 career)
    {
        if(step == 0 || step > 4)
            return;
        if(type > 1)
            return;
        if(career == 0 || career > 3)
            return;

        if(_playerData.totalRecharge < newRecharge[step-1])
            return;

        UInt32 curStep = GetVar(VAR_FIRST_RECHARGE_STEP);
        /*
         * bit 1: 10XS
         * bit 2: 88XS
         * bit 3: 188XS
         * bit 4: 588XS
         */
        if(curStep & (1 << (step-1)))
            return;
        UInt8 index;
        if(step == 1)
            index = 1 + type;
        else
            index = 1 + career * 2 + type;
        UInt32 goldNum = 0;
        if(type == 1)
        {
            if(step == 1)
                goldNum = 10;
            else
                goldNum = 50;
            if(getGold() < goldNum)
            {
                sendMsgCode(2, 1104, 0);
                return;
            }
        }

        bool bRet = GameAction()->onFirstRecharge(this, index);
        if(bRet)
        {
            if(goldNum > 0)
            {
                ConsumeInfo ci(EnumFirstRecharge1 + step - 1, 0, 0);
                useGold(goldNum, &ci);
            }
            else
            {
                char tag[32];
                sprintf(tag, "F_10000_1212_%u", step);
                udpLog("firstRecharge", tag, "", "", "", "", "act");
            }

            curStep |= (1 << (step-1));
            SetVar(VAR_FIRST_RECHARGE_STEP, curStep);
            sendFirstRecharge();

            UInt32 thisDay = TimeUtil::SharpDay();
            UInt32 endDay = TimeUtil::SharpDay(6, PLAYER_DATA(this, created));
            if(thisDay <= endDay)
            {
                // 新注册七日内开启首充礼包，完成每日目标
                UInt32 targetVal = GetVar(VAR_CLAWARD2);
                if (!(targetVal & TARGET_RECHARGE_PACKGE))
                {
                    targetVal |=TARGET_RECHARGE_PACKGE;
                    AddVar(VAR_CTS_TARGET_COUNT, 1);
                    SetVar(VAR_CLAWARD2, targetVal);
                    sendNewRC7DayTarget();
                    newRC7DayUdpLog(1152, 11);
                }
            }
        }
    }

    void Player::sendFirstRecharge(bool isLogin)
    {
        UInt32 lostValue = 0;
        UInt8 lostStep = 4;
        UInt8 canStep = 4;
        UInt8 index = 0;

        if(_playerData.totalRecharge < 10)
        {
            Stream st(REP::COUNTRY_ACT);
            st << static_cast<UInt8>(0x03) << index << Stream::eos;
            send(st);
            return;
        }

        //之前充过
        if(_playerData.totalRecharge > GetVar(VAR_FIRST_RECHARGE_VALUE))
        {
            lostValue = _playerData.totalRecharge - GetVar(VAR_FIRST_RECHARGE_VALUE);
        }
        while(lostStep > 0)
        {
            if(newRecharge[lostStep - 1] <= lostValue)
                break;
            --lostStep;
        }

        while(canStep > 0)
        {
            if(newRecharge[canStep - 1] <= _playerData.totalRecharge)
                break;
            --canStep;
        }

        for(index = lostStep + 1; index <= canStep; ++index)
        {
            if((GetVar(VAR_FIRST_RECHARGE_STEP)&(1 << (index-1))) == 0)
                break;
        }

        if(isLogin && index > 4)
            return;
        Stream st(REP::COUNTRY_ACT);
        st << static_cast<UInt8>(0x03) << index << Stream::eos;
        send(st);
    }

void Player::copyFrontWinAward(UInt8 index, bool unBind)
{
    if(!World::getCopyFrontWinSwitch())
        return;
    UInt32 unBindFlag;
    if(unBind)
        unBindFlag = 1;
    else
        unBindFlag = 0;
    SetVar(VAR_CF_UNBIND, unBindFlag);
    SetVar(VAR_CF_FLAG, index);
    SetVar(VAR_CF_LOCATION, PLAYER_DATA(this, location));
    resetCopyFrontWinAward();
    sendCopyFrontAllAward();
}

void Player::loadCopyFrontWinFromDB(UInt8 posOrig, UInt8 posPut, UInt32 itemId, UInt16 ratio)
{
    if(posOrig >= 5)
        return;
    cf_itemId[posOrig] = itemId;
    cf_ratio[posOrig] = ratio;
    if(posPut <= 5)
        cf_posPut[posOrig] = posPut;
}

void Player::getCopyFrontCurrentAward(UInt8 index)
{
    UInt32 leftIndex[5];
    UInt32 leftCnt = 0;
    UInt8 i;
    for(i = 0; i < 5; i++)
    {
        if(cf_posPut[i] == 0)
            leftIndex[leftCnt++] = i;
    }
    if(leftCnt == 0)
        return;
    UInt16 totalRatio = 0;
    for(i = 0; i < leftCnt; i++)
        totalRatio += cf_ratio[leftIndex[i]];
    UInt16 totalRatioTmp = 0;
    UInt16 curRatio = uRand(totalRatio);
    UInt8 curId = 5;
    for(i = 0; i < leftCnt; i++)
    {
        totalRatioTmp += cf_ratio[leftIndex[i]];
        if(curRatio < totalRatioTmp)
        {
            curId = leftIndex[i];
            break;
        }
    }
    if(curId >= 5)
        return;
    UInt8 order = 5 - leftCnt + 1;
    if(order == 2)
    {
        if(getGoldOrCoupon() < 10)
         {
             sendMsgCode(0, 1101);
             return;
         }
         ConsumeInfo ci(EnumCopyFrontWin, 0, 0);
         useGoldOrCoupon(10, &ci);
    }
    else if(order >= 3)
    {
        UInt32 needGold;
        if(order ==  4)
            needGold = 20;
        else if(order >= 5)
            needGold = 40;
        else
            needGold = 10;
        if(getGold() < needGold)
        {
             sendMsgCode(0, 1104);
             return;
        }
        ConsumeInfo ci(EnumCopyFrontWin, 0, 0);
        useGold(needGold, &ci);
    }
    cf_posPut[curId] = index;
    DB1().PushUpdateData("UPDATE `copy_front_win` SET `posPut` = %u where `playerId` = %" I64_FMT "u and `posOrig` = %u", cf_posPut[curId], getId(), curId);

    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x04);
    st << static_cast<UInt8>(0x00);
    st << cf_posPut[curId];
    st << static_cast<UInt16>(cf_itemId[curId]);
    UInt8 curCnt = 1;
    st << curCnt;
    st << Stream::eos;
    send(st);

    bool bind;
    if(GetVar(VAR_CF_UNBIND) == 0)
        bind = true;
    else
        bind = false;
    UInt32 itemTmp = cf_itemId[curId];
    if(bind)
    {
        //特殊处理4个相同的物品，绑定的全部是后者(前者可以是非全绑定，后者全部是绑定)
        if(itemTmp == 135)
            itemTmp = 133;
        else if(itemTmp == 1412)
            itemTmp = 1327;
        else if(itemTmp == 1411)
            itemTmp = 1326;
        else if(itemTmp == 9283)
            itemTmp = 400;
    }
    m_Package->Add(itemTmp, 1, bind);

    {
        char tag[32];
        if(!bind)
            order += 5;
        if(GetVar(VAR_CF_FLAG) == 2)
            order += 11;
        else if(GetVar(VAR_CF_FLAG) == 3)
            order += 21;
        sprintf(tag, "F_10000_1212_%u", order);
        udpLog("CopyFrontWin", tag, "", "", "", "", "act");
    }

    if(leftCnt == 1)
        closeCopyFrontAwardByIndex(GetVar(VAR_CF_FLAG) - 1, 0);
}

void Player::getCopyFrontAwardByIndex(UInt8 copy_or_front, UInt8 index, UInt8 indexPut)
{
    if(static_cast<UInt32>(copy_or_front + 1) != GetVar(VAR_CF_FLAG))
        return;
#if 0
    if(index !=  PLAYER_DATA(this, location))
        return;
#endif
    if(indexPut == 0 || indexPut > 5)
        return;
    if(copy_or_front == 0)
    {
        if(GetPackage()->GetRestPackageSizeMin(PACKAGE_0_3) < 1)
        {
            sendMsgCode(0, 1011);
            return;
        }
    }
    else if(copy_or_front == 1)
    {
        if(GetPackage()->GetRestPackageSizeMin(PACKAGE_0_3_4) < 1)
        {
            sendMsgCode(0, 1011);
            return;
        }
    }
    else
    {
        if(GetPackage()->GetRestPackageSizeMin(PACKAGE_0_3) < 1)
        {
            sendMsgCode(0, 1011);
            return;
        }
    }

    UInt8 i;
    bool isPut = false;
    for(i = 0; i < 5; i++)
    {
        if(cf_posPut[i] == indexPut)
        {
            isPut = true;
            break;
        }
    }
    if(isPut)
        return;
    getCopyFrontCurrentAward(indexPut);
}

void Player::resetCopyFrontWinAward(bool fresh)
{
    UInt8 index = GetVar(VAR_CF_FLAG);
    UInt8 step;
    UInt8 tmp1;
    UInt8 tmp2;

    if(index == 0 || index > CFD_INDEX_MAX)
        return;

    tmp1 = uRand(5);
    tmp2 = uRand(5);
    UInt32 count = 0;
    while(tmp2 == tmp1 && count < 10000)
    {
        tmp2 = uRand(5);
        ++count;
    }

    for(UInt8 i = 0; i < 5; i++)
    {
        if(i == tmp1)
            step = 1;
        else if(i == tmp2)
        {
            if(GetVar(VAR_CF_FLAG) == 1 || GetVar(VAR_CF_FLAG) == 3)
                step = 2;
            else
                step = 0;
        }
        else
            step = 0;
        //if(GetVar(VAR_CF_LOCATION) == 0)
        //    SetVar(VAR_CF_LOCATION, PLAYER_DATA(this, location));
        Table award = GameAction()->getCopyFrontmapAward(step, GetVar(VAR_CF_LOCATION), GetVar(VAR_CF_FLAG));
        if (award.size() < 2)
        {
            printf("award.size() < 2\n");
            printf("award.size():%u, i:%u, step:%u, location:%u, cf:%u, playerId: %" I64_FMT "u\n", award.size(), i, step, GetVar(VAR_CF_LOCATION), GetVar(VAR_CF_FLAG), getId());
            continue;
        }
        cf_itemId[i] = award.get<UInt32>(1);
        cf_ratio[i] = award.get<UInt32>(2);
        cf_posPut[i] = 0;
        if(fresh)
            DB1().PushUpdateData("UPDATE `copy_front_win` SET `posPut` = %u, `itemId` = %u, `ratio` = %u WHERE `playerId` = %" I64_FMT "u AND `posOrig` = %u", cf_posPut[i], cf_itemId[i], cf_ratio[i], getId(), i);
        else
            DB1().PushUpdateData("REPLACE INTO `copy_front_win` (`playerId`, `posOrig`, `posPut`, `itemId`, `ratio`) VALUES(%" I64_FMT "u, %u, %u, %u, %u)", getId(), i, cf_posPut[i], cf_itemId[i], cf_ratio[i]);
    }
}

void Player::freshCopyFrontAwardByIndex(UInt8 copy_or_front, UInt8 index)
{
    if(static_cast<UInt32>(copy_or_front + 1) != GetVar(VAR_CF_FLAG))
        return;
#if 0
    if(index !=  PLAYER_DATA(this, location))
        return;
#endif
    bool isPut = false;
    for(UInt8 i = 0; i < 5; i++)
    {
        if(cf_posPut[i] != 0)
        {
            isPut = true;
            break;
        }
    }
    if(isPut)
        return;
    if(getTael() < 50)
    {
        sendMsgCode(0, 1100);
        return;
    }
    ConsumeInfo ci(EnumCopyFrontWin, 0, 0);
    useTael(50, &ci);

    resetCopyFrontWinAward(true);
    sendCopyFrontAllAward();
}

void Player::closeCopyFrontAwardByIndex(UInt8 copy_or_front, UInt8 index)
{
    if(static_cast<UInt32>(copy_or_front + 1) != GetVar(VAR_CF_FLAG))
        return;
#if 0
    if(index !=  PLAYER_DATA(this, location))
        return;
#endif
    SetVar(VAR_CF_UNBIND, 0);
    SetVar(VAR_CF_FLAG, 0);
    SetVar(VAR_CF_INDEX, 0);
    SetVar(VAR_CF_LOCATION, 0);
    for(UInt8 i = 0; i < 5; i++)
    {
        cf_posPut[i] = 0;
        cf_itemId[i] = 0;
        cf_ratio[i] = 0;
        //DB1().PushUpdateData("UPDATE `copy_front_win` SET `posPut` = %u, `itemId` = %u, `ratio` = %u WHERE `playerId` = %" I64_FMT "u AND `posOrig` = %u", cf_posPut[i], cf_itemId[i], cf_ratio[i], getId(), i);
    }
    DB1().PushUpdateData("DELETE FROM `copy_front_win` WHERE `playerId` = %" I64_FMT "u", getId());
}

void Player::sendCopyFrontAllAward()
{
    UInt32 flag = GetVar(VAR_CF_FLAG);
    if(flag == 0)
        return;

    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x04);
    st << static_cast<UInt8>(0x01);
    st << static_cast<UInt8>(flag - 1);

    if(flag == 1)
    {
        if(GetVar(VAR_CF_INDEX) == 0)
            SetVar(VAR_CF_INDEX, getCopyId());
        st << static_cast<UInt8>(GetVar(VAR_CF_INDEX));
    }
    else if(flag == 3)
    {
        if(GetVar(VAR_CF_INDEX) == 0)
            SetVar(VAR_CF_INDEX, getDungeonId());
        st << static_cast<UInt8>(GetVar(VAR_CF_INDEX));
    }
    else
    {
        if(GetVar(VAR_CF_INDEX) == 0)
            SetVar(VAR_CF_INDEX, getFrontmapId());
        st << static_cast<UInt8>(GetVar(VAR_CF_INDEX));
    }
    st << static_cast<UInt8>(5);
    bool isPut = false;
    UInt8 index;
    UInt8 i;
    UInt16 itemId;
    UInt8 itemCnt = 1;
    for(index = 0; index < 5; index++)
    {
        if(cf_posPut[index] != 0)
        {
            isPut = true;
            break;
        }
    }
    if(!isPut)
    {
        for(index = 0; index < 5; index++)
        {
            itemId = cf_itemId[index];
            st << itemId;
            st << itemCnt;
        }
    }
    else
    {
        for(index = 0; index < 5; index++)
        {
            for(i = 0; i < 5; i++)
            {
                if(cf_posPut[i] == index + 1)
                    break;
            }
            if(i < 5)
                itemId = cf_itemId[i];
            else
                itemId = 0;
            st << itemId;
            st << itemCnt;
        }
    }

    st << Stream::eos;
    send(st);
}

UInt8 Player::getCopyId()
{
    static UInt16 spots[] = {776, 2067, 5906, 8198, 12818, 10512, 0x1411, 0x2707, 0x290a, 4871, 4628};
    static UInt16 spots2[] = {16386, 16388, 16390, 16391, 16392, 16400};    //仙界装备

    UInt16 currentSpot = PLAYER_DATA(this, location);
    for(UInt8 i = 0; i < sizeof(spots)/sizeof(spots[0]); i++)
    {
        if(spots[i] == currentSpot)
            return (i+1);
    }
    for(UInt8 i = 0; i < sizeof(spots2)/sizeof(spots2[0]); i++)
    {
        if(spots2[i] == currentSpot)
            return (i+100);
    }
    return 0;
}

UInt8 Player::getFrontmapId()
{
    static UInt16 spots[] = {1284, 2053, 4360, 4611, 5893, 5637, 8195, 6153, 9222, 9481, 10244, 5129};
    UInt16 currentSpot = PLAYER_DATA(this, location);
    for(UInt8 i = 0; i < sizeof(spots)/sizeof(spots[0]); i++)
    {
        if(spots[i] == currentSpot)
            return (i+1);
    }
    return 0;
}

UInt8 Player::getDungeonId()
{
    static UInt16 spots[] = {772, 2050, 5123, 8194, 10001};
    UInt16 currentSpot = PLAYER_DATA(this, location);
    for(UInt8 i = 0; i < sizeof(spots)/sizeof(spots[0]); i++)
    {
        if(spots[i] == currentSpot)
            return (i+1);
    }
    return 0;
}

void Player::getGoodVoiceAward(UInt8 type)
{
    if(type == 1 && GetVar(VAR_GOOD_VOICE) == 0)
    {
        if(GetFreePackageSize() < 1)
        {
            sendMsgCode(0, 1011);
            return;
        }
        SetVar(VAR_GOOD_VOICE, 1);
        m_Package->Add(9273, 1, true);
        sendGoodVoiceInfo();
    }
}

void Player::sendGoodVoiceInfo()
{
    if(!World::getGoodVoiceAct())
        return;
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(5);
    st << static_cast<UInt8>(GetVar(VAR_GOOD_VOICE));
    st << Stream::eos;
    send(st);
}

void Player::getQzongPYGiftAward(UInt8 type)
{
    if (getPlatform() != 1 && getPlatform() != 2)
        return;
    if (GetVar(VAR_QZONGPYGIFT) >= 33)
        return;
    if (GetFreePackageSize() < 6)
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(type == 1)
    {
        if (getGold() < 19)
        {
            sendMsgCode(0, 1104);
            return;
        }
        ConsumeInfo ci(EnumQzongPYGift,0,0);
        useGold(19, &ci);
        AddVar(VAR_QZONGPYGIFT, 1);
        static UInt32 itemId[] = {548, 3, 9082, 3, 9371, 1, 8000, 1, 500, 1, 9390, 1};
        for(UInt8 i = 0; i < sizeof(itemId) / sizeof(UInt32); i += 2)
        {
            GetPackage()->Add(itemId[i], itemId[i+1], true);
        }
    }
    else if(type == 2)
    {
        if (getGold() < 77)
        {
            sendMsgCode(0, 1104);
            return;
        }
        ConsumeInfo ci(EnumQzongPYGift,0,0);
        useGold(77, &ci);
        AddVar(VAR_QZONGPYGIFT, 1);
        static UInt32 itemId[] = {1126, 1325, 134, 9141, 551, 517};
        for(UInt8 i = 0; i < sizeof(itemId) / sizeof(UInt32); ++ i)
        {
            GetPackage()->Add(itemId[i], 1, true);
        }
    }
    sendQzongPYGiftInfo();
}

void Player::sendQzongPYGiftInfo()
{
    if (getPlatform() != 1 && getPlatform() != 2)
        return;
    /*
    if(!isBD())
        return;
    */
    if(!World::getQzongPYGiftAct())
        return;
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(6);
    UInt8 opt = GetVar(VAR_QZONGPYGIFT);
    st << opt;
    st << Stream::eos;
    send(st);
}

void Player::get3366GiftAward(UInt8 type)
{
    if (getPlatform() != 1 && getPlatform() != 2)
    {
        sendMsgCode(0, 3506);
        return;
    }
    if (GetVar(VAR_3366GIFT) >= 12)
        return;
    if (GetFreePackageSize() < 6)
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(type == 1)
    {
        if (getGold() < 48)
        {
            sendMsgCode(0, 1104);
            return;
        }
        ConsumeInfo ci(Enum3366Gift,0,0);
        useGold(48, &ci);
        AddVar(VAR_3366GIFT, 1);
        //static UInt32 itemId[] = {500, 2, 501, 2, 513, 2, 9082, 2, 548, 2, 503, 2};
        static UInt32 itemId[] = {9082, 2, 9371, 2, 503, 2, 9498, 2, 9457, 2, 9418, 2};
        for(UInt8 i = 0; i < sizeof(itemId) / sizeof(UInt32); i += 2)
        {
            GetPackage()->Add(itemId[i], itemId[i+1], true);
        }
    }
    else if(type == 2)
    {
        if (getGold() < 88)
        {
            sendMsgCode(0, 1104);
            return;
        }
        ConsumeInfo ci(Enum3366Gift,0,0);
        useGold(88, &ci);
        AddVar(VAR_3366GIFT, 1);
        //static UInt32 itemId[] = {30, 517, 551, 549, 9082, 9141};
        static UInt32 itemId[] = { 30, 2, 9427, 2, 9600, 2, 9310, 2, 9438, 2, 9141, 2 };
        for(UInt8 i = 0; i < sizeof(itemId) / sizeof(UInt32); i += 2)
        {
            GetPackage()->Add(itemId[i], itemId[i+1], true);
        }
    }
    send3366GiftInfo();
}

void Player::send3366GiftInfo()
{
    /*
    if(getPlatform() != 11)
        return;
    
    if(!isBD())
        return;
    */
    /*if(!World::get3366GiftAct())
        return;*/

    if(!World::get3366BuyTime())
        return;

    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(6);
    UInt8 opt = GetVar(VAR_3366GIFT);
    st << opt;
    st << Stream::eos;
    send(st);
}

void Player::sendQQGameGift1218()
{
    UInt8 platform = atoi(getDomain());
    if (GetVar(VAR_QQGAME_GIFT_1218) > 0 || platform != 10)
        return;
    UInt32 now = TimeUtil::Now();
    if (now < TimeUtil::MkTime(2012, 12, 18) || now > TimeUtil::MkTime(2012, 12, 21))
        return;
    UInt32 h = (now - TimeUtil::SharpDay())/3600;//现在的小时
    if (h == 20)
    {
        SYSMSGV(title, 4100, TimeUtil::MonthDay());
        SYSMSGV(content, 4101, TimeUtil::MonthDay());
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {
            MailPackage::MailItem mitem = {15,5};
            mailPackageManager.push(mail->id, &mitem, 1, true);
        }
        SetVar(VAR_QQGAME_GIFT_1218, 1);
    }
}

void Player::sendFeastLoginAct()
{
    if(GetLev() < 40 || GetVar(VAR_FEAST_LOGIN) > 0 /*GetVar(VAR_FEAST_LOGIN_AWARD_PER_DAY) > 0*/ || /*!World::getMayDayLoginAct()*/ !World::getFeastLoginAct())
        return;
    //SYSMSGV(title, 4102);
    //SYSMSGV(content, 4103);
    //SYSMSGV(title, 4098);
    //SYSMSGV(content, 4099);
    SYSMSGV(title, 4108);
    SYSMSGV(content, 4109);
    Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
    if(mail)
    {
        //MailPackage::MailItem mitem = {1759,1};
        //MailPackage::MailItem mitem = {1763,1};
        //MailPackage::MailItem mitem = {1760,1};
        //MailPackage::MailItem mitem = {9422,1};
        MailPackage::MailItem mitem = {1769,1};
        mailPackageManager.push(mail->id, &mitem, 1, true);
    }
    //SetVar(VAR_FEAST_LOGIN_AWARD_PER_DAY, 1);
    SetVar(VAR_FEAST_LOGIN, 1);
}

void Player::sendFeastGiftLoginAct()
{
    if(GetLev() < 40 || GetVar(VAR_FEAST_GIFT_LOGIN) > 0 || !World::getFeastGiftLoginAct())
        return;
    SYSMSGV(title, 4164);
    SYSMSGV(content, 4165);
    Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
    if(mail)
    {
        MailPackage::MailItem mitem = {1771,1};
        mailPackageManager.push(mail->id, &mitem, 1, true);
    }
    SetVar(VAR_FEAST_GIFT_LOGIN, 1);
}

void Player::sendTowerLoginAct()
{
    UInt8 day = World::getTowerLoginAct();
    if (day > 7) return;

    if (day && strcasestr(m_via.c_str(), "sscq_dlhd") && !GetVar(VAR_TOWER_LOGIN))
    {
        SYSMSGV(title, 4104);
        SYSMSGV(content, 4105);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {

         MailPackage::MailItem item1[2] ={{56,3},   {57,3}};
         MailPackage::MailItem item2[2] ={{508,1},  {506,1}};
         MailPackage::MailItem item3[2] ={{56,3},   {57,3}};
         MailPackage::MailItem item4[2] ={{508,1},  {506,1}};
         MailPackage::MailItem item5[2] ={{56,3},   {57,3}};
         MailPackage::MailItem item6[2] ={{508,1},  {506,1}};
         MailPackage::MailItem item7[2] ={{509,1},  {507,1}};

         MailPackage::MailItem* item[7] = {item1,item2,item3,item4,item5,item6,item7};

         mailPackageManager.push(mail->id, item[day - 1], 2, true);
        }
        SetVar(VAR_TOWER_LOGIN, 1);

        if(!GetVar(VAR_TOWER_LEVEL) && GetLev() >= 40)
        {
            SYSMSGV(title, 4106);
            SYSMSGV(content, 4107);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[6] = {{516,1},{509,1},{507,1},{56,3},{57,3},{503,1}};
                mailPackageManager.push(mail->id, mitem, 6, true);
            }
            SetVar(VAR_TOWER_LEVEL, 1);
        }
    }

}

void Player::getFeastGiftAward(UInt8 type)
{
    if(type == 0 || type > 2)
        return;
    bool bRet;
    UInt32 status = GetVar(VAR_FEAST_GIFT);

    if(type == 1)
    {
        if(status & 0x01)
            return;
        bRet = GameAction()->onGetFeastGiftAward(this, type);
        if(bRet)
        {
            udpLog("huodong", "F_10000_15", "", "", "", "", "act");
            status |= 0x01;
            SetVar(VAR_FEAST_GIFT, status);
            sendFeastGiftAct();
        }
    }
    else
    {
        if(status & 0x02)
            return;
        if(getGold() < 30)
        {
            sendMsgCode(0, 1104);
            return;
        }
        bRet = GameAction()->onGetFeastGiftAward(this, type);
        if(bRet)
        {
            ConsumeInfo ci(EnumFEASTGIFT,0,0);
            useGold(30,&ci);
            status |= 0x02;
            SetVar(VAR_FEAST_GIFT, status);
            sendFeastGiftAct();
        }
    }
}

void Player::sendFeastGiftAct()
{
    if(false/*!World::getFeastLoginAct()*/)
        return;
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(7);
    UInt8 opt = GetVar(VAR_FEAST_GIFT);
    st << opt;
    st << Stream::eos;
    send(st);
}

Dreamer* Player::getDreamer()
{
       if (GetVar(VAR_EX_JOB_ENABLE) < 2)
           return NULL;
       if (!_dreamer)
       {
           _dreamer = new Dreamer(this);
       }
       return _dreamer;
}

void Player::setDreamerTime(UInt8 count)
{
    if (!_dreamer)
        return;
    _dreamer->SetTime(count);
}

void Player::setDreamerEye(UInt8 count)
{
    if (!_dreamer)
        return;
    _dreamer->SetEye(count);
}

void Player::setDreamerKey(UInt8 count)
{
    if (!_dreamer)
        return;
    _dreamer->SetKey(count);
}

void Player::sendSysUpdate()
{
    UInt32 v = getSysUpDateDlg();

    //版本更新公告
    Stream st(REP::SYSDAILOG);
    st << static_cast<UInt8>(1);
    st << static_cast<UInt8>(SYS_UPDLG_V(v)); //0:老版本 1:最新版
    st << static_cast<UInt8>(SYS_UPDLG_F(v)); //0:按钮不显示 1:按钮显示
    st << (char*)VERSION;
    st << Stream::eos;
    send(st);

    if(SYS_UPDLG_F(v))
    {
        setSysUpDateDlg(SYS_UPDLG_VF(SYS_UPDLG_V(v), 0));
    }
}

void Player::sendSnakeEggInfo()
{
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x08) << static_cast<UInt8>(0x01);
    UInt8 t = World::getCallSnakeEggAct(); //0:非活动期间 1:拜年期 2:拜年-领奖等待期
    if (World::getSnakeEggAwardAct() >= 1 && World::getSnakeEggAwardAct() <= 7)
        t = 3;
    else if (World::getSnakeEggAwardAct() == 0xFF)
        t = 4;
    st << t;
    st << static_cast<UInt8>(GetVar(VAR_CALLSNAKEEGG)) << static_cast<UInt8>(World::getSnakeEggAwardAct());
    st << static_cast<UInt8>(GetVar(VAR_SNAKEEGG_AWARD));
    st << Stream::eos;
    send(st);
 
}

void Player::callSnakeEgg()
{
  if (!World::getCallSnakeEggAct() || GetVar(VAR_CALLSNAKEEGG) != 0 )
      return;
  SetVar(VAR_CALLSNAKEEGG, 1);
  sendSnakeEggInfo();
}

void Player::getSnakeEggAward(UInt8 v)
{
    UInt8 day = World::getSnakeEggAwardAct();
    if (!day || v > 7 || v > day)
        return;
    UInt8 var = GetVar(VAR_SNAKEEGG_AWARD); 
    if (var & (0x01<<(v-1))) //已领取
        return;
    if (v < day || GetVar(VAR_CALLSNAKEEGG) == 0)
    {
        if(!hasChecked())
            return;
        if (getGold() < 30)
        {
		    sendMsgCode(0, 1104);
            return;
        }
        ConsumeInfo ci(SnakeSprintAct, 0, 0);
        useGold(30, &ci);
    }
    getCoupon(100);
    var |= (0x01<<(v-1));
    SetVar(VAR_SNAKEEGG_AWARD, var);
    sendSnakeEggInfo();
}

void Player::getNewYearGiveGiftAward(UInt8 dayOrder, UInt8 result)
{
    if(dayOrder > 8)
        return;

    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(8);
    //st << dayOrder;

    UInt16 opt = GetVar(VAR_NEW_YEAR_GIVE_GIFT);
    UInt16 offset = 1;
    switch(dayOrder)
    {
        case 0:
        break;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        {
            offset <<= (dayOrder - 1);
            if((opt & offset) > 0)
            {
                sendMsgCode(0, 1018);
                return;
            }

            UInt8 validMaxDay = 0;
            UInt8 serverDay = 0;
            UInt32 now = TimeUtil::Now();
            if(TimeUtil::SharpDay(0, now) < TimeUtil::MkTime(2014, 9, 30))
            {
            }
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 9, 30))
            {
                validMaxDay = 1;
                serverDay = 1;
            }
#if 0
            else if(TimeUtil::SharpDay(0, now) < TimeUtil::MkTime(2014,9, 9))
            {
                validMaxDay = 1;
            }
#endif
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 10, 1))
            {
                validMaxDay = 2;
                serverDay = 2;
            }
#if 0
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 9, 11))
            {
                validMaxDay = 2;
            }
#endif
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 10, 2))
            {
                validMaxDay = 3;
                serverDay = 3;
            }
#if 0
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 9, 13))
            {
                validMaxDay = 3;
            }
#endif
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 10, 3))
            {
                validMaxDay = 4;
                serverDay = 4;
            }
#if 0
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 9, 15))
            {
                validMaxDay = 4;
            }
#endif
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 10, 4))
            {
                validMaxDay = 5;
                serverDay = 5;
            }
#if 0
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 9, 17))
            {
                validMaxDay = 5;
            }
#endif
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 10, 5))
            {
                validMaxDay = 6;
                serverDay = 6;
            }
#if 0
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 9, 19))
            {
                validMaxDay = 6;
            }
#endif
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 10, 6))
            {
                validMaxDay = 7;
                serverDay = 7;
            }
#if 0
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 9, 21))
            {
                validMaxDay = 7;
            }
#endif
            else if(TimeUtil::SharpDay(0, now) == TimeUtil::MkTime(2014, 10, 7))
            {
                validMaxDay = 8;
                serverDay = 8;
            }
            else
            {
                validMaxDay = 8;
            }

            if(dayOrder > validMaxDay)
            {
                sendMsgCode(0, 1041);
                return;
            }

            UInt8 times;
            UInt8 recharge = false;
            if(serverDay == dayOrder)
                times = 2;
            else
            {
                if(result == 0)
                {
                    sendMsgCode(0, 1042);
                    return;
                }
                else if(result == 1)
                {
                    if(!hasChecked())
                        return;
                    if (getGold() < 30)
                    {
                        sendMsgCode(0, 1104);
                        return;
                    }
                    times = 2;
                    recharge = true;
                }
                else
                    times = 1;
            }

            bool bRet = GameAction()->onGetNewYearGiveGiftAward(this, dayOrder, times);
            if(!bRet)
                return;
            if(recharge)
            {
                ConsumeInfo ci(NewYearGetDouble,0,0);
                useGold(30, &ci);
            }
            opt |= offset;
            SetVar(VAR_NEW_YEAR_GIVE_GIFT, opt);
        }
        break;

        default:
        break;
    }
    st << opt;
    st << Stream::eos;
    send(st);
}
void Player::sendSnakeSpringEquipMail()
{
    if(GetLev() < 40)
        return;
    static MailPackage::MailItem s_item[2] = {{1762, 1}, {1764, 1}};
    UInt8 act = World::getSnakeSpringEquipAct();
    UInt32 v = GetVar(VAR_SNAKE_SPRING_EQUIP_GOT);
    if (1 == act && ((v&0x01)==0)) //春节套装 item=1762
    {
        sendMailItem(4126, 4127, &s_item[0], 1);
        SetVar(VAR_SNAKE_SPRING_EQUIP_GOT, v|=0x01);
    }
    if (2 == act && ((v&0x02)==0))
    {
        sendMailItem(4128, 4129, &s_item[1], 1);
        SetVar(VAR_SNAKE_SPRING_EQUIP_GOT, v|=0x02);
    }
}

void Player::getNewYearQQGameAward(UInt8 type)
{
    if(type == 0 || type > 2)
        return;
    if(atoi(m_domain) != 10)
        return;
    bool bRet;
    UInt32 status = GetVar(VAR_NEWYEAR_QQGAME_ACT);

    if(type == 1)
    {
        if(status & 0x01)
            return;
        bRet = GameAction()->onGetNewYearQQGameAward(this, 1);
        if(bRet)
        {
            status |= 0x01;
            SetVar(VAR_NEWYEAR_QQGAME_ACT, status);
            sendNewYearQQGameAct();
        }
    }
    else
    {
        if(status & 0x02)
            return;
        if(!isBD())
            return;
        bRet = GameAction()->onGetNewYearQQGameAward(this, 2);
        if(bRet)
        {
            status |= 0x02;
            SetVar(VAR_NEWYEAR_QQGAME_ACT, status);
            sendNewYearQQGameAct();
        }
    }
}

void Player::getQZoneQQGameAward(UInt8 domainType, UInt8 type)
{
    if(type == 0 || type > 2)
        return;
    UInt32 bit = 0;
    if(domainType == 1)
    {
        if(!World::getQZoneQQGameActY())    //黄钻空间
            return;
        if(atoi(m_domain) != 1 && atoi(m_domain) != 2 && atoi(m_domain) !=6)
            return;
        if(type == 1)
            bit = 0x01;
        else
            bit = 0x02;
    }
    else if(domainType == 2)
    {
        if(!World::getQZoneQQGameAct())
                return;
        if(atoi(m_domain) != 10)    //QQ大厅蓝钻空间
            return;
        if(type == 1)
            bit = 0x04;
        else
            bit = 0x08;
    }
    else if(domainType == 3)
    {
        if(!World::getQZoneQQGameAct())
                return;
        if(atoi(m_domain) != 11)    //3366蓝钻空间
            return;
        if(type == 1)
            bit = 0x10;
        else
            bit = 0x20;
    }
    else
        return;
    UInt32 status = GetVar(VAR_QZONE_QQGAME_ACT);
    if(status & bit)
        return;
    bool bRet = GameAction()->onGetQZoneQQGameAward(this, type);
    if(bRet)
    {
        status |= bit;
        SetVar(VAR_QZONE_QQGAME_ACT, status);
        sendQZoneQQGameAct(domainType);
    }
}

void Player::sendQZoneQQGameAct(UInt8 domainType)
{
    if(!World::getQZoneQQGameAct())
        return;
    if(domainType == 1)
    {
        if(atoi(m_domain) != 1 && atoi(m_domain) != 2)
            return;
    }
    else if(domainType == 2)
    {
        if(atoi(m_domain) != 10)
            return;
    }
    else if(domainType == 3)
    {
        if(atoi(m_domain) != 11)
            return;
    }
    else
        return;
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x0C);
    st << domainType;
    UInt8 opt = GetVar(VAR_QZONE_QQGAME_ACT);
    if(domainType == 1)
        opt = opt & 0x03;
    else if(domainType == 2)
        opt = (opt >> 2) & 0x03;
    else
        opt = (opt >> 4) & 0x03;
    st << opt;
    st << Stream::eos;
    send(st);
}

void Player::sendNewYearQQGameAct()
{
    if(!World::getNewYearQQGameAct())
        return;
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(9);
    UInt8 opt = GetVar(VAR_NEWYEAR_QQGAME_ACT);
    st << opt;
    st << Stream::eos;
    send(st);
}

void Player::getNewYearQzoneContinueAward(UInt8 type)
{
    if(type == 0 || type > 5)
        return;
    //if(atoi(m_domain) != 1 && atoi(m_domain) != 2)
    //    return;

    UInt32 tmp = GetVar(VAR_NEWYEAR_QZONECONTINUE_ACT);
    UInt16 isGet = static_cast<UInt16>(tmp & 0xFFFF);
    if(isGet & (0x01 << (type - 1)))
        return;
    UInt8 continueDays = static_cast<UInt8>(tmp >> 16);
    const static UInt8 needMinDay[] = {1, 3, 5, 7, 9};
    if(continueDays < needMinDay[type - 1])
        return;
    bool bRet = GameAction()->onGetNewYearQzoneContinueAward(this, type);
    if(bRet)
    {
        tmp |= (0x01 << (type - 1));
        SetVar(VAR_NEWYEAR_QZONECONTINUE_ACT, tmp);
        sendNewYearQzoneContinueAct();
    }
}

void Player::sendNewYearQzoneContinueAct()
{
    if(!World::getNewYearQzoneContinueAct())
        return;
    //if(atoi(m_domain) != 1 && atoi(m_domain) != 2)
    //    return;

    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(10);
    UInt32 tmp = GetVar(VAR_NEWYEAR_QZONECONTINUE_ACT);
    UInt8 continueDays = static_cast<UInt8>(tmp >> 16);
    UInt16 isGet = static_cast<UInt16>(tmp & 0xFFFF);
    st << continueDays;
    st << isGet;
    st << Stream::eos;
    send(st);
}

void Player::calcNewYearQzoneContinueDay(UInt32 now)
{
    if(!World::getNewYearQzoneContinueAct())
        return;
    //if(atoi(m_domain) != 1 && atoi(m_domain) != 2)
    //    return;

    UInt32 lasttime = GetVar(VAR_NEWYEAR_QZONECONTINUE_LASTTIME);
    if(lasttime == 0)
    {
    }
    else
    {
        UInt32 lasttime_sharp = TimeUtil::SharpDay(0, lasttime);
        UInt32 now_sharp = TimeUtil::SharpDay(0, now);
        if(lasttime_sharp >= now_sharp)
            return;
    }

    SetVar(VAR_NEWYEAR_QZONECONTINUE_LASTTIME, now);
    UInt32 tmp = GetVar(VAR_NEWYEAR_QZONECONTINUE_ACT);
    UInt32 continueDays = (tmp >> 16);
    if(continueDays >= 0xFF)
        continueDays = 0xFE;
    continueDays += 1;
    tmp = (continueDays << 16) + (tmp & 0xFFFF);
    SetVar(VAR_NEWYEAR_QZONECONTINUE_ACT, tmp);
}


/*
 *flag == 1,2,3
 *1:大闹龙宫
 *2:大闹龙宫之金蛇起舞
 *3:大闹龙宫之天芒神梭
*/
static UInt8 Dragon_type[]  = { 0xFF, 0x06, 0x0A, 0x0B, 0x0D, 0x0F, 0x11, 0x14, 0x15, 0x16, 0xFF, 0x17, 0x18, 0x19, 0x21, 0x24, 0x25, 0x27, 0x29, 0x3A, 0x3B, 0x3C ,0x3D,0x3E,0x3F, 0x50};
static UInt32 Dragon_Ling[] = { 0xFFFFFFFF, 9337, 9354, 9358, 9364, 9372, 9379, 9385, 9402, 9405, 0xFFFFFFFF, 9412, 9417, 9426, 9429, 9434, 9441, 9447, 9452, 9454, 9455, 9456 ,17001 ,17006,17016, 17031};
//6134:龙神秘典残页 6135:金蛇宝鉴残页 136:天芒神梭碎片 6136:混元剑诀残页 317:太乙神雷 318:桑巴荣耀
static UInt32 Dragon_Broadcast[] = { 0xFFFFFFFF, 6134, 6135, 136, 6136, 1357, 137, 1362, 139, 8520, 0xFFFFFFFF, 140, 6193, 141, 6194, 312, 8550, 6210, 313, 6220, 314, 315 ,317,318 ,6253, 17032};
void Player::getDragonKingInfo()
{
    if(TimeUtil::Now() > GVAR.GetVar(GVAR_DRAGONKING_END)
            && GVAR.GetVar(GVAR_DRAGONKING_ACTION) != DRAGONKING_CLOSE)
    {
        GVAR.SetVar(GVAR_DRAGONKING_ACTION, 0);
        GVAR.SetVar(GVAR_DRAGONKING_BEGIN, 0);
        GVAR.SetVar(GVAR_DRAGONKING_END, 0);
        return;
    }
    UInt8 flag = GVAR.GetVar(GVAR_DRAGONKING_ACTION);
    if (flag <= DRAGONKING_CLOSE || flag >= DRAGONKING_MAX
            || flag > sizeof(Dragon_type)/sizeof(UInt8)-1)
    {
        sendMsgCode(0, 1090);
        return;
    }
    UInt8 step = GetVar(VAR_DRAGONKING_STEP);
    if( step == 0 || step > 5)
        step = 1;
    Stream st(REP::ACTIVE);
    st << Dragon_type[flag] << static_cast<UInt8>(0x01);
    st << step << Stream::eos;
    send(st);
}

void Player::postDragonKing(UInt8 count)
{
    if (CURRENT_THREAD_ID() != getThreadId())
    {
        GameMsgHdr h(0x342,  getThreadId(), this, sizeof(count));
        GLOBAL().PushMsg(h, &count);
        return;
    }
    if(TimeUtil::Now() > GVAR.GetVar(GVAR_DRAGONKING_END)
            && GVAR.GetVar(GVAR_DRAGONKING_ACTION) != DRAGONKING_CLOSE)
    {
        GVAR.SetVar(GVAR_DRAGONKING_ACTION, 0);
        GVAR.SetVar(GVAR_DRAGONKING_BEGIN, 0);
        GVAR.SetVar(GVAR_DRAGONKING_END, 0);
        return;
    }
    if (count == 0) return;
    UInt8 flag = GVAR.GetVar(GVAR_DRAGONKING_ACTION);
    if (flag <= DRAGONKING_CLOSE || flag >= DRAGONKING_MAX
           || flag > sizeof(Dragon_type)/sizeof(UInt8)-1)
    {
        sendMsgCode(0, 1090);
        return;
    }
    UInt32 XBLing = Dragon_Ling[flag];
    if (GetPackage()->GetItemAnyNum(XBLing) < count)
        return;
    if (GetPackage()->GetRestPackageSize() < count)
    {
        sendMsgCode(0, 1011);
        return;
    }
    GetPackage()->DelItemSendMsg(XBLing, this);
    Stream st(REP::ACTIVE);
    st << Dragon_type[flag] << static_cast<UInt8>(0x02) << count;
    UInt8 step = GetVar(VAR_DRAGONKING_STEP);
    if(step == 0 || step > 5)
        step = 1;
    bool isBind = true;
    for(UInt8 i = 0; i < count; ++i)
    {
        GetPackage()->DelItemAny(XBLing, 1, &isBind);
        Table award = GameAction()->getDragonKingAward(step, flag);
        if (GameAction()->checkDragonKingCanSucceed(this, step, flag))
            step = (step + 1) > 5 ? 1 : step + 1;
        else
            step = 1;
        st << step;
        UInt8 size = award.size();
        st << static_cast<UInt8>(size / 2);
        for(UInt8 j = 1; j <= size; j += 2)
        {
            UInt16 itemId = award.get<UInt16>(j);
            st << itemId << award.get<UInt8>(j+1);
            GetPackage()->Add(itemId, award.get<UInt32>(j+1), isBind, true, FromQixi);
            if (itemId == Dragon_Broadcast[flag]
                    || (flag == YUANSHEN && (itemId == Dragon_Broadcast[flag]+1 || itemId == Dragon_Broadcast[flag]+2))
                    || (flag == TIANYOU && (itemId == Dragon_Broadcast[flag]+1 || itemId == Dragon_Broadcast[flag]+2)))
                SYSMSG_BROADCASTV(295, getCountry(), getName().c_str(), itemId);
        }
    }
    st << Stream::eos;
    send(st);
    SetVar(VAR_DRAGONKING_STEP, step);
}

//金蛇献瑞 聚福兆祥
void Player::saveGoldAct(UInt8 opt, UInt32 param)
{
#define GATHER_TIME 7 * 86400
#define ALL_TIMES 10
    switch(opt)
    {
    case 0x01:  //查看信息
        sendSaveGoldAct();
        break;
    case 0x02:  //是否结算
        {
            if(!World::getSaveGoldAct())
                return;
            if(param)
            {
                if(GetVar(VAR_SAVEGOLD_SET_TIME))
                    return;
                SetVar(VAR_SAVEGOLD_SET_TIME, TimeUtil::Now());
            }
            else
            {
                if(!GetVar(VAR_SAVEGOLD_SET_TIME))
                    return;
                SetVar(VAR_SAVEGOLD_SET_TIME, 0);
            }
            sendSaveGoldAct();
        }
        break;
    case 0x03:  //存仙石
        {
            if(!hasChecked())
                return;
            if(!World::getSaveGoldAct())
                return;
            if(GetVar(VAR_SAVEGOLD_SET_TIME))
                return;
            if(getGold() < param)
                return;
            if(!param || param % ALL_TIMES)
                return;
            AddVar(VAR_SAVEGOLD_COUNT, param);
		    useGold(param);
            sendSaveGoldAct();
            TRACE_LOG("此次存仙石数量playerId_num:SaveGoldAction_%" I64_FMT "u_%u", getId(), param);
        }
        break;
    case 0x04:  //领取福囊
        {
            UInt32 setTime = GetVar(VAR_SAVEGOLD_SET_TIME);
            if(!setTime) return;
            if(setTime + GATHER_TIME > TimeUtil::Now())
                return;
            if(GetVar(VAR_SAVEGOLD_ISGET))
                return;
            UInt32 status = GetVar(VAR_SAVEGOLD_GET_STATUS);
            UInt8 cnt = 0;
            for(UInt8 i = 0; i < ALL_TIMES; ++i)
            {
                if(status & (1 << i))
                    cnt ++;
            }
            if(cnt >= ALL_TIMES)
                return;
            UInt32 gold = GetVar(VAR_SAVEGOLD_COUNT);
            Table awards = GameAction()->getSaveGoldActAward(gold);
            UInt8 size = awards.size() + 1;
            MailPackage::MailItem * mitem = new MailPackage::MailItem[size];
            for(UInt8 i = 0; i < size; ++i)
            {
                if(i == size - 1)
                {
                    mitem[i].id = MailPackage::Gold;
                    mitem[i].count = gold / ALL_TIMES;
                }
                else
                {
                    Table item = awards.get<Table>(i+1);
                    if(item.size() < 2) continue;
                    UInt16 itemId = item.get<UInt16>(1);
                    mitem[i].id = itemId == COUPON_ID ? MailPackage::Coupon : itemId;
                    mitem[i].count = item.get<UInt32>(2);
                }
            }
            SYSMSGV(title, 296);
            SYSMSGV(content, 297, cnt+1, ALL_TIMES);
            MailItemsInfo itemsInfo(mitem, Activity, size);
            Mail * pmail = GetMailBox()->newMail(NULL, 0x21, title, content, 0xFFFE0000, true, &itemsInfo);
            if(pmail != NULL)
                mailPackageManager.push(pmail->id, mitem, size, true);
            delete [] mitem;
            mitem = NULL;
            if(cnt + 1 == ALL_TIMES)
            {
                Table extraAwards = GameAction()->getSaveGoldActExtraAward(gold);
                UInt8 size = extraAwards.size();
                MailPackage::MailItem * mitem = new MailPackage::MailItem[size];
                for(UInt8 i = 0; i < size; ++i)
                {
                    Table item = extraAwards.get<Table>(i+1);
                    if(item.size() < 2) continue;
                    UInt16 itemId = item.get<UInt16>(1);
                    mitem[i].id = itemId == COUPON_ID ? MailPackage::Coupon : itemId;
                    mitem[i].count = item.get<UInt32>(2);
                }
                SYSMSGV(title, 298);
                SYSMSGV(content, 299, ALL_TIMES);
                MailItemsInfo itemsInfo(mitem, Activity, size);
                Mail * pmail = GetMailBox()->newMail(NULL, 0x21, title, content, 0xFFFE0000, true, &itemsInfo);
                if(pmail != NULL)
                    mailPackageManager.push(pmail->id, mitem, size, true);
                delete [] mitem;
                mitem = NULL;
            }
            SetVar(VAR_SAVEGOLD_GET_STATUS, status | (1 << cnt));
            SetVar(VAR_SAVEGOLD_ISGET, 1);
            sendSaveGoldAct();
        }
        break;
    default:    //零点自动结算
        {
            if(getCreated() >= TimeUtil::MkTime(2013, 2, 9))
                return;
            if(!GetVar(VAR_SAVEGOLD_SET_TIME))
                SetVar(VAR_SAVEGOLD_SET_TIME, TimeUtil::Now());
            if(isOnline())
                sendSaveGoldAct();
        }
        break;
    }
}

void Player::sendSaveGoldAct()
{
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x07);
    st << static_cast<UInt8>(0x01);
    st << GetVar(VAR_SAVEGOLD_COUNT);
    UInt32 curTime = TimeUtil::Now();
    UInt32 setTime = GetVar(VAR_SAVEGOLD_SET_TIME);
    if(setTime > curTime)
        setTime = curTime;
    int time = -1;
    if(setTime)
    {
        time = GATHER_TIME + setTime - curTime;
        if(time < 0)
            time = 0;
    }
    st << time;
    if(time == 0)
    {
        UInt32 status = GetVar(VAR_SAVEGOLD_GET_STATUS);
        UInt8 cnt = 0;
        for(UInt8 i = 0; i < ALL_TIMES; ++i)
        {
            if(status & (1 << i))
                cnt ++;
        }
        if(cnt >= ALL_TIMES)
            st << static_cast<UInt8>(1);
        else
            st << static_cast<UInt8>(GetVarNow(VAR_SAVEGOLD_ISGET, curTime + 30));
        st << status;
    }
    st << Stream::eos;
    send(st);
}
void Player::buyTownTjItem(const UInt32 itemId)
{
    static const UInt32 s_items[] = {1653,1654,1655,1532,1533,1534,1661,1672};
    int opt = -1;
    for (UInt8 i = 0; i < sizeof(s_items)/sizeof(s_items[0]); ++i)
    {
        if (itemId == s_items[i])
        {
            opt = i;
            break;
        }
    }
    if (opt < 0)
        return;
    int flag = GetVar(VAR_TJ_TOWN_ITEM_GOT);
    if (flag & (1 << opt))//已领取
    {
        std::vector<ItemEquip*> items;
        std::vector<ItemEquip*> fgtItems;
        GetPackage()->FindEquipByTypeId(items, itemId, true);
        if (!items.empty()) 
        {
            sendMsgCode(0, 1044);
            return;
        }
        GetPackage()->FindEquipByTypeIdFromItemTemp(items, itemId, true);
        if (!items.empty()) 
        {
            sendMsgCode(0, 1044);
            return;
        }

        for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
        {
            fgtItems.clear();
            Fighter* fgt = it->second;
            fgt->findTrumpByTypeId(fgtItems, itemId);
            if (!fgtItems.empty())
            {
                sendMsgCode(0, 1044);
                return;
            }
        }
        if (getGold() < 100)
        {
            sendMsgCode(0, 1104); 
            return;
        }
        if (GetPackage()->GetRestPackageSize() == 0)
        {
            sendMsgCode(0, 1011); 
            return;
        }
        ConsumeInfo ci(BuyTownTjTrump,0,0);
		useGold(100,&ci);
        GetPackage()->Add(itemId,1,true);
        sendTownTjItemInfo();
    }
}
void Player::sendTownTjItemInfo()
{
    static const UInt32 s_items[] = {1653,1654,1655,1532,1533,1534,1661,1672};
    UInt8 flag = GetVar(VAR_TJ_TOWN_ITEM_GOT);
    std::vector<ItemEquip*> items;
    std::vector<ItemEquip*> fgtItems;
    for (UInt8 i = 0; i < sizeof(s_items)/sizeof(s_items[0]); ++i) 
    {
        if (flag&(1<<i))
        {
            items.clear();
            GetPackage()->FindEquipByTypeId(items,s_items[i], true);
            if (!items.empty())
            {
                flag &= ~(1<<i);
                continue;
            }
            GetPackage()->FindEquipByTypeIdFromItemTemp(items, s_items[i], true);
            if (!items.empty()) 
            {
                flag &= ~(1<<i);
                continue;
            }
            for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++it)
            {
                fgtItems.clear();
                Fighter* fgt = it->second;
                fgt->findTrumpByTypeId(fgtItems, s_items[i]);
                if (!fgtItems.empty())
                {
                    flag &= ~(1<<i);
                    continue;
                }
            }
        }
    }
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x0C) << static_cast<UInt8>(0x01) << static_cast<UInt8>(flag);
    st << Stream::eos;
    send(st);
}

void Player::getLongyuanAct(UInt8 idx, UInt8 flag/*0:领取 1:结缘*/)
{
    static UInt32 s_lev[] = {60,70,80,90,100,110};
    static UInt32 s_longyuan[] = {50000,150000,300000,450000,500000,600000};
    static UInt32 s_fengsui[] = {10000,50000,100000,200000,500000,1000000};
    static UInt32 s_gold[] = {50,200,500,1000,3000,5000};
    if (!World::getLongyuanAct())
        return;
    if (idx > 5)
        return;
    UInt32 v = GetVar(VAR_LONGYUAN_GOT);
    UInt8 res = 0;
    if (GetLev() >= s_lev[idx])
    {
        UInt8 i = idx*2 + flag; //每2位存一个等级的标志 第1位:领取 第2位:结缘
        if (v&(0x01<<i))
        {
            res = 1; //已领取
        }
        else
        {
            if (flag == 1)
            {
                if (getGold() < s_gold[idx])
                {
                    sendMsgCode(0, 1104); 
                    return;
                }
                ConsumeInfo ci(LongYuanAct,0,0);
                useGold(s_gold[idx],&ci);
           }
           IncommingInfo ii1(LongYuanAct, 0, 0);
           getLongyuan(s_longyuan[idx], &ii1);
           IncommingInfo ii2(LongYuanAct, 0, 0);
           getFengsui(s_fengsui[idx], &ii2);
           sendFairyPetResource();

           v |= (0x01<<i);
           SetVar(VAR_LONGYUAN_GOT, v);
           sendLongyuanActInfo();
        }
    }
    else
    {
        res = 3;
    }
}
void Player::sendLongyuanActInfo()
{
    static UInt32 s_lev[] = {60,70,80,90,100,110};
    UInt8 total = 0;
    UInt8 i = 0;
    for (i = 0; i < sizeof(s_lev)/sizeof(s_lev[0]); ++i)
    {
        if (GetLev() < s_lev[i])
            break;
        total += 1;
    }
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x0E) << static_cast<UInt8>(0x01);
    st << static_cast<UInt8>(total);
    UInt32 v = GetVar(VAR_LONGYUAN_GOT);
    for (i = 0; i < total; ++i)
    {
        UInt8 flag = 0;
        flag = (v>>(i*2))&0x03;
        st << flag;
    }
    st << Stream::eos;
    send(st);
}
void Player::sendLuckyBagInfo()
{
    if(!World::getSurnameLegend() && !World::getSurnameLegend2())
        return ;
    Stream st(REP::ACTIVE);
    st << (World::getSurnameLegend() ? static_cast<UInt8>(0x13) : static_cast<UInt8>(0x60)) << static_cast<UInt8>(0x00);
    for (UInt8 i = 0; i < 5; ++i)
    {
        st <<static_cast<UInt16>(GetVar(VAR_CARD_1+i));
    }
    st << Stream::eos;
    send(st);
}
void Player::transferExpBuffer2Var()
{
    UInt32 tm = TimeUtil::Now();
    UInt32 left;
    UInt32 total;
    /** 初级**/
    total = 0;
    if((left = getBuffLeft(PLAYER_BUFF_TRAINP1, tm))> 0)
    {
        total += left;
        setBuffData(PLAYER_BUFF_TRAINP1, 0);
    };
    if(total > 0)
    {
        SetVar(VAR_TRAINP1, total);
        if(hasFlag(Training))
            SetVar(VAR_EXP_HOOK_INDEX, ENUM_TRAINP1);
    }

    /** 高级 **/
    total = 0;
    if((left = getBuffLeft(PLAYER_BUFF_TRAINP2, tm)) > 0)
    {
        total += left;
        setBuffData(PLAYER_BUFF_TRAINP2, 0);
    }
    if((left = getBuffLeft(PLAYER_BUFF_TRAINP4, tm)) > 0)
    {
        total += left;
        setBuffData(PLAYER_BUFF_TRAINP4, 0);
    }
    if((left = getBuffLeft(PLAYER_BUFF_ADVANCED_HOOK, tm)) > 0)
    {
        total += left;
        setBuffData(PLAYER_BUFF_ADVANCED_HOOK, 0);
    }
    if(total > 0)
    {
        SetVar(VAR_TRAINP2, total);
        if(hasFlag(Training))
            SetVar(VAR_EXP_HOOK_INDEX, ENUM_TRAINP2);
    }

    /** 齐天 **/
    total = 0;
    if((left = getBuffLeft(PLAYER_BUFF_TRAINP3, tm)) > 0)
    {
        total += left;
        setBuffData(PLAYER_BUFF_QI_TIAN_CHU_MO, tm + left);
    }
    if(total > 0)
    {
        SetVar(VAR_TRAINP3, total);
        if(hasFlag(Training))
            SetVar(VAR_EXP_HOOK_INDEX, ENUM_TRAINP3);
    }
}

//////////////////////////////////////////////////////
UInt8 Player::toQQGroup(bool isJoin)
{
    if (getClan() == NULL)
        return 1;
    if (_inQQGroup != isJoin)
    {
        _inQQGroup = isJoin;
	    DB1().PushUpdateData("UPDATE `clan_player` SET `inQQGroup` = %u WHERE `playerId` = %" I64_FMT "u", _inQQGroup, getId());

        getClan()->sendQQOpenid(this);
    }
    return 0;
}

    //仙宠
    void Player::fairyPetUdpLog(UInt32 id, UInt8 type)
    {
        // 仙宠相关日志
        char action[16] = "";
        snprintf (action, 16, "F_%d_%d", id, type);
        udpLog("FairyPet", action, "", "", "", "", "act");
    }

	FairyPet * Player::findFairyPet( UInt32 id )
	{
		std::map<UInt32, FairyPet *>::iterator it = _fairyPets.find(id);
		if(it == _fairyPets.end())
			return NULL;
		return it->second;
	}

    bool Player::hasCanHirePet( UInt32 id )
    {
        std::vector<UInt32>::iterator it = std::find(_playerData.canHirePet.begin(), _playerData.canHirePet.end(), id);
        return it != _playerData.canHirePet.end();
    }

    bool Player::delCanHirePet( UInt32 id )
    {
        bool isDel = false;
        std::vector<UInt32>::iterator it = _playerData.canHirePet.begin();
        for(; it != _playerData.canHirePet.end(); ++ it)
        {
            if(*it == id)
            {
                _playerData.canHirePet.erase(it);
                isDel = true;
                break;
            }
        }
        if(isDel)
            writeCanHiretPet();
        return isDel;
    }

    void Player::delFairyPet(UInt32 id, UInt8 delete_type)
    {   //delete_type=>>0:放生 1:传承 2:进化
        std::map<UInt32, FairyPet *>::iterator it = _fairyPets.find(id);
        DBLOG1().PushUpdateData("insert into pet_histories (server_id,player_id,pet_id,pet_name,delete_type,pet_pinjie,pet_gengu,delete_time) values(%u,%" I64_FMT "u,%u,'%s',%u,%u,%u,%u)",
            cfg.serverLogId, getId(), id, it->second->getName().c_str(), delete_type, it->second->getPetLev(), it->second->getPetBone(), TimeUtil::Now());

        leaderboard.erasePetInfo(it->second);
        it->second->delSanHun();
        it->second->deleteSevenSoul();
        SAFE_DELETE(it->second);
        _fairyPets.erase(it);
        DB2().PushUpdateData("DELETE FROM `fairyPet` WHERE `id` = %u AND `playerId` = %" I64_FMT "u", id, getId());
	    DB2().PushUpdateData("DELETE FROM `fighter` WHERE `id` = %u AND `playerId` = %" I64_FMT "u", id, getId());
        DB2().PushUpdateData("DELETE FROM `fairyPet_sanhun` WHERE `fairyPetId` = %u AND `playerId` = %" I64_FMT "u", id, getId());
    }

	void Player::writeCanHiretPet()
	{
        std::string petStr = "";
        UInt8 size = getCanHirePetNum();
        for(UInt8 i = 0; i < size; ++ i)
        {
            petStr += Itoa(_playerData.canHirePet[i]);
            if(i < size - 1)
                petStr += ",";
        }
        DB1().PushUpdateData("UPDATE `player` SET `canHirePet` = '%s' WHERE id = %" I64_FMT "u", petStr.c_str(), getId());
    }

	bool Player::isFairyPetFull() const
	{
		size_t size = _fairyPets.size();
        return size >= 6;
	}

    void Player::setCanHirePet(UInt32 id)
    {
        PLAYER_DATA(this, canHirePet).push_back(id);
    }

    UInt32 Player::setFairypetBattle( UInt32 id )
    {
        FairyPet * pet = findFairyPet(id);
        if(!pet) return 0;
        if(_onBattlePet == pet) //表明取消出战
        {
            pet = NULL;
            id = 0;
        }
        setFairypetBattle(pet);
        return id;
	}

    void Player::setFairypetBattle(FairyPet * pet, bool writedb)
    {
        if(_onBattlePet == pet)
            return;
        if(_onBattlePet && writedb)
        {
            _onBattlePet->setOnBattle(false);
            _onBattlePet->UpdateToDB();
        }
        if(pet && writedb)
        {
            pet->setOnBattle(true);
            pet->UpdateToDB();
        }
        _onBattlePet = pet;
    }

    void Player::addFairyPet(FairyPet * pet, bool writedb)
    {
        if(!pet) return;
        _fairyPets.insert(std::make_pair(pet->getId(), pet));

        if(writedb)
        {
            pet->UpdateToDB();
			UInt32 p = static_cast<UInt32>((pet->getPotential()+0.005) * 100);
			UInt32 c = static_cast<UInt32>((pet->getCapacity()+0.05) * 100);
			DB2().PushUpdateData("INSERT INTO `fighter` (`id`, `playerId`, `potential`, `capacity`, `level`, `experience`)\
                    VALUES(%u, %" I64_FMT "u, %u.%02u, %u.%02u, %u, %u)",
                    pet->getId(), getId(), p / 100, p % 100, c / 100, c % 100, pet->getLevel(), pet->getExp());
            pet->updateToDBPetSkill();
            pet->setSummoned(TimeUtil::Now());
        }
    }

    //招募仙宠
	UInt8 Player::hireFairyPet( UInt32 id )
    {
		if(id > GREAT_FIGHTER_MAX)
			return 1;
        if(!hasCanHirePet(id))
            return 1;
        if(isFairyPetFull())
            return 3;
		if(findFairyPet(id) || hasFighter(id))
			return 2;
		FairyPet * pet = static_cast<FairyPet *>(globalFighters[id]);
		if(pet == NULL)
			return 1;
		FairyPet * pet2 = pet->clone(this);
		addFairyPet(pet2, true);
        delCanHirePet(id);
        if(pet2->getColor() > 1)
            SYSMSG_BROADCASTV(4133, getCountry(), getName().c_str(), pet2->getColor(), pet2->getName().c_str());
		SYSMSG_SENDV(4134, this, pet2->getColor(), pet2->getName().c_str());
        if(_fairyPets.size() == 1)  //第一个仙宠自动出战
        {
            setFairypetBattle(pet2, true);
            Stream st(REP::FAIRY_PET);
            st << static_cast<UInt8>(0x03) << static_cast<UInt8>(0x03);
            st << id << Stream::eos;
            send(st);
        }
        return 0;
    }

    //放生转化仙宠
	UInt8 Player::convertFairyPet( UInt32 id, UInt8 isHas)
    {
        if(isHas)
        {
            FairyPet * pet = findFairyPet(id);
            if(pet == NULL)
                return 1;
            if(pet->isOnBattle() || pet == _onBattlePet)
                return 2;
            ItemPetEq * equip = pet->findEquip(0);
            if(equip)
                GetPetPackage()->AddExistEquip(equip);
            equip = pet->findEquip(1);
            if(equip)
                GetPetPackage()->AddExistEquip(equip);
            equip = pet->findEquip(2);
            if(equip)
                GetPetPackage()->AddExistEquip(equip);

            delFairyPet(id);
        }
        else
        {
            if(!hasCanHirePet(id))
                return 1;
            delCanHirePet(id);
		    FairyPet * pet = static_cast<FairyPet *>(globalFighters[id]);
            if(pet == NULL)
                return 1;
        }
        Table values = GameAction()->getConvertPetValue(id);
        UInt32 longYuan = values.get<UInt32>("longyuan");
        UInt32 fengSui = values.get<UInt32>("fengsui");
        UInt32 like = values.get<UInt32>("like");

        IncommingInfo ii1(LongyuanFromYouli, 0, 0);
        getLongyuan(longYuan, &ii1);
        IncommingInfo ii2(FengsuiFromYouli, 0, 0);
        getFengsui(fengSui, &ii2);
        AddVar(VAR_FAIRYPET_LIKEABILITY, like);
        if(like)
        {
            SYSMSG_SENDV(146, this, like);
            SYSMSG_SENDV(1046, this, like);
        }
        return 0;
    }

	void Player::sendFairyPetList()
    {
        Stream st(REP::FAIRY_PET);
        st << static_cast<UInt8>(0x03) << static_cast<UInt8>(0x01);
        st << static_cast<UInt32>(_onBattlePet ? _onBattlePet->getId() : 0);
        st << static_cast<UInt8>(_fairyPets.size());
		std::map<UInt32, FairyPet *>::iterator it = _fairyPets.begin();
		while(it != _fairyPets.end())
        {
            st << it->first;
            st << it->second->getPetLev();
            st << it->second->getPetBone();
            st << it->second->getChongNum();
            st << it->second->getPetEvolve();
            it->second->AppendEquipData(st);
            it->second->sendHunPoInfo(st);
            ++ it;
        }
        st << Stream::eos;
        send(st);
    }

    void Player::getFariyPetSpaceInfo()
    {
        UInt8 step = GetVar(VAR_FAIRYPET_STEP);
        if(step < 1 || step > 5)
            step = 1;
        Stream st(REP::FAIRY_PET);
        st << static_cast<UInt8>(0x02) << static_cast<UInt8>(0x01);
        UInt8 size = getCanHirePetNum();
        st << step << size;
        for(UInt8 i = 0; i < size; ++ i)
            st << _playerData.canHirePet[i];
        st << Stream::eos;
        send(st);
    }

    void Player::sendFairyPetResource()
    {
        Stream st(REP::FAIRY_PET);
        st << static_cast<UInt8>(0x03) << static_cast<UInt8>(0x02);
        st << static_cast<UInt8>(GetVar(VAR_FAIRYPET_ISGET_PET));
        st << GetVar(VAR_FAIRYPET_LONGYUAN);
        st << GetVar(VAR_FAIRYPET_FENGSUI);
        st << GetVar(VAR_FAIRYPET_XIANYUAN);
        st << static_cast<UInt16>(GetVar(VAR_FAIRYPET_LIKEABILITY));
        st << GetVar(VAR_FAIRYPET_SHOUHUN);
        st << Stream::eos;
        send(st);
    }

    //寻宠
    void Player::seekFairyPet(UInt16 count, UInt8 isConvert)
    {
        if(count == 0) return;
        if(getCanHirePetNum())
            return;
        if(count > 20)
            count = 1000;
        static UInt32 cost[] = {0xFFFFFFFF, 16, 24, 48, 120, 360};  //游历消耗仙缘
        UInt32 xianYuan = GetVar(VAR_FAIRYPET_XIANYUAN);
        UInt8 step = GetVar(VAR_FAIRYPET_STEP);
        if(step < 1 || step > 5)
            step = 1;
        UInt32 longYuan = 0, fengSui = 0, shouhun = 0;
        UInt32 greenId = 0, blueId = 0;
        UInt16 like = 0;
        UInt32 convert1 = 0, convert2 = 0;
        UInt32 used = 0;
        std::string petStr = "";
        Stream st(REP::FAIRY_PET);
        st << static_cast<UInt8>(0x02) << static_cast<UInt8>(0x02);
	    size_t pos = st.size();
        UInt16 num = 0;
        st << num;
        for(UInt16 i = 0; i < count; ++ i)
        {
            if(xianYuan < cost[step] + used)
                break;
            fairyPetUdpLog(10000, 21);
            ++ num;
            used += cost[step];
            Table values = GameAction()->onSeekFairypetAwardAndSucceed(step, isConvert);
            longYuan += values.get<UInt32>("longyuan");
            fengSui += values.get<UInt32>("fengsui");
            shouhun += values.get<UInt32>("shouhun");
            like += values.get<UInt16>("like");
            greenId = values.get<UInt32>("greenId");
            if(greenId)
            {
                petStr += Itoa(greenId);
                if(i < count - 1)
                    petStr += ",";
                if(!isConvert)
                    setCanHirePet(greenId);
            }
            blueId = values.get<UInt32>("blueId");
            if(blueId)
            {
                petStr += Itoa(blueId);
                if(i < count - 1)
                    petStr += ",";
                if(!isConvert)
                    setCanHirePet(blueId);
            }
            if(isConvert)   //是否放生仙宠 0:否,1:是
            {
                convert1 += values.get<UInt32>("convert1");
                convert2 += values.get<UInt32>("convert2");
            }
            if(values.get<bool>("succeed"))
                step = (step + 1) > 5 ? 1 : step + 1;
            else
                step = 1;
            st << step;
            GuangGunCompleteTask(0,18);
        }
        if(num == 0)
            return;
        st << longYuan << fengSui << shouhun << like;
        st << static_cast<UInt32>(xianYuan - used) << isConvert;
        st << petStr.c_str();
		st.data<UInt16>(pos) = num;
        st << Stream::eos;
        send(st);

        IncommingInfo ii1(LongyuanFromYouli, 0, 0);
        getLongyuan(longYuan, &ii1);
        IncommingInfo ii2(FengsuiFromYouli, 0, 0);
        getFengsui(fengSui, &ii2);
        IncommingInfo ii3(ShouHunFromYouli, 0, 0);
        getShouHun(shouhun, &ii3);
        if(isConvert)   //放生仙宠
        {
            IncommingInfo ii1(LongyuanFromConvert, 0, 0);
            getLongyuan(convert1, &ii1);
            IncommingInfo ii2(FengsuiFromConvert, 0, 0);
            getFengsui(convert2, &ii2);
        }
        ConsumeInfo ci(YouliForPet, 0, 0);
        useXianyuan(used, &ci);
        if(!isConvert && !petStr.empty())   //不放生仙宠
            writeCanHiretPet();
        AddVar(VAR_FAIRYPET_LIKEABILITY, like);
        SetVar(VAR_FAIRYPET_STEP, step);
        if(like)
        {
            SYSMSG_SENDV(146, this, like);
            SYSMSG_SENDV(1046, this, like);
        }
    }

    //仙宠免费领取(>=50级)
    void Player::getPetByLevelUp(UInt8 idx)
    {
        if(idx > 3 || GetLev() < 50)
            return;
        UInt32 isGet = GetVar(VAR_FAIRYPET_ISGET_PET);
        if(idx < 3)
        {
            if(isGet & (1 << 0))
                return;
            static UInt32 petId[] = { 501, 510, 507 };
            setCanHirePet(petId[idx]);
            UInt8 res = hireFairyPet(petId[idx]);
            Stream st(REP::FAIRY_PET);
            st << static_cast<UInt8>(0x04);
            st << static_cast<UInt32>(res == 0 ? petId[idx] : 0);
            st << Stream::eos;
            send(st);
            if(res)
                delCanHirePet(petId[idx]);
            SetVar(VAR_FAIRYPET_ISGET_PET, isGet | (1 << 0));
            FairyPet* pet = findFairyPet(petId[idx]);
            if(pet)
                pet->sendSevenSoul();
        }
        else
        {
            if(isGet & (1 << 1))
                return;
            IncommingInfo ii1(LongyuanFromUseItem, 0, 0);
            getLongyuan(16000, &ii1);
            IncommingInfo ii2(FengsuiFromUseItem, 0, 0);
            getFengsui(16000, &ii2);
            SetVar(VAR_FAIRYPET_ISGET_PET, isGet | (1 << 1));
            sendFairyPetResource();
        }
    }

    //使用仙宠蛋获得蓝色仙宠
    UInt8 Player::getPetByPetEgg(UInt32 id)
    {
        setCanHirePet(id);
        UInt8 res = hireFairyPet(id);
        if(res == 2) //已有相同的仙宠
            sendMsgCode(0, 4004);
        else
        {
            Stream st(REP::FAIRY_PET);
            st << static_cast<UInt8>(0x02) << static_cast<UInt8>(0x03);
            st << res << id;
            st << Stream::eos;
            send(st);
            if(res != 0)
                delCanHirePet(id);
            else
            {
                FairyPet* pet = findFairyPet(id);
                if(pet)
                    pet->sendSevenSoul();
            }
        }
        return res;
    }

    UInt8 Player::transferPet(UInt32 petId1, UInt32 petId2)
    {   //仙宠传承
        FairyPet * pet1 = findFairyPet(petId1);
        FairyPet * pet2 = findFairyPet(petId2);
        if(!pet1 || !pet2 || pet1 == pet2)
            return 1;
        if(pet1->isOnBattle() || pet2->isOnBattle())
            return 1;
        if(pet1->getColor() > pet2->getColor())
        {
            if(pet1->getColor() != 3 || pet2->getColor() != 2)
                return 1;
        }
        UInt16 lev = 0, pBless = 0, bone = 0;
        UInt16 gBless = 0, dazhou = 0, xiaozhou = 0, chong = 0;
        if(pet1->getPetLev() > pet2->getPetLev())
        {
            lev = pet1->getPetLev();
            pBless = pet1->getPinjieBless1();
        }
        else if(pet1->getPetLev() < pet2->getPetLev())
        {
            lev = pet2->getPetLev();
            pBless = pet2->getPinjieBless1();
        }
        else
        {
            lev = std::max(pet1->getPetLev(), pet2->getPetLev());
            pBless = std::max(pet1->getPinjieBless1(), pet2->getPinjieBless1());
        }
        if(pet1->getPetBone() > pet2->getPetBone())
        {
            bone     = pet1->getPetBone();
            gBless   = pet1->getGenguBless();
            dazhou   = pet1->getDazhou();
            xiaozhou = pet1->getXiaozhou();
            chong    = pet1->getChongNum();
        }
        else if(pet1->getPetBone() < pet2->getPetBone())
        {
            bone     = pet2->getPetBone();
            gBless   = pet2->getGenguBless();
            dazhou   = pet2->getDazhou();
            xiaozhou = pet2->getXiaozhou();
            chong    = pet2->getChongNum();
        }
        else
        {
            bone     = std::max(pet1->getPetBone(), pet2->getPetBone());
            gBless   = std::max(pet1->getGenguBless(), pet2->getGenguBless());
            dazhou   = std::max(pet1->getDazhou(), pet2->getDazhou());
            xiaozhou = std::max(pet1->getXiaozhou(), pet2->getXiaozhou());
            chong    = std::max(pet1->getChongNum(), pet2->getChongNum());
        }
        
        UInt8 minghunLvl = std::max(pet1->findSHLvl(1), pet2->findSHLvl(1));
        UInt8 tianhunLvl = std::max(pet1->findSHLvl(2), pet2->findSHLvl(2));
        UInt8 dihunLvl = std::max(pet1->findSHLvl(3), pet2->findSHLvl(3));
         
        UInt8 evolve = std::max(pet1->getPetEvolve(), pet2->getPetEvolve());
        if(pet1->getColor() == 3 && pet2->getColor() == 2)
        {   //橙宠转紫宠
            ItemPetEq * equip = pet2->findEquip(0);
            if(equip)
                GetPetPackage()->AddExistEquip(equip);
            equip = pet2->findEquip(1);
            if(equip)
                GetPetPackage()->AddExistEquip(equip);
            equip = pet2->findEquip(2);
            if(equip)
                GetPetPackage()->AddExistEquip(equip);
            pet1->getSevenSoulFromAnother(pet2);
            delFairyPet(petId2, 1);

            petId2 = GameAction()->getYellowPetId(petId2);
            FairyPet * npet = static_cast<FairyPet *>(globalFighters[petId2]);
            if(npet == NULL || findFairyPet(petId2))
                return 1;
            evolve = 0;
            pet2 = npet->clone(this);
            pet2->setColor(3);
            addFairyPet(pet2, true);
            SYSMSG_BROADCASTV(4139, getCountry(), getName().c_str(), pet2->getColor(), pet2->getName().c_str());
            SYSMSG_SENDV(4134, this, pet2->getColor(), pet2->getName().c_str());
        }
        pet2->setPetLev(lev);
        pet2->setPetBone(bone);
        pet2->setPinjieBless1(pBless);
        pet2->setGenguBless(gBless);
        pet2->setDazhou(dazhou);
        pet2->setXiaozhou(xiaozhou);
        pet2->setChongNum(chong);
        pet2->setPetEvolve(evolve);
        if(minghunLvl > 0)
            pet2->setSHLvl(1, minghunLvl);

        if(tianhunLvl > 0)
            pet2->setSHLvl(2, tianhunLvl);

        if(dihunLvl > 0)
            pet2->setSHLvl(3, dihunLvl);

        pet2->UpdateToDB();
        pet2->setPotential(GData::pet.getPetPotential(bone));
        pet2->setLevel(lev);
        pet2->updateToDB(2, lev);
        pet2->initSkillUp();

        ItemPetEq * equip = pet1->findEquip(0);
        if(equip)
            GetPetPackage()->AddExistEquip(equip);
        equip = pet1->findEquip(1);
        if(equip)
            GetPetPackage()->AddExistEquip(equip);
        equip = pet1->findEquip(2);
        if(equip)
            GetPetPackage()->AddExistEquip(equip);

        pet2->getSevenSoulFromAnother(pet1);
        delFairyPet(petId1, 1);
        //pet2->sendPinjieInfo();
        //pet2->sendGenguInfo();
        //pet2->sendPetEvolve();
        return 0;
    }

    UInt32 Player::evolvePet(UInt32 petId)
    {   //仙宠进化
        FairyPet * pet = findFairyPet(petId);
		if(!pet || hasFighter(petId))
			return 0;
        UInt32 newId = GameAction()->getYellowPetId(petId);
		FairyPet * npet = static_cast<FairyPet *>(globalFighters[newId]);
		if(npet == NULL || findFairyPet(newId))
			return 0;
        UInt8 color = GameAction()->getPetColorFromId(petId);
        if(pet->getPetBone() < EVOLVE_BONE_LIMIT || pet->getPetEvolve() < pet->getPetEvMax() || color != 2)
            return 0;
		FairyPet * npet2 = npet->clone(this);
		addFairyPet(npet2, true);
        npet2->setPetLev(pet->getPetLev());
        npet2->setPetBone(pet->getPetBone());
        npet2->setPinjieBless1(pet->getPinjieBless1());
        npet2->setGenguBless(pet->getGenguBless());
        npet2->setDazhou(pet->getDazhou());
        npet2->setXiaozhou(pet->getXiaozhou());
        npet2->setChongNum(pet->getChongNum());
        UInt8 minghunLvl = pet->findSHLvl(1);
        if(minghunLvl > 0)
            npet2->setSHLvl(1, minghunLvl);

        UInt8 tianhunLvl = pet->findSHLvl(2);
        if(tianhunLvl > 0)
            npet2->setSHLvl(2, tianhunLvl);

        UInt8 dihunLvl = pet->findSHLvl(3);
        if(dihunLvl > 0)
            npet2->setSHLvl(3, dihunLvl);
        
        if(pet->isOnBattle())
        {
            setFairypetBattle(npet2, false);
            npet2->setOnBattle(true);
        }

        UInt8 pos = 0;
        ItemPetEq * equip = pet->findEquip(pos);
        if(equip)
            npet2->setEquip(equip, pos, false);
        pos = 1;
        equip = pet->findEquip(pos);
        if(equip)
            npet2->setEquip(equip, pos, false);
        pos = 2;
        equip = pet->findEquip(pos);
        if(equip)
            npet2->setEquip(equip, pos, false);
        npet2->UpdateToDB();
        npet2->setColor(color+1);
        npet2->setPotential(GData::pet.getPetPotential(pet->getPetBone()));
        npet2->setLevel(pet->getPetLev());
        npet2->updateToDB(2, pet->getPetLev());
        npet2->initSkillUp();

        SYSMSG_BROADCASTV(4139, getCountry(), getName().c_str(), npet2->getColor(), npet2->getName().c_str());
		SYSMSG_SENDV(4134, this, npet2->getColor(), npet2->getName().c_str());
        npet2->getSevenSoulFromAnother(pet);
        delFairyPet(petId, 2);
        //npet2->sendPinjieInfo();
        //npet2->sendGenguInfo();
        return petId;
    }

    void Player::getLongyuanLua(UInt32 c)
    {
        IncommingInfo ii(LongyuanFromUseItem, 0, 0);
        getLongyuan(c, &ii);
        sendFairyPetResource();
    }

    void Player::getFengsuiLua(UInt32 c)
    {
        IncommingInfo ii(FengsuiFromUseItem, 0, 0);
        getFengsui(c, &ii);
        sendFairyPetResource();
    }

    void Player::getXianyuanLua(UInt32 c)
    {
        IncommingInfo ii(XianyuanFromUseItem, 0, 0);
        getXianyuan(c, &ii);
        sendFairyPetResource();
    }

    UInt32 Player::getXianyuan( UInt32 c, IncommingInfo* ii)
    {
        UInt32 xianyuan = GetVar(VAR_FAIRYPET_XIANYUAN);
		if(c == 0)
			return xianyuan;
		xianyuan += c;
		SYSMSG_SENDV(161, this, c);
		SYSMSG_SENDV(1061, this, c);
        SetVar(VAR_FAIRYPET_XIANYUAN, xianyuan);
        /*
        Stream st(REP::USER_INFO_CHANGE);
        st << static_cast<UInt8>(0x18) << xianyuan << Stream::eos;
        send(st);
        */

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

        return xianyuan;
	}

	UInt32 Player::useXianyuan( UInt32 a, ConsumeInfo * ci )
	{
        UInt32 xianyuan = GetVar(VAR_FAIRYPET_XIANYUAN);
        if(a == 0 || xianyuan == 0)
            return xianyuan;
        if(xianyuan < a)
            xianyuan = 0;
        else
        {
            xianyuan -= a;
            if(ci != NULL)
            {
                DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
        }
        SYSMSG_SENDV(148, this, a);
        SYSMSG_SENDV(1048, this, a);
        SetVar(VAR_FAIRYPET_XIANYUAN, xianyuan);

        return xianyuan;
    }

    UInt32 Player::getLongyuan( UInt32 c, IncommingInfo* ii)
    {
        UInt32 longyuan = GetVar(VAR_FAIRYPET_LONGYUAN);
		if(c == 0)
			return longyuan;
		longyuan += c;
		SYSMSG_SENDV(159, this, c);
		SYSMSG_SENDV(1059, this, c);
        SetVar(VAR_FAIRYPET_LONGYUAN, longyuan);

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

        return longyuan;
	}

	UInt32 Player::useLongyuan( UInt32 a, ConsumeInfo * ci )
	{
        UInt32 longyuan = GetVar(VAR_FAIRYPET_LONGYUAN);
        if(a == 0 || longyuan == 0)
            return longyuan;
        if(longyuan < a)
            longyuan = 0;
        else
        {
            longyuan -= a;
            if(ci != NULL)
            {
                DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
        }
        SYSMSG_SENDV(158, this, a);
        SYSMSG_SENDV(1058, this, a);
        SetVar(VAR_FAIRYPET_LONGYUAN, longyuan);

        return longyuan;
    }

    UInt32 Player::getFengsui( UInt32 c, IncommingInfo* ii)
    {
        UInt32 fengsui = GetVar(VAR_FAIRYPET_FENGSUI);
		if(c == 0)
			return fengsui;
		fengsui += c;
		SYSMSG_SENDV(160, this, c);
		SYSMSG_SENDV(1060, this, c);
        SetVar(VAR_FAIRYPET_FENGSUI, fengsui);

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

        return fengsui;
	}

	UInt32 Player::useFengsui( UInt32 a, ConsumeInfo * ci )
	{
        UInt32 fengsui = GetVar(VAR_FAIRYPET_FENGSUI);
        if(a == 0 || fengsui == 0)
            return fengsui;
        if(fengsui < a)
            fengsui = 0;
        else
        {
            fengsui -= a;
            if(ci != NULL)
            {
                DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
        }
        SYSMSG_SENDV(157, this, a);
        SYSMSG_SENDV(1057, this, a);
        SetVar(VAR_FAIRYPET_FENGSUI, fengsui);

        return fengsui;
    }

    UInt32 Player::getShouHun( UInt32 c, IncommingInfo* ii)
    {
        UInt32 shouhun = GetVar(VAR_FAIRYPET_SHOUHUN);
		if(c == 0)
			return shouhun;
		shouhun += c;
		SYSMSG_SENDV(4949, this, c);
		SYSMSG_SENDV(4946, this, c);
        SetVar(VAR_FAIRYPET_SHOUHUN, shouhun);

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

        return shouhun;
	}

	/*UInt32 Player::useShouHun( UInt32 a, ConsumeInfo * ci )
	{
        UInt32 shouhun = GetVar(VAR_FAIRYPET_SHOUHUN);
        if(a == 0 || shouhun == 0)
            return shouhun;
        if(shouhun < a)
            shouhun = 0;
        else
        {
            shouhun -= a;
            if(ci != NULL)
            {
                DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
        }
        SYSMSG_SENDV(4947, this, a);
        SYSMSG_SENDV(4948, this, a);
        SetVar(VAR_FAIRYPET_SHOUHUN, shouhun);

        return shouhun;
    }*/

    void Player::getXianpoLua(UInt32 c)
    {
        IncommingInfo ii(XianpoFromUseItem, 0, 0);
        getXianpo(c, &ii);

        const UInt8 type = 3;
        Stream st(REP::FAIRY_PET);
        st << static_cast<UInt8>(0x08) << type << getXianpo() << Stream::eos;
        send(st);
    }

    UInt32 Player::getXianpo(UInt32 c, IncommingInfo* ii)
    {
        UInt32 xianpo = GetVar(VAR_SEVEN_SOUL_NUM);
		if(c == 0)
			return xianpo;
		xianpo += c;
		SYSMSG_SENDV(191, this, c);
		SYSMSG_SENDV(1067, this, c);
        SetVar(VAR_SEVEN_SOUL_NUM, xianpo);

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

        return xianpo;
	}

	UInt32 Player::useXianpo(UInt32 a, ConsumeInfo* ci)
	{
        UInt32 xianpo = GetVar(VAR_SEVEN_SOUL_NUM);
        if(a == 0 || xianpo == 0)
            return xianpo;
        if(xianpo < a)
            xianpo = 0;
        else
        {
            xianpo -= a;
            if(ci != NULL)
            {
                DBLOG1().PushUpdateData("insert into consume_pet (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
        }
        SYSMSG_SENDV(192, this, a);
        SYSMSG_SENDV(1068, this, a);
        SetVar(VAR_SEVEN_SOUL_NUM, xianpo);

        return xianpo;
    }

    void Player::getXuanTianNingLuLua(UInt32 c)
    {
        IncommingInfo ii(XTYLFromUseItem, 0, 0);
        getXuanTianNingLu(c, &ii);

        Stream st(REP::SKILLSTRENGTHEN);
        st << static_cast<UInt8>(13);
        st << GetVar(VAR_SKILL_GRADE_MONEY);
        st << Stream::eos;
        send(st);
    }

    UInt32 Player::getXuanTianNingLu(UInt32 c, IncommingInfo* ii)
    {
        UInt32 xtnl = GetVar(VAR_SKILL_GRADE_MONEY);
		if(c == 0)
			return xtnl;
		xtnl += c;
		SYSMSG_SENDV(195, this, c);
		SYSMSG_SENDV(1069, this, c);
        SetVar(VAR_SKILL_GRADE_MONEY, xtnl);

        if(ii && ii->incommingType != 0)
        {
            DBLOG1().PushUpdateData("insert into consume_xtnl (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ii->incommingType, ii->itemId, ii->itemNum, c, TimeUtil::Now());
        }

        return xtnl;
	}

	UInt32 Player::useXuanTianNingLu(UInt32 a, ConsumeInfo* ci)
	{
        UInt32 xtnl = GetVar(VAR_SKILL_GRADE_MONEY);
        if(a == 0 || xtnl == 0)
            return xtnl;
        if(xtnl < a)
            xtnl = 0;
        else
        {
            xtnl -= a;
            if(ci != NULL)
            {
                DBLOG1().PushUpdateData("insert into consume_xtnl (server_id,player_id,consume_type,item_id,item_num,expenditure,consume_time) values(%u,%" I64_FMT "u,%u,%u,%u,%u,%u)",
                cfg.serverLogId, getId(), ci->purchaseType, ci->itemId, ci->itemNum, a, TimeUtil::Now());
            }
        }
        SYSMSG_SENDV(196, this, a);
        SYSMSG_SENDV(1070, this, a);
        SetVar(VAR_SKILL_GRADE_MONEY, xtnl);

        return xtnl;
    }

void Player::getQQGameOnlineAward()
{
    if(!World::getQQGameOnlineAwardAct())
        return;
    if(atoi(getDomain()) != 10 && atoi(getDomain()) != 11)
    {
        sendMsgCode(0, 3504);
        return;
    }
    if(GetVar(VAR_ONLINE_AWARD) > 0)
        return;
    if(getQQGameOnlineTotalTime() < QQ_GAME_NEED_TIME)
        return;
    if (GetPackage()->GetRestPackageSize() < 4)
    {
        sendMsgCode(0, 1011);
        return;
    }
    SetVar(VAR_ONLINE_AWARD, 1);
    GetPackage()->Add(9371, 2, true, false);
    GetPackage()->Add(9600, 2, true, false);
    GetPackage()->Add(9438, 2, true, false);
    GetPackage()->Add(9338, 2, true, false);
    sendQQGameOnlineAward();
}

void Player::sendQQGameOnlineAward()
{
    if(!World::getQQGameOnlineAwardAct())
        return;
    if(atoi(getDomain())!= 10 && atoi(getDomain()) != 11)
    {
        sendMsgCode(0, 3504);
        return;
    }
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x0B);
    st << static_cast<UInt8>(GetVar(VAR_ONLINE_AWARD));
    UInt16 totalTime = getQQGameOnlineTotalTime();
    UInt16 leftTime = 0;
    if(totalTime >= QQ_GAME_NEED_TIME)
        leftTime = 0;
    else
        leftTime = QQ_GAME_NEED_TIME - totalTime;
    st << leftTime;
    st << Stream::eos;
    send(st);
}

void Player::setQQGameOnlineTotalTime()
{
    if(!World::getQQGameOnlineAwardAct())
        return;
    if(atoi(getDomain()) != 10 && atoi(getDomain()) != 11)
    {
        sendMsgCode(0, 3504);
        return;
    }
    SetVar(VAR_ONLINE_TOTAL_TIME, getQQGameOnlineTotalTime());
}

UInt32 Player::getQQGameOnlineTotalTime()
{
    UInt32 now = TimeUtil::Now();
    UInt32 today = TimeUtil::SharpDayT( 0 , now);
    UInt32 lastOnline = _playerData.lastOnline; //考虑了是前几天登录的情况
    UInt32 curTime;
    if( now <= (today + QQ_GAME_START_TIME))
        curTime = 0;
    else if(now <= (today + QQ_GAME_END_TIME))
    {
        if(lastOnline <= (today + QQ_GAME_START_TIME))
            curTime = now - (today + QQ_GAME_START_TIME);
        else
            curTime = now - lastOnline;
    }
    else
    {
        if(lastOnline <= (today + QQ_GAME_START_TIME))
            curTime = QQ_GAME_NEED_TIME;
        else
            curTime = (today + QQ_GAME_END_TIME) > lastOnline ? ((today + QQ_GAME_END_TIME) - lastOnline) : 0;
    }
    return GetVar(VAR_ONLINE_TOTAL_TIME) + curTime;
}
void Player::sendRP7TreasureInfo(bool isLogin)
{
    if(cfg.rpServer != e_rp_xinyun)
        return;

    bool isFinish = false;
    UInt8 totalGot = 0;
    UInt32 b = GVAR.GetVar(GVAR_TREASURE_BEGIN);
    UInt32 n = GVAR.GetVar(GVAR_TREASURE_END);
    if (b ==0)
    {
        b = World::getOpenTime();
        n = b+7*86400-1;
    }
    Stream st(REP::RP_SERVER);
    st << static_cast<UInt8>(0x02) <<static_cast<UInt8>(0x01);
    st << b << n;
    UInt8 v = GetVar(VAR_RP7_TREASURE);
    UInt8 c = 0;
    st << v;
    for (UInt8 i = 0; i < 6; i++)
    {
        if (v&(1<<i))
        {
            UInt32 tm = GetVar(VAR_RP7_TREASURE1_GETTIME+c);
            UInt8 count =10-(GetVar(VAR_RP7_TREASURE)>>(c*8+8));
            UInt8 got = (GetVar(VAR_RP7_TREASURE_TODAY_GOT)&(1<<c))?1:0;
            c++;
            st << i << tm << count <<got;
            totalGot += 10-count;
        }
    }
    st << Stream::eos;
    if (isLogin)
    {
        if (c >0 && totalGot==c*10)
            isFinish = true;
        if (cfg.rpServer)
        {
            UInt32 opTime = TimeUtil::MkTime(cfg.openYear, cfg.openMonth, cfg.openDay);
            if(TimeUtil::SharpDay(0) >= opTime + 7 * 86400  && c == 0)
                isFinish = true;
        }
        else
        {
            UInt32 now = TimeUtil::Now();
            if (c == 0 && (now < b || now > n))
                isFinish = true;
        }
    }
    if (!isFinish)
       send(st);
}

void Player::buyRP7Treasure(UInt8 idx)
{
    static UInt32 s_gold[] = {1000,10000,30000,50000,80000,120000};
    static UInt32 s_rpgold[] = {100,500,1000,2000,5000,10000};
    if (idx > 5)
        return;
 
    UInt8 res = 0;
    UInt32 opTime = TimeUtil::MkTime(cfg.openYear, cfg.openMonth, cfg.openDay);
    if((TimeUtil::SharpDay(0) >= opTime + 7 * 86400 && cfg.rpServer) ||
       ((TimeUtil::Now()<GVAR.GetVar(GVAR_TREASURE_BEGIN) || TimeUtil::Now()>GVAR.GetVar(GVAR_TREASURE_END)) && !cfg.rpServer)
      )
        res = 4;
    UInt8 v = GetVar(VAR_RP7_TREASURE); 
    if (v&(1<<idx))
    {
        res = 1;
    }
    else if (res == 0)
    {
        UInt8 c = 0;
        UInt32 var = VAR_RP7_TREASURE1_GETTIME;
        for (UInt8 i = 0; i < 6; i++)
        {
            if (v&(1<<i)) 
            {
                c++;
                if (idx > i)
                    var += 1;
            }
        }
        if ( c >= 3)
        {
            res = 2;
        }
        else
        {
            if(!hasChecked())
                return;
            UInt32 gold = s_gold[idx];
            if (cfg.rpServer)
                gold = s_rpgold[idx];
 
     		if (getGold() < gold)
            {
                res = 3;
                sendMsgCode(0,1104);
                return;
            }
            else
            {
            	//ConsumeInfo ci(RP7Treasure,0,0);
        	    //useGold(gold,&ci);
            	ConsumeInfo ci(UNKNOWN,0,0);
                useGold(gold, &ci);
                v |= (1<<idx);
                SetVar(VAR_RP7_TREASURE, v);

                UInt32 tm = TimeUtil::SharpDay(0)+10*86400;
                //需要重新排列3个var的数值
                if (var == VAR_RP7_TREASURE1_GETTIME)
                {
                    SetVar(VAR_RP7_TREASURE1_GETTIME+2, GetVar(VAR_RP7_TREASURE1_GETTIME+1)); 
                    SetVar(VAR_RP7_TREASURE1_GETTIME+1, GetVar(VAR_RP7_TREASURE1_GETTIME));
                }
                else if ( var == (VAR_RP7_TREASURE1_GETTIME+1))
                {
                    SetVar(VAR_RP7_TREASURE1_GETTIME+2, GetVar(VAR_RP7_TREASURE1_GETTIME+1));
                }
                SetVar(var,tm);  
                udpLog("huodong", "F_10000_0417_1", "", "", "", "", "act", gold);
            }
        }
    }
    Stream st(REP::RP_SERVER);
    st << static_cast<UInt8>(0x02) << static_cast<UInt8>(0x02) << res;
    st << Stream::eos;
    send(st);
    if (res == 0)
        sendRP7TreasureInfo();
}

void Player::getRP7TreasureAward(UInt8 idx)
{
    static UInt32 s_gold[] = {1000,10000,30000,50000,80000,120000};
    static UInt32 s_rpgold[] = {100,500,1000,2000,5000,10000};
    static MailPackage::MailItem s_item[][8] = {
        {{0xB000,100},{57,1},{56,1},{29,10},{15,1},{48,1}},
        {{0xB000,1000},{0xA000,20},{509,1},{507,1},{516,1},{547,1}},
        {{0xB000,3000},{0xA000,50},{503,1},{47,1},{500,1},{501,1}},
        {{0xB000,5000},{0xA000,80},{509,2},{503,2},{515,2},{507,2}},
        {{0xB000,8000},{0xA000,100},{1325,3},{134,3},{509,3},{507,3}},
        {{0xB000,12000},{0xA000,150},{1325,5},{134,5},{509,5},{507,5}},
    };
    static MailPackage::MailItem s_rpitem[][8] = {
        {{0xB000,10},{508,1},{506,1},{15,1},{51,1}},
        {{0xB000,50},{0xA000,5},{57,1},{56,1},{29,10},{15,1}},
        {{0xB000,100},{0xA000,10},{508,1},{506,1},{516,1},{29,10}},
        {{0xB000,200},{0xA000,20},{503,1},{48,1},{500,1},{501,1}},
        {{0xB000,500},{0xA000,30},{503,1},{515,1},{49,1},{50,1}},
        {{0xB000,1000},{0xA000,50},{1325,2},{134,2},{509,2},{507,2}},
    };
    if (idx > 5)
        return;
 
    UInt8 res = 0;
    UInt8 v = GetVar(VAR_RP7_TREASURE); 
    if (v&(1<<idx))
    {
        UInt8 c = 0;
        for (UInt8 i = 0; i < 6; i++)
        {
            if (v&(1<<i)) 
                c++;
            if (idx == i)
                break;
        }
        UInt8 count = GetVar(VAR_RP7_TREASURE)>>(c*8);
        if (count >= 10)
            res = 2;
        else if (GetVar(VAR_RP7_TREASURE_TODAY_GOT)&(1<<(c-1)))
            res = 1;
        else if (TimeUtil::Now() < GetVar(VAR_RP7_TREASURE1_GETTIME+c-1))
            res = 3;
        else
        {
            UInt32 gold = s_gold[idx];
            MailPackage::MailItem* pItem = s_item[idx];
            if (cfg.rpServer)
            {
                pItem = s_rpitem[idx];
                gold = s_rpgold[idx];
            }
            MailItemsInfo itemsInfo(pItem, TreasureAct, 6);
            SYSMSG(title,4912);
            SYSMSGV(content,4913,gold,count+1);
			Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000,true, &itemsInfo);
            if (mail)
            {
                UInt8 t = GetVar(VAR_RP7_TREASURE_TODAY_GOT);
                SetVar(VAR_RP7_TREASURE_TODAY_GOT, t|=(1<<(c-1)));
                count++;
                UInt32 v1 = GetVar(VAR_RP7_TREASURE);
                v1 &= ~(0xFF<<(c*8));
                v1 += (count<<(c*8));
                SetVar(VAR_RP7_TREASURE, v1);

               mailPackageManager.push(mail->id, pItem, 8, true);
            }
            udpLog("huodong", "F_10000_0417_2", "", "", "", "", "act", gold/10);
        }
    }
    Stream st(REP::RP_SERVER);
    st << static_cast<UInt8>(0x02) << static_cast<UInt8>(0x03) << res;
    st << Stream::eos;
    send(st);
    sendRP7TreasureInfo();
}

void Player::sendRP7SignInfo()
{
    if(cfg.rpServer != e_rp_xinyun)
        return;
 
    UInt32 now_sharp = TimeUtil::SharpDay(0);
    UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
    if (now_sharp < created_sharp)
        return;
    UInt8 day = (now_sharp-created_sharp)/86400 + 1;
    if (day > 30)
        return;
    UInt32 v = GetVar(VAR_RP7_SIGN);
    UInt8 p = GetVar(VAR_RP7_SIGN_PACKAGE); 
    Stream st(REP::RP_SERVER);
    st << static_cast<UInt8>(0x03) << static_cast<UInt8>(0x01);
    st << day << v << p;
    st << Stream::eos;
    send(st);
}
void Player::RP7Sign(UInt8 idx)
{
    static UInt32 s_item[][3] = {
        {15,56,57},
        {15,51,48},
        {500,512},
        {48,50,466}
    };
    if (!cfg.rpServer)
        return;
 
    UInt32 now_sharp = TimeUtil::SharpDay(0);
    UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
    if (now_sharp < created_sharp)
        return;
    UInt8 day = (now_sharp-created_sharp)/86400 + 1;
    if (day > 30 || idx > day)
        return;
    UInt32 v = GetVar(VAR_RP7_SIGN); 
    if (v&(1<<(idx-1)))
        return;
    if (GetPackage()->GetRestPackageSize() < 3)
    {
        sendMsgCode(0, 1011);
        return;
    }
    if (idx < day)
    {
        if(!hasChecked())
            return;
 
        if (getGold() < 10)
        {
            sendMsgCode(0, 1104);
            return;
        }
       	ConsumeInfo ci(RP7Treasure,0,0);
        useGold(10,&ci);
    }
    UInt8 i = 0;
    if (idx >= 4 && idx <=7)
        i = 1;
    else if (idx >= 8 && idx <= 15)
        i = 2;
    else if (idx > 15) 
    {
        getCoupon(10);
        i = 3;
    }
    for (UInt8 j = 0; j < sizeof(s_item[i])/sizeof(s_item[i][0]); ++j)
        GetPackage()->Add(s_item[i][j], 1, true);
    v |= (1<<(idx-1));
    SetVar(VAR_RP7_SIGN, v);
    sendRP7SignInfo();
    
}
void Player::getRP7SignPackage(UInt8 idx)
{
    static UInt8 s_needDays[] = {3,7,15,28};
    if(idx > 3)
        return;
    if (!cfg.rpServer)
        return;
 
    UInt8 v = GetVar(VAR_RP7_SIGN_PACKAGE); 
    if (v&(1<<(idx)))
        return;
    if (GetPackage()->GetRestPackageSize() < 3)
    {
        sendMsgCode(0, 1011);
        return;
    }
    UInt32 s = GetVar(VAR_RP7_SIGN);
    UInt8 count = 0;
    for (UInt8 i = 0; i < 32; ++i)
    {
        if (s&(1<<i))
            count++;
    }
    if (count < s_needDays[idx])
        return;

    if (0 == idx)
        GetPackage()->Add(15, 5, true);   
    else if (1 == idx)
        GetPackage()->Add(516, 5, true); 
    else if (2 == idx)
    {
        GetPackage()->Add(1646, 1, true); 
    }
    else if (3 == idx)
        GetPackage()->Add(1700, 1, true);
    v |= 1<<(idx);
    SetVar(VAR_RP7_SIGN_PACKAGE, v);
    sendRP7SignInfo();
}

bool Player::inVipPrivilegeTime()
{
    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
    UInt32 now = TimeUtil::Now();
    bool ret = true;
    if(validate <= now)
    {
//        SetVar(VAR_VIP_PRIVILEGE_DATA_TYPE, 0);
        SetVar(VAR_VIP_PRIVILEGE_BREAK_LAST, 0);
        ret = false;
    }

    return ret;
}

bool Player::SetVipPrivilege()
{
    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
    bool ret = false;
    if(validate == 0)
    {
        UInt32 now = TimeUtil::Now();
        UInt32 validate = now + 7*86400;
        // 保持最低位为0
        if(validate & 0x1)
            validate = validate + 1;
        // 保持第2位为1, 
        // validate&0x2 为false表示限时vip为2天
        // validate&0x2 为true表示限时vip为7天
        validate |= 0x2;
        SetVar(VAR_VIP_PRIVILEGE_TIME, validate);
        ret = true;
    }

    return ret;
}

bool Player::SetVipPrivilege_1()
{
    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME); 
    bool ret = false;
    if(validate == 0)
    {
        UInt32 now = TimeUtil::Now();
        UInt32 validate = now + 2*86400;
        // 保持最低位为0
        if(validate & 0x1)
            validate = validate + 1;
        // 保持第2位为0, 
        // validate&0x2 为false表示限时vip为2天
        // validate&0x2 为true表示限时vip为7天
        if(validate & 0x2)
            validate = validate + 0x2;
        SetVar(VAR_VIP_PRIVILEGE_TIME, validate);
        ret = true;
        ConsumeInfo ci(VipPrivilege, 0, 0);
        useGold(30, &ci);
    }

    return ret;
}

bool Player::SetNewRcVip_1()
{
    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
    if(!in7DayFromCreated()) 
        return false;
    UInt32 now = TimeUtil::Now();
    bool ret = false;
    UInt32 vipCharge;
    UInt32 uplevel;
    UInt32 days;
    vipCharge = 30;
    uplevel = 1;
    days = 2;
    if (getGold() < vipCharge)
        return false;
    validate = now + days*86400;
    // 保持最低位为0
    if(validate & 0x1)
        validate = validate + 1;
    // 保持第2位为0, 
    // validate&0x2 为false表示限时vip为2天
    // validate&0x2 为true表示限时vip为7天
    if(validate & 0x2 )
        validate = validate + 0x2;
    SetVar(VAR_VIP_PRIVILEGE_TIME, validate);
    SetVar(VAR_VIP_PRIVILEGE_DATA_TYPE, uplevel);
    ret = true;
    ConsumeInfo ci(VipPrivilege, 0, 0);
    useGold(vipCharge, &ci);
    return ret;
}

bool Player::SetNewRcVip_2()
{
    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
    if(!in7DayFromCreated()) 
        return false;
    UInt32 now = TimeUtil::Now();
    bool ret = false;
    UInt32 vipCharge;
    UInt32 uplevel;
    UInt32 days;
     vipCharge = 200;
     uplevel = 2;
     days = 2;
    if (getGold() < vipCharge)
            return false;
        validate = now + days*86400;
        // 保持最低位为0
        if(validate & 0x1)
            validate = validate + 1;
        // 保持第2位为0, 
        // validate&0x2 为false表示限时vip为2天
        // validate&0x2 为true表示限时vip为7天
        if(validate & 0x2)
            validate = validate + 0x2;
        SetVar(VAR_VIP_PRIVILEGE_TIME, validate);
        SetVar(VAR_VIP_PRIVILEGE_DATA_TYPE, uplevel);
        ret = true;
        ConsumeInfo ci(VipPrivilege, 0, 0);
        useGold(vipCharge, &ci);


    return ret;
}
bool Player::SetVipPrivilege_2()
{
    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
    bool ret = false;
    UInt32 charge = 70;
    UInt32 type =GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE); 
    if(type == 2)
        charge = 450;
    if (getGold() < charge)
        return false;
    if(validate > 0 && (0 == (validate & 0x2)))
    {
        UInt32 now = TimeUtil::Now();
        if(validate > now)
            validate += 5*86400;
        else
        {
            if( TimeUtil::SharpDayT(0,now) > TimeUtil::SharpDayT(0,validate) )
                  SetVar(VAR_VIP_PRIVILEGE_BREAK_LAST,1);
            validate = now + 5*86400;
        }
        // 保持最低位为0
        if(validate & 0x1)
            validate = validate + 1;
        // 保持第2位为1, 
        // validate&0x2 为false表示限时vip为2天
        // validate&0x2 为true表示限时vip为7天
        validate |= 0x2;
        SetVar(VAR_VIP_PRIVILEGE_TIME, validate);
        SetVar(VAR_VIP_PRIVILEGE_DATA_TYPE, type+2);
        ret = true;
        ConsumeInfo ci(VipPrivilege, 0, 0);
        useGold(charge, &ci);
    }

    return ret;
}

bool Player::AddNewRcVip()
{
    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
    bool ret = false;
    UInt32 vipCharge;
    UInt32 uplevel;
    UInt32 vipType =GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE); 
    if(vipType == 6)
    {
        vipCharge = 1000;
        uplevel = 6;
        validate |= 0x2;
    }
    else if(vipType == 5)
    {
        vipCharge = 200;  
        uplevel = 5;
        validate |= 0x2;
    }
    else  if(vipType == 3 )
    {
        vipCharge = 150;
        uplevel = 5;
        validate |= 0x2;
    }
    else if(vipType == 4)
    {
        vipCharge = 700;
        uplevel = 6;
        validate |= 0x2;
    }
    else return false;
        if (getGold() < vipCharge )
            return false;
    if(validate > 0 )
    {
        UInt32 now = TimeUtil::Now();
        if(validate > now)
            validate += 7*86400;
        else
            validate = now + 7*86400;

        // 保持最低位为0
        if(validate & 0x1)
            validate = validate + 1;
        // 保持第2位为1, 
        // validate&0x2 为false表示限时vip为2天
        // validate&0x2 为true表示限时vip为7天
        validate |= 0x2;
        SetVar(VAR_VIP_PRIVILEGE_TIME, validate);
        SetVar(VAR_VIP_PRIVILEGE_DATA_TYPE, uplevel);
        SetVar(VAR_VIP_PRIVILEGE_BREAK_LAST, 0);
        ret = true;
        ConsumeInfo ci(VipPrivilege, 0, 0);
        useGold(vipCharge, &ci);
    }

    return ret;
}
#define VIP_PRIVILEGE_DAYLYAWARD(data) (0x01&data)
#define VIP_PRIVILEGE_LIMITBUY1(data)  (0x02&data)
#define VIP_PRIVILEGE_LIMITBUY2(data)  (0x04&data)
#define VIP_PRIVILEGE_LIMITBUY3(data)  (0x08&data)
#define VIP_PRIVILEGE_TIMEOUT(data)  (0x1&data)
#define VIP_PRIVILEGE_7DAY(data)  (0x2&data)

#define SET_VIP_PRIVILEGE_DAYLYAWARD(data, v) (data|=(v&0x01))
#define SET_VIP_PRIVILEGE_LIMITBUY1(data, v)  (data|=((v<<1)&0x02))
#define SET_VIP_PRIVILEGE_LIMITBUY2(data, v)  (data|=((v<<2)&0x04))
#define SET_VIP_PRIVILEGE_LIMITBUY3(data, v)  (data|=((v<<3)&0x08))
#define SET_VIP_PRIVILEGE_OPEN(data, v)       (data|=((v<<4)&0x10))
#define SET_VIP_PRIVILEGE_DAYTH(data, v)      (data|=((v<<5)&0xE0))
#define SET_VIP_PRIVILEGE_TIMEOUT(data, v)    (data|=((v)&0x1))

void Player::doVipPrivilege(UInt8 idx)
{
    UInt32 data = GetVar(VAR_VIP_PRIVILEGE_DATA);
    switch(idx)
    {
    case 1:
        if(VIP_PRIVILEGE_DAYLYAWARD(data))
            return;
        SET_VIP_PRIVILEGE_DAYLYAWARD(data, 1);
        break;
    case 2:
        if(VIP_PRIVILEGE_LIMITBUY1(data))
            return;
        SET_VIP_PRIVILEGE_LIMITBUY1(data, 1);
        break;
    case 3:
        if(VIP_PRIVILEGE_LIMITBUY2(data))
            return;
        SET_VIP_PRIVILEGE_LIMITBUY2(data, 1);
        break;
    case 4:
        if(VIP_PRIVILEGE_LIMITBUY3(data))
            return;
        SET_VIP_PRIVILEGE_LIMITBUY3(data, 1);
        break;
    case 5:
        if(!in7DayFromCreated())
            return;
        if (getGold() < 30)
            return;
        SetVipPrivilege_1();
           // SetNewRcVip_1();
       // SetNewRcVip_2();
        break;
    case 6:
        if(!in7DayFromCreated())
            return;
        SetVipPrivilege_2();
        break;
    case 8:
        if(!in7DayFromCreated())
            return;
        if (getGold() < 30)
            return;
        SetNewRcVip_1();
        break;
    case 9:
        if(!in7DayFromCreated())
            return;
        if (getGold() < 200)
            return;
        SetNewRcVip_2();
        break;
    case 10:
        AddNewRcVip();
        break;
    }

    if(idx > 0 && idx < 5)     
    {
        if(inVipPrivilegeTime())
        {
            UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
            UInt32 now = TimeUtil::Now();
            UInt8 dayth = 0;
            UInt32 VipType = GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
            if(VIP_PRIVILEGE_7DAY(validate))
                dayth =7 -((TimeUtil::SharpDayT(0,validate)-TimeUtil::SharpDayT(0,now) )/86400 +6 )%7;
            else
                dayth = (TimeUtil::SharpDayT(0, now) + 2*86400 - TimeUtil::SharpDayT(0, validate))/86400 + 1;
            //    dayth = (TimeUtil::SharpDayT(0, now) + 7*86400 - TimeUtil::SharpDayT(0, validate))/86400 + 1;
            if(TimeUtil::SharpDayT(0,validate) ==  TimeUtil::SharpDayT(0,now) &&(VipType == 3 ||VipType == 4) )
                dayth =8 ;
        UInt32 breakLast = GetVar(VAR_VIP_PRIVILEGE_BREAK_LAST);
        if(breakLast == 1)
            dayth +=1;
      //  std::cout<<"AwardDayth dayth:"<<dayth<<std::endl;
        if(!GameAction()->RunVipPrivilegeAward(this, idx, dayth))
            return;
        SetVar(VAR_VIP_PRIVILEGE_DATA, data);
        }
        else
        {
            return;
        }
    }
    sendVipPrivilege();
}

void Player::sendDirectPurInfo()
{
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x42) << static_cast<UInt8>(GetVar(VAR_DIRECTPUROPEN)) << static_cast<UInt8>(GetVar(VAR_DIRECTPURCNT)) << _playerData.totalRecharge << static_cast<UInt8>(GetVar(VAR_DIRECTPURCNT2));
    st << Stream::eos;
    send(st);
}

void Player::sendVipPrivilegeMail(UInt8 lv)
{
    if(lv != 32 || !in7DayFromCreated())
        return;

    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
    if(validate == 0)
    {
        SYSMSG(title, 4914);
        SYSMSGV(content, 4915, lv);
        GetMailBox()->newMail(NULL, 0x12, title, content);
    }
}

void Player::sendVipPrivilege(bool isLStar)
{
    UInt32 validate = GetVar(VAR_VIP_PRIVILEGE_TIME);
    UInt32 data = GetVar(VAR_VIP_PRIVILEGE_DATA);
    UInt32 now = TimeUtil::Now();
    UInt8 dayth = 0;
    UInt32 timeLeft = 0;
    UInt8 extra = 0;
    UInt32 dayth_0;
    if(validate > now)
    {
        timeLeft = validate - now;
        UInt32 VipType = GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
        if(VIP_PRIVILEGE_7DAY(validate))
            dayth =7 -( (TimeUtil::SharpDayT(0,validate)-TimeUtil::SharpDayT(0,now) )/86400 +6 )%7;
        else
            dayth = (TimeUtil::SharpDayT(0, now) + 2*86400 - TimeUtil::SharpDayT(0, validate))/86400 + 1;
            //dayth = (TimeUtil::SharpDayT(0, now) + 7*86400 - TimeUtil::SharpDayT(0, validate))/86400;
        if(TimeUtil::SharpDayT(0,validate) ==  TimeUtil::SharpDayT(0,now) &&(VipType == 3 ||VipType == 4) )
            dayth =8 ;
    }
    UInt32 breakLast = GetVar(VAR_VIP_PRIVILEGE_BREAK_LAST);
    if(breakLast == 1)
        dayth +=1;
    dayth_0 = static_cast<UInt32>(dayth) ;
    if(validate != 0)
    {
        SET_VIP_PRIVILEGE_OPEN(data, 1);
        if(timeLeft == 0 && VIP_PRIVILEGE_TIMEOUT(validate) == 0)
        {
            extra = 0x1;
            SET_VIP_PRIVILEGE_TIMEOUT(validate, 1);
            SetVar(VAR_VIP_PRIVILEGE_TIME, validate);
        }

        if(VIP_PRIVILEGE_7DAY(validate))
            extra |= 0x2;
    }
    else
    {
        SET_VIP_PRIVILEGE_OPEN(data, 0);
    }

    if(isLStar)
        extra |= 0x4;
    UInt32 VipType = GetVar(VAR_VIP_PRIVILEGE_DATA_TYPE);
    if(inVipPrivilegeTime()&&VipType == 0)
    {
        VipType =1;
        if(VIP_PRIVILEGE_7DAY(validate))
            VipType =3;
        SetVar(VAR_VIP_PRIVILEGE_DATA_TYPE, VipType);
    }
    UInt32  Days = (VipType+1)/2;
    if( in7DayFromCreated() && VipType >4 ) 
        VipType -= 2 ;
    UInt32 SevenOrTen;
    if(VipType==0 )
        SevenOrTen =0;
    else if(VipType%2==0)
        SevenOrTen =2;
    else SevenOrTen =1;
    SET_VIP_PRIVILEGE_DAYTH(data, dayth);
    Stream st(REP::RC7DAY);
    st << static_cast<UInt8>(10) << timeLeft << static_cast<UInt8>(data) << extra;
    st<<static_cast<UInt8>(SevenOrTen)<<static_cast<UInt8>( (VipType+1)/2 )<<static_cast<UInt8>(Days);
    st <<dayth<<Stream::eos;
   // std::cout<<"PlayerID::"<<getId()<<"  "<<"break :"<<breakLast<<" "<<"VIPLEVEL:"<<VipType<<std::endl;
   // std::cout<<timeLeft<<" "<<data<<"  "<<extra<<" SevenOrTen:"<<SevenOrTen<<"  Days"<<Days<<std::endl;
   // std::cout<<"S->C dayth:"<<dayth_0<<std::endl;
    send(st);
}

bool Player::in7DayFromCreated()
{
    UInt32 now = TimeUtil::Now();
    UInt32 now_sharp = TimeUtil::SharpDay(0, now);
    UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
    if (created_sharp > now_sharp)
        return false; // 创建时间错误（穿越了）

    if (now_sharp - created_sharp > 7 * 24*60*60)
        return false; // 玩家注册时间超过7日，无法参与活动

    UInt32 off = CREATE_OFFSET(created_sharp, now_sharp);
    if (off >= 7)
        return false; // 玩家注册时间超过7日，无法参与活动

    return true;
}

#define QUESTIONID_MAX 30
/*#define SET_BIT(X,Y)     (X | (1<<Y))
#define GET_BIT(X,Y)     (X & (1<<Y))
#define CLR_BIT(X,Y)     (X & ~(1<<Y))
#define CLR_BIT_8(X,Y)   (X & ~(0xFF<<(Y*8)))
#define SET_BIT_8(X,Y,V) (CLR_BIT_8(X,Y) | V<<(Y*8))
#define GET_BIT_8(X,Y)   ((X >> (Y*8)) & 0xFF)
#define CLR_BIT_3(X,Y)   (X & ~(0x07<<(Y*3)))
#define SET_BIT_3(X,Y,V) (CLR_BIT_3(X,Y) | V<<(Y*3))
#define GET_BIT_3(X,Y)   ((X >> (Y*3)) & 0x07)
*/
void Player::sendFoolsDayInfo(UInt8 answer)
{
    UInt32 info = GetVar(VAR_FOOLS_DAY_INFO);
    UInt32 value = GetVar(VAR_FOOLS_DAY);
    UInt32 qtime = GetVar(VAR_FOOLS_DAY_TIME);
    UInt8 qid = GET_BIT_8(value, 0);
    UInt8 right = 0;
    bool isFail = false;
    if((info & (1<<0)) == 1)
        isFail = true;
    if((info & (1<<0)) == 0 && qid)
    {
        if(!GET_BIT_8(value, 3))
        {
            if (qtime + 15 < TimeUtil::Now())
                isFail = true;
        }
        else    //有离线标志
        {
            qtime = TimeUtil::Now();
            SetVar(VAR_FOOLS_DAY_TIME, qtime);
        }
    }
    for(UInt8 i = 1; i <= QUESTIONID_MAX; ++ i)
    {
        if(info & (1<<i))
            ++ right;
    }
    if(!isFail && qid == 0 && right < QUESTIONID_MAX && GET_BIT_8(value, 1) < QUESTIONID_MAX)
    {   //分配新题目
        UInt8 index = uRand(QUESTIONID_MAX-right);
        UInt8 j = 0;
        for(UInt8 i = 1; i <= QUESTIONID_MAX; ++ i)
        {
            if((info & (1<<i)) == 0)
            {
                if(j == index)
                {
                    qid = i;
                    break;
                }
                ++ j;
            }
        }
        SetVar(VAR_FOOLS_DAY, SET_BIT_8(value, 0, qid));
        qtime = TimeUtil::Now();
        SetVar(VAR_FOOLS_DAY_TIME, qtime);
        if(right == 0)
        {
            if (GetLev() < 70)
                SetVar(VAR_FOOLS_DAY_INFO, SET_BIT(info, 31));
            if (GetLev() >= 45)
                foolsDayUdpLog(7);
        }
    }
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x10) << static_cast<UInt8>(0x01);
    st << right << static_cast<UInt8>(GET_BIT_8(value, 1));
    st << static_cast<UInt8>(GET_BIT_8(value, 2));
    st << static_cast<UInt8>(isFail ? 1 : 0) << qid << qtime;
    st << answer << static_cast<UInt8>(GET_BIT(info, 31));
    st << Stream::eos;
    send(st);
}

void Player::submitAnswerInFoolsDay(UInt8 id, char answer)
{
    UInt32 info = GetVar(VAR_FOOLS_DAY_INFO);
    UInt32 value = GetVar(VAR_FOOLS_DAY);
    if(!id || GET_BIT_8(value, 1) >= QUESTIONID_MAX)
        return;
    UInt32 qtime = GetVar(VAR_FOOLS_DAY_TIME);
    if(info == 0 && value == 0 && qtime == 0)
    {   //零点重置
        sendFoolsDayInfo();
        return;
    }
    UInt8 qid = GET_BIT_8(value, 0);
    bool isRight = true;
    if((info & 0x01) == 1)
        isRight = false;
    if(id != qid || qtime + 15 < TimeUtil::Now())
        isRight = false;
    if(isRight)
    {
        UInt8 ans = GameAction()->getAnswerInFoolsDay(id, GET_BIT(info, 31));
        isRight = ans == answer;
    }
    value = CLR_BIT_8(value, 3);    //清除离线标志
    if(isRight) //答对
    {
        SetVar(VAR_FOOLS_DAY, CLR_BIT_8(value, 0));
        info = SET_BIT(info, id);
        SetVar(VAR_FOOLS_DAY_INFO, CLR_BIT(info, 0));
        SYSMSG_SENDV(4148, this);
    }
    else        //答错
    {
        SetVar(VAR_FOOLS_DAY, SET_BIT_8(value, 0, id));
        SetVar(VAR_FOOLS_DAY_INFO, SET_BIT(info, 0));
        if(qtime + 15 < TimeUtil::Now())
        {
            SYSMSG_SENDV(4150, this);
        }
        else
        {
            SYSMSG_SENDV(4149, this);
        }
    }
    sendFoolsDayInfo();
}

void Player::getAwardInFoolsDay()
{
    UInt32 value = GetVar(VAR_FOOLS_DAY);
    UInt8 award = GET_BIT_8(value, 1);
    if(award >= QUESTIONID_MAX)
        return;
    UInt8 right = 0;
    UInt32 info = GetVar(VAR_FOOLS_DAY_INFO);
    for(UInt8 i = 1; i <= QUESTIONID_MAX; ++ i)
    {
        if(info & (1<<i))
            ++ right;
    }
    if(right < 5 || right/5 <= award/5)
        return;
    if (GetPackage()->GetRestPackageSize() < right/5 - award/5)
    {
        sendMsgCode(2, 1011, 0);
        return;
    }
    GameAction()->getAwardInFoolsDay(this, GET_BIT_8(value, 1)/5 + 1, right / 5);
    SetVar(VAR_FOOLS_DAY, SET_BIT_8(value, 1, right/5 * 5));
    sendFoolsDayInfo();
    foolsDayUdpLog(right / 5);
}

void Player::buyResurrectionCard()
{
    if(!hasChecked())
        return;
    UInt32 value = GetVar(VAR_FOOLS_DAY);
    if(GET_BIT_8(value, 1) >= QUESTIONID_MAX)
        return;
    UInt8 qid = GET_BIT_8(value, 0);
    if(qid == 0)
        return;
    UInt8 cnt = GET_BIT_8(value, 2) + 1;
    cnt = cnt > 6 ? 6 : cnt;
    if(cnt > 1)
    {
        if((static_cast<UInt32>(cnt) - 1) * 10 > getGold())
        {
            sendMsgCode(0, 1104);
            return;
        }
        ConsumeInfo ci(FoolsDayAnswerAct, 0, 0);
        useGold((cnt - 1)*10, &ci);
    }

    UInt32 info = GetVar(VAR_FOOLS_DAY_INFO);
    //info = SET_BIT(info, GET_BIT_8(value, 0));
    SetVar(VAR_FOOLS_DAY_INFO, CLR_BIT(info, 0));
    value = SET_BIT_8(value, 2, cnt);
    //value = CLR_BIT_8(value, 3);    //清除离线标志
    //SetVar(VAR_FOOLS_DAY, CLR_BIT_8(value, 0));
    value = SET_BIT_8(value, 3, 1);    //类似有离线标志
    SetVar(VAR_FOOLS_DAY, value);
    UInt8 answer = GameAction()->getAnswerInFoolsDay(qid, GET_BIT(info, 31));
    sendFoolsDayInfo(answer);
    if(cnt == 1)
        foolsDayUdpLog(8);
}

void Player::setLogoutInFoolsDay()
{
    if (World::getFoolsDay())
    {
        UInt32 info = GetVar(VAR_FOOLS_DAY_INFO);
        if(info == 0 || (info & (1<<0)) == 1)
            return;
        UInt32 qtime = GetVar(VAR_FOOLS_DAY_TIME);
        if(qtime == 0)
            return;
        UInt32 value = GetVar(VAR_FOOLS_DAY);
        if(qtime + 10 < TimeUtil::Now())
        {
            SetVar(VAR_FOOLS_DAY, CLR_BIT_8(value, 3));
            return;
        }
        SetVar(VAR_FOOLS_DAY, SET_BIT_8(value, 3, 1));
    }
}

void Player::checkAnswerActInFoolsDay()
{
    UInt32 info = GetVar(VAR_FOOLS_DAY_INFO);
    UInt32 value = GetVar(VAR_FOOLS_DAY);
    UInt8 type = 0, right = 0;
    UInt8 award = GET_BIT_8(value, 1);
    for(UInt8 i = 1; i <= QUESTIONID_MAX; ++ i)
    {
        if(info & (1<<i))
            ++ right;
    }
    if(award)
    {
        if(right == QUESTIONID_MAX && award == QUESTIONID_MAX)
            type = 1;
        else
            type = 2;
    }
    else
    {
        if(right == 0 && (info & (1<<0)) == 0)
            type = 3;
        else
            type = 2;
    }
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x10) << static_cast<UInt8>(0x00);
    st << type << Stream::eos;
    send(st);
}

void Player::foolsDayUdpLog(UInt8 type)
{
    // 愚公移山相关日志
    char action[16] = "";
    //snprintf (action, 16, "F_10000_0327_%d", type);
    snprintf (action, 16, "F_10000_0418_%d", type);
    udpLog("huodong", action, "", "", "", "", "act");
}

//充值幸运星活动
void Player::LuckyStarActUdpLog(UInt8 type)
{
    char action[16] = "";
    snprintf (action, 16, "F_10000_%d", type);
    udpLog("LuckStar", action, "", "", "", "", "act");
}

bool Player::getLuckyStarAct()
{
    UInt32 ltime = GetVar(VAR_LUCKYSTAR_LOGIN_TIME);
    if(ltime == 0)
        return false;
    if(!GetVar(VAR_LUCKYSTAR_IS_CONSUME))
        return false;
    ltime = TimeUtil::SharpDayT(0, ltime);
    UInt32 ntime = TimeUtil::Now();
    return ntime >= ltime && ntime <= ltime + 7*86400;
}

void Player::setLuckyStarCondition()
{
    if(!World::getLuckyStarAct())
        return;
    UInt32 now_sharp = TimeUtil::SharpDay(0);
    UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
    if (created_sharp > now_sharp || now_sharp - created_sharp < 7 * 86400)
        return;

    if(GetVar(VAR_LUCKYSTAR_LOGIN_TIME))
        return;
    if(!getTotalRecharge() && GetVar(VAR_LUCKYSTAR_IS_CONSUME))
    {
        SetVar(VAR_LUCKYSTAR_LOGIN_TIME, TimeUtil::Now());
        LuckyStarActUdpLog(1);
    }
    sendLuckyStarInfo(1);
}

void Player::sendLuckyStarInfo(UInt8 opt)
{
    if(!getLuckyStarAct())
    {
        if(opt != 1)
            sendMsgCode(0, 1090);
        return;
    }
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x12);
    switch(opt)
    {
        case 1:
            {
                UInt32 ltime = GetVar(VAR_LUCKYSTAR_LOGIN_TIME);
                if(!ltime)
                    return;
                st << static_cast<UInt8>(0x00) << ltime;
            }
            break;
        case 2:
            st << static_cast<UInt8>(0x01) << GetVar(VAR_LUCKYSTAR_RECHARGE_TOTAL);
            st << static_cast<UInt16>(GetVar(VAR_LUCKYSTAR_GET_STATUS));
            break;
        default:
            return;
    }
    st << Stream::eos;
    send(st);
}

void Player::getLuckyStarItem(UInt8 idx)
{
    if(!getLuckyStarAct() || idx >= 12)
    {
        sendMsgCode(0, 1090);
        return;
    }
    if (!hasChecked())
        return;
    UInt32 value = GetVar(VAR_LUCKYSTAR_GET_STATUS);
    if(GET_BIT(value, idx))
        return;
    if(GameAction()->getLuckyStarAward(this, idx+1))
    {
        value = SET_BIT(value, idx);
        SetVar(VAR_LUCKYSTAR_GET_STATUS, value);
        if(idx == 0)
            LuckyStarActUdpLog(2);
        if(idx == 4)
            LuckyStarActUdpLog(3);
        if(idx == 8)
            LuckyStarActUdpLog(4);
    }
    sendLuckyStarInfo(2);
}

//女娲石盘
void Player::sendNuwaInfo()
{
    UInt32 now_sharp = TimeUtil::SharpDay(1);
    UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
    if (created_sharp > now_sharp)
        return;
    UInt32 ptime = GetVar(VAR_NUWA_OPENTIME);
    ptime = ptime == 0 ? created_sharp : TimeUtil::SharpDay(1, ptime);
    if (ptime > now_sharp)
        return;
    UInt32 signet = GetVar(VAR_NUWA_SIGNET);
    UInt8 c = 0, remDay = 0;
    for(UInt8 i = 1; i <= 9; ++ i)
    {
        if(GET_BIT_3(signet, i))
            ++ c;
    }
    if(c >= 3 || c <= 0 || GET_BIT_3(signet, 0))
    {
        //不能使用World::_wday,有30秒误差
        time_t curtime = time(NULL);
        struct tm *local = localtime(&curtime);
        if(local->tm_wday == 6)
        {
            if(ptime < now_sharp)
                signet = 0;
            else
                remDay = 1;
        }
        else if(local->tm_wday == 0)
        {
            if(ptime < now_sharp)
                signet = 0;
            else
                remDay = 6;
        }
        else
        {
            remDay = 6 - local->tm_wday;
        }
        SetVar(VAR_NUWA_SIGNET, signet);
    }
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x0D) << static_cast<UInt8>(0x01);
    st << static_cast<UInt32>(signet >> 3);
    st << remDay << Stream::eos;
    send(st);
    /*
    UInt8 cnt = GET_BIT_3(signet, 0);
    UInt32 off_set = CREATE_OFFSET(created_sharp, now_sharp);
    if (off_set <= 5)
    {
        if(c >= 3 || c <= 0)
        {
            if (ptime == created_sharp && cnt == 0)
                signet = 0;
            else
                remDay = (created_sharp + 5 * DAY_SECS - now_sharp) / DAY_SECS + 1;
        }
    }
    else if(off_set >= 6 && off_set <= 30)
    {
        if(c >= 3 || c <= 0)
        {
            if(ptime < created_sharp + 6 * DAY_SECS)
                signet = 0;
            else
            {
                if(now_sharp > ptime)
                {
                    if(cnt < 2)
                        signet = cnt;
                    else
                        remDay = (created_sharp + 30 * DAY_SECS - now_sharp) / DAY_SECS + 1;
                }
                else
                {
                    if(cnt < 2)
                        remDay = 1;
                    else
                        remDay = (created_sharp + 30 * DAY_SECS - now_sharp) / DAY_SECS + 1;
                }
            }
        }
    }
    else    //创建角色第30*n+1至30*n+30天内（n>=1）
    {
        if(c >= 3 || c <= 0)
        {
            if(ptime <= created_sharp + off_set/30 * 30 * DAY_SECS)
            {
                if(off_set % 30 == 0 && ptime != created_sharp)
                {
                    if(cnt < 2 && now_sharp > ptime)
                        signet = cnt;
                    else
                        remDay = 1;
                }
                else
                    signet = 0;
            }
            else
            {
                if(now_sharp > ptime)
                {
                    if(cnt < 2)
                        signet = cnt;
                    else
                        remDay = (created_sharp + (off_set/30+1) * 30 * DAY_SECS - now_sharp) / DAY_SECS + 1;
                }
                else
                {
                    if(cnt < 2)
                        remDay = 1;
                    else
                        remDay = (created_sharp + (off_set/30+1) * 30 * DAY_SECS - now_sharp) / DAY_SECS + 1;
                }
            }
        }
    }
    */
}

void Player::setNuwaSignet(UInt8 idx)
{
    if(idx <= 0 || idx > 9)
        return;
    UInt32 signet = GetVar(VAR_NUWA_SIGNET);
    UInt8 c = 0;
    for(UInt8 i = 1; i <= 9; ++ i)
    {
        if(GET_BIT_3(signet, i))
            ++ c;
    }
    if(c >= 3 || GET_BIT_3(signet, idx))
        return;
    //不能使用World::_wday,有30秒误差
	time_t curtime = time(NULL);
	struct tm *local = localtime(&curtime);
    if(c < 3 && local->tm_wday != 6 && local->tm_wday != 0)
    {
        sendMsgCode(0, 1152);
        return;
    }
    UInt8 cnt = GET_BIT_3(signet, 0);
    if(cnt >= 1) return;
    /*
    UInt32 now_sharp = TimeUtil::SharpDay(1);
    UInt32 created_sharp = TimeUtil::SharpDay(0, getCreated());
    UInt32 off_set = CREATE_OFFSET(created_sharp, now_sharp);
    UInt32 ptime = GetVar(VAR_NUWA_OPENTIME);
    ptime = ptime == 0 ? 0 : TimeUtil::SharpDay(1, ptime);
    if(off_set < 6)
    {
        if(cnt >= 1) return;
    }
    else if (off_set >= 6 && off_set <= 30)
    {
        if(cnt >= 2) return;
        if(ptime < created_sharp + 6 * DAY_SECS)
            cnt = 0;
    }
    else if(off_set >= 31)
    {
        if(cnt >= 2) return;
        if(ptime < created_sharp + (off_set/30 * 30 +1) * DAY_SECS)
            cnt = 0;
    }
    */
    //1女娲印记1%，2轩辕印记5%，3神农印记34%，4伏羲印记60%
    UInt32 rnd = uRand(10000);
    UInt8 sign = 0;
    if(rnd < 100)
        sign = 1;
    else if(rnd < 600)
        sign = 2;
    else if(rnd < 4000)
        sign = 3;
    else
        sign = 4;
    signet = SET_BIT_3(signet, idx, sign);
    //女娲石盘开满三个印记
    if(++c >= 3)
    {
        UInt8 snt[4] = {0};
        for(UInt8 i = 1; i <= 9; ++ i)
        {
            UInt8 sign = GET_BIT_3(signet, i);
            if(sign == 1)
                ++snt[0];
            else if(sign == 2)
                ++snt[1];
            else if(sign == 3)
                ++snt[2];
            else if(sign == 4)
                ++snt[3];
        }
        UInt32 coupon = 0, opt = 0;
        if(snt[0] >= 3)                         //3个女娲印记
        {
            coupon = 3000;
            opt = 1;
        }
        else if(snt[1] >= 3)                    //3个轩辕印记
        {
            coupon = 1500;
            opt = 2;
        }
        else if(snt[0] >= 1 && snt[1] >= 1)     //1个女娲印记，1个轩辕印记+?
        {
            coupon = 1000;
            opt = 3;
        }
        else if(snt[2] >= 3)                    //3个神农印记
        {
            coupon = 500;
            opt = 4;
        }
        else if(snt[2] >= 1 && snt[3] >= 1)     //1个神农印记，1个伏羲印记+?
        {
            coupon = 300;
            opt = 5;
        }
        else if(snt[3] >= 2)                    //两个伏羲印记+?
        {
            coupon = 200;
            opt = 6;
        }
        else if(snt[1] >= 1)                    //1个轩辕印记+?
        {
            coupon = 150;
            opt = 7;
        }
        else                                    //任意3个
        {
            coupon = 100;
            opt = 8;
        }
        getCoupon(coupon);
        sendMsgCode(0, 1092, coupon);
        if(coupon >= 1000)
            SYSMSG_BROADCASTV(300, getCountry(), getName().c_str(), coupon);
        signet = SET_BIT_3(signet, 0, (cnt + 1));
        SetVar(VAR_NUWA_OPENTIME, TimeUtil::Now());
        TRACE_LOG("NUWA_SHIPAN==>>playerId:[%" I64_FMT "u],Coupon::[%u],signet:[%u]", getId(), coupon, signet);
        char str[16] = {0};
        sprintf(str, "F_10000_%d", opt);
        udpLog("NvWa", str, "", "", "", "", "act");
    }
    SetVar(VAR_NUWA_SIGNET, signet);
    sendNuwaInfo();
}

void Player::LuckyBagRank()
{
    if(World::getSurnameLegend() || World::getSurnameLegend2())
    {
        UInt32 LuckbagNum = GetVar(VAR_SURNAMELEGEND_USED);
        GameMsgHdr hdr(0x1C8, WORKER_THREAD_WORLD, this, sizeof(LuckbagNum));
        GLOBAL().PushMsg(hdr, &LuckbagNum);
    }
}
void Player::On11ClanGradeRank()
{
    if(World::get11Time())
    {
        Clan * clan =getClan();
        if(clan == NULL)
        {
            Stream st(REP::ACT);  //lib待定  帮派排名
            st << static_cast<UInt8>(0x20) << static_cast<UInt8>(3) << static_cast<UInt8>(2);
            st << static_cast<UInt32>(0) << static_cast<UInt8>(0) << Stream::eos;
            send(st);
            return ;
        }
        clan->updataClanGradeInAirBook();
        UInt32 grade = clan->getGradeInAirBook(); 
        GameMsgHdr hdr(0x1CE, WORKER_THREAD_WORLD, this, sizeof(grade));
        GLOBAL().PushMsg(hdr, &grade);
    }
}
void Player::On11CountryGradeRank()
{
    if(World::get11Time())
    {
        GameMsgHdr hdr(0x1CF, WORKER_THREAD_WORLD, this, 0 );
        GLOBAL().PushMsg(hdr, NULL);
    }
}
void Player::On11PlayerGradeRank()
{
    if(World::get11Time())
    {
        UInt32 grade = GetVar(VAR_11AIRBOOK_GRADE);
        GameMsgHdr hdr(0x1CD, WORKER_THREAD_WORLD, this, sizeof(grade));
        GLOBAL().PushMsg(hdr, &grade);
    }
}


bool spreadCompareTime(bool checkStartTime, bool checkEndTime)
{
	UInt32 now = TimeUtil::Now();
    UInt8 week = TimeUtil::GetWeekDay(now);
    if(week < SPREAD_START_WEEK || week > SPREAD_END_WEEK)
        return false;
    if(checkStartTime)
    {
        UInt32 startTime = TimeUtil::SharpDayT(0, now) + SPREAD_START_TIME;
        if(now < startTime)
            return false;
    }
    if(checkEndTime)
    {
        UInt32 endTime = TimeUtil::SharpDayT(0, now) + SPREAD_END_TIME;
        if(now > endTime)
            return false;
    }
    return true;
}

void Player::sendSpreadBasicInfo()
{
    bool bRet = spreadCompareTime(true, false);
    if(!bRet)
        return;
	Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x41);
    UInt8 type = 0;
    st << type;
    std::string name;
    UInt32 leftTime = 0;
	UInt32 now = TimeUtil::Now();
    Player *pl = World::getSpreadKeeper();
    if(pl)
    {
        name = pl->getName();
        if(World::spreadBuff > now)
            leftTime = World::spreadBuff - now;
    }
    st << fixName(name);
    st << leftTime;
    st << static_cast<UInt16>(World::getSpreadCount());
    st << static_cast<UInt8>((GetVar(VAR_SPREAD_FLAG) & 0x03));
    st << now;
    st << Stream::eos;
    send(st);
}

void Player::sendSpreadAwardInfo()
{
    bool bRet = spreadCompareTime(false, false);
    if(!bRet)
        return;
	Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x41);
    UInt8 type = 2;
    st << type;
    st << static_cast<UInt16>(GameAction()->GetSpreadCountForAward());
    lua_tinker::table award = GameAction()->GetSpreadAward();
    UInt8 size = award.size();
    st << size;
    for(UInt8 j = 0; j < size; ++j)
    {
        lua_tinker::table a = award.get<lua_tinker::table>(j + 1);
        st << a.get<UInt16>(1) << a.get<UInt16>(2);
    }
    st << Stream::eos;
    send(st);
}

inline static bool enum_spread_send2(Player* player, void* data)
{
    if(player == NULL || !player->isOnline())
        return true;
    player->sendSpreadBasicInfo();
    return true;
}

void Player::spreadToOther(UInt8 type, std::string name)
{
    bool bRet = spreadCompareTime(true, true);
    if(!bRet)
        return;
	UInt32 now = TimeUtil::Now();
    Player * pl = globalNamedPlayers[fixName(name)];
    if(!pl)
    {
        sendMsgCode(0, 1506);
        return;
    }
    if(World::spreadKeeper == pl)
    {
        sendMsgCode(0, 2211);
        return;
    }
    if(pl->GetLev() < 45)
    {
        sendMsgCode(0, 3503);
        return;
    }
    if(!pl->isOnline())
    {
        sendMsgCode(0, 2218);
        return;
    }
    if(pl->GetVar(VAR_SPREAD_FLAG) & SPREAD_ALREADY_USE)
    {
        sendMsgCode(0, 2215);
        return;
    }

    GVAR.SetVar(GVAR_SPREAD_KEEPER1, pl->getId()>>32);
    GVAR.SetVar(GVAR_SPREAD_KEEPER2, pl->getId()&0xFFFFFFFF);
    World::spreadBuff = now + SPREAD_INTERVA_TIME;

    if(type == 0)
    {
        UInt32 tmp = GetVar(VAR_SPREAD_FLAG);
        if(tmp & SPREAD_ALREADY_USE)
        {
            sendMsgCode(0, 2215);
            return;
        }
        if(pl->m_spreadCoolTime > now)
        {
            sendMsgCode(0, 2231);
            return;
        }
        SetVar(VAR_SPREAD_FLAG, tmp | SPREAD_ALREADY_USE);
        GVAR.AddVar(GVAR_SPREAD_CONDITION, 1 << 8);
        UInt32 pexp = 10000;
        GameMsgHdr hdr2(0x238, getThreadId(), this, sizeof(pexp));
        GLOBAL().PushMsg(hdr2, &pexp);
    }
    else
    {
        if(World::spreadKeeper)
        {
            sendMsgCode(0, 3501);
            World::spreadKeeper->m_spreadCoolTime = now + SPREAD_COOL_TIME;
        }
    }

    World::spreadKeeper = pl;
    UInt8 week = TimeUtil::GetWeekDay(now);
    if(week == SPREAD_START_WEEK)
        SYSMSG_BROADCASTV(4136, pl->getCountry(), pl->getName().c_str())
    else if(week == (SPREAD_END_WEEK))
        SYSMSG_BROADCASTV(4137, pl->getCountry(), pl->getName().c_str())
    else
        SYSMSG_BROADCASTV(4138, pl->getCountry(), pl->getName().c_str())
    globalPlayers.enumerate(enum_spread_send2, static_cast<void *>(NULL));
}

void Player::spreadToSelf()
{
    bool bRet = spreadCompareTime(true, true);
    if(!bRet)
        return;
    if(GetLev() < 45)
    {
        sendMsgCode(0, 1010);
        return;
    }
    if(GetVar(VAR_SPREAD_FLAG) & SPREAD_ALREADY_USE)
    {
        sendMsgCode(0, 2215);
        return;
    }
	UInt32 now = TimeUtil::Now();
    if(m_spreadCoolTime > now)
    {
        sendMsgCode(0, 2232);
        return;
    }
    if(now < World::spreadBuff)
    {
        if(now < m_spreadInterval)
        {
            sendMsgCode(0, 2216);
            return;
        }
        Player *pl = World::getSpreadKeeper();
        if(!pl)
            return;
        m_spreadInterval = now + 10;
        UInt64 playerId = pl->getId();
        GameMsgHdr hdr(0x354, getThreadId(), this, sizeof(playerId));
        GLOBAL().PushMsg(hdr, &playerId);
        sendMsgCode(0, 3502);
        return;
    }
    spreadToOther(1, getName());
}

void Player::spreadGetAward()
{
    bool bRet = spreadCompareTime(true, false);
    if(!bRet)
        return;
    UInt32 tmp = GetVar(VAR_SPREAD_FLAG);
    //if(!(tmp & SPREAD_ALREADY_USE))
    //    return;
    if(tmp & SPREAD_ALREADY_GET)
        return;
    if(GetLev() < 45)
    {
        sendMsgCode(0, 1010);
        return;
    }
    UInt32 spreadCount = World::getSpreadCount();
    GameMsgHdr h(0x349, getThreadId(), this, sizeof(spreadCount));
    GLOBAL().PushMsg(h, &spreadCount);
}

void Player::spreadGetAwardInCountry(UInt32 spreadCount)
{
    if(spreadCount < GameAction()->GetSpreadCountForAward())
        return;

    lua_tinker::table award = GameAction()->GetSpreadAward();
    UInt8 size = award.size();
    if(GetPackage()->GetRestPackageSize() < size)
    {
        sendMsgCode(0, 1011);
        return;
    }

    GameMsgHdr hdr1(0x165, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr1, NULL);

    UInt16 itemId;
    UInt16 itemCount;
    for(UInt8 j = 0; j < size; ++j)
    {
        lua_tinker::table a = award.get<lua_tinker::table>(j + 1);
        itemId = a.get<UInt16>(1);
        itemCount = a.get<UInt16>(2);
        GetPackage()->Add(itemId, itemCount, true);
    }
}

//仙宠装备与宝石之八部浮屠
void Player::sendBBFTInfo()
{
    if(!checkBBFT())
        return;
    Stream st(REP::FAIRY_PET);
    st << static_cast<UInt8>(0x06) << static_cast<UInt8>(0x00);
    st << GetVar(VAR_PET_CUILIAN_SCORE_EQUIP);
    st << static_cast<UInt8>(GetVar(VAR_PET_CUILIAN_SCORE_EQUIP_TIMES));
    st << GetVar(VAR_PET_CUILIAN_SCORE_GEM);
    st << static_cast<UInt8>(GetVar(VAR_PET_CUILIAN_SCORE_GEM_TIMES));
    st << static_cast<UInt16>(GetVar(VAR_PET_CUILIAN_EXTRA_LOW_SCORE) + 40);
    st << static_cast<UInt16>(GetVar(VAR_PET_CUILIAN_EXTRA_UP_SCORE) + 60);
    UInt32 now = TimeUtil::Now();
    st << TimeUtil::SharpDayT(1, now) - now;
    st << static_cast<UInt16>(GetVar(VAR_PET_CUILIAN_LEFT_CNT));
    st << static_cast<UInt16>(GetVar(VAR_PET_CUILIAN_GOLD_DAILY_CNT));
    st << Stream::eos;
    send(st);
}

void Player::updateCuilianTimes()
{
    Stream st(REP::FAIRY_PET);
    st << static_cast<UInt8>(0x06) << static_cast<UInt8>(0x02);
    st << static_cast<UInt16>(GetVar(VAR_PET_CUILIAN_LEFT_CNT));
    st << static_cast<UInt16>(GetVar(VAR_PET_CUILIAN_GOLD_DAILY_CNT));
    st << Stream::eos;
    send(st);
}

void Player::enhanceBaseScore()
{
    if(!hasChecked())
        return;
    if(!checkBBFT())
        return;
    if(getGold() < 10)
        return;

    UInt16 extra_low = GetVar(VAR_PET_CUILIAN_EXTRA_LOW_SCORE);
    UInt16 extra_up = GetVar(VAR_PET_CUILIAN_EXTRA_UP_SCORE);
    UInt16 low = extra_low + 40;
    UInt16 up = extra_up + 60;
    if(low == 100 && up == 100)
        return;
    if(low > up || up > 100)
        return;

    ConsumeInfo ci(PetBBFT_PINZHI,0,0);
    useGold(10,&ci);

    if(low == up)
    {
        extra_up += 5;
        up += 5;
        SetVar(VAR_PET_CUILIAN_EXTRA_UP_SCORE, extra_up);
    }
    else if(up == 100 || uRand(2) == 0)
    {
        extra_low += 5;
        low += 5;
        SetVar(VAR_PET_CUILIAN_EXTRA_LOW_SCORE, extra_low);
    }
    else
    {
        extra_up += 5;
        up += 5;
        SetVar(VAR_PET_CUILIAN_EXTRA_UP_SCORE, extra_up);
    }

    Stream st(REP::FAIRY_PET);
    st << static_cast<UInt8>(0x06) << static_cast<UInt8>(0x01);
    st << low << up;
    st << Stream::eos;
    send(st);

}

const static UInt32 CuilianTimes_Limit[] = {30, 60, 90, 120, 150};
const static UInt32 CuilianTimes_factor[] = {1, 2, 3, 4, 5};
void Player::addCuilianTimes()
{
    if(!hasChecked())
        return;
    if(!checkBBFT())
        return;

    UInt32 times = GetVar(VAR_PET_CUILIAN_GOLD_DAILY_CNT) + 1;
    if(getGold() < 10*times-5)
        return;

    UInt32 cnt = GetVar(VAR_PET_CUILIAN_LEFT_CNT) + 10;
    ConsumeInfo ci(PetBBFT_BUYCUILIAN,0,0);
    useGold(10*times-5, &ci);
    SetVar(VAR_PET_CUILIAN_GOLD_DAILY_CNT, times);
    SetVar(VAR_PET_CUILIAN_LEFT_CNT, cnt);

    updateCuilianTimes();
}

void Player::doCuilian(UInt8 clType, UInt8 clOpt, UInt8 isAll)
{
    if(!hasChecked())
        return;
    if(!checkBBFT())
        return;
    int leftCnt = GetVar(VAR_PET_CUILIAN_LEFT_CNT);
    int times = 0;
    if(leftCnt <= 0)
        return;
    if(clType == 0)
        times = GetVar(VAR_PET_CUILIAN_SCORE_EQUIP_TIMES);
    else
        times = GetVar(VAR_PET_CUILIAN_SCORE_GEM_TIMES);
    if(times >= 10 || times < 0)
        return;

    UInt32 score = 0;
    UInt32 cltimes = isAll ? 10-times : 1;
    ConsumeInfo ci(PetBBFT_CUILIAN,0,0);
    switch(clOpt)
    {
    case 0x00:
        if(getTael() < 10*cltimes)
            return;
        if(isAll)
            cltimes = doCuilian1(leftCnt, times);
        useTael(10*cltimes, &ci);
        break;
    case 0x01:
        {
            UInt32 petLike = GetVar(VAR_FAIRYPET_LIKEABILITY);
            if(petLike < 1*cltimes)
                return;
            if(isAll)
                cltimes = doCuilian1(leftCnt, times);
            SYSMSG_SENDV(145, this, cltimes);
            SYSMSG_SENDV(1045, this, cltimes);
            SetVar(VAR_FAIRYPET_LIKEABILITY, petLike - 1*cltimes);
            sendFairyPetResource();
            score = 100*cltimes;
        }
        break;
    case 0x02:
        if(getGold() < 5*cltimes)
            return;
        if(isAll)
            cltimes = doCuilian1(leftCnt, times);
        useGold(5*cltimes, &ci);
        score = 100*cltimes;
        break;
    default:
        return;
    }

    if(cltimes == 0) return;
    if(isAll == false)
    {
        ++ times;
        -- leftCnt;
    }

    UInt32 low = GetVar(VAR_PET_CUILIAN_EXTRA_LOW_SCORE) + 40;
    UInt32 up = GetVar(VAR_PET_CUILIAN_EXTRA_UP_SCORE) + 60;
    for(UInt8 i = 0; i < cltimes; ++ i)
    {
        score += low;
        if(up > low)
            score += uRand(up - low);
    }
    if(clType == 0)
    {
        score += GetVar(VAR_PET_CUILIAN_SCORE_EQUIP);
        SetVar(VAR_PET_CUILIAN_SCORE_EQUIP, score);
        SetVar(VAR_PET_CUILIAN_SCORE_EQUIP_TIMES, times);
    }
    else
    {
        score += GetVar(VAR_PET_CUILIAN_SCORE_GEM);
        SetVar(VAR_PET_CUILIAN_SCORE_GEM, score);
        SetVar(VAR_PET_CUILIAN_SCORE_GEM_TIMES, times);
    }
    SetVar(VAR_PET_CUILIAN_LEFT_CNT, leftCnt);

    Stream st(REP::FAIRY_PET);
    st << static_cast<UInt8>(0x06) << static_cast<UInt8>(0x03);
    st << clType << score << static_cast<UInt8>(times) << static_cast<UInt16>(leftCnt);
    st << Stream::eos;
    send(st);
}

UInt8 Player::doCuilian1(int& leftCnt, int& times)
{
    UInt8 cltimes = 0;
    int tmp1 = leftCnt, tmp2 = 10 - times;
    for(int i = 0; i < tmp1 && i < tmp2; ++ i)
    {
        ++ cltimes;
        ++ times;
        -- leftCnt;
        if(leftCnt <= 0)
        {
            leftCnt = 0;
            break;
        }
        if(times >= 10)
        {
            times = 10;
            break;
        }
    }
    return cltimes;
}

void Player::pickupCuilian(UInt8 clType)
{
    if(!checkBBFT())
        return;
    UInt32 times = 0;
    UInt32 score = 0;
    if(clType == 0)
    {
        times = GetVar(VAR_PET_CUILIAN_SCORE_EQUIP_TIMES);
        score = GetVar(VAR_PET_CUILIAN_SCORE_EQUIP);
    }
    else
    {
        times = GetVar(VAR_PET_CUILIAN_SCORE_GEM_TIMES);
        score = GetVar(VAR_PET_CUILIAN_SCORE_GEM);
    }

    if(times < 10 || score == 0)
        return;

    if(clType == 0)
    {
		if(GetPetPackage()->GetPetEqPgRestSize() < 1)
		{
			sendMsgCode(0, 1094);
			return;
		}
        if(GetPetPackage()->AddRandomPetEq(score, 0, -1, FromBBFT))
        {
            SetVar(VAR_PET_CUILIAN_SCORE_EQUIP, 0);
            SetVar(VAR_PET_CUILIAN_SCORE_EQUIP_TIMES, 0);
        }
    }
    else
    {
		if(GetPetPackage()->GetPetGemPgRestSize() < 1)
		{
			sendMsgCode(0, 1094);
			return;
		}
        if(GetPetPackage()->AddRandomPetGem(score))
        {
            SetVar(VAR_PET_CUILIAN_SCORE_GEM, 0);
            SetVar(VAR_PET_CUILIAN_SCORE_GEM_TIMES, 0);
        }
    }

    sendBBFTInfo();
}

bool Player::checkBBFT()
{
    if(GetLev() < 60)
        return false;

    UInt32 now = TimeUtil::Now();
    UInt32 today = TimeUtil::SharpDayT(1, now);
    UInt32 lastDate = GetVar(VAR_PET_CUILIAN_DAILY_CNT_DATE);
    lastDate = lastDate == 0 ? 0 :TimeUtil::SharpDayT(1, lastDate);
    UInt32 leftCnt = GetVar(VAR_PET_CUILIAN_LEFT_CNT);
    UInt8 lvIdx = (GetLev() - 60)/10;
    if(lvIdx > 4)
        lvIdx = 4;

    if(today > lastDate)
    {
        if(leftCnt < CuilianTimes_Limit[lvIdx])
        {
            UInt32 factor = (lastDate == 0 ? 1 : (today - lastDate) / 86400);
            leftCnt = std::min(leftCnt + 10*factor * CuilianTimes_factor[lvIdx], CuilianTimes_Limit[lvIdx]);
            SetVar(VAR_PET_CUILIAN_LEFT_CNT, leftCnt);

            updateCuilianTimes();
        }
        SetVar(VAR_PET_CUILIAN_DAILY_CNT_DATE, now);
    }

    return true;
}

#define ZCJB_TOTAL(v) ((v>>8)&0xFF)
#define ZCJB_LEFT(v)  (v&0xFF)
#define ZCJB(t, l)    (((t&0xFF)<<8)|(l&0xFF))
void Player::sendRPZCJBInfo()
{
    if(!World::inActive_opTime_20130531() && !World::getZCJBActivity())
        return;

    UInt32 beginTime = 0, endTime = 0;
    if(World::inActive_opTime_20130531())
    {
        beginTime = TimeUtil::MkTime(cfg.openYear, cfg.openMonth, cfg.openDay);
        endTime = beginTime + 7 * 86400;
    }
    else if(World::getZCJBActivity())
    {
        beginTime = GVAR.GetVar(GVAR_ZCJB_ACTIVITY_BEGIN);
        endTime = GVAR.GetVar(GVAR_ZCJB_ACTIVITY_END);
    }
    UInt32 zcjb = GetVar(VAR_ZCJB_TIMES);
    UInt32 gold_got = GetVar(VAR_ZCJB_GOLD_GOT);
    Stream st(REP::RP_SERVER);
    st << static_cast<UInt8>(0x04);
    st << static_cast<UInt8>(ZCJB_TOTAL(zcjb));
    st << static_cast<UInt8>(ZCJB_LEFT(zcjb));
    st << gold_got << static_cast<UInt32>(0);
    st << GetVar(VAR_ZCJB_RECHARGE_GOLD);
    st << beginTime << endTime;
    UInt8 newFlag;
    if(World::inActive_new())
        newFlag = 1;
    else
        newFlag = 0;
    st << newFlag;
    st << Stream::eos;
    send(st);
}

static UInt32 zcjb_prob[2] = {99, 100};
static UInt32 zcjb_gold[16] = {
    100, 200, 400, 600,
    800, 1200, 2000, 4000,
    8000, 15000, 30000, 60000,
    100000, 200000, 400000, 800000
};
static UInt32 zcjb_award[16][3] = {
    {110, 113, 150}, {210, 214, 300}, {420, 432, 600}, {620, 636, 800},
    {820, 848, 1100}, {1240, 1296, 1800}, {2100, 2180, 2800}, {4240, 4480, 6000},
    {8480, 8960, 13000}, {16000, 16500, 23000}, {32100, 33300, 50000}, {64200, 66600, 90000},
    {106000, 109000, 160000}, {216000, 222000, 350000}, {432000, 444000, 680000}, {880000, 896000, 999999}
};
static UInt32 zcjb_gold_new[47] = {
    100, 200, 400, 600,
    800, 1000, 1200, 1500,
    1800, 2200, 2600, 3000,
    3500, 4000, 4500, 5000,
    5500, 6000, 6500, 7000,
    7500, 8000, 9000, 10000,
    11000, 12500, 15000, 20000,
    25000, 30000, 40000, 50000,
    60000, 70000, 80000, 100000,
    120000, 150000, 180000, 230000,
    280000, 330000, 380000, 450000,
    550000, 650000, 800000
};
static UInt32 zcjb_award_new[47][3] = {
    {110, 113, 150}, {210, 213, 300}, {420, 426, 600}, {620, 626, 800},
    {820, 826, 1000}, {1020, 1026, 1200}, {1220, 1226, 1400}, {1530, 1539, 1800},
    {1830, 1839, 2100}, {2240, 2252, 2600}, {2640, 2652, 3000},
    {3040, 3052, 3400}, {3550, 3565, 4000}, {4050, 4065, 4500},
    {4550, 4565, 5000}, {5050, 5065, 5500}, {5550, 5565, 6000},
    {6050, 6065, 6500}, {6550, 6565, 7000}, {7050, 7065, 7500},
    {7550, 7565, 8000}, {8050, 8065, 8500}, {9100, 9130, 10000},
    {10100, 10130, 11000}, {11100, 11130, 12000}, {12650, 12695, 14000},
    {15250, 15325, 17500}, {20500, 20650, 25000}, {25500, 25650, 30000},
    {30500, 30650, 35000}, {41000, 41300, 50000}, {51000, 51300, 60000},
    {61000, 61300, 70000}, {71000, 71300, 80000}, {81000, 81300, 90000},
    {102000, 102600, 120000}, {122000, 122600, 140000}, {153000, 153900, 180000},
    {183000, 183900, 210000}, {235000, 236500, 280000}, {285000, 286500, 330000},
    {335000, 336500, 380000}, {385000, 386500, 430000}, {457000, 459100, 520000},
    {560000, 563000, 650000}, {660000, 663000, 750000}, {815000, 819500, 950000},
};

static const char* zcjb_udplog[46] = {
    "F_130613_1",
    "F_130613_2",
    "F_130613_3",
    "F_130613_4",
    "F_130613_5",
    "F_130613_6",
    "F_130613_7",
    "F_130613_8",
    "F_130613_9",
    "F_130613_10",
    "F_130613_11",
    "F_130613_12",
    "F_130613_13",
    "F_130613_14",
    "F_130613_15",
    "F_130613_16",
    "F_130613_17",
    "F_130613_18",
    "F_130613_19",
    "F_130613_20",
    "F_130613_21",
    "F_130613_22",
    "F_130613_23",
    "F_130613_24",
    "F_130613_25",
    "F_130613_26",
    "F_130613_27",
    "F_130613_28",
    "F_130613_29",
    "F_130613_30",
    "F_130613_31",
    "F_130613_32",
    "F_130613_33",
    "F_130613_34",
    "F_130613_35",
    "F_130613_36",
    "F_130613_37",
    "F_130613_38",
    "F_130613_39",
    "F_130613_40",
    "F_130613_41",
    "F_130613_42",
    "F_130613_43",
    "F_130613_44",
    "F_130613_45",
    "F_130613_46",
};

bool Player::getRPZCJBAward()
{
    if(!World::inActive_opTime_20130531() && !World::getZCJBActivity())
        return false;

    /*if(World::getZCJBActivity() && atoi(getDomain()) != 11)
    {
        sendMsgCode(0, 3505);
        return false;
    }*/
    UInt32 zcjb = GetVar(VAR_ZCJB_TIMES);
    UInt8 left = ZCJB_LEFT(zcjb);
    UInt8 total = ZCJB_TOTAL(zcjb);

    if(left == 0 || left > total)
        return false;
    UInt8 awardIdx = total - left;
    UInt32 cur_gold;
    if(World::inActive_new())
        cur_gold = zcjb_gold_new[awardIdx];
    else
        cur_gold = zcjb_gold[awardIdx];
    if(getGold() < cur_gold)
    {
        sendMsgCode(0, 1104);
        return false;
    }
    -- left;
    UInt8 roolIdx = 1;
    UInt8 rnd = uRand(100);
    if(rnd < zcjb_prob[0])
        roolIdx = 0;

    ConsumeInfo ci(ZCJBRoolAward,0,0);
    useGold(cur_gold, &ci);

    UInt32 awardGold;
    if(World::inActive_new())
        awardGold = zcjb_award_new[awardIdx][roolIdx] + uRand((zcjb_award_new[awardIdx][roolIdx+1] - zcjb_award_new[awardIdx][roolIdx]));
    else
        awardGold = zcjb_award[awardIdx][roolIdx] + uRand((zcjb_award[awardIdx][roolIdx+1] - zcjb_award[awardIdx][roolIdx]));
    IncommingInfo ii(InZCJBRoolAward, 0, 0);
    getGold(awardGold, &ii);

    UInt32 gold_got = GetVar(VAR_ZCJB_GOLD_GOT);
    gold_got += awardGold;

    SetVar(VAR_ZCJB_TIMES, ZCJB(total, left));
    SetVar(VAR_ZCJB_GOLD_GOT, gold_got);

    UInt32 beginTime = 0, endTime = 0;
    if(World::inActive_opTime_20130531())
    {
        beginTime = TimeUtil::MkTime(cfg.openYear, cfg.openMonth, cfg.openDay);
        endTime = beginTime + 7 * 86400;
    }
    else if(World::getZCJBActivity())
    {
        beginTime = GVAR.GetVar(GVAR_ZCJB_ACTIVITY_BEGIN);
        endTime = GVAR.GetVar(GVAR_ZCJB_ACTIVITY_END);
    }
    Stream st(REP::RP_SERVER);
    st << static_cast<UInt8>(0x04);
    st << total << left;
    st << gold_got << awardGold;
    st << GetVar(VAR_ZCJB_RECHARGE_GOLD);
    st << beginTime << endTime;
    UInt8 newFlag;
    if(World::inActive_new())
        newFlag = 1;
    else
        newFlag = 0;
    st << newFlag;
    st << Stream::eos;
    send(st);
    if(awardIdx > 45)
        awardIdx = 45;
    udpLog("xschoujiang", zcjb_udplog[awardIdx], "", "", "", "", "act");

    if(awardGold > cur_gold)
    {
        UInt32 saveGoldPercent = awardGold * 100 / cur_gold;
        SYSMSG_BROADCASTV(4945, getCountry(), getPName(), saveGoldPercent);
    }
    return true;
}

void Player::checkZCJB(UInt32 recharge)
{
    if(recharge && !World::inActive_opTime_20130531() && !World::getZCJBActivity())
        return;
    /*if(World::getZCJBActivity() && getPlatform() != 11)
        return;*/
    AddVar(VAR_ZCJB_RECHARGE_GOLD, recharge);

    UInt32 zcjb = GetVar(VAR_ZCJB_TIMES);
    UInt8 left = ZCJB_LEFT(zcjb);
    UInt8 total = ZCJB_TOTAL(zcjb);
    UInt8 totalMax;
    UInt32 cur_gold;
    if(World::inActive_new())
        totalMax = 47;
    else
        totalMax = 16;

    UInt8 oldTotal = total;
    for(; total < totalMax; ++ total)
    {
        if(World::inActive_new())
            cur_gold = zcjb_gold_new[total];
        else
            cur_gold = zcjb_gold[total];
        if(GetVar(VAR_ZCJB_RECHARGE_GOLD) < cur_gold)
            break;
    }

    if(oldTotal < total)
    {
        left += total - oldTotal;
        SetVar(VAR_ZCJB_TIMES, ZCJB(total, left));
    }
    if(isOnline())
        sendRPZCJBInfo();
}

static UInt32 ryhb_items_1[15][4] = {
    {8, 8, 78, 9},          // 升级优惠礼包
    {28, 28, 79, 9},        // 炼器优惠礼包
    {8, 15, 80, 9},         // 九疑鼎优惠礼包
    {2, 5, 1325, 99},       // 技能符文熔炼诀
    {2, 5, 134, 99},        // 法灵精金
    {2, 5, 547, 99},        // 天赋保护符
    {1, 3, 503, 99},        // 太乙精金
    {4, 8, 515, 99},        // 五行精金
    {1, 5, 509, 99},        // 凝神易筋丹
    {1, 5, 507, 99},        // 补髓益元丹
    {1, 3, 9371, 99},       // 仙缘石
    {99, 88, 1717, 1},      // 女仆头饰
    {555, 300, 9396, 1},    // 散仙令
};

static UInt32 ryhb_items_2[15][4] = {
    {8, 5, 78, 9},          // 升级优惠礼包
    {28, 28, 79, 9},        // 炼器优惠礼包
    {99, 99, 1732, 1},         // 六级身法石
    {99, 99, 1733, 1},       // 变身法宝
    {88, 88, 8555, 64},        //
    {8, 10, 9229, 64},        //
    {1, 3, 9371, 99},        //
    {4, 7, 9498, 99},        //
    {7, 5, 9438, 99},        //
    {4, 6, 9457, 99},        //
    {5, 3, 503, 99},       //
    {5, 13, 9418, 99},      //
    {4, 6, 9600, 99},    //
    {15, 25, 9425, 99},    //
    {5, 8, 9427, 99},    //
};

static const char* ryhb_udplog[15] = {
    "F_130603_1",
    "F_130603_2",
    "F_130603_3",
    "F_130603_4",
    "F_130603_5",
    "F_130603_6",
    "F_130603_7",
    "F_130603_8",
    "F_130603_9",
    "F_130603_10",
    "F_130603_11",
    "F_130603_12",
    "F_130603_13",
    "F_130603_14",
    "F_130603_15",
};
void Player::AddZRYJCount(UInt32 v)
{
    if(!World::inActive_opTime_20130531() && !World::getRYHBActivity())
        return;
    AddVar(VAR_ZRYJ_COUNT, v);
    sendRYHBInfo();
}

void Player::AddHYYJCount(UInt32 v)
{
    if(!World::inActive_opTime_20130531() && !World::getRYHBActivity())
        return;
    AddVar(VAR_HYYJ_COUNT, v);
    sendRYHBInfo();
}

void Player::sendRYHBInfo()
{
    UInt32 (*ryhb_items)[4] = ryhb_items_1;
    UInt32 beginTime = 0, endTime = 0;
    if(!World::inActive_opTime_20130531())
    {
        if(!World::getRYHBActivity())
            return;
        ryhb_items = ryhb_items_2;
        beginTime = GVAR.GetVar(GVAR_RYHB_ACTIVITY_BEGIN);
        endTime = GVAR.GetVar(GVAR_RYHB_ACTIVITY_END);
    }
    else
    {
        beginTime = TimeUtil::MkTime(cfg.openYear, cfg.openMonth, cfg.openDay);
        endTime = beginTime + 7 * 86400;
    }

    Stream st(REP::RP_SERVER);
    st << static_cast<UInt8>(0x05) << static_cast<UInt8>(0);
    st << (GetVar(VAR_ZRYJ_COUNT)/20);
    st << (GetVar(VAR_HYYJ_COUNT)/20);
    st << beginTime << endTime;

    UInt8 cnt = 0;
    size_t offset = st.size();
    st << cnt;
    for(int i = 0; i < 15; ++ i)
    {
        if(ryhb_items[i][2] == 0)
            break;
        st << static_cast<UInt8>(ryhb_items[i][3] - GetVar(VAR_RYHB_ITEM_CNT_1+i));
        ++ cnt;
    }

    st.data<UInt8>(offset) = cnt;
    st << Stream::eos;
    send(st);
}

void Player::getRYHBAward(UInt8 idx, UInt8 cnt)
{
    UInt32 (*ryhb_items)[4] = ryhb_items_1;
    if(!World::inActive_opTime_20130531())
    {
        if(!World::getRYHBActivity())
            return;
        ryhb_items = ryhb_items_2;
    }
    if(idx >= 15 || cnt == 0)
        return;

    UInt32 itemId = ryhb_items[idx][2];
    const GData::ItemBaseType* ibt = GData::itemBaseTypeManager[itemId];
    if(!ibt)
        return;

    if(GetFreePackageSize() < ibt->Size(cnt))
    {
        sendMsgCode(0, 1011);
        return;
    }

    UInt32 zryj = GetVar(VAR_ZRYJ_COUNT);
    UInt32 hyyj = GetVar(VAR_HYYJ_COUNT);
    UInt8 item_cnt = GetVar(VAR_RYHB_ITEM_CNT_1+idx);
    if(ryhb_items[idx][0]*cnt > zryj/20 || ryhb_items[idx][1]*cnt > hyyj/20 || ryhb_items[idx][3] < (item_cnt + cnt))
        return;

    zryj -= ryhb_items[idx][0] * cnt * 20;
    hyyj -= ryhb_items[idx][1] * cnt * 20;
    item_cnt += cnt;

    UInt8 left_cnt = ryhb_items[idx][3] - item_cnt;
    SetVar(VAR_RYHB_ITEM_CNT_1+idx, item_cnt);
    SetVar(VAR_ZRYJ_COUNT, zryj);
    SetVar(VAR_HYYJ_COUNT, hyyj);

    m_Package->Add(itemId, cnt, true, false, FromRYHBAward);
    udpLog("riyue", ryhb_udplog[idx], "", "", "", "", "act");

    Stream st(REP::RP_SERVER);
    st << static_cast<UInt8>(0x05) << static_cast<UInt8>(1);
    st << static_cast<UInt32>(zryj/20) << static_cast<UInt32>(hyyj/20) << idx << left_cnt;
    st << Stream::eos;
    send(st);
}

void Player::getSurnameLegendAward(SurnameLegendAwardFlag flag)
{
    if (World::getSurnameLegend() || World::getSurnameLegend2())
    {
        if(flag == e_sla_none)
        {
            if(World::getSurnameLegend2())
                GetPackage()->AddItem(16010, 1, true, false, FromNpc);
            else
                GetPackage()->AddItem(16050, 1, true, false, FromNpc);
        }
        else if(flag == e_sla_cb || flag == e_sla_clb || flag == e_sla_hi || flag == e_sla_ncb || flag == e_sla_rb || flag == e_sla_mr || flag == e_sla_ccb)
        {
            UInt32 status = GetVar(VAR_SURNAME_LEGEND_STATUS);
            if(!(status & flag))
            {
                if(World::getSurnameLegend2())
                {
                    if(flag == e_sla_hi || flag == e_sla_cb || flag == e_sla_ncb || flag == e_sla_ccb || flag == e_sla_clb || flag == e_sla_mr)
                        GetPackage()->AddItem(16010, 1, true, false, FromNpc);
                }
                else
                    GetPackage()->AddItem(16050, 1, true, false, FromNpc);

                status |= flag;
                SetVar(VAR_SURNAME_LEGEND_STATUS, status);
            }
        }
    }
    if(World::getDropAct())
    {
        if(flag == e_sla_none)
        {
            GetPackage()->Add(16051, 1, true, false, FromNpc);
        }
        else if(flag == e_sla_cb || flag == e_sla_clb || flag == e_sla_hi || flag == e_sla_ncb || flag == e_sla_rb || flag == e_sla_mr || flag == e_sla_ccb)
        {
            UInt32 status = GetVar(VAR_DROP_ACT);
            if(!(status & flag))
            {
                GetPackage()->Add(16051, 1, true, false, FromNpc);
                status |= flag;
                SetVar(VAR_DROP_ACT, status);
            }
        }
    }
    if (WORLD().getQixi())
    {
        if (flag == e_sla_cb || flag == e_sla_ncb || flag == e_sla_clb || flag == e_sla_rb)
        {
            UInt32 status = GetVar(VAR_QIXI_DROP_STATUS);
            if(!(status & flag))
            {
                status |= flag;
                SetVar(VAR_QIXI_DROP_STATUS, status);
                GameAction()->onDropAwardAct(this, 0);
            }
        }
    }
    if(WORLD().getSeekingHer())
    {
        if (flag == e_sla_none || flag == e_sla_ccb || flag == e_sla_ncb || flag == e_sla_clb || flag == e_sla_cb)
        {
            if(flag == e_sla_none)
            {
                GetPackage()->Add(16024, 1, true, false, FromNpc);
            }
            else
            {
                UInt32 status = GetVar(VAR_SEEKING_HER_LOOT_STATUS);
                if(!(status & flag))
                {
                    GetPackage()->Add(16024, 1, true, false, FromNpc);
                    status |= flag;
                    SetVar(VAR_SEEKING_HER_LOOT_STATUS, status);
                }
            }
        }
    }
    if (World::getFlyRoadActivity())
    {
        if (flag == e_sla_clb || flag == e_sla_none || flag == e_sla_cb || flag == e_sla_ncb || flag == e_sla_hi)
        {
            if(flag == e_sla_none)
            {
                GetPackage()->Add(16042, 1, true, false, FromNpc);
            }
            else
            {
                UInt32 status = GetVar(VAR_FLYROAD_DROP_STATUS);
                if(!(status & flag))
                {
                    GetPackage()->Add(16042, 1, true, false, FromNpc);
                    status |= flag;
                    SetVar(VAR_FLYROAD_DROP_STATUS, status);
                }
            }
        }
    }
}

void Player::setSysUpDateDlg(UInt32 v)
{
    SetVar(VAR_SYS_UPDATE_DLG, v);
}

UInt32 Player::getSysUpDateDlg()
{
    return GetVar(VAR_SYS_UPDATE_DLG);
}

void Player::sendCollectCard(UInt8 fighterIndex)
{
    if(fighterIndex == 0 || fighterIndex > 8)
        return;
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x0E);
    st << GetVar(VAR_POOL_CNT);
    st << fighterIndex;
    for(UInt8 i = 0; i < 9; i++)
        st << _partCnt[fighterIndex - 1][i];
    st << _alreadyCnt[fighterIndex - 1];
    st << Stream::eos;
    send(st);
}

void Player::sendAllCollectCard()
{
    for(UInt8 i = 1; i <= 8; i++)
        sendCollectCard(i);
}

void Player::useCollectCard(UInt8 fighterIndex)
{
    if(fighterIndex == 0 || fighterIndex > 8)
        return;
    if(GetPackage()->GetItemAnyNum(CARD_ITEM_ID) < 1)
        return;
    GetPackage()->DelItemAny(CARD_ITEM_ID, 1);
    UInt8 pos = uRand(9);
    _partCnt[fighterIndex - 1][pos] += 1;

    char columnName[64];
    sprintf(columnName, "partCnt%u", pos + 1);
    insertCollectCardDB(fighterIndex);
    DB5().PushUpdateData("UPDATE `collect_card` SET `%s` = %u WHERE `playerId` = %" I64_FMT "u AND `id` = %u", columnName, _partCnt[fighterIndex - 1][pos], getId(), fighterIndex);

    sendCollectCard(fighterIndex);
}

void Player::putCollectCardPool(UInt8 fighterIndex, UInt8 partPos, UInt16 partCnt)
{
    if(fighterIndex == 0 || fighterIndex > 8)
        return;
    if(partPos == 0 || partPos > 9)
        return;
    if(_partCnt[fighterIndex - 1][partPos - 1] < partCnt)
        return;
    _partCnt[fighterIndex - 1][partPos - 1] -= partCnt;
    AddVar(VAR_POOL_CNT, partCnt);

    char columnName[64];
    sprintf(columnName, "partCnt%u", partPos);
    insertCollectCardDB(fighterIndex);
    DB5().PushUpdateData("UPDATE `collect_card` SET `%s` = %u WHERE `playerId` = %" I64_FMT "u AND `id` = %u", columnName, _partCnt[fighterIndex - 1][partPos - 1], getId(), fighterIndex);

    sendCollectCard(fighterIndex);
}

void Player::convertCollectCard()
{
    UInt32 poolCnt = GetVar(VAR_POOL_CNT);
    if(poolCnt < 2)
        return;
    UInt32 itemCnt = poolCnt / 2;
    poolCnt -= itemCnt * 2;
    SetVar(VAR_POOL_CNT, poolCnt);
    GetPackage()->AddItem(CARD_ITEM_ID, itemCnt, true, false, FromCollectCard);
}

void Player::autoUseCollectCard(UInt32 cardNum)
{
    if(GetPackage()->GetItemAnyNum(CARD_ITEM_ID) < cardNum)
        return;
    UInt8 fighterIndex = 1;
    UInt16 minValue = 0xFFFF;
    for(UInt8 i = 0; i < 8; i++)
    {
        if(_alreadyCnt[i] < minValue)
        {
            minValue = _alreadyCnt[i];
            fighterIndex = i + 1;
        }
    }

    UInt32 count = 0;
    for(; count < cardNum; count++)
    {
        bool bFull = true;
        for(UInt8 i = 0; i < 9; i++)
        {
            if(_partCnt[fighterIndex - 1][i] == 0)
            {
                bFull = false;
                break;
            }
        }
        if(bFull)
            break;
        useCollectCard(fighterIndex);
    }
    //GetPackage()->DelItemAny(CARD_ITEM_ID, count);
    //sendCollectCard(fighterIndex);
}

void Player::getCollectCardAward(UInt8 id)
{
    if(id == 0 || id > 8)
        return;
    UInt8 k = id - 1;
    for(UInt8 i = 0; i < 9; i++)
    {
        if(_partCnt[k][i] == 0)
            return;
    }
    bool bRet;
    if(_alreadyCnt[k] == 0)
        bRet = GameAction()->onCollectCardAct(this, 1);
    else
        bRet = GameAction()->onCollectCardAct(this, 2);
    if(!bRet)
        return;

    UInt8 alreadyFighterCnt = 1;
    if(_alreadyCnt[k] == 0)
    {
        for(UInt8 i = 0; i < 8; i++)
        {
            if(_alreadyCnt[i] > 0)
                ++alreadyFighterCnt;
        }
    }

    for(UInt8 i = 0; i < 9; i++)
        _partCnt[k][i] -= 1;
    _alreadyCnt[k] += 1;

    insertCollectCardDB(id);
    DB5().PushUpdateData("UPDATE `collect_card` SET `partCnt1` = %u, `partCnt2` = %u, `partCnt3` = %u, `partCnt4` = %u, `partCnt5` = %u, `partCnt6` = %u, `partCnt7` = %u, `partCnt8` = %u, `partCnt9` = %u, `alreadyCnt` = %u WHERE `playerId` = %" I64_FMT "u AND `id` = %u", _partCnt[k][0], _partCnt[k][1], _partCnt[k][2], _partCnt[k][3], _partCnt[k][4], _partCnt[k][5], _partCnt[k][6], _partCnt[k][7], _partCnt[k][8],  _alreadyCnt[k], getId(), id);

    sendCollectCard(id);

    if(alreadyFighterCnt == 3)
        GameAction()->onCollectCardAct(this, 3);
    else if(alreadyFighterCnt == 8)
        GameAction()->onCollectCardAct(this, 4);
}

void Player::loadCollectCard(UInt8 id, UInt16 partCnt1, UInt16 partCnt2, UInt16 partCnt3, UInt16 partCnt4, UInt16 partCnt5, UInt16 partCnt6, UInt16 partCnt7, UInt16 partCnt8, UInt16 partCnt9, UInt16 alreadyCnt)
{
    UInt8 index = id - 1;
    _partCnt[index][0] = partCnt1;
    _partCnt[index][1] = partCnt2;
    _partCnt[index][2] = partCnt3;
    _partCnt[index][3] = partCnt4;
    _partCnt[index][4] = partCnt5;
    _partCnt[index][5] = partCnt6;
    _partCnt[index][6] = partCnt7;
    _partCnt[index][7] = partCnt8;
    _partCnt[index][8] = partCnt9;
    _alreadyCnt[index] = alreadyCnt;
    _alreadyload[index] = 1;
}

void Player::insertCollectCardDB(UInt8 id)
{
    if(id == 0 || id > 8)
        return;
    if(_alreadyload[id - 1] == 0)
    {
        DB5().PushUpdateData("INSERT INTO `collect_card` (`playerId`, `id`, `partCnt1`, `partCnt2`, `partCnt3`, `partCnt4`, `partCnt5`, `partCnt6`, `partCnt7`, `partCnt8`, `partCnt9`, `alreadyCnt`) VALUES(%" I64_FMT "u, %u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)", getId(), id);
        _alreadyload[id - 1] = 1;
    }
}

void Player::addCardFromClanBattle()
{
    if(!World::getCollectCardAct())
        return;
    if(GetVar(VAR_CARD_FROM_CLAN) == 0)
    {
        SetVar(VAR_CARD_FROM_CLAN, 1);
        GetPackage()->AddItem(CARD_ITEM_ID, 1, true, false, 0);
    }
}

void Player::broadcastFriend(Stream& st)
{
    
    Player* pfriend =NULL ;
    std::set<Player *> _set = _friends[3];
    std::set<Player *>::iterator offset;
    for (offset = _set.begin(); offset != _set.end(); ++ offset)
    {
        pfriend = *offset;
        if(!pfriend)
            continue;
        pfriend->send(st);
    }
    _set = _friends[0];
    std::set<Player *>::iterator _offset;
    for (_offset = _set.begin(); _offset != _set.end(); ++ _offset)
    {
        pfriend = *_offset;
        if(!pfriend)
            continue;
        pfriend->send(st);
    }
    _clan->broadcast(st);
}

UInt32 Player::getBePrayednum(UInt64 id)
{
    std::map<UInt64,StuPrayValue >::iterator it = _bePrayed.find(id);
    if(it != _bePrayed.end())
        return it->second.praynum;
    else
        return 0 ;    
}
void Player::setClanSpiritTreeBuff(UInt8 id,UInt32 time)
{
    if( id < 0 || id > 2 )
        return ;
    addBuffData(id+PLAYER_BUFF_CLANTREE1,time);
}

void Player::setPrayLoginInWeek()
{
    UInt32 PrayLogin = GetVar(VAR_PRAY_LOGIN);
    UInt32 now = TimeUtil::Now();
    UInt32 off =(TimeUtil::SharpDay(0, now)-TimeUtil::SharpWeek(0, now))/86400 +1;
    PrayLogin |= ( 1 << (off - 1));
    SetVar(VAR_PRAY_LOGIN, PrayLogin);
}

void Player::sendRandFriend()
{
    if(GetLev()<30)
        return ;
    UInt32 size = globalOnlinePlayers.size()-1;
    UInt32 flag = GetVar(VAR_RANDfRIEND);
    Stream st(REP::FRIEND_LIST);
    st<<static_cast<UInt8>(5);
    size_t offset = st.size();
    UInt8 Count = 0;
    st<<static_cast<UInt8>(0);
    if(size < 10 )
    { 
        if(flag == 0 )
        {    
            for(GlobalPlayers::iterator it = globalOnlinePlayers.begin(); it!= globalOnlinePlayers.end();++it)
            {
                Player* pl = it->second;
                if(pl == NULL || pl == this ||_hasFriend(0,pl)||_hasFriend(3,pl)||pl->GetLev() < 30)
                    continue;
                st<<pl->getName()<<static_cast<UInt8>(pl->GetLev())<<static_cast<UInt8>(pl->GetClassAndSex());
                Count++;
            }
        }
    }
    else 
    {
        if(!flag)
        {
            UInt32 div = size /10 ;
            for(UInt32 i= 0 ; i < 10 ; ++i )
            {   
                GlobalPlayers::iterator it = globalOnlinePlayers.begin();
                UInt32 rand = uRand(div);
                std::advance(it,rand+i*div);
                Player* pl = it->second;
                if(pl == NULL || pl == this ||_hasFriend(0,pl)||_hasFriend(3,pl)||pl->GetLev() < 30)
                    continue;
                st<<pl->getName()<<static_cast<UInt8>(pl->GetLev())<<static_cast<UInt8>(pl->GetClassAndSex());
                Count++;
            }
        }

    }
    UInt32 count_rand = 0;
    while(Count<10 &&( !flag )&& count_rand++< 20 )
    {
        UInt32 rand =uRand( globalPlayers.size());
        GlobalPlayers::iterator it = globalPlayers.begin();
        std::advance(it,rand);
        Player* pl = it->second;
        if(pl == NULL || pl == this ||_hasFriend(0,pl)||_hasFriend(3,pl)||pl->GetLev() < 30 || pl->isOnline())
            continue;
        st<<pl->getName()<<static_cast<UInt8>(pl->GetLev())<<static_cast<UInt8>(pl->GetClassAndSex());
        Count++; 
    }
    st.data<UInt8>(offset)=static_cast<UInt8>(Count);
    st<<Stream::eos;
    send(st);
}

void Player::GetQQBoardAward( UInt8 type)
{
    if(atoi(getDomain()) != 10 && atoi(getDomain()) != 11)
    {
        sendMsgCode(1, 3504);
        return;
    }
    if(!World::getQQBoardLoginTime())
        return ;
    if(type < 0 ||type >3 )
        return ;
    sendQQBoardOnlineTime(); 
    UInt32 LoginGetAward = GetVar(VAR_QQBOARD_LOGIN_AWARD); 
    if(type == 0 )
    {
        return ;
        if(GetVar(VAR_QQBOARD_ONLINE_AWARD))
            return ;
        if(GetVar(VAR_QQBOARD_ONLINE) < 1200 )
            return ;
    }
    else 
    {
        if((LoginGetAward &(1<<(type+7)))||!(LoginGetAward&(1<<(type-1))))
            return ;
    }
    if(!GameAction()->RunQQBoardOnlineAward(this, type))
        return;
    if(type)
    {
        LoginGetAward |=(1<<(type+7)); 
        SetVar(VAR_QQBOARD_LOGIN_AWARD,LoginGetAward);
    }
    else 
    {
       SetVar(VAR_QQBOARD_ONLINE_AWARD,1);
    }
}
void Player::sendQQBoardOnlineTime()
{
    return ;
    if(!World::getQQBoardLoginTime())
        return ;
    UInt32 LoginTime = _playerData.lastOnline; 
    UInt32 OnlineAward = GetVar(VAR_QQBOARD_ONLINE_AWARD);
    UInt32 now = TimeUtil::Now();
    UInt32 time = 0 ;
    UInt32 Time21 = TimeUtil::SharpDayT( 0 , now) + 21 * 3600;
    if(now<Time21 || now > (Time21 +1800 ))
        return ;
    if(LoginTime < Time21)
        time = now-Time21;
    else 
    {
        time = GetVar(VAR_QQBOARD_ONLINE)+ now - LoginTime;
    }
    if(time > 20*60)
    {
        time = 20*60;
    }
    SetVar(VAR_QQBOARD_ONLINE,time);
    Stream st(REP::RC7DAY);  //协议
    st<<static_cast<UInt8>(20);
    st<<static_cast<UInt8>(OnlineAward);
    st<<static_cast<UInt32>(4*60 - time)<<Stream::eos;
    send(st);
}
void Player::sendQQBoardLogin()
{
//    if( this->getPlatform()!= 10)
 //       return ;
    if(!World::getQQBoardLoginTime())
        return ;
    UInt32 LoginAward = GetVar(VAR_QQBOARD_LOGIN_AWARD);
//    UInt32 timeBegin = TimeUtil::MkTime(2013,12,11);
  //  UInt32 now = TimeUtil::Now();
    //if(now < timeBegin )
      //  return ;
    Stream st(REP::RC7DAY);  //协议
    st<<static_cast<UInt8>(19);
    st<<static_cast<UInt16>(LoginAward);
    st<<Stream::eos;
    send(st);

}
void Player::SetQQBoardLogin()
{
   // if( this->getPlatform()!= 10)
    //    return ;
    if(!World::getQQBoardLoginTime())
        return ;
    UInt32 now = TimeUtil::Now();
    if(now<(TimeUtil::SharpDayT( 0 , now) + 19 * 3600+30*60) || now > (TimeUtil::SharpDayT( 0 , now) + 21 * 3600+30*60) ) 
        return ;
    UInt32 timeBegin = TimeUtil::MkTime(2014,5,28);
    if(now < timeBegin )
        return ;
    UInt32 cts = static_cast<UInt8>((TimeUtil::SharpDayT( 0 , now) - timeBegin)/86400);
    if(cts > 2)
        return ;
    UInt32 LoginCanAward = GetVar(VAR_QQBOARD_LOGIN_AWARD); 
    LoginCanAward |= (1<<cts);
    SetVar(VAR_QQBOARD_LOGIN_AWARD,LoginCanAward);
}

void Player::setMapId(UInt8 mapId)
{
    UInt8 curMapId = GetVar(VAR_MAP_INDEX);
    if(mapId == curMapId)
        return;
    SetVar(VAR_MAP_INDEX, mapId);
    Stream st(REP::USER_INFO_CHANGE);
    st << static_cast<UInt8>(0x1A) << static_cast<UInt32>(mapId) << Stream::eos;
    send(st);
}
        
void Player::addPresentBox(UInt32 awardId ,UInt64 playerId2 ,UInt32 sendtime,UInt8 get, UInt32 flag)
{
    if(get == 1)
        return ;
    UInt32 now = TimeUtil::Now();
    if(now > World::getOpenTime() + 15 * 86400 )
        return ;
    if(now > sendtime + 3 * 86400)
        return ;
    if( getPresentBoxRest() >= 30 )
        return ;
    if(flag == 1)     //表示送出
    {
        StuPresentBox sp(awardId,sendtime,get);
        _present[playerId2].push_back(sp);
    }
    else     //表示接受
    {
        StuPresentBox sp(awardId,sendtime,get);
        _bePresent[playerId2].push_back(sp);
    }
}
void Player::sendPresentForOther( UInt64 playerId , UInt32 type)
{
    Player* other = globalPlayers[playerId];
    if(other==NULL)
        return;
    if( type < 1 || type>9)
        return ;
    UInt32 now = TimeUtil::Now();
    if(now > World::getOpenTime() + 15 * 86400 )
        return ;
    if(CheckPresentToday(other->getId()))
    {
        sendMsgCode(1, 4007);
        return ; 
    }
    UInt32 level = GetLev();
    if(level < 40)
        return ;
    if(other->GetLev() < 40)
    {
        sendMsgCode(1, 4009);
        return ;
    }
    UInt32 presentValue = GetVar(VAR_SENDPRESENT_VALUE);
    if(presentValue >= getPresentCount())
    {
        return ; 
    }
    UInt32 rest = other->getPresentBoxRest();
    if(rest >= 30 )
    {
        sendMsgCode(1, 4006);
        return ;
    }
    UInt32 days[]={1,2,3,4,5,7,9,12,15};
    UInt32 PresentLogin = GetVar(VAR_PRESENT_LOGIN);
    UInt32 i=0;
    UInt32 count=0 ;
    while(i<16)
    {
        if(PresentLogin & (1 << i++ ))
            ++count;
    }
    if( count < days[type-1] )
        return ;
    if(other->getThreadId() == getThreadId())
    {
        other->addPresentBox(type,getId(),now,0,0);
    }
    else
    {
        struct idAndType
        {
            UInt64 id ;
            UInt32 type;
        };
        idAndType ms;
        ms.id = getId();
        ms.type = type;
        GameMsgHdr hdr(0x363, other->getThreadId(), other, sizeof(ms));
        GLOBAL().PushMsg(hdr, &ms);
    }
    if(presentValue ==0)
    {
        _bePresent[0].push_back(StuPresentBox(10,now,0));
        DB1().PushUpdateData("REPLACE INTO `player_presentbox` (`id`, `awardid`, `playerId2`, `sendtime`,`get`) VALUES( %" I64_FMT "u , 10 , 0 , %u , 0 )", getId(),now);
    }
    ++presentValue;
    _present[other->getId()].push_back(StuPresentBox(type,now,0));
    SetVar(VAR_SENDPRESENT_VALUE,presentValue);
    DB1().PushUpdateData("REPLACE INTO `player_presentbox` (`id`, `awardid`, `playerId2`, `sendtime`,`get`) VALUES( %" I64_FMT "u,%u ,%" I64_FMT "u,%u,0)", other->getId(),type, getId(),now,0);
    sendMsgCode(1,4008);
    char str[16] = {0};
    sprintf(str, "F_130912_%d",2+type);
    udpLog("haoyouzengsong", str, "", "", "", "", "act");
}
UInt32 Player::getPresentBoxRest()
{
    UInt32 count=0;
    UInt32 now = TimeUtil::Now();
    std::map<UInt64,std::vector<StuPresentBox> >::iterator it =_bePresent.begin();
    for(;it!=_bePresent.end();++it)
    {
        if(it->first == 0 )
            continue ;
        std::vector<StuPresentBox> presents = it->second;
        std::vector<StuPresentBox>::iterator it2 = presents.begin();
        for(;it2 != presents.end();++it2)
        {   
            if(it2->sendtime + 3*86400 > now  && it2->get == 0 )
            {
                ++count;
            }
        }
    }
    return count;
}
UInt32 Player::getPresentCount()
{
    UInt32 count = 1; 
    UInt32 souls = GetStrengthenMgr()->GetSouls();
    if(souls >= 25 )
        count++;
    if(souls >= 50 )
        count++;
    if(souls >= 75 )
        count++;
    if(souls >= 100 )
        count++;
    if(GetShuoShuo()->getShuoShuoCount())
        count++;
    if(GetVar(VAR_INVITES)>=3)
        count++;
    return count;
}
void Player::setPresentLogin()
{
    UInt32 now = TimeUtil::Now();
    if(now > World::getOpenTime() + 15 * 86400 )
        return ;
    UInt32 ct = (TimeUtil::SharpDayT( 0 , now) - TimeUtil::SharpDayT( 0 ,World::getOpenTime()))/86400;
    UInt32 presentLogin = GetVar(VAR_PRESENT_LOGIN);   
    if(presentLogin & (1<<(ct)))
        return ;
    presentLogin |= (1<<ct);
    SetVar(VAR_PRESENT_LOGIN,presentLogin);
}
void Player::sendPresentInfo()
{
    UInt32 now = TimeUtil::Now();
    if(now > World::getOpenTime() + 15 * 86400 )
        return ;
    UInt32 sendPresentValue = GetVar(VAR_SENDPRESENT_VALUE);
    UInt32 getPresentValue = GetVar(VAR_GETPRESENT_VALUE);
    UInt32 PresentLogin = GetVar(VAR_PRESENT_LOGIN);
    UInt32 i=0;
    UInt32 count=0 ;
    while(i<16)
    {
        if(PresentLogin & (1 << i++ ))
            ++count;
    }
    //UInt32 days[]={1,2,3,4,5,7,9,12,15};
    //UInt32 type = 0;
   // for(UInt32 i = 0 ; i< 9 ;++i)
     //   if(count >= days[i])
       //     type = i+1;
    Stream st(REP::NEWRELATION);
    st << static_cast<UInt8>(7);
    st << static_cast<UInt8>(count);
    st <<static_cast<UInt8> (sendPresentValue);
    st <<static_cast<UInt8> (getPresentValue);
    st <<static_cast<UInt8> (GetShuoShuo()->getShuoShuoCount());
    st <<static_cast<UInt8> (GetStrengthenMgr()->GetSouls());
    st <<static_cast<UInt8> (getPresentCount());
    size_t offset = st.size();
    std::map<UInt64,std::vector<StuPresentBox> >::iterator it =_bePresent.begin();
    UInt8 Count = 0;
    st<<Count;
    for(;it!=_bePresent.end();++it)
    {
        std::vector<StuPresentBox> presents = it->second;
        std::vector<StuPresentBox>::iterator it2 = presents.begin();
        Player* player = globalPlayers[it->first];
        for(;it2 != presents.end();++it2)
        {   
            if(it2->sendtime + 3*86400 > now  && it2->get == 0 )
            {
                if(it->first == 0 )
                    st<<static_cast<UInt64>(0);
                else if(player!=NULL)
                    st<<static_cast<UInt64>(player->getId());
                else return ;
                st<<static_cast<UInt8>(it2->awardId);
                st<<static_cast<UInt32>(it2->sendtime);
                ++Count;
            }
        }
    }
    st.data<UInt8>(offset)=Count;
    st << Stream::eos;
    send(st);
//  std::cout<<"type:"<<prayType<<" count:"<<prayCount<<" value:"<<prayValue<< " suctime"<<praySucTime<<std::endl;
}

void Player::getPresentFrombox(UInt64 playerId,UInt32 type,UInt32 sendtime)
{
    UInt32 now = TimeUtil::Now();
    UInt32 getPresent = GetVar(VAR_GETPRESENT_VALUE);
    if(getPresent >=6)
        return ;
    if(now >( World::getOpenTime() + 15 * 86400) )
        return ;
    if( now > sendtime + 3* 86400)
        return ;
    std::map<UInt64,std::vector<StuPresentBox> >::iterator it = _bePresent.find(playerId);
    std::vector<StuPresentBox>::iterator it2= it->second.begin();
    for( ; it2 != it->second.end() ; ++it2 )
    {
        if( it2->awardId != type ||it2->sendtime !=sendtime ||it2->get==1)
            continue ;
        if(!GameAction()->RunPresentAward(this,static_cast<UInt8>( type )))
            return ;
        it2->get=1;
        it->second.erase(it2);
        if(playerId != 0)
        {
            AddVar(VAR_GETPRESENT_VALUE,1);
            char str[16] = {0};
            sprintf(str, "F_130912_1");
            udpLog("haoyouzengsong", str, "", "", "", "", "act");
        }
        else
        {
            char str[16] = {0};
            sprintf(str, "F_130912_2");
            udpLog("haoyouzengsong", str, "", "", "", "", "act");
        }
        DB1().PushUpdateData("REPLACE INTO `player_presentbox` (`id`, `awardid`, `playerId2`, `sendtime`,`get`) VALUES( %" I64_FMT "u ,%u, %" I64_FMT "u, %u , 1 )", getId(),type,playerId,sendtime);
        break;
    }
}
void Player::deletePresent(UInt64 playerId,UInt32 type,UInt32 sendtime)
{
    UInt32 now = TimeUtil::Now();
    if(now >( World::getOpenTime() + 15 * 86400) )
        return ;
    std::map<UInt64,std::vector<StuPresentBox> >::iterator it = _bePresent.find(playerId);
    std::vector<StuPresentBox>::iterator it2= it->second.begin();
    for( ; it2 != it->second.end() ; ++it2 )
    {
        if( it2->awardId != type ||it2->sendtime !=sendtime)
            continue ;
        it->second.erase(it2);
        DB1().PushUpdateData("REPLACE INTO `player_presentbox` (`id`, `awardid`, `playerId2`, `sendtime`,`get`) VALUES( %" I64_FMT "u,%u ,%" I64_FMT "u,0,%u)", getId(),type, playerId,it2->get);
        break;
    }
}

void Player::checkSendRandFriend()
{
    UInt32 thisDay = TimeUtil::SharpDayT();
    UInt32 endDay = TimeUtil::SharpDayT(6, PLAYER_DATA(this, created));
    if(thisDay <= endDay)
    {
        UInt32 targetVal = GetVar(VAR_CLAWARD2);
        if (!(targetVal & TARGET_SENDRANDFRIEND))
        {
            targetVal |= TARGET_SENDRANDFRIEND;
            AddVar(VAR_CTS_TARGET_COUNT, 1);
            SetVar(VAR_CLAWARD2, targetVal);
            sendNewRC7DayTarget();
            newRC7DayUdpLog(1152, 12);
        }
    }
}

void Player::checkSelectPray()
{
    UInt32 thisDay = TimeUtil::SharpDayT();
    UInt32 endDay = TimeUtil::SharpDayT(6, PLAYER_DATA(this, created));
    if(thisDay <= endDay)
    {
        UInt32 targetVal = GetVar(VAR_CLAWARD2);
        if (!(targetVal & TARGET_SELECTPRAY))
        {
            targetVal |= TARGET_SELECTPRAY;
            AddVar(VAR_CTS_TARGET_COUNT, 1);
            SetVar(VAR_CLAWARD2, targetVal);
            sendNewRC7DayTarget();
            newRC7DayUdpLog(1152, 13);
        }
    }
}

void Player::SetAirBookValue()
{
    if(!World::get11TimeNum() > 15)   //登录记录  到12号
        return ;
    UInt32 SummerMeetLogin = GetVar(VAR_AIRBOOK_LOGIN);
    UInt32 off = World::get11TimeNum();
    UInt32 airBookAward = GetVar(VAR_AIRBOOK_LOGIN_AWARD);
    if(off == 0)
        return ;
    SummerMeetLogin |= 1 << (off - 1);
    if(off!= 1 && !(SummerMeetLogin&(1<<(off-2))))
    {
        airBookAward &= (31<<5);
        SetVar(VAR_AIRBOOK_LOGIN_AWARD ,airBookAward ); 
    }
    SetVar(VAR_AIRBOOK_LOGIN, SummerMeetLogin);
    sendAirBookInfo();
}
void Player::sendAirBookInfo()
{
   if(World::get11TimeNum() > 15 )  //登录礼包到12号
        return ;
   UInt32 AirBookLogin = GetVar(VAR_AIRBOOK_LOGIN); 
   UInt32 AirBookAward = GetVar(VAR_AIRBOOK_LOGIN_AWARD);
   UInt8 count = 0;
   UInt8 max = 0;
   UInt32 i = 0;
   while(i<16)
   {
       if(AirBookLogin & (1 << i++ ))
           ++count;
       else 
       {
           if(count!=0)
           {
               max = count;
               count = 0;
           }
       }
   }
   Stream st(REP::ACT);
   st <<static_cast<UInt8>(0x20);
   st <<static_cast<UInt8>(0x02);
   st <<static_cast<UInt8>(0x00);
   st << static_cast<UInt8>(max);
   st << static_cast<UInt16>(AirBookAward);
   st<<Stream::eos; 
   send(st);
}

void Player::sendAirBookOnlineInfo()
{
   if(World::get11TimeNum() > 11 )   //在线礼包 到8号
        return ;
   UInt32 AirBookOnlineTime = GetOnlineTimeToday(); 
   UInt32 AirBookOnlineAward = GetVar(VAR_AIRBOOK_ONLINE_AWARD);
   Stream st(REP::ACT);
   st <<static_cast<UInt8>(0x20);
   st <<static_cast<UInt8>(0x02);
   st <<static_cast<UInt8>(0x01);
   st << static_cast<UInt32>(AirBookOnlineTime);
   st << static_cast<UInt8>(AirBookOnlineAward);
   st<<Stream::eos; 
   send(st);
   
}
void Player::OnSend11GradeInfo(UInt8 type)
{
    if(m_StrengthenMgr==NULL)
        return;
    m_StrengthenMgr->CheckTimeOver();
    m_StrengthenMgr->Send11GradeInfo(type);
}
void Player::getAirBookOnlineAward()
{
    UInt8 type = static_cast<UInt8>(World::get11TimeNum());
    if(type > 11)
        return ;
    UInt32 AirBookOnlineTime = GetOnlineTimeToday(); 
    if(AirBookOnlineTime < 90* 60)
        return ;
    UInt32 onlineAward = GetVar(VAR_AIRBOOK_ONLINE_AWARD);
    if(onlineAward)
        return ;
    if(!GameAction()->RunAirBookOnlineAward(this, type))
         return ;
    SetVar(VAR_AIRBOOK_ONLINE_AWARD,1);
    sendAirBookOnlineInfo();
}
void Player::getAirBookLoginAward(UInt8 type)
{
    UInt32 days[]={4,5,6,11,13};
    if(type > 10 ||type < 1 )
        return ;
    UInt32 off = World::get11TimeNum();
    UInt32 AirBookLogin = GetVar(VAR_AIRBOOK_LOGIN); 
    UInt32 AirBookAward = GetVar(VAR_AIRBOOK_LOGIN_AWARD);
    if(AirBookAward & (1<<(type-1)))
        return ;
    UInt8 count = 0;
    UInt8 max = 0;
    UInt32 i = 0;
    while(i<16)
    {
        if(AirBookLogin & (1 << i++ ))
            ++count;
        else 
        {
            if(count != 0 )
            max = count;
            count = 0;
        }
    }
    if(type < 6 && max < type *3)
        return ;
    if((type >5) &&off != days[type-6])
    {
		UInt32 gold = 10;
		if (getGold() < gold)
        {
            sendMsgCode(0, 1104);
			return ;
        }
        ConsumeInfo ci(TenOneLogin,0,0);
		useGold(gold,&ci);
    } 
    if(!GameAction()->RunAirBookLoginAward(this, type))
         return ;
    AirBookAward |= (1<<(type-1));    
    SetVar(VAR_AIRBOOK_LOGIN_AWARD,AirBookAward);
    sendAirBookInfo();
}

UInt32 Player::getMaxPetBattlePoint()
{
    UInt32 maxbp = 0;
    for(std::map<UInt32, FairyPet *>::iterator it = _fairyPets.begin(); it != _fairyPets.end(); ++ it)
    {
        FairyPet* pet = it->second;
        if(!pet)
            continue;
        UInt32 bp = pet->getBattlePoint();
        if(maxbp < bp)
            maxbp = bp;
    }

    return maxbp;
}

void Player::pushPetInfo2Leaderboard()
{
    for(std::map<UInt32, FairyPet *>::iterator it = _fairyPets.begin(); it != _fairyPets.end(); ++ it)
    {
        FairyPet* pet = it->second;
        if(!pet)
            continue;
        pet->pushPetInfo2Leaderboard();
    }
}

void Player::Add11grade(UInt32 grade)
{
    if(!World::get11Time())
       return ;

    UInt32 gradeAward[]={100,200,400,500,780,1000,1450,2500,5000,12000,24000,36000};
    UInt32 airGrade = GetVar(VAR_11AIRBOOK_GRADE);
    UInt32 value = GetVar(VAR_11AIRBOOK_AWARDSCORE);
    for(UInt8 i =0 ; i< 12 ;i++)
    {
        //if(airGrade < gradeAward[i] &&( airGrade + grade) >=gradeAward[i])
        if(value < gradeAward[i] && ( airGrade + grade) >=gradeAward[i])
            Send11GradeAward(i+1);
    }
    AddVar(VAR_11AIRBOOK_GRADE,grade);
    AddVar(VAR_11AIRBOOK_GRADE_DAY,grade);
    Clan * clan = getClan();
    if(clan!=NULL)
        clan->addClanGradeInAirBook(grade);
    OnSend11GradeInfo(World::get11TimeAirNum());
    On11ClanGradeRank();
    On11CountryGradeRank();
    On11PlayerGradeRank();
}
void Player::AirBookPriase(UInt8 type,UInt64 playerid)
{
    if(!World::get11Time())
        return ;
    Clan* clan = getClan();
    if(clan==NULL)
        return ;
    Player* pl = globalPlayers[playerid];
   if( pl == NULL )
       return ;
   if( pl == this )
       return ;
       Stream st;
   if( type == 0 ) 
   {
       SYSMSGVP(st,4960,getCountry(), getName().c_str(),pl->getCountry(), pl->getName().c_str());
   }
   if(type == 1 )
       SYSMSGVP(st,4961,getCountry(), getName().c_str(),pl->getCountry(), pl->getName().c_str());
   clan->broadcast(st);
}
void Player::SendClanMemberGrade()
{
    GameMsgHdr hdr(0x1D1, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr, NULL);
}
void Player::Send11GradeAward(UInt8 type)
{
    if(type > 12)
        return ;
    UInt32 gradeAward[]={100,200,400,500,780,1000,1450,2500,5000,12000,24000,36000};
    UInt32 value = GetVar(VAR_11AIRBOOK_AWARDSCORE);
    if(gradeAward[type-1] <= value)
        return ;
    else
        SetVar(VAR_11AIRBOOK_AWARDSCORE,gradeAward[type-1]);

    static MailPackage::MailItem s_item[][6] = {
        {{9424,1}, {503,1}},
        {{500,2},{517,2},{501,2}},
        {{513,3},{9414,2}},
        {{516,2},{16001,2},{555,3}},
        {{547,3},{503,5}},
        {{1126,5},{556,3},{551,5}},
        {{9457,3},{9498,2},{1325,2},{515,2},{9438,2}},
        {{1727,1},{9076,4}},
        {{554,25},{9418,25},{13075,1}},
        {{13097,1},{556,30},{9021,15}},
        {{9019,15},{9075,15},{1734,1},{13138,1}},
        {{9022,20},{9068,20},{1735,1},{13019,1}},
    };
    static UInt32 count[] = {2,3,2,3,2,3,5,2,3,3,4,4};
    SYSMSG(title, 4954);
    if(type)
    {
        SYSMSGV(content, 4955,gradeAward[type-1]);
        Mail * mail = GetMailBox()->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        //player->sendMailItem(4153, 4154, items, sizeof(items)/sizeof(items[0]), false);
        if(mail)
        {
                mailPackageManager.push(mail->id, s_item[type-1], count[type-1], true);
        }
        std::string strItems;
        for(UInt8 index = 0; index < count[type-1]; ++ index)
        {
            strItems += Itoa(s_item[type-1][index].id);
            strItems += ",";
            strItems += Itoa(s_item[type-1][index].count);
            strItems += "|";
        }
        DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, Activity, title, content, strItems.c_str(), mail->recvTime);
    }
    char str[16] = {0};
    sprintf(str, "F_130926_%d",type);
    udpLog("tianshuqiyuan", str, "", "", "", "", "act");
}

void Player::loadQiShiBanFromDB(UInt32 score, UInt32 step, UInt32 beginTime, UInt32 endTime, UInt16 awardMark)
{
    m_qishiban.score = score;
    m_qishiban.step = step;
    m_qishiban.beginTime = beginTime;
    m_qishiban.endTime = endTime;
    m_qishiban.awardMark = awardMark;

    if(endTime > beginTime) //宕机特殊处理
    {
        UInt32 tempTime = endTime - beginTime - 10;
        m_qishiban.score += (100 + tempTime);
        AddVar(VAR_QISHIDOUFA_CYCLE_HIGHESTSCORE, (100 + tempTime));
        m_qishiban.step += 1;
        m_qishiban.beginTime = 0;
        m_qishiban.endTime = 0;
    }
}

void Player::QiShiBanState()
{
    if(!World::getQiShiBanTime())
        return;

    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x23) << static_cast<UInt8>(0x11);

    UInt8 mark = 0;
    if((GetQiShiBanEndTime() > _playerData.lastOnline) && (GetQiShiBanBeginTime() < GetQiShiBanEndTime())) // 继续（考虑玩家掉线可能）
    {
        mark = 1;

        if (GetVar(VAR_QISHI_FRIEND_SEND_COUNT) < GetVar(VAR_QISHI_FRIEND_USE_COUNT))
            SetVar(VAR_QISHI_FRIEND_USE_COUNT, GetVar(VAR_QISHI_FRIEND_SEND_COUNT));
        UInt32 restNum2 = GetVar(VAR_QISHI_FRIEND_SEND_COUNT) - GetVar(VAR_QISHI_FRIEND_USE_COUNT);
        UInt32 restNum = GetVar(VAR_QISHIDOUFA_REST_NUM);
        if(0 == restNum)
            restNum = 1;
        else
            restNum = 0;
        restNum += restNum2;

        UInt32 time = GetQiShiBanEndTime() - _playerData.lastOnline;
        UInt32 totalScore = GetVar(VAR_QISHIDOUFA_CYCLE_HIGHESTSCORE);
        UInt32 highestScore = WORLD().GetMemCach_qishibanScore(getOpenId());
        if(totalScore > highestScore)
        {
            WORLD().SetMemCach_qishiban(totalScore, getOpenId(), getName().c_str(), getMainFighter()?((getMainFighter()->getId()<<4)|getMainFighter()->getSex()):0);
            highestScore = totalScore;
        }

        st << mark << static_cast<UInt16>(GetQiShiBanStep()) << GetQiShiBanScore() << static_cast<UInt8>(restNum) 
           << GetQiShiBanAwardMark() << time << highestScore << Stream::eos;
    }
    else
        st << mark << Stream::eos;

    send(st);
}

void Player::MyQSBInfo()
{
    if(!World::getQiShiBanTime())
        return;

    if (GetVar(VAR_QISHI_FRIEND_SEND_COUNT) < GetVar(VAR_QISHI_FRIEND_USE_COUNT))
        SetVar(VAR_QISHI_FRIEND_USE_COUNT, GetVar(VAR_QISHI_FRIEND_SEND_COUNT));
    UInt32 restNum2 = GetVar(VAR_QISHI_FRIEND_SEND_COUNT) - GetVar(VAR_QISHI_FRIEND_USE_COUNT);
    UInt32 restNum = GetVar(VAR_QISHIDOUFA_REST_NUM);
    if(0 == restNum)
        restNum = 1;
    else
        restNum = 0;
    restNum += restNum2;

    UInt32 addTime = GetNextStepTime();
    UInt32 lastFailHighestScore = GetVar(VAR_QISHIDOUFA_LASTFAIL_HIGHTERSCORE);
    UInt32 cycleHighestScore = GetVar(VAR_QISHIDOUFA_CYCLE_HIGHESTSCORE);

    UInt32 highestScore = WORLD().GetMemCach_qishibanScore(getOpenId());
    if(cycleHighestScore > highestScore)
    {
        WORLD().SetMemCach_qishiban(cycleHighestScore, getOpenId(), getName().c_str(), getMainFighter()?((getMainFighter()->getId()<<4)|getMainFighter()->getSex()):0);
        highestScore = cycleHighestScore;
    }

    UInt8 mark = 0;
    if(GetQiShiBanBeginTime() == GetQiShiBanEndTime()
            && 0 != GetQiShiBanBeginTime()
            && 0 != GetQiShiBanEndTime())
    {
        mark = 1;
    }

    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x23) << static_cast<UInt8>(0x07) << static_cast<UInt16>(GetQiShiBanStep()) 
        << GetQiShiBanScore() << static_cast<UInt8>(restNum) << addTime << GetQiShiBanAwardMark() << highestScore 
        << lastFailHighestScore << mark << cycleHighestScore << Stream::eos;

    send(st);
}

void Player::OnQiShiBanRank(UInt32 page)
{
    if(World::getQiShiBanTime())
    {
        m_curPage = page;
        GameMsgHdr hdr(0x1D8, WORKER_THREAD_WORLD, this, sizeof(page));
        GLOBAL().PushMsg(hdr, &page);
    }
}

void Player::ReqStartQSB()
{
    if(!World::getQiShiBanTime())
        return;

    if(GetQiShiBanStep() >= 999)
        return;

    SetQiShiBanKey(uRand(100));
    int randValue = (GetQiShiBanKey() + 23) * 6 / 3 - 7;

    UInt32 addTime = GetNextStepTime();
    SetQiShiBanBeginTime(TimeUtil::Now());
    SetQiShiBanEndTime(GetQiShiBanBeginTime() + addTime);


    if (GetVar(VAR_QISHI_FRIEND_SEND_COUNT) < GetVar(VAR_QISHI_FRIEND_USE_COUNT))
        SetVar(VAR_QISHI_FRIEND_USE_COUNT, GetVar(VAR_QISHI_FRIEND_SEND_COUNT));
    UInt32 restNum2 = GetVar(VAR_QISHI_FRIEND_SEND_COUNT) - GetVar(VAR_QISHI_FRIEND_USE_COUNT);
    UInt32 restNum = GetVar(VAR_QISHIDOUFA_REST_NUM);
    if(0 == restNum)
        restNum = 1;
    else
        restNum = 0;
    restNum += restNum2;

    Update_QSB_DB();

    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x23) << static_cast<UInt8>(0x02) << randValue << addTime << static_cast<UInt8>(restNum) << Stream::eos;
    send(st);
}

void Player::FinishCurStep(int randMark, UInt32 clintTime)
{
    if(!World::getQiShiBanTime())
        return;

    if(GetQiShiBanStep() >= 999)
        return;

    if(GetQiShiBanKey() != static_cast<UInt16>((randMark - 22) / 4 + 77))
        return;

    UInt32 tempTime = 0;
    UInt32 specialTime = 0;
    UInt32 time = 0;

    if(m_qishiban.endTime >= TimeUtil::Now())
    {
        tempTime = GetQiShiBanEndTime() - TimeUtil::Now(); //服务器剩余时间
        if(clintTime < tempTime) // 服务器剩余时间和客户端剩余时间做比较，取少的
            tempTime = clintTime;

        specialTime = GetQiShiBanEndTime() - GetQiShiBanBeginTime() - 10; //拼图最少使用10秒钟
    }
    else
        return;

    if(tempTime > specialTime)
        time = specialTime;
    else
        time = tempTime;

    UInt32 score = 100 + time; // 每关积分 = 100 + 剩余时间；

    AddVar(VAR_QISHIDOUFA_CYCLE_HIGHESTSCORE, score);
    AddQiShiBanScore(score);
    AddQiShiBanStep();
    SetQiShiBanBeginTime(0);
    SetQiShiBanEndTime(0);
    SetQiShiBanAddTimeNum(0);

    //UInt32 totalScore = GetQiShiBanScore();
    UInt32 totalScore = GetVar(VAR_QISHIDOUFA_CYCLE_HIGHESTSCORE);
    GameMsgHdr hdr(0x1D7, WORKER_THREAD_WORLD, this, sizeof(totalScore));
    GLOBAL().PushMsg(hdr, &totalScore);

    udpLog("qishidoufa", "F_131203_1", "", "", "", "", "act");
    UInt8 mark = 0;
    if(GetQiShiBanScore() >= 100 && (GetQiShiBanScore() - score) < 100)
    {
        mark = 1;
        udpLog("qishidoufa", "F_131203_2", "", "", "", "", "act");
    }
    else if(GetQiShiBanScore() >= 1000 && (GetQiShiBanScore() - score) < 1000)
    {
        mark = 2;
        udpLog("qishidoufa", "F_131203_3", "", "", "", "", "act");
    }
    else if(GetQiShiBanScore() >= 1600 && (GetQiShiBanScore() - score) < 1600)
    {
        mark = 3;
        udpLog("qishidoufa", "F_131203_4", "", "", "", "", "act");
    }
    else if(GetQiShiBanScore() >= 2000 && (GetQiShiBanScore() - score) < 2000)
    {
        mark = 4;
        udpLog("qishidoufa", "F_131203_5", "", "", "", "", "act");
    }
    else if(GetQiShiBanScore() >= 2800 && (GetQiShiBanScore() - score) < 2800)
    {
        mark = 5;
        udpLog("qishidoufa", "F_131203_6", "", "", "", "", "act");
    }

    if(mark > 0)
        SetQiShiBanAwardMark(SET_BIT(GetQiShiBanAwardMark(), (mark-1)*2));

    Update_QSB_DB();

    UInt32 highestScore = WORLD().GetMemCach_qishibanScore(getOpenId());
    if(totalScore > highestScore)
    {
        WORLD().SetMemCach_qishiban(totalScore, getOpenId(), getName().c_str(), getMainFighter()?((getMainFighter()->getId()<<4)|getMainFighter()->getSex()):0);
        highestScore = totalScore;
    }

    /*if(GetQiShiBanScore() > highestScore)
    {
        WORLD().SetMemCach_qishiban(GetQiShiBanScore(), getOpenId(),  getMainFighter()?((getMainFighter()->getId()<<4)|getMainFighter()->getSex()):0);
        highestScore = GetQiShiBanScore();
    }*/

    UInt32 addTime = GetNextStepTime();

    if (GetVar(VAR_QISHI_FRIEND_SEND_COUNT) < GetVar(VAR_QISHI_FRIEND_USE_COUNT))
        SetVar(VAR_QISHI_FRIEND_USE_COUNT, GetVar(VAR_QISHI_FRIEND_SEND_COUNT));
    UInt32 restNum2 = GetVar(VAR_QISHI_FRIEND_SEND_COUNT) - GetVar(VAR_QISHI_FRIEND_USE_COUNT);
    UInt32 restNum = GetVar(VAR_QISHIDOUFA_REST_NUM);
    if(0 == restNum)
        restNum = 1;
    else
        restNum = 0;
    restNum += restNum2;

    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x23) << static_cast<UInt8>(0x03) << static_cast<UInt16>(GetQiShiBanStep()) << GetQiShiBanScore() 
       << addTime << GetQiShiBanAwardMark() << highestScore << static_cast<UInt8>(restNum) << totalScore << Stream::eos;
    send(st);

    OnQiShiBanRank(m_curPage);
}

void Player::Fail()
{
    if(!World::getQiShiBanTime())
        return;

    SetQiShiBanBeginTime(GetQiShiBanEndTime());
    SetQiShiBanAddTimeNum(0);
    
    Update_QSB_DB();
    MyQSBInfo();
    SetVar(VAR_QISHIDOUFA_LASTFAIL_HIGHTERSCORE, WORLD().GetMemCach_qishibanScore(getOpenId()));
}

void Player::AddTime()
{
    if(!World::getQiShiBanTime())
        return;

    if(!hasChecked())
        return;

    UInt8 mark = 0;
    UInt32 tempTime = 0;
    if(GetQiShiBanEndTime() > TimeUtil::Now())
        tempTime = GetQiShiBanEndTime() - TimeUtil::Now();
    else
        mark = 1;

    if(GetQiShiBanAddTimeNum() >= 5)
        mark = 1;

    if(0 == getCoupon() && 0 == getGold())
    {
        sendMsgCode(0, 1101);
        mark = 1;
    }

    if(0 == mark)
    {
        if(getCoupon() >= 1)
        {
            ConsumeInfo ci(QSBAddTime, 0, 0);
            useCoupon(1, &ci);
        }
        else if(getGold() >= 1)
        {
            ConsumeInfo ci(QSBAddTime, 0, 0);
            useGold(1, &ci);
        }

        AddQiShiBanAddTimeNum();
        SetQiShiBanEndTime(GetQiShiBanEndTime() + 30);
        tempTime += 30;
        Update_QSB_DB();
    }

    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x23) << static_cast<UInt8>(0x04) << mark << tempTime << Stream::eos;
    send(st);
}

void Player::RestCurStep()
{
    if(!World::getQiShiBanTime())
        return;

    if(GetQiShiBanStep() >= 999)
        return;

    if(GetQiShiBanBeginTime() == GetQiShiBanEndTime()
            && 0 != GetQiShiBanBeginTime()
            && 0 != GetQiShiBanEndTime())
    {
        if (GetVar(VAR_QISHI_FRIEND_USE_COUNT) >= GetVar(VAR_QISHI_FRIEND_SEND_COUNT))
        {
            UInt32 restNum = GetVar(VAR_QISHIDOUFA_REST_NUM);

            if(restNum)
            {
                if(!hasChecked())
                    return;

                UInt8 useMoney = 10;
                if(getCoupon() + getGold() >= useMoney)
                {
                    ConsumeInfo ci(RestStep, 0, 0);
                    if(getCoupon() > 0)
                    {
                        if(getCoupon() < useMoney)
                        {
                            useMoney -= getCoupon();
                            useCoupon(getCoupon(), &ci);
                        }
                        else
                        {
                            useCoupon(useMoney, &ci);
                            useMoney = 0;
                        }
                    }

                    if(useMoney > 0)
                        useGold(useMoney, &ci);
                }
                else
                {
                    sendMsgCode(0, 1101);
                    return;
                }
            }
            AddVar(VAR_QISHIDOUFA_REST_NUM, 1);
        }
        else
            AddVar(VAR_QISHI_FRIEND_USE_COUNT, 1);
    }
    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x23) << static_cast<UInt8>(0x12) << Stream::eos;
    send(st);
}

void Player::ContinueCurStep()
{
    if(!World::getQiShiBanTime())
        return;

    SetQiShiBanKey(uRand(100));
    int randValue = (GetQiShiBanKey() + 23) * 6 / 3 - 7; 

    SetQiShiBanBeginTime(TimeUtil::Now());

    UInt32 addTime = 0;
    if(GetQiShiBanEndTime() > _playerData.lastOnline)
        addTime = GetQiShiBanEndTime() - _playerData.lastOnline; // 掉线前剩余时间

    SetQiShiBanEndTime(GetQiShiBanBeginTime() + addTime); // 重置结束时间
    Update_QSB_DB();

    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x23) << static_cast<UInt8>(0x08) << randValue << addTime << Stream::eos;
    send(st);
}


void Player::GetPersonalAward(UInt8 opt)
{
    if(opt > 0 && opt <= 5)
    {
        UInt16 state = GetQiShiBanAwardMark();
        UInt8 mark = GET_BIT_2(state, (opt-1));

        if(1 == mark)
        {
            bool res = 0;
            if(2 == opt || 3 == opt)
            {
                if(GetPackage()->GetRestPackageSize() < 3)
                    res = true;
            }
            else
            {
                if(GetPackage()->GetRestPackageSize() < 2)
                    res = true;
            }

            if(res)
            {
                sendMsgCode(0, 1011);
                return;
            }

            switch(opt)
            {
            case 1:
                {
                    if(GetQiShiBanScore() >= 100)
                        GetPackage()->AddItem(5053, 1, true, false, FromQiShiBan);
                    else
                        return;
                }
                break;
            case 2:
                {
                    if(GetQiShiBanScore() >= 1000)
                    {
                        GetPackage()->AddItem(5053, 1, true, false, FromQiShiBan);
                    }
                    else
                        return;
                }
                break;
            case 3:
                {
                    if(GetQiShiBanScore() >= 1600)
                    {
                        GetPackage()->AddItem(5054, 1, true, false, FromQiShiBan);
                    }
                    else
                        return;
                }
                break;
            case 4:
                {
                    if(GetQiShiBanScore() >= 2000)
                    {
                        GetPackage()->AddItem(5054, 2, true, false, FromQiShiBan);
                    }
                    else
                        return;
                }
                break;
            case 5:
                {
                    if(GetQiShiBanScore() >= 2800)
                        GetPackage()->AddItem(5055, 1, true, false, FromQiShiBan);
                    else
                        return;
                }
                break;
            }

            state = CLR_BIT(state, ((opt - 1) * 2));
            state = SET_BIT(state, ((opt - 1) * 2 + 1));
            SetQiShiBanAwardMark(state);
            Update_QSB_DB();
        }
        else
            return;

        Stream st(REP::ACT);
        st << static_cast<UInt8>(0x23) << static_cast<UInt8>(0x09) << GetQiShiBanAwardMark() << Stream::eos;
        send(st);
    }
}

UInt32 Player::GetNextStepTime()
{
    UInt32 addTime = 0;
    if(0 == GetQiShiBanStep())
        addTime = 600;
    else if(GetQiShiBanStep() < 5)
        addTime = 300;
    else if(GetQiShiBanStep() < 10)
        addTime = 120;
    else if(GetQiShiBanStep() < 20)
        addTime = 20;
    else
        addTime = 15;

    return addTime;
}

void Player::Update_QSB_DB()
{
    DB1().PushUpdateData("REPLACE INTO `player_qishiban` VALUES(%" I64_FMT "u, %u, %u, %u, %u, %u)", getId(), GetQiShiBanStep(), GetQiShiBanScore(), GetQiShiBanBeginTime(), GetQiShiBanEndTime(), GetQiShiBanAwardMark());
}

void Player::CleanQiShiBan(UInt8 mark /* = 0 */)
{
    if(0 == mark)
    {
        SetQiShiBanBeginTime(0);
        SetQiShiBanEndTime(0);
        SetQiShiBanKey(0);
    }
    SetQiShiBanScore(0);
    SetQiShiBanStep(0);
    /*SetQiShiBanBeginTime(0);
    SetQiShiBanEndTime(0);
    SetQiShiBanKey(0);*/
    SetQiShiBanAwardMark(0);
    SetVar(VAR_QISHIDOUFA_REST_NUM, 0);

    DB1().PushUpdateData("DELETE FROM `player_qishiban` WHERE `playerId` = %" I64_FMT "u", getId());
}

void Player::ReqQiShiBanPlayCount(vector<std::string>& nameList)
{
    // 向好友索求七石板次数
    for (vector<std::string>::iterator it = nameList.begin(); it != nameList.end(); ++it)
    {
        Stream st(REP::ACTIVE);
        st << static_cast<UInt8>(0x23);
        st << static_cast<UInt8>(0x13);
        st << *it;
        Player * player = globalNamedPlayers[fixName(*it)];
        if (player)
        {
            SYSMSGV(title, 4977);
            SYSMSGV(content, 4978, getCountry(), getName().c_str());
            player->GetMailBox()->newMail(this, 0x28, title, content);
            st << static_cast<UInt32>(0);
        }
        else
            st << static_cast<UInt32>(1);
        st << Stream::eos;
        send(st);
    }
}

UInt32 Player::GetQQFriendScore(const char * openId)
{
    UInt32 score = WORLD().GetMemCach_qishibanScore(openId);
    return score;
}

bool Player::GetQQFriendInfo(const char * openId, std::string& info)
{
    return WORLD().GetMemCach_qishibanInfo(openId, info);
}

bool Player::CheckReqDataTime()
{
    int time = TimeUtil::Now() - m_checkTime;
    if(0 == m_checkTime || time > 30)
        return true;

    return false;
}

void Player::SetReqDataTime(UInt8 mark)
{
    if(0 == mark)
        m_checkTime = 0;
    else
        m_checkTime = TimeUtil::Now();
}

/*bool Player::CheckReqDataTime1()
{
    int time = TimeUtil::Now() - m_checkTime1;
    if(0 == m_checkTime1 || time > 30)
        return true;

    return false;
}

void Player::SetReqDataTime1(UInt8 mark)
{
    if(0 == mark)
        m_checkTime1 = 0;
    else
        m_checkTime1 = TimeUtil::Now();
}*/

void Player::setGGValue()
{
    if(World::getGGTime() != 1)//开服活动才有初始10次
        return ;
    if(GetVar(VAR_GUANGGUN_ADVANCE_NUM)==0)
        SetVar(VAR_GUANGGUN_ADVANCE_NUM,11);
}
void Player::setGuangGunTask(UInt8 task,UInt8 taskmaxnum)
{
    m_gginfo.task =task;
    m_gginfo.taskCom = taskmaxnum;
    m_gginfo.tasknum = 0;
    UpdateGGInfo();
}
void Player::GuangGunCompleteTask(UInt8 type ,UInt8 task)
{
    if(!World::getGGTime())
        return ; 
    //UInt32 now = TimeUtil::Now();
    if(type == 0)
    {
        if( m_gginfo.task != task)
            return;
        if(m_gginfo.tasknum == m_gginfo.taskCom )
            return ;
        else m_gginfo.tasknum++;
    }
    else if(type == 1 && m_gginfo.task != 0)
    {
        UInt8 tmpid = m_gginfo.task;
        if(World::getGGTime() == 1)
        {
            UInt32 gold = 10; 
            if (getGold() < gold)
            {
                sendMsgCode(0, 1104);
                return ;
            }
            ConsumeInfo ci(GuangGun,0,0);
            useGold(gold,&ci);       
        }
        else
        {
            if(getGoldOrCoupon() < 1)
            {
                sendMsgCode(0, 1101);
                return;
            }
            ConsumeInfo ci(GuangGun, 0, 0);
            useGoldOrCoupon(1, &ci);
        }
        m_gginfo.task =0;
        m_gginfo.taskCom = 0;
        m_gginfo.tasknum = 0;
        AddGuangGunScore();
        AddVar(VAR_GUANGGUN_TODAY_TASK,1);
        getGGTaskAward(tmpid);
    }
    else if (type == 2)
    {
        m_gginfo.task =0;
        m_gginfo.taskCom = 0;
        m_gginfo.tasknum = 0;
    }
    else if(type == 3)
    {
        if(m_gginfo.tasknum !=m_gginfo.taskCom || m_gginfo.task == 0)
            return ;
        UInt8 tmpid = m_gginfo.task;
        {
            m_gginfo.task =0;
            m_gginfo.taskCom = 0;
            m_gginfo.tasknum = 0;
            AddGuangGunScore();
            AddVar(VAR_GUANGGUN_TODAY_TASK,1);
            getGGTaskAward(tmpid);
        }
        
    }
    UpdateGGInfo();
}
void Player::AddGuangGunScore(UInt8 score,UInt8 type)
{
    if(World::getGGTime() == 2 && type == 0)
    {
        if(GetVar(VAR_GUANGGUN_TENTIMES) == 1)
            score *= 10;
    }

    AddVar(VAR_GUANGGUN_TODAY_SCORE,score);
    m_gginfo.score+=score;
    Player* pl = getGGTimeCaptain(); 
    UInt32 grade = getGGTimeScore(); 
    if(World::getGGTime() == 2)
    {
        /*
        if(score == 0 )
        {
            SetVar(VAR_GUANGGUN_TODAY_TEAMSCORE,0); 
        }
        else
        {
            UInt32 tmp = GetVar(VAR_GUANGGUN_TODAY_TEAMSCORE);
            if(score != 0 && tmp + score >= 50)
            {
                UInt8 addNum = 0;
                UInt8 addNum1 = 0;
                if(tmp < 50 && (tmp + score) >= 50)
                    addNum++;      
                if(tmp < 70 && (tmp + score) >= 70)
                    addNum++;      
                if(tmp < 150 && (tmp + score) >= 150)
                    addNum++;      
                if(tmp % 200 > (tmp + score) % 200)
                    AddVar(VAR_GUANGGUN_TEAMSTAR,1);
                if(addNum)
                {
                    UInt8 todayReciveNum = GET_BIT_8(GetVar(VAR_GUANGGUN_TODAY_STAR),0);
                    UInt32 tmp_num = GetVar(VAR_GUANGGUN_TODAY_STAR);
                    todayReciveNum += addNum;
                    tmp_num = SET_BIT_8(tmp_num,0,todayReciveNum);
                    SetVar(VAR_GUANGGUN_TODAY_STAR,tmp_num); 
                }
            }
            
            AddVar(VAR_GUANGGUN_TODAY_TEAMSCORE,score);//增加团队积分      
        }
        */
        if((score == 0 && pl == this) || (score != 0)) 
        {
            if(pl != NULL)
            {
                GameMsgHdr hdr(0x369,  pl->getThreadId(), pl, sizeof(score));
                GLOBAL().PushMsg(hdr, &score);
            }
            if(m_gginfo.player1 != NULL || m_gginfo.player2 != NULL)
            {
                if(pl->getGGPlayer1() != NULL)
                {
                    GameMsgHdr hdr(0x369,  pl->getGGPlayer1()->getThreadId(), pl->getGGPlayer1(), sizeof(score));
                    GLOBAL().PushMsg(hdr, &score);
                }
                if(pl->getGGPlayer2() != NULL)
                {
                    GameMsgHdr hdr(0x369,  pl->getGGPlayer2()->getThreadId(), pl->getGGPlayer2(), sizeof(score));
                    GLOBAL().PushMsg(hdr, &score);
                }

            }
        }
    }

    GameMsgHdr hdr(0x1D5, WORKER_THREAD_WORLD, pl, sizeof(grade));
    GLOBAL().PushMsg(hdr, &grade);
    GameMsgHdr hdr1(0x1D6, WORKER_THREAD_WORLD, pl, sizeof(grade));
    GLOBAL().PushMsg(hdr1, &grade);
    UpdateGGInfo();
}

void Player::roamingGuangGun(UInt8 pos)
{
    if(World::getGGTime() == 1)
    {
        //    udpLog("qixi", "I_9122_2", "", "", "", "", "act");
        if(m_gginfo.tasknum != 0)
            return ;
        UInt32 advance = GetVar(VAR_GUANGGUN_ADVANCE_NUM);
        if( advance < 2 || advance > 35 )
            return ;
        UInt8 pos2 = GameAction()->onRoamingGuangGun(this, pos);
        //   qixiUdpLog(1083);
        m_gginfo.pos = pos2;
        SetVar(VAR_GUANGGUN_ADVANCE_NUM,advance-1);
        Stream st(REP::ACTIVE);   //GG
        st << static_cast<UInt8>(0x22) << static_cast<UInt8>(0x03) << pos2;
        st << Stream::eos;
        send(st);
        UpdateGGInfo();
        sendGuangGunInfo();
            
        char str[16] = {0};
        sprintf(str, "F_131109_1");
        udpLog("qingyiluopan", str, "", "", "", "", "act");
    }
    else
    {
        if(m_gginfo.tasknum != 0)
            return ;
        UInt8 times = 1;
        if(GetVar(VAR_GUANGGUN_TENTIMES) == 1)
            times = 10;
        UInt16 mCount = GetPackage()->GetItemAnyNum(16021) ;
        if(mCount < times)
            return;
        UInt8 pos2 = GameAction()->onNewRoamingGuangGun(this, pos);
        m_gginfo.pos = pos2;
        GetPackage()->DelItemAny(16021, 1 * times);
        Stream st(REP::ACTIVE);   //GG
        st << static_cast<UInt8>(0x22) << static_cast<UInt8>(0x03) << pos2 << static_cast<UInt8>(GetVar(VAR_GUANGGUN_TENTIMES));
        st << Stream::eos;
        send(st);
        UpdateGGInfo();
        sendGuangGunInfo();
            
        char str[16] = {0};
        sprintf(str, "F_131109_1");
        udpLog("qingyiluopan", str, "", "", "", "", "act");  
    }

}
UInt32 Player::getGGTimeScore()
{
    Player * pl = this;
    if(getGGStatus()==2)
        pl = getGGTimeCaptain();
    if(pl ==NULL)
        return getGGScore();
    UInt32 score = 0;
    score +=pl->getGGScore();
    if(pl->m_gginfo.player1!=NULL)
        score +=pl-> m_gginfo.player1->getGGScore(); 
    if(pl->m_gginfo.player2!=NULL)
        score +=pl->m_gginfo.player2->getGGScore(); 
    return score;
}
UInt32 Player::getGGTimeTodayScore()
{
    Player * pl = this;
    if(getGGStatus()==2)
        pl = getGGTimeCaptain();
    if(pl ==NULL)
        return getGGScore();
    UInt32 score = 0;
    score +=pl->GetVar(VAR_GUANGGUN_TODAY_SCORE);
    if(pl->m_gginfo.player1!=NULL)
        score +=pl-> m_gginfo.player1->GetVar(VAR_GUANGGUN_TODAY_SCORE); 
    if(pl->m_gginfo.player2!=NULL)
        score +=pl->m_gginfo.player2->GetVar(VAR_GUANGGUN_TODAY_SCORE); 
    return score;
}
Player* Player::getGGTimeCaptain(UInt64 captainId)
{
   if(captainId != 0 )
   {
        Player* pl = globalPlayers[captainId];
        if(pl == NULL)
            return NULL;
        m_gginfo.status = 2;
        m_gginfo.player1 = pl ;
        m_gginfo.player2 = NULL;
        UpdateGGInfo();
   }
   if(getGGStatus()==0 )
       return this;
   if(getGGStatus() == 1 && m_gginfo.player1 ==NULL && m_gginfo.player2 ==NULL)
   {
       m_gginfo.status = 0;
       return this;
   }
   if(getGGStatus() == 1)
       return this;
   if(m_gginfo.player1 !=NULL && m_gginfo.player1->getGGStatus()==1)
       return m_gginfo.player1;
   else if(m_gginfo.player2 !=NULL && m_gginfo.player2->getGGStatus()==1)
       return m_gginfo.player2;
   else if(!captainId)
   {
       m_gginfo.status = 0 ;
       m_gginfo.player1 = NULL;
       m_gginfo.player2 = NULL;
       AddGuangGunScore(0);
   }
   UpdateGGInfo();
   return this;
}
void Player::sendGuangGunInfo()
{
    setGGValue();
    UInt32 times = GetVar(VAR_GUANGGUN_TIMES);
    UInt32 getRoll = 0;   //财富之星数
    UInt32 advanceNum = GetVar(VAR_GUANGGUN_ADVANCE_NUM); // NUM-1表示剩余次数
    UInt32 advanceNumLeft = GetVar(VAR_GUANGGUN_ADVANCE_OTHER);
    UInt32 todayScore = GetVar(VAR_GUANGGUN_TODAY_SCORE);
    UInt32 advanceBuy = GetVar(VAR_GUANGGUN_ADVANCE_BUY);

    UInt32 todayNum = GetVar(VAR_GUANGGUN_GETROLL); 
    UInt32 todaytaskNum = GetVar(VAR_GUANGGUN_TODAY_TASK); 
    UInt32 grade = getGGTimeTodayScore(); 
    UInt32 toNum = (grade>300?300:grade)/100;
    if(todayNum < toNum && toNum <=3 )
    {
        getRoll = toNum - todayNum;
    }


    if(advanceNumLeft>24)
        return ;
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x22) << static_cast<UInt8>(0x01) << static_cast<UInt8>(0x01);
    st <<static_cast<UInt8>(m_gginfo.status);
    st<<static_cast<UInt8>(times/20)<<static_cast<UInt8>(getRoll)<<(m_gginfo.counts)<<static_cast<UInt8>(advanceNum-1)<<static_cast<UInt8>(11 + advanceNumLeft - advanceNum)<<static_cast<UInt8>(advanceBuy)<<static_cast<UInt8>(advanceNumLeft)<< getGGTimeTodayScore()<<getGGTimeScore()<<todayScore<<m_gginfo.score<<m_gginfo.pos<<m_gginfo.task<<m_gginfo.tasknum<<m_gginfo.taskCom<<static_cast<UInt8>(todaytaskNum);    
    giveGGTeamMemberInfo(st);
    if(World::getGGTime() == 2)
    {
        st << static_cast<UInt8>(GET_BIT_8(GetVar(VAR_GUANGGUN_TODAY_STAR),0));
        st << GetVar(VAR_GUANGGUN_TEAMSTAR);
        st << GetVar(VAR_GUANGGUN_TODAY_TEAMSCORE);
        st << GetVar(VAR_GUANGGUN_TENTIMES);
    }
    st<<Stream::eos;
    send(st);
}
bool Player::EnterGGTeam(Player* pl)  
{
    if(getGGStatus()!=0 ||m_gginfo.player1 !=NULL ||m_gginfo.player2 != NULL)
    {
   		SYSMSG_SENDV(189, this);
        return false;
    }
    //std::vector<Player* >vec = pl->getGGPlayers();
    m_gginfo.status = 2;
    m_gginfo.player1 = pl;
    if(pl->getThreadId() == getThreadId())
    {
        pl->beGGTeam(getId());
    }
    else
    {
        UInt64 id = getId();
        GameMsgHdr hdr(0x350, pl->getThreadId(), pl, sizeof(id));
        GLOBAL().PushMsg(hdr, &id);
    }
    UInt32 grade = 0;
    GameMsgHdr hdr1(0x1D5, WORKER_THREAD_WORLD, this, sizeof(grade));
    GLOBAL().PushMsg(hdr1, &grade);
    UpdateGGInfo();
    return true;
}
void Player::LeaveGGTime()
{
    Player* pl = getGGTimeCaptain(); 
    if(m_gginfo.status == 1 && getGGPlayer1()!=NULL && getGGPlayer2()!=NULL )    //队长离队
    {
        Player* pl1 = getGGPlayer1();
        UInt64 id = getGGPlayer2()->getId();
        GameMsgHdr hdr(0x350, pl1->getThreadId(), pl1, sizeof(id));
        GLOBAL().PushMsg(hdr, &id);
        getGGPlayer2()->getGGTimeCaptain(pl1->getId());
        m_gginfo.status = 0; 
    }
    else 
    {
        m_gginfo.status = 0; 
        if(getGGPlayer1()!=NULL)
            getGGPlayer1()->getGGTimeCaptain();
        if(getGGPlayer2()!=NULL)
            getGGPlayer2()->getGGTimeCaptain();
    }
    m_gginfo.player1 = NULL;
    m_gginfo.player2 = NULL;
    AddGuangGunScore(0);
    if(pl->getThreadId() == getThreadId())
    {
        pl->GGTeamPlayerLeave(getId());
    }
    else
    {
        UInt64 id = getId();
        GameMsgHdr hdr(0x351, pl->getThreadId(), pl, sizeof(id));
        GLOBAL().PushMsg(hdr, &id);
    }
    UpdateGGInfo();
    sendGuangGunInfo();
}
void Player::beGGTeam(UInt64 id )    //被接受组队   flag =1  表示队长替换
{
    Player* pl = globalPlayers[id];
    if(pl==NULL)
        return ;
    if((m_gginfo.player1!=NULL&&m_gginfo.player2!=NULL) || m_gginfo.player1==pl || m_gginfo.player2==pl)
    {
        if(pl->getThreadId() == getThreadId())
        {
            pl->GGTeamPlayerLeave(getId());
        }
        else
        {
            UInt64 id = getId();
            GameMsgHdr hdr(0x351, pl->getThreadId(), pl, sizeof(id));
            GLOBAL().PushMsg(hdr, &id);
        }
        return ;
    }
    if(m_gginfo.player1 == NULL || m_gginfo.status ==2 )
        m_gginfo.player1 = pl;
    else if(m_gginfo.player2 == NULL)
        m_gginfo.player2 = pl;
    else return ;
    m_gginfo.status = 1;
    AddGuangGunScore(0);
    UInt32 grade = 0;
    GameMsgHdr hdr1(0x1D5, WORKER_THREAD_WORLD, pl, sizeof(grade));
    GLOBAL().PushMsg(hdr1, &grade);
    UpdateGGInfo();
}
void Player::GGTeamPlayerLeave(UInt64 id)
{
    Player* player = globalPlayers[id];
    if(player==NULL)
        return ;
    if(getGGStatus() !=1 )
        return ;
    if(m_gginfo.player1 && m_gginfo.player1->getId() == id )
        m_gginfo.player1 = NULL;
    else if(m_gginfo.player2 && m_gginfo.player2->getId() == id )
        m_gginfo.player2 = NULL;
    else return ;
    AddGuangGunScore(0);
    UpdateGGInfo();
    sendGuangGunInfo();
}
UInt8 Player::CheckGGCanInvit(Player * pl)
{
    if(pl->getGGStatus()!=0)
    {
   		SYSMSG_SENDV(187, this);
        return 1;
    }
    if(m_gginfo.player1!=NULL && m_gginfo.player2!=NULL)
    {
   		SYSMSG_SENDV(188, this);
        return 2;
    }
    if(m_gginfo.player1 == pl || m_gginfo.player2 ==pl )
    {
   		SYSMSG_SENDV(189, this);
        return 2;
    }

    return 0;
}
void Player::UpdateGGInfo()
{
    if(!World::getGGTime())
        return ;
    DB1().PushUpdateData("REPLACE INTO `guanggun` (`playerId`, `status`,`playerId1`,`playerId2`,`pos`, `score`, `task`, `tasknum`,`taskCom`, `counts`) VALUES(%" I64_FMT "u,%u,%" I64_FMT "u,%" I64_FMT "u,%u,%u,%u,%u,%u,%u )", getId(), m_gginfo.status, m_gginfo.player1==NULL?0:m_gginfo.player1->getId(),m_gginfo.player2==NULL?0:m_gginfo.player2->getId(), m_gginfo.pos,m_gginfo.score,m_gginfo.task ,m_gginfo.tasknum,m_gginfo.taskCom,m_gginfo.counts);

}
void Player::RunFriendlyCompass(UInt8 type)
{
   UInt32 num = m_gginfo.counts; 
   if(num == 0)
       return ;
   UInt8 idx = 0;
   if(World::getGGTime() == 1)
   {
       if( 0 == (idx = GameAction()->RunBlueDiamondAward(this, 7)) )
           return;
   }
   else
   {
       if( 0 == (idx = GameAction()->RunBlueDiamondAward(this, 9)) )
           return;
       char str[32] = {0};
       switch(idx)
       {
           case 12 :
               sprintf(str, "F_140717_4");
               udpLog("sanrenyou", str, "", "", "", "", "act");
               break;
           case 8 :
               sprintf(str, "F_140717_5");
               udpLog("sanrenyou", str, "", "", "", "", "act");
               break;
           case 10 :
               sprintf(str, "F_140717_6");
               udpLog("sanrenyou", str, "", "", "", "", "act");
               break;
           case 5:
               sprintf(str, "F_140717_7");
               udpLog("sanrenyou", str, "", "", "", "", "act");
               break;
           default:
               break;
       }
   }
   m_gginfo.counts--;
   Stream st(REP::ACTIVE);
   st << static_cast<UInt8>(0x22);
   st << static_cast<UInt8>(0x4);
   st << static_cast<UInt8>(0x2);
   st << idx << Stream::eos;
   send(st);
   UpdateGGInfo();
   sendGuangGunInfo();
   AddGuangGunScore(10,1);
   char str[16] = {0};
   sprintf(str, "F_131109_5");
   udpLog("qingyiluopan", str, "", "", "", "", "act");
}
void Player::getGGTaskAward(UInt8 task)
{
    if(World::getGGTime() == 1)
    {
        UInt8 plvl = GetLev();
        //UInt8 pos = getGuangGunPos();
        UInt32 exp = (plvl - 10) * ((plvl > 99 ? 99 : plvl) / 10) * 5 + 25;
        UInt32 exp_ = static_cast<float>(exp)*30;
        UInt32 pexp = 5000;
        UInt32 tael = 1000; 
        UInt32 times = GetVar(VAR_GUANGGUN_TIMES);
        getTael(tael*(100+times)/100); 
        AddPExp(pexp*(100+times)/100);
        AddExp(exp_*(100+times)/100);
        //if(pos ==1 || pos == 8 ||pos == 12 ||pos ==19)
            //m_Package->AddItem(9435, 1, true, false );
    }
    else
    {
        UInt8 times = 1;
        if(GetVar(VAR_GUANGGUN_TENTIMES) == 1)
            times = 10;
        UInt8 plvl = GetLev();
        UInt32 exp = (plvl - 10) * ((plvl > 99 ? 99 : plvl) / 10) * 5 + 25;
        UInt32 exp_ = static_cast<float>(exp)*60 * times;
        UInt32 pexp = 10000 * times;
        UInt32 tael = 1000 * times; 
        switch(task) 
        {
            case 1:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 2:
                GetPackage()->AddItem(503, 1 * times, true, false);
                break;
            case 3:
                GetPackage()->AddItem(500, 1 * times, true, false);
                break;
            case 4:
                GetPackage()->AddItem(513, 1 * times, true, false);
                break;
            case 5:
                GetPackage()->AddItem(512, 2 * times, true, false);
                break;
            case 6:
                GetPackage()->AddItem(134, 1 * times, true, false);
                break;
            case 7:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 8:
                GetPackage()->AddItem(30, 3 * times, true, false);
                break;
            case 9:
                GetPackage()->AddItem(551, 2 * times, true, false);
                break;
            case 10:
                GetPackage()->AddItem(1325, 1 * times, true, false);
                break;
            case 11:
                GetPackage()->AddItem(16001, 1 * times, true, false);
                break;
            case 12:
                GetPackage()->AddItem(9498, 1 * times, true, false);
                break;
            case 13:
                GetPackage()->AddItem(9600, 1 * times, true, false);
                break;
            case 14:
                GetPackage()->AddItem(9418, 1 * times, true, false);
                break;
            case 15:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 16:
                GetPackage()->AddItem(466, 3 * times, true, false);
                break;
            case 17:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 18:
                GetPackage()->AddItem(9371, 4 * times, true, false);
                break;
            case 19:
                GetPackage()->AddItem(501, 1 * times, true, false);
                break;
            case 20:
                GetPackage()->AddItem(9338, 1 * times, true, false);
                break;
            case 21:
                GetPackage()->AddItem(9414, 1 * times, true, false);
                break;
            case 22:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 23:
                GetPackage()->AddItem(503, 1 * times, true, false);
                break;
            case 24:
                GetPackage()->AddItem(15, 3 * times, true, false);
                break;
            case 25:
                GetPackage()->AddItem(516, 1 * times, true, false);
                break;
            case 26:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 27:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 28:
                GetPackage()->AddItem(507, 1 * times, true, false);
                break;
            case 29:
                GetPackage()->AddItem(509, 1 * times, true, false);
                break;
            case 30:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 31:
                GetPackage()->AddItem(9457, 1 * times, true, false);
                break;
            case 32:
                getTael(tael); 
                AddPExp(pexp);
                AddExp(exp_);
                break;
            case 33:
                GetPackage()->AddItem(17012, 1 * times, true, false);
                GetCollectCard()->AddSummerCard(5005);   
                break;
            case 34:
                GetPackage()->AddItem(17013, 1 * times, true, false);
                GetCollectCard()->AddSummerCard(5006);   
                break;
            case 35:
                GetPackage()->AddItem(17014, 1 * times, true, false);
                GetCollectCard()->AddSummerCard(5007);   
                break;
            case 36:
                GetPackage()->AddItem(17015, 1 * times, true, false);
                GetCollectCard()->AddSummerCard(5008);   
                break;
            default:
                break;
        }
        SetVar(VAR_GUANGGUN_TENTIMES,0);

    }

}
void Player::giveGGTeamMemberInfo(Stream& st)
{
    Player *cap =this;
    Player * pl=NULL;
    std::string str = "";
    if(getGGTimeCaptain()!=NULL)
        cap = getGGTimeCaptain();
    if(cap == this )
    {
        if(NULL != ( pl = getGGPlayer1()) )
            st<<pl->getName()<<static_cast<UInt8>(pl->GetVar(VAR_GUANGGUN_TIMES)/20)<<static_cast<UInt8>(pl->GetVar(VAR_GUANGGUN_TODAY_TASK))<<pl->getGGScore();
        else 
            st<< str <<static_cast<UInt8>(0)<<static_cast<UInt8>(0)<<static_cast<UInt32>(0);
        if(NULL != ( pl = getGGPlayer2()) )
            st<<pl->getName()<<static_cast<UInt8>(pl->GetVar(VAR_GUANGGUN_TIMES)/20)<<static_cast<UInt8>(pl->GetVar(VAR_GUANGGUN_TODAY_TASK))<<pl->getGGScore();
        else 
            st<< str <<static_cast<UInt8>(0)<<static_cast<UInt8>(0)<<static_cast<UInt32>(0);
    }
    else 
    {
        st<<cap->getName()<<static_cast<UInt8>(cap->GetVar(VAR_GUANGGUN_TIMES)/20)<<static_cast<UInt8>(cap->GetVar(VAR_GUANGGUN_TODAY_TASK))<<cap->getGGScore();
        if(cap->getGGPlayer1()!=NULL && cap->getGGPlayer1()!=this)
            pl = cap->getGGPlayer1();
        else if(cap->getGGPlayer2()!=NULL && cap->getGGPlayer2()!=this)
            pl = cap->getGGPlayer2();
        else
            st<< str <<static_cast<UInt8>(0)<<static_cast<UInt8>(0)<<static_cast<UInt32>(0);
        if(pl!=NULL)
            st<<pl->getName()<<static_cast<UInt8>(pl->GetVar(VAR_GUANGGUN_TIMES)/20)<<static_cast<UInt8>(pl->GetVar(VAR_GUANGGUN_TODAY_TASK))<<pl->getGGScore();
    }
}
void Player::BuyGuangGunAdvance()
{
   if(!World::getGGTime()) 
       return ;
   if(GetVar(VAR_GUANGGUN_ADVANCE_OTHER)>23)
       return ;
   UInt32 advanceBuy = GetVar(VAR_GUANGGUN_ADVANCE_BUY);
   UInt32 gold = (advanceBuy+1)*10;
   if (getGold() < gold)
   {
       sendMsgCode(0, 1104);
       return ;
   }
   ConsumeInfo ci(GuangGun,0,0);
   useGold(gold,&ci);
   AddVar(VAR_GUANGGUN_ADVANCE_BUY,1);
   AddVar(VAR_GUANGGUN_ADVANCE_NUM,1);
   AddVar(VAR_GUANGGUN_ADVANCE_OTHER,1);
   char str[16] = {0};
   sprintf(str, "F_131109_3");
   udpLog("qingyiluopan", str, "", "", "", "", "act");
}

void  Player::AddGGTimes(Player* pl,UInt8 type,UInt8 flag)
{
   if(World::getGGTime() != 1)
       return;
    if(type < 1||type > 2)
        return ;
   UInt32 gold[]={0,40,80};
   UInt32 time[]={0,20,50};
   UInt32 times = pl->GetVar(VAR_GUANGGUN_TIMES);
   if(times != time[type-1])
       return ;
   if(!flag)
   {
       if (getGold() < gold[type])
       {
           sendMsgCode(0, 1104);
           return ;
       }
       ConsumeInfo ci(GuangGun,0,0);
       useGold(gold[type],&ci);
   }
   if(this!=pl)
   {
       pl->AddGGTimes(pl,type,1);
       pl->sendGuangGunInfo();
       return ;
   }
   SetVar(VAR_GUANGGUN_TIMES,time[type]);
   char str[16] = {0};
   sprintf(str, "F_131109_%d",6+type);
   udpLog("qingyiluopan", str, "", "", "", "", "act");
}
void Player::getCompassChance(UInt8 flag)      //获取财富之星
{
    UInt8 GG_status = World::getGGTime();
    if(GG_status == 1)
    {
        UInt32 grade = getGGTimeTodayScore(); 
        UInt32 todayNum = GetVar(VAR_GUANGGUN_GETROLL); 
        UInt32 toNum = (grade>300?300:grade)/100;
        if(toNum > 3 || todayNum >= toNum)
            return ;
        m_gginfo.counts += 1;
        AddVar(VAR_GUANGGUN_GETROLL,1);
        UpdateGGInfo();
        char str[16] = {0};
        sprintf(str, "F_131109_2");
        udpLog("qingyiluopan", str, "", "", "", "", "act");
    }
    else//GG_status == 2
    {
        if(flag != 0 && flag != 1)
            return;
        if(flag == 0)//每日财富之星
        {
            UInt8 todayReciveNum = GET_BIT_8(GetVar(VAR_GUANGGUN_TODAY_STAR),0);
            UInt8 todayRecivedNum = GET_BIT_8(GetVar(VAR_GUANGGUN_TODAY_STAR),1);
            if(todayRecivedNum >= 3)
            {
                sendMsgCode(0, 5010);
                return; 
            }
            if(todayReciveNum == 0)
                return; 
            m_gginfo.counts += 1;
            todayRecivedNum ++;
            todayReciveNum --;
            UInt32 tmp_num = GetVar(VAR_GUANGGUN_TODAY_STAR);
            tmp_num = SET_BIT_8(tmp_num,0,todayReciveNum);
            tmp_num = SET_BIT_8(tmp_num,1,todayRecivedNum);
            SetVar(VAR_GUANGGUN_TODAY_STAR,tmp_num); 
            UpdateGGInfo();
            char str[32] = {0};
            sprintf(str, "F_140717_1");
            udpLog("sanrenyou", str, "", "", "", "", "act");
        }
        else//团队财富之星
        {
            if(GetVar(VAR_GUANGGUN_TEAMSTAR) <= 0)
                return;
            UInt32 tmp = GetVar(VAR_GUANGGUN_TEAMSTAR) - 1;
            m_gginfo.counts += 1;
            SetVar(VAR_GUANGGUN_TEAMSTAR,tmp); 
            UpdateGGInfo();
            char str[32] = {0};
            sprintf(str, "F_140717_2");
            udpLog("sanrenyou", str, "", "", "", "", "act");
        }

    }
}
void Player::BuyCompassChance(UInt8 counts)
{
    UInt8 GG_status = World::getGGTime();
    if(GG_status == 1)
    {
        UInt32 gold =30 * counts;
        if (getGold() < gold)
           return ;
        ConsumeInfo ci(GuangGun,0,0);
        useGold(gold,&ci);
        m_gginfo.counts+=counts ; 
        UpdateGGInfo();
        char str[16] = {0};
        sprintf(str, "F_131109_4");
        udpLog("qingyiluopan", str, "", "", "", "", "act");
    }
    else//独立开情义罗盘
    {
        UInt32 gold =50 * counts;
        if (getGold() < gold)
           return ;
        ConsumeInfo ci(GuangGun,0,0);
        useGold(gold,&ci);
        m_gginfo.counts+=counts ; 
        UpdateGGInfo();
        char str[16] = {0};
        sprintf(str, "F_140717_3");
        udpLog("sanrenyou", str, "", "", "", "", "act");
    }
}
void Player::SetNovLogin()
{
    UInt32 timeBegin = TimeUtil::MkTime(2014,1,17);
    UInt32 now = TimeUtil::Now();
    UInt32 off =(TimeUtil::SharpDay(0, now)-TimeUtil::SharpDay(0, timeBegin))/86400 +1;
    if(now < timeBegin)
        return ;
    if(off > 30)
        return ;
    UInt32 novLogin = GetVar(VAR_NOV_LOGIN);
    novLogin |= 1 << (off - 1);
    SetVar(VAR_NOV_LOGIN, novLogin);
}

void Player::sendNovLoginInfo()
{
    UInt32 novLogin = GetVar(VAR_NOV_LOGIN);
    UInt32 novLoginAward = GetVar(VAR_NOV_LOGIN_AWARD); 
    UInt32 timeBegin = TimeUtil::MkTime(2014,1,17);
    UInt32 now = TimeUtil::Now();
    UInt32 off =(TimeUtil::SharpDay(0, now)-TimeUtil::SharpDay(0, timeBegin))/86400;
    if(now < timeBegin)
        return ;
    if(off > 29)
        return ;
    UInt8 value = 0;
    if(novLoginAward & (1<<off))
        value |= 1 ;
    if(off >1 && !(novLogin&(1<<off)))
        --off;
    if(novLoginAward & (1<< 30))
        value |= (1<<1) ;
    if(novLoginAward & (1<< 31))
        value |= (1<<2) ;
    UInt32 max = 0 ;
    UInt32 i=0;
    while(i <=off)
    {
        if(novLogin & (1 << i++ ))
            ++max;
        else 
        {
            if(max >= 7 && !(novLogin&(1<<30)))
            {
                novLogin |= (1<<30);
                SetVar(VAR_NOV_LOGIN,novLogin);
            }
            max =0;
        }
    }
    Stream st(REP::RC7DAY);
    st<<static_cast<UInt8>(27);
    st<<novLogin;
    st<<static_cast<UInt8>(max);
    st<<static_cast<UInt8>(value);
    st<<static_cast<UInt8>(!GetVar(VAR_ONCE_ONDAY));
    st<<Stream::eos;
    send(st);
}
void Player::getNovLoginAward(UInt8 type)
{
    if(type <1 ||type >3)
        return ;
    UInt32 timeBegin = TimeUtil::MkTime(2014,1,17);
    UInt32 now = TimeUtil::Now();
    UInt32 off =(TimeUtil::SharpDay(0, now)-TimeUtil::SharpDay(0, timeBegin))/86400 ;
    if(now < timeBegin)
        return ;
    if(off > 29)
        return ;
    UInt32 novLogin = GetVar(VAR_NOV_LOGIN);
    UInt32 novLoginAward = GetVar(VAR_NOV_LOGIN_AWARD); 
    if(type == 1 &&( !(novLogin & (1<<off)) || (novLoginAward & (1<<off)) ) )
        return ;
    UInt32 max = 0 ;
    UInt32 i=0;
    UInt32 count = 0;
    while(i <= off)
    {
        if(novLogin & (1 << i++ ))
            ++count;
        else 
        {
            count = 0;
        }
        if( max <count)
            max =count;
    }
   if(type==2 &&( max < 7|| (novLoginAward&(1<<30)) )) 
       return ;
   if(type==3 &&( max < 30|| (novLoginAward&(1<<31)) )) 
       return ;
   if(!GameAction()->RunNovLoginAward(this, type))
       return ;
   if(type == 2 )
       off = 30 ;
   if(type == 3)
       off = 31; 
   novLoginAward |= (1<<off); 
   SetVar(VAR_NOV_LOGIN_AWARD,novLoginAward);
   char str[16] = {0};
   sprintf(str, "F_140115_%d",type + 1);
   udpLog("liulanqiqiandao", str, "", "", "", "", "act");
}

bool Player::checkClientIP()
{
    if(getVipLevel() > 4)
        return true;

    if(strstr(m_clientIp, "0.0.0.0"))
        return false;

    return true;
}
void Player::Buy7DayFund()
{
   
    if(!in7DayFromCreated())
       return ;
    UInt32 FundType = GetVar(VAR_GROWUPFUND_TYPE);
    UInt32 gold = 188;
    if(FundType != 0)
        return ;
    if (getGold() < gold)
    {
        sendMsgCode(0, 1104);
        return ;
    }
    ConsumeInfo ci(Fund,0,0);
    useGold(gold,&ci);
    SetVar(VAR_GROWUPFUND_TYPE,1);
        
    char str[16] = {0};
    sprintf(str, "F_131106_1");
    udpLog("chengzhangjijin", str, "", "", "", "", "act");
}
void Player::send7DayFundInfo()
{
            
   UInt32 FundType = GetVar(VAR_GROWUPFUND_TYPE);
   UInt32 FundAward = GetVar(VAR_GROWUPFUND_AWARD); 
   if( !in7DayFromCreated() && !FundType)
       return ;
   Stream st(REP::RC7DAY);  //协议
   st<<static_cast<UInt8>(26);
   st<<static_cast<UInt8>(FundType);
   st<<FundAward;
   st<<Stream::eos;
   send(st);
}
void Player::get7DayFundAward(UInt8 type)
{
   UInt32 Coupon[10]={20,30,50,50,100,120,150,180,120,120};
   UInt32 FundType = GetVar(VAR_GROWUPFUND_TYPE);
   UInt32 FundAward = GetVar(VAR_GROWUPFUND_AWARD); 
   if(!FundType)
       return ;
   if(type <1 ||type >10)
       return ;
   if(GetLev() < 30 + type *5 )
       return ;
   if(FundAward &(1<<(type-1)))
       return ;
   if(type > 4 && type < 9)
       getCoupon(Coupon[type-1]);
   else 
       getGold(Coupon[type-1]); 
   FundAward |=(1<<(type-1));
   SetVar(VAR_GROWUPFUND_AWARD,FundAward);
   char str[16] = {0};
   sprintf(str, "F_131106_%d",1+type);
   udpLog("chengzhangjijin", str, "", "", "", "", "act");

}

void Player::modifyPlayerName(UInt32 itemid,UInt8 binding,string modifyName)
{
    //string old_name = this->getName();
    const char* old_name = getNameNoSuffix(getName());
    //保存到另一张曾用名表
    string strtmp = modifyName;//把带后缀的名字存到内存中
    patchMergedName(this->getId(),strtmp);

    Player *player = globalNamedPlayers[strtmp];
    Stream st(REP::USER_INFO_CHANGE);
    UInt8 return_id; 
  
    if(modifyName.length() > 20 || modifyName.length() < 4)
        return;

    if((GetVar(VAR_MODIFY_NAME_CD) + 7*86400 > TimeUtil::Now()) && GetVar(VAR_MODIFY_NAME_CD) != 0)
    {
         return_id = 3;
         st << static_cast<UInt8>(0x20) << return_id << Stream::eos;
         send(st);
         return;
    }
    if(!player)
    {
         
	    ItemBase* item = (this->GetPackage())->GetItem(itemid, binding> 0);
        if(!item)
            return;
        (this->GetPackage())->DelItem2(item,1);
		(this->GetPackage())->AddItemHistoriesLog(itemid, 1);

        if(!cfg.merged)
            DB1().PushUpdateData("insert into `player_named` (serverNo,playerid,name) values(%u,%" I64_FMT "u,'%s')",cfg.serverNo,getId(),old_name);
        else
            DB1().PushUpdateData("insert into `player_named` (serverNo,playerid,name) values(%u,%" I64_FMT "u,'%s')",cfg.serverNo,getId(),old_name);
        //修改player表
        DB1().PushUpdateData("UPDATE `player` SET `name` = '%s' WHERE `id` = %" I64_FMT "u",      modifyName.c_str(),getId());
        DBLOG1().PushUpdateData("insert into player_named(server_id, player_id, src_name, dst_name, modify_time) values(%u, %" I64_FMT "u, '%s', '%s', %u)", cfg.serverNo, getId(), old_name,modifyName.c_str(),TimeUtil::Now());
        SetVar(VAR_MODIFY_NAME_CD,TimeUtil::Now());

        setName(strtmp);
        _battleName = "";
        globalNamedPlayers.remove(strtmp);
        globalNamedPlayers.add(strtmp,this);

        SYSMSG_BROADCASTV(214,getCountry(),old_name,getCountry(),this->getName().c_str());//滚服
        if(this->getClan() != NULL)//帮派公告
        {
            Stream st1;
            SYSMSGVP(st1, 215, getCountry(),old_name,getCountry(),this->getName().c_str());
            (this->getClan())->broadcast(st1);
        }

        SYSMSGV(title, 217);//系统邮件公告
        SYSMSGV(content, 216,getCountry(),old_name,getCountry(),this->getName().c_str());
//        MailItemsInfo itemsInfo(NULL, Activity, 0);
        //好友，密友发邮件 
        for(UInt8 t = 0; t < 2;t++)
        {
            UInt8 m;
            if(t == 1)
                m = 3;
            else
                m = t;
            UInt8 sz = static_cast<UInt8>(_friends[m].size());
            if(sz)
            {
                std::set<Player *>::iterator it = _friends[m].begin();
                for(UInt8 i = 0; i < sz; ++ i)
                {
                    Player * pl = *it;
                    pl->GetMailBox()->newMail(NULL, 0x01, title, content, 0xFFFE0000);
                    it++;
                }
            }
        }
        
        return_id = 1;
        st << static_cast<UInt8>(0x20) << return_id << this->getName()<< Stream::eos;
        send(st);

//		SERVER().GetCountry(GetCountryThread()).PlayerEnter(this, false);
//		SERVER().GetCountry(GetCountryThread()).PlayerLeave(this);
        Clan* clan = getClan();
	    if(clan)
        {
            ClanMember* member = clan->getClanMember(this);
	        clan->broadcastMemberInfo(*member, 0);

		}

        for(std::map<UInt32, FairyPet *>::iterator it = _fairyPets.begin(); it != _fairyPets.end(); ++ it)
        {
            FairyPet* pet = it->second;
            if(!pet)
                continue;
            pet->setDirty();
            pet->pushPetInfo2Leaderboard();
        }
        recalcLingbao();
        GObject::leaderboard.update();
            
        return;
     }
     else
        return_id = 2;
     st << static_cast<UInt8>(0x20) << return_id << Stream::eos;
     send(st);
                    
}

void Player::getGameBoxAward(UInt8 type)
{
    if(type!=0 && type !=1)
       return;
    if(type == 1)
    {
        if(GetVar(VAR_GAMEBOX_DAILY) == 1)
        {
            if(!GameAction()->RunGameBoxDailyActionAward(this,1))
                return;
            SetVar(VAR_GAMEBOX_DAILY,2);
        }
    }
    if(type == 0)
    {
        if(GetVar(VAR_GAMEBOX_NEW) == 1)
        {
            if(!GameAction()->RunGameBoxDailyActionAward(this,0))
                return;
            SetVar(VAR_GAMEBOX_NEW,2);
        }
    }
    sendGameBoxAward();
}

void Player::getRealSpirit()
{
    //UInt32 realSpirit[]={100,200,300,400,500,600,700,800,900}; 
    UInt32 realget = GetVar(VAR_REAL_SPIRIT_GET);
    UInt8 lev = GetLev();
    if(lev < 80 )
        return ;
    if(realget)
        return ;
    AddRealSpirit(lev*getFighterGoldCnt());
    SetVar(VAR_REAL_SPIRIT_GET,1);
    sendRealSpirit();
}
UInt8 Player::getFighterGoldCnt()
{
    std::map<UInt32, Fighter *>::iterator it = _fighters.begin();
    UInt8 cnt = 0 ;
    for (; it != _fighters.end(); ++it)
    {
        Fighter* fgt = it->second; // XXX: Fashion can not be enchanted
        if(fgt->getAcupointsBit(ACUPOINTS_MAX-1) == 3)
            ++cnt;
    }
    return cnt; 
}
void Player::AddRealSpirit(UInt32 real)
{
    AddVar(VAR_REAL_SPIRIT,real);
    SYSMSG_SENDV(2020,this,real);
    SYSMSG_SENDV(2021,this,real);
    sendRealSpirit();
}

void Player::sendRealSpirit()
{
    UInt32 real = GetVar(VAR_REAL_SPIRIT);
    UInt32 realget = GetVar(VAR_REAL_SPIRIT_GET);
    Stream stream(REQ::STATE);
    stream<<static_cast<UInt8>(0x21);
    stream<<real;
    stream<<static_cast<UInt8>(realget);
    stream<<Stream::eos;
    send(stream);
}

void Player::getQZoneRechargeAward(UInt8 val)
{
    /*if(getPlatform() != 1 && getPlatform() != 2)
    {
        sendMsgCode(0, 3506);
        return;
    }*/
    if ((getPlatform()==1 || getPlatform() ==2) )
    {
       if(!World::getQZoneRechargeTime())
           return;
    }
    else if ( getPlatform()==11)
    {
        if(!World::get3366RechargeTime())
            return;
    }
    else 
        return ;
    UInt32 var = 0;
    UInt32 award = 0;
    if(getPlatform()==1 || getPlatform() ==2)
    {
        var = VAR_QZONE_RECHARGE;
        award = VAR_QZONE_RECHARGE_AWARD ; 
    }
    else if( getPlatform()==11)
    {
        var = VAR_3366_RECHARGE;
        award = VAR_3366_RECHARGE_AWARD ; 
    }
    else 
        return ;
    UInt32 Recharge[]={100,500,1000,2000,3000,5000};
    UInt32 recharge = GetVar(var);
    if(val<1||val>6)
        return ;
    if(recharge < Recharge[val-1])
        return ;
    UInt32 ctslandingAward = GetVar(award);
    if(ctslandingAward & (1<<(val-1)))
        return ;
    if(!GameAction()->RunQZoneRechargeAward(this, val))
    {
        return;
    }
    ctslandingAward |= (1<<(val - 1));
    SetVar(award, ctslandingAward);
    char str[16] = {0};
    sprintf(str, "F_131212_%d",val);
    udpLog("chongzhihuodong", str, "", "", "", "", "act");
}
void Player::sendQZoneRechargeAwardInfo()
{
    /*if(getPlatform() != 1 && getPlatform() != 2)
    {
        sendMsgCode(0, 3506);
        return;
    }*/
    if ((getPlatform()==1 || getPlatform() ==2) )
    {
       if(!World::getQZoneRechargeTime())
           return;
    }
    else if ( getPlatform()==11)
    {
        if(!World::get3366RechargeTime())
            return;
    }
    else 
        return ;
    UInt32 var = 0;
    UInt32 award = 0;
    if(getPlatform()==1 || getPlatform() ==2)
    {
        var = VAR_QZONE_RECHARGE;
        award = VAR_QZONE_RECHARGE_AWARD ; 
    }
    else if( getPlatform()==11)
    {
        var = VAR_3366_RECHARGE;
        award = VAR_3366_RECHARGE_AWARD ; 
    }
    else 
        return ;
    UInt32 QZoneRecharge = GetVar(var);
    UInt32 QZoneRechargeAward = GetVar(award);
    Stream st(REP::GETAWARD);   //协议
    st << static_cast<UInt8>(33);
    st << static_cast<UInt32>(QZoneRecharge);
    st << static_cast<UInt8>(QZoneRechargeAward);
    st << Stream::eos;
    send(st);
}
void Player::AddQZoneRecharge(UInt32 r)
{
    /*if(getPlatform() != 1 && getPlatform() != 2)
    {
        sendMsgCode(0, 3506);
        return;
    }*/
    if(World::getQZoneRechargeTime() && ( getPlatform() ==1 || getPlatform() ==2))
    {
        AddVar(VAR_QZONE_RECHARGE,r);
        sendQZoneRechargeAwardInfo();
    }
    if(World::get3366RechargeTime() &&  getPlatform() == 11 )
    {
        AddVar(VAR_3366_RECHARGE,r);
        sendQZoneRechargeAwardInfo();
    }
}

void Player::AddLingGuo(UInt32 r)
{
    AddVar(VAR_TYSS_RECHARGE,r);
    if(GetVar(VAR_TYSS_RECHARGE) >= 30)//充值30仙石兑换一个灵果
    {
        UInt32 num = 0;//灵果数
        UInt32 tmp_num = 0;
        while(GetVar(VAR_TYSS_RECHARGE) >= 30)
        {
            SetVar(VAR_TYSS_RECHARGE,GetVar(VAR_TYSS_RECHARGE) - 30);
            num++;
        }
        if(num != 0)
        {
            while(num > 0)
            {
                if(num > 200)
                {
                    num -= 200;
                    tmp_num = 200;
                }
                else
                {
                    tmp_num = num;
                    num = 0;
                }
                SYSMSGV(title, 944);
                SYSMSGV(content, 945);
                MailPackage::MailItem item[] = {{9492, tmp_num},};
                MailItemsInfo itemsInfo(item, Activity, 1);
                Mail * mail = GetMailBox()->newMail(NULL, 0x21, title, content, 0xFFFE0000, true, &itemsInfo);
                if(mail)
                     mailPackageManager.push(mail->id, item, 1, true);
            }
            
        }
    }        

    return;
}

void Player::ReturnTYSSInfo(UInt8 flag)
{
    GameMsgHdr hdr(0x1BE, WORKER_THREAD_WORLD, this, sizeof(flag));
    GLOBAL().PushMsg(hdr, &flag);

    return;
}


void Player::OpTYSS(UInt8 type , UInt8 flag,UInt64 playerid)
{
    Clan* clan = getClan();
    if(clan == NULL ) 
        return;
    /*Player* leader = clan->getLeader();
    if(leader == NULL)
        return;*/
    UInt8 actType = World::getTYSSTime();
    switch(type)
    {
        case 3://喂养神兽
        {
            if((flag != 0 && flag != 1) || GetPackage()->GetItemAnyNum(9492) <= 0)
                return;
            if(flag == 0)
            {
                if(GetPackage()->GetItemNum(9492,true) > 0)
                    GetPackage()->UseItem(9492,1,0,0,1);
                else
                    GetPackage()->UseItem(9492,1,0,0,0);
            }
            else
            {
                if(GetPackage()->GetItemNum(9492,true) > 0)
                    GetPackage()->UseItem(9492,GetPackage()->GetItemNum(9492,true),0,0,1);
                if(GetPackage()->GetItemNum(9492,false) > 0)
                    GetPackage()->UseItem(9492,GetPackage()->GetItemNum(9492,false),0,0,0);
            }
            
        }
            break;
        case 4://购买限购礼包
        {
            if(flag >= 10)
                return;
            UInt8 consume_type = flag / 4;
            UInt8 consume_pos = flag % 4;
            UInt8 tmp_int = 0;
            static UInt32 awards[10][4][2] = {
                {{503,5},  {500,1}, {501,1}, {49,20}},
                {{56,8},  {57,8}, {0,0}, {29,20}},
                {{9360,5}, {9093,5}, {0,0}, {50,10}},
                {{9371,10}, {9388,1}, {0,0}, {89,10}},
                {{515,5}, {514,5}, {0,0},{200,10}},
                {{8000,5}, {33,5}, {0,0},{75,20}},
                {{1126,5}, {1125,5}, {0,0},{51,20}},
                {{516,5}, {547,5}, {0,0},{131,10}},
                {{9075,5}, {9019,5}, {0,0},{1200,5}},
                {{1701,1}, {1700,1}, {0,0},{1198,2}},
            };

            static UInt32 awards1[10][4][2] = {
                {{503,5},  {500,1}, {501,1}, {49,20}},
                {{517,5},  {551,5}, {0,0}, {70,10}},
                {{9418,5}, {9414,5}, {9424,5}, {100,10}},
                {{555,10}, {556,5}, {0,0}, {150,10}},
                {{9338,5}, {554,5}, {0,0},{175,10}},
                {{8000,5}, {33,5}, {0,0},{75,10}},
                {{9498,10}, {9497,5}, {0,0},{175,10}},
                {{9600,10}, {9500,5}, {0,0},{100,10}},
                {{9019,5}, {9022,5}, {0,0},{1100,5}},
                {{1735,1}, {0,0}, {0,0},{999,1}},
            };

            UInt32 clan_contribute = GetVar(VAR_TYSS_CONTRIBUTE_CLAN);
            UInt32 clan_sum = clan->GetTYSSSum();

            UInt32 one_steps = 2000;
            UInt32 two_steps = 14000;
            UInt32 three_steps = 23000;
            UInt32 third_steps = 46000;
            UInt32 fifth_steps = 70000;
            if(actType == 2) 
            {
                one_steps = 1000;
                two_steps = 6000;
                three_steps = 16000;
                third_steps = 30000;
                fifth_steps = 46000;
            }

            if(clan_contribute < 100 && clan_sum < one_steps)
                return;
            else
                if( flag > 1)
                {
                    if(clan_contribute < 200 || clan_sum < two_steps)
                        return;
                }
                else if( flag > 3 )
                    {
                        if(clan_contribute < 300 || clan_sum < three_steps)
                            return;
                    }
                    else if( flag > 5 )
                        {
                            if(clan_contribute < 400 || clan_sum < third_steps)
                                return;
                        }
                        else if( flag > 7 )
                        {
                            if(clan_contribute < 500 || clan_sum < fifth_steps)
                                return;
                        }

            if(GetPackage()->GetRestPackageSize() < 2)
            {
                sendMsgCode(2, 1011);
                return;
            }
            UInt32 awardCnt = 0;
            UInt32 awardGoldNum = 0;
            if(actType == 1)
            {
                if(getGold() < awards[flag][3][0])
                {
                    sendMsgCode(2, 1104, 0);
                    return;
                }
                awardCnt = awards[flag][3][1];
                awardGoldNum = awards[flag][3][0];
            }
            else
            {
                if(getGold() < awards1[flag][3][0])
                {
                    sendMsgCode(2, 1104, 0);
                    return;
                }
                awardCnt = awards1[flag][3][1];
                awardGoldNum = awards1[flag][3][0];
            }
            
           
            UInt8 add_flag = 0;//购买成功标记
            UInt32 consume1 = GetVar(VAR_TYSS_DISCOUNT_CONSUME1); 
            UInt32 consume2 = GetVar(VAR_TYSS_DISCOUNT_CONSUME2); 
            UInt32 consume3 = GetVar(VAR_TYSS_DISCOUNT_CONSUME3); 
            switch(consume_type)
            {
                case 0:
                {
                    tmp_int = GET_BIT_8(consume1,consume_pos);  
                    if(tmp_int >= awardCnt)
                        return;
                    ++tmp_int; 
                    SetVar(VAR_TYSS_DISCOUNT_CONSUME1,SET_BIT_8(consume1,consume_pos,tmp_int)); 
		            ConsumeInfo ci(BuyTYSSLim,0,0);
                    useGold(awardGoldNum, &ci);
                    add_flag = 1;
                }
                break;
                case 1:
                {
                    tmp_int = GET_BIT_8(consume2,consume_pos);  
                    if(tmp_int >= awardCnt)
                        return;
                    ++tmp_int; 
                    SetVar(VAR_TYSS_DISCOUNT_CONSUME2,SET_BIT_8(consume2,consume_pos,tmp_int)); 
		            ConsumeInfo ci(BuyTYSSLim,0,0);
                    useGold(awardGoldNum, &ci);
                    add_flag = 1;
                }
                break;
                case 2:
                {
                    tmp_int = GET_BIT_8(consume3,consume_pos);  
                    if(tmp_int >= awardCnt)
                        return;
                    ++tmp_int; 
                    SetVar(VAR_TYSS_DISCOUNT_CONSUME3,SET_BIT_8(consume3,consume_pos,tmp_int)); 
		            ConsumeInfo ci(BuyTYSSLim,0,0);
                    useGold(awardGoldNum, &ci);
                    add_flag = 1;
                }
                break;
                default:
                    break;
            }
            if(add_flag == 1)
            {
                for(UInt8 i = 0; i < 3; ++ i)
                {
                    struct ItemAdd
                    {
                        UInt16 item;
                        UInt16 num;
                        bool bind;
                        UInt16 fromWhere;
                    };
                    ItemAdd ia;
                    if(actType == 1)
                    {
                        ia.item = awards[flag][i][0];
                        ia.num = awards[flag][i][1];
                    }
                    else
                    {
                        ia.item = awards1[flag][i][0];
                        ia.num = awards1[flag][i][1];
                    }
                    ia.bind = true;
                    ia.fromWhere = FromTYSS;
                    if(ia.item > 0)
                    {
                        GameMsgHdr hdr(0x24A, getThreadId(), this, sizeof(ia));
                        GLOBAL().PushMsg(hdr, &ia);
                    }
                }
                switch(flag)
                {
                    case 0:
                        udpLog("tianyuanshenshou", "F_140224_16", "", "", "", "", "act");
                        break;
                    case 1:
                        udpLog("tianyuanshenshou", "F_140224_17", "", "", "", "", "act");
                        break;
                    case 2:
                        udpLog("tianyuanshenshou", "F_140224_18", "", "", "", "", "act");
                        break;
                    case 3:
                        udpLog("tianyuanshenshou", "F_140224_19", "", "", "", "", "act");
                        break;
                    case 4:
                        udpLog("tianyuanshenshou", "F_140224_20", "", "", "", "", "act");
                        break;
                    case 5:
                        udpLog("tianyuanshenshou", "F_140224_21", "", "", "", "", "act");
                        break;
                    case 6:
                        udpLog("tianyuanshenshou", "F_140224_22", "", "", "", "", "act");
                        break;
                    case 7:
                        udpLog("tianyuanshenshou", "F_140224_23", "", "", "", "", "act");
                        break;
                    case 8:
                        udpLog("tianyuanshenshou", "F_140224_24", "", "", "", "", "act");
                        break;
                    case 9:
                        udpLog("tianyuanshenshou", "F_140224_25", "", "", "", "", "act");
                        break;
                    default:
                        break;
                }
            }
        }
            break;
        case 5://查看成员贡献
            clan->SendTYSSScore(this); 

            break;
        case 6://0 - 表扬 1 - 督促
        {
            Player * pl = GObject::globalPlayers[playerid];
            if(!pl)
                return;
            Stream st;
            switch(flag)
            {
                case 0:
                    SYSMSGVP(st, 940, getName().c_str(),pl->getName().c_str());
                    break;
                case 1:
                    SYSMSGVP(st, 941, getName().c_str(),pl->getName().c_str());
                    break;
                default:
                    return;
                    break;
            }
            clan->broadcast(st);
        }
            break;
        case 8:
        {
            UInt32 consume1 = GetVar(VAR_TYSS_DISCOUNT_CONSUME1); 
            UInt32 consume2 = GetVar(VAR_TYSS_DISCOUNT_CONSUME2); 
            UInt32 consume3 = GetVar(VAR_TYSS_DISCOUNT_CONSUME3); 
            Stream st(REP::ACT);  
            st << static_cast<UInt8>(0x31) << static_cast<UInt8>(0x08) << static_cast<UInt8>(10);
            if(actType == 1)
            {
                st << static_cast<UInt8>(20 - GET_BIT_8(consume1,0));
                st << static_cast<UInt8>(20 - GET_BIT_8(consume1,1));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume1,2));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume1,3));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume2,0));
                st << static_cast<UInt8>(20 - GET_BIT_8(consume2,1));
                st << static_cast<UInt8>(20 - GET_BIT_8(consume2,2));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume2,3));
                st << static_cast<UInt8>(5 - GET_BIT_8(consume3,0));
                st << static_cast<UInt8>(2 - GET_BIT_8(consume3,1));
            }
            else
            {
                st << static_cast<UInt8>(20 - GET_BIT_8(consume1,0));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume1,1));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume1,2));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume1,3));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume2,0));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume2,1));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume2,2));
                st << static_cast<UInt8>(10 - GET_BIT_8(consume2,3));
                st << static_cast<UInt8>(5 - GET_BIT_8(consume3,0));
                st << static_cast<UInt8>(1 - GET_BIT_8(consume3,1));
            }
            st << Stream::eos;
            send(st);

        }    
            break;
        case 0x13://领取每日礼包
        {
            /*if(GET_BIT(GetVar(VAR_TYSS_CONTRIBUTE_PLAYER_DAY),31))//已经领取过
                return;
            if(GetVar(VAR_TYSS_CONTRIBUTE_PLAYER_DAY) < 50)
                return;*/
            UInt32 todayContribution = GetVar(VAR_TYSS_CONTRIBUTE_PLAYER_DAY);
            UInt8 awardStatus[5] = {0};
            UInt32 needContriLevel[5] = { 50, 100, 300, 700, 1800};
            if(actType == 2)
                needContriLevel[4] = 2500;
            for(UInt8 i = 0; i < 5; i++)
            {
                awardStatus[i] = GET_BIT(todayContribution, (27 + i));
            }
            todayContribution = todayContribution << 6;
            todayContribution = todayContribution >> 6;
            
            if(needContriLevel[flag - 1] > todayContribution || awardStatus[flag - 1] == 1)
                return;

            static UInt32 everydayAward[5][7][2] = {
                { {500, 2}, {503, 2}, {9371, 3}, {15, 2}, {0, 0}, {0, 0}, {0, 0} },
                { {514, 2}, {1126, 2}, {56, 2}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
                { {501, 3}, {547, 3}, {517, 3}, {0, 0}, {0, 0}, {0, 0}, {0 ,0} },
                { {134, 3}, {1325, 3}, {9338, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
                { {1719, 1}, {1717, 1}, {1700, 1}, {1711, 1}, {1709, 1}, {1701, 1}, {1703, 1} },
            };
            static UInt32 everydayAward1[5][7][2] = {
                { {15, 3}, {500, 3}, {501, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
                { {9424, 3}, {547, 3}, {57, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
                { {9371, 3}, {9600, 3}, {517, 3}, {0, 0}, {0, 0}, {0, 0}, {0 ,0} },
                { {9457, 3}, {1325, 3}, {556, 5}, {0, 0}, {0, 0}, {0, 0}, {0, 0} },
                { {13116, 1}, {13136, 1}, {13156, 1}, {13036, 1}, {13056, 1}, {0, 0}, {0, 0} },
            };
 
            UInt8 totalPackageSize = 0;
            for(UInt8 i = 0; i < 7; i++)
            {
                if(actType == 1)
                    totalPackageSize += everydayAward[flag - 1][i][1];
                else
                    totalPackageSize += everydayAward1[flag - 1][i][1];
            }

            if(GetPackage()->GetRestPackageSize() > totalPackageSize)
            {
                switch(flag)
                {
                    case 1:
                        udpLog("tianyuanshenshou", "F_140224_27", "", "", "", "", "act");
                        break;
                    case 2:
                        udpLog("tianyuanshenshou", "F_140224_28", "", "", "", "", "act");
                        break;
                    case 3:
                        udpLog("tianyuanshenshou", "F_140224_29", "", "", "", "", "act");
                        break;
                    case 4:
                        udpLog("tianyuanshenshou", "F_140224_30", "", "", "", "", "act");
                        break;
                    default:
                        break;
                }

                if(flag != 5)
                {
                    for(UInt8 i = 0; i < 7; i++)
                    {
                        if(actType == 1)
                        {
                            if(everydayAward[flag - 1][i][0])
                                GetPackage()->AddItem(everydayAward[flag - 1][i][0],everydayAward[flag - 1][i][1] , true, false, FromTYSS);
                        }
                        else
                        {
                            if(everydayAward1[flag - 1][i][0])
                                GetPackage()->AddItem(everydayAward1[flag - 1][i][0],everydayAward1[flag - 1][i][1] , true, false, FromTYSS);
                        }
                    }
                }
                else
                {
                    if(actType == 1)
                    {
                        UInt8 dayChoice = (TimeUtil::Now() - World::getOpenTime()) / 86400 - 7;
                        GetPackage()->Add(everydayAward[flag - 1][dayChoice][0], 1 , true, false, FromTYSS);
                    }
                    else
                    {
                        UInt8 dayChoice = (TimeUtil::Now() - GVAR.GetVar(GVAR_TYSS_BEGIN)) / 86400;
                        if(dayChoice > 5)
                                return;
                        if(GetPetPackage()->GetPetGemPgRestSize() < 1)
                        {
                            sendMsgCode(0, 1094);
                            return;
                        }
                        GetPackage()->Add(everydayAward1[flag - 1][dayChoice][0], everydayAward1[flag - 1][dayChoice][1] , true, false, FromTYSS);
                        UInt8 op_color = 3;
                        switch(dayChoice)
                        {
                            case 0:
                                SYSMSG_BROADCASTV(5225, getCountry(), getName().c_str(),op_color);
                                break;
                            case 1:
                                SYSMSG_BROADCASTV(5226, getCountry(), getName().c_str(),op_color);
                                break;
                            case 2:
                                SYSMSG_BROADCASTV(5227, getCountry(), getName().c_str(),op_color);
                                break;
                            case 3:
                                SYSMSG_BROADCASTV(5228, getCountry(), getName().c_str(),op_color);
                                break;
                            case 4:
                                SYSMSG_BROADCASTV(5229, getCountry(), getName().c_str(),op_color);
                                break;
                            default:
                                break;
                        }
                    }
                }
                SetVar(VAR_TYSS_CONTRIBUTE_PLAYER_DAY,SET_BIT(GetVar(VAR_TYSS_CONTRIBUTE_PLAYER_DAY), (26 + flag)));//打上当日领取奖品的标记
                udpLog("tianyuanshenshou", "F_140224_26", "", "", "", "", "act");
                if(actType == 2)
                {
                    UInt32 curtodayContribution = GetVar(VAR_TYSS_CONTRIBUTE_PLAYER_DAY);
                    if(todayContribution >= needContriLevel[4] && curtodayContribution >> 27 == 31)
                        SetVar(VAR_TYSS_CONTRIBUTE_PLAYER_DAY,todayContribution - needContriLevel[4]);
                }
                ReturnTYSSInfo(9); 
            }
            else
            {
                sendMsgCode(2, 1011);
                return;
            }
        }
            break;
       default:
            break;
    }


    return;
}


void Player::EatLingGuo(UInt32 num)
{
    Clan* clan = getClan();
    if(clan == NULL ) 
        return;
    Player* leader = clan->getLeader();
    if(leader == NULL)
        return;

    AddVar(VAR_TYSS_CONTRIBUTE_PLAYER ,10*num); 
    AddVar(VAR_TYSS_CONTRIBUTE_PLAYER_DAY ,10*num); 
    AddVar(VAR_TYSS_CONTRIBUTE_CLAN ,10*num); 
  
    UInt8 actType = World::getTYSSTime();
    UInt32 one_steps = 2000;
    UInt32 two_steps = 14000;
    UInt32 three_steps = 23000;
    UInt32 third_steps = 46000;
    UInt32 fifth_steps = 70000;
    if(actType == 2) 
    {
        one_steps = 1000;
        two_steps = 6000;
        three_steps = 16000;
        third_steps = 30000;
        fifth_steps = 46000;
    }

    UInt32 clan_sum = clan->GetTYSSSum();
    UInt8 flag = 0;//标记
    if(clan_sum < one_steps)
        flag = 0;
    else
        if(clan_sum < two_steps)
            flag = 1;
        else
            if(clan_sum < three_steps)
                flag = 2;
            else
                if(clan_sum < third_steps)
                    flag = 3;
                else
                    if(clan_sum < fifth_steps)
                        flag = 4;
                    else
                        flag = 5;
    if(clan_sum == 0) 
        udpLog("tianyuanshenshou", "F_140224_1", "", "", "", "", "act");
    clan_sum += 10 * num;
    UInt32 add_num = 10* num;
    GameMsgHdr hdr3(0x167, WORKER_THREAD_WORLD, this, sizeof(add_num));
    GLOBAL().PushMsg(hdr3, &add_num);
    
    
    GameMsgHdr hdr2(0x166, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr2, NULL);

    UInt32 pl_grade = this->GetVar(VAR_TYSS_CONTRIBUTE_PLAYER); 
    UInt32 cl_grade = clan_sum; 
    GameMsgHdr hdr(0x1BF, WORKER_THREAD_WORLD, this, sizeof(pl_grade));
    GLOBAL().PushMsg(hdr, &pl_grade);
    GameMsgHdr hdr1(0x1BC, WORKER_THREAD_WORLD, this, sizeof(cl_grade));
    GLOBAL().PushMsg(hdr1, &cl_grade);
   
    switch(flag)
    {
        case 0:
            if(clan_sum >= one_steps)
            {
                SYSMSG_BROADCASTV(952, clan->getName().c_str(),leader->getName().c_str(),"幼年期神兽");
                udpLog("tianyuanshenshou", "F_140224_2", "", "", "", "", "act");
            }
        case 1:
            if(clan_sum >= two_steps)
            {
                SYSMSG_BROADCASTV(952, clan->getName().c_str(),leader->getName().c_str(),"成长期神兽");
                udpLog("tianyuanshenshou", "F_140224_3", "", "", "", "", "act");
            }
        case 2:
            if(clan_sum >= three_steps)
            {
                SYSMSG_BROADCASTV(952, clan->getName().c_str(),leader->getName().c_str(),"青年期神兽");
                udpLog("tianyuanshenshou", "F_140224_4", "", "", "", "", "act");
            }
        case 3:
            if(clan_sum >= third_steps)
            {
                SYSMSG_BROADCASTV(952, clan->getName().c_str(),leader->getName().c_str(),"亚圣兽期");
                udpLog("tianyuanshenshou", "F_140224_5", "", "", "", "", "act");
            }
        case 4:
            if(clan_sum >= fifth_steps)
            {
                SYSMSG_BROADCASTV(952, clan->getName().c_str(),leader->getName().c_str(),"天元神兽");
                udpLog("tianyuanshenshou", "F_140224_6", "", "", "", "", "act");
            }
        default:
            break;
    }
    
    ReturnTYSSInfo(9); 
    return;
}




void Player::MiLuZhiJiao()
{       
    if(!World::getMiLuZhiJiaoAct())
        return;

    if(GetLev() < 40)
        return;
    
    if(0 == GetVar(VAR_CHRISTMAS_PRESENT))
    {
        SYSMSGV(title, 5114);
        SYSMSGV(content, 5115);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFD0000/*free*/);
        if(mail)
        {
            mailPackageManager.push(mail->id, 1767, 1, true);
            SetVar(VAR_CHRISTMAS_PRESENT, 1);
        }
    }
}

void Player::GetFindOldManAward(UInt32 type)
{
    if(!World::getOldManTime())
        return ;
    if(GetLev()<30)
    {
        SYSMSG_BROADCASTV(2109, GetLev(), 30 );
        return ; 
    }
    if(type ==0)
        return ;
    UInt8 num = 1 ;
    if(type < 11)
    {
        num =2;
        SYSMSG_BROADCASTV(574, getCountry(), getPName(), type );
    }
    GetPackage()->AddItem(16011, num, true, false);   //欢乐礼包(9439) 其他活动要修改
    AddVar(VAR_OLDMAN_DAYSCORE,num*10);
    AddVar(VAR_OLDMAN_SCORE,num*10);
    SYSMSG_SENDV(2024,this,num*10);
    SYSMSG_SENDV(2025,this,num*10);
    char str[16] = {0};
    sprintf(str, "F_131205_5");
    udpLog("shengdanzhuomicang", str, "", "", "", "", "act");
}

void Player::getInterestingAward(UInt8 type)
{
    if(!World::getOldManTime())
        return ;
    UInt32 scoreReq[] = {30,180,350,550};
    UInt32 ScoreAward = 0;
    UInt32 Score = 0;
    if(type > 3 )
        return ;
    if(type == 0 )
    {
        Score = GetVar(VAR_OLDMAN_DAYSCORE);
        ScoreAward = GetVar(VAR_OLDMAN_DAYSCORE_AWARD);
        if( Score < scoreReq[type] || ScoreAward == 1)
            return ;
    }
    else
    {
        ScoreAward = GetVar(VAR_OLDMAN_SCORE_AWARD);
        Score = GetVar(VAR_OLDMAN_SCORE);
        if( Score < scoreReq[type] || ScoreAward &(1 << (type-1)))  //修改累计欢乐值
            return ;
    }
    if(!GameAction()->RunInterestingAward(this, type))
    {
        return;
    }
    if(type ==0)
        SetVar(VAR_OLDMAN_DAYSCORE_AWARD,1);
    else
    {
        ScoreAward |= (1<<(type-1));
        SetVar(VAR_OLDMAN_SCORE_AWARD,ScoreAward);
    }
    char str[16] = {0};
    sprintf(str, "F_131205_%d",type+1);
    udpLog("shengdanzhuomicang", str, "", "", "", "", "act");
}
void Player::sendInterestingBag(Player* pl)
{
    if(!World::getOldManTime())
        return ;
    if(!pl->isOnline())
    {
        sendMsgCode(0, 2218);
        return ;
    }
    ItemBase* item = GetPackage()->GetItem(16011, true);					
    if(item ==NULL)
        return ;
    UInt16 count = item->Count();
    if(count <1)
        return; 
    if(!GameAction()->RunInterestingBag(this, 0))
    {
        return;
    }
    GetPackage()->DelItem2(item, 1);
    GetPackage()->AddItemHistoriesLog(16011, 1);
    UInt64 id = getId();
    GameMsgHdr hdr(0x356, pl->getThreadId(),pl,sizeof(id) );
    GLOBAL().PushMsg(hdr, &id);
    SYSMSG_SEND(190, this);
}
void Player::getInteresingBag(UInt64 pid)
{
    Player* player = globalOnlinePlayers[pid];
    if(player==NULL)
        return ;
    if(!World::getOldManTime())
        return ;
    UInt32 counts = GetVar(VAR_OLDMAN_PRESENT);
    SYSMSG(title, 4974);
    if(counts < 10)
    {
        SYSMSGV(content, 4975,player->getCountry(),player->getName().c_str());
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {
            MailPackage::MailItem mitem[] = {{57, 1},{15,1},{500,1},{9371,1},{501,1},{9600,1},{503,1}};
            UInt32 chance[] = {2500,5000,7000,8000,9000,9500,10000};
            UInt32 rand = uRand(10000);
            UInt8 k =0;
            for(;k<7;++k)
            {
                if(rand < chance[k])
                    break;
            }
            MailItemsInfo itemsInfo(mitem, Activity, 1);
            mailPackageManager.push(mail->id, &mitem[k], 1, true);
            std::string strItems;
            for (int i = 0; i < 1; ++i)
            {
                strItems += Itoa(mitem[k].id);
                strItems += ",";
                strItems += Itoa(mitem[k].count);
                strItems += "|";
            }
            DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, Activity, title, content, strItems.c_str(), mail->recvTime);
        }
    }
    else 
    {
        SYSMSGV(content, 4976,player->getCountry(),player->getName().c_str());
        Mail * mail = m_MailBox->newMail(NULL, 0x01, title, content, 0xFFFE0000);
        DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, Activity, title, content, NULL, mail->recvTime);
    }
    AddVar(VAR_OLDMAN_PRESENT,1);
}
void Player::sendOldManPos(UInt8 type)
{
    if(!World::getOldManTime())
        return ;
    UInt32 now = TimeUtil::Now();
    UInt32 time = now- TimeUtil::SharpDay(0, now);
    if(time < 7*3600 || time > 20*3600)
        return ;
    if(GetLev()< 30 )
    {
        SYSMSG_BROADCASTV(2109, GetLev(), 30 );
        return ; 
    }
    UInt32 gold = 5;
    if(type==0)
    {
        if(time % 3600 < 5 || time % 3600 > 3595)
        {
            sendMsgCode(0, 4053);
            return ;
        }
        UInt32 flag = GetVar(VAR_OLDMAN_SCORE_AWARD);
        if(flag & (1<<8))
            return ;
        if (getGold() < gold)
        {
            sendMsgCode(0, 1104);
            return ;
        }
        SetVar(VAR_OLDMAN_SCORE_AWARD , flag |(1<<8));
        ConsumeInfo ci(SearchOldMan,0,0);
        useGold(gold,&ci);
    }
    UInt16 pos = WORLD()._oldMan._spot;
    UInt8 loc = WORLD()._oldMan._loc;
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x26) << static_cast<UInt8>(0x01)<<static_cast<UInt8>(0) << loc<< pos<<Stream::eos;
    send(st); 
}
void Player::sendInteresingInfo()
{
    UInt32 DayInteres = GetVar(VAR_OLDMAN_DAYSCORE);
    UInt32 Interes = GetVar(VAR_OLDMAN_SCORE);
    UInt32 DayAward = GetVar(VAR_OLDMAN_DAYSCORE_AWARD);
    UInt32 Award = GetVar(VAR_OLDMAN_SCORE_AWARD);
    UInt32 counts = GetVar(VAR_OLDMAN_PRESENT);
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x26) << static_cast<UInt8>(0x02);;
    st<< DayInteres <<Interes ;
    st<< static_cast<UInt8>(DayAward) <<static_cast<UInt8>(Award) ;
    st << static_cast<UInt8>(counts);
    st<<Stream::eos;
    send(st); 
}
void Player::sendOldManLeftTime()
{
    UInt32 now = TimeUtil::Now();
    UInt32 time = TimeUtil::Now()-TimeUtil::SharpDayT( 0 , now); 
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x26) << static_cast<UInt8>(0x01) <<static_cast<UInt8>(0x01);
    if(time < 8*3600 )
        st <<static_cast<UInt8>(0)<<static_cast<UInt32>( 8*3600 - time ); 
    else if(time < 20*3600 )
        st<< static_cast<UInt8>(1)<<static_cast<UInt32>(3600-time%3600);
    else 
        st<<static_cast<UInt8>(2)<<static_cast<UInt32>(0); 
    st <<Stream::eos;
    send(st);
}
void Player::AddYearHappyValue(UInt32 val,UInt8 flag)
{
    if(!World::getHappyFireTime())
        return ;
//    std::cout<<val<<std::endl;
    if(flag !=0)
    {
        AddVar(VAR_YEARHAPPY_DAYVALUE,val);
        AddVar(VAR_YEARHAPPY_VALUE,val);
        AddVar(VAR_YEARHAPPY_LEFTVALUE,val);
        UInt32 grade = GetVar(VAR_YEARHAPPY_VALUE);
        GameMsgHdr hdr1(0x1DB, WORKER_THREAD_WORLD, this, sizeof(grade));
        GLOBAL().PushMsg(hdr1, &grade);
    }
    {
        SYSMSG_SENDV(2022,this,val);
        SYSMSG_SENDV(2023,this,val);
    }
    char str[16] = {0};
    sprintf(str, "F_140730_7");
    udpLog("jiqingdazhuanpan", str, "", "", "", "", "act");
}
void Player::sendHappyValueInfo()
{
    UInt32 DayValue = GetVar(VAR_YEARHAPPY_DAYVALUE);
    UInt32 Value = GetVar(VAR_YEARHAPPY_VALUE);
    UInt32 LeftValue = GetVar(VAR_YEARHAPPY_LEFTVALUE);
    UInt32 DayValueAward = GetVar(VAR_YEARHAPPY_DAYVALUE_AWARD);
    Stream st(REP::GETAWARD);   //协议
    st << static_cast<UInt8>(34);
    st << static_cast<UInt32>(Value);
    st << static_cast<UInt32>(DayValue);
    st << static_cast<UInt32>(LeftValue);
    st << static_cast<UInt8>(DayValueAward);
    st << Stream::eos;
    send(st);
}
void Player::getHappyValueAward(UInt8 val)
{
    if (!World::getHappyFireTime())
        return;
    UInt32 score[]={20,80,160,320,640,1280};
    UInt32 value = GetVar(VAR_YEARHAPPY_LEFTVALUE);   
    UInt32 value1 = GetVar(VAR_YEARHAPPY_DAYVALUE);   
    if(val < 1 || val > sizeof(score)/sizeof(score[0]))
        return;
    if(value < score[val-1])
        return;
    UInt32 ctslandingAward = GetVar(VAR_YEARHAPPY_DAYVALUE_AWARD);
    if(ctslandingAward & (1<<(val-1)))
        return;
    if(GameAction()->RunHappyValueAward(this, val))
    {
        ctslandingAward |= (1<<(val - 1));
        SetVar(VAR_YEARHAPPY_DAYVALUE_AWARD, ctslandingAward);
    }
   if(ctslandingAward == 63 && value >= 1280 && value1 >= 1280)
   {
        SetVar(VAR_YEARHAPPY_DAYVALUE_AWARD, 0);
        SetVar(VAR_YEARHAPPY_LEFTVALUE,value - 1280);
        SetVar(VAR_YEARHAPPY_DAYVALUE,value - 1280);
        char str[16] = {0};
        sprintf(str, "F_140730_8");
        udpLog("jiqingdazhuanpan", str, "", "", "", "", "act");
   }
   char str[16] = {0};
   sprintf(str, "F_140730_%d",val);
   udpLog("jiqingdazhuanpan", str, "", "", "", "", "act");
}

void Player::joinAllServerRecharge(UInt32 num)
{
    if(num == 0) return;
    UInt32 dayStart = GetVar(VAR_PRIVATE_RECHARGE);
    AddVar(VAR_PRIVATE_RECHARGE, num);
    UInt32 dayTotal = GetVar(VAR_PRIVATE_RECHARGE);
    if(dayStart > dayTotal)
        dayStart = 0;
    //Stream st(ARENAREQ::RECHARGE_ACTIVE, 0xEF);
    Stream st(SERVERWARREQ::RECHARGE_ACTIVE, 0xEE);
    st << getId() << getName() << num << TimeUtil::Now();
    st << static_cast<UInt8>(getCountry()<<4 | (IsMale()?0:1));
    st << dayStart;
    st << dayTotal;
    st << Stream::eos;
    NETWORK()->SendToServerWar(st);
	//NETWORK()->SendToArena(st);
}

bool Player::giveFlower(UInt8 type ,UInt32 num)
{
    if(type > 1)
        return false;
    UInt8 ret = 0;
    {
        UInt16 count = GetPackage()->GetItemAnyNum(9442+type) ;
        ItemBase * item = GetPackage()->FindItem(9442+type, true);
        if (!item)
            item =GetPackage()->FindItem(9442+type, false);
        if(item ==NULL)
            return false;
        if(num > count)
            return false;
        GetPackage()->DelItemAny(9442+type, type ==0 ? 1:num );
        GetPackage()->AddItemHistoriesLog(9442+type, type == 0 ? 1:num );
        AddVar(VAR_MARRYBOARD_LIVELY,!type * 100 + num * 5);
        ret = 1;
        char str[16] = {0};
        sprintf(str, "F_140102_%d",type + 12);
        udpLog("jiehunjinxing", str, "", "", "", "", "act");
    }
    return true;
}
void Player::getMarryBoard3Award(UInt8 type)   //砸蛋
{
    UInt32 Award = GetVar(VAR_MARRYBOARD3);
    if(Award >= 31 || Award < 9)
        return ;
    if(type > 3 ||type <1)
        return; 
    SYSMSG(title, 4191);
    SYSMSGV(content, 4192,getCountry(),getName().c_str());
    Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
    if(mail)
    {
        MailPackage::MailItem mitem[][2] = {
            {{15,1},{56,1}},
            {{56,1},{439,5}},
            {{509,1},{438,5}}
        };
        MailItemsInfo itemsInfo(mitem[type-1], Activity, 1);
        mailPackageManager.push(mail->id, mitem[type-1], 2, true);
        std::string strItems;
        for (int i = 0; i < 2; ++i)
        {
            strItems += Itoa(mitem[type][i].id);
            strItems += ",";
            strItems += Itoa(mitem[type][i].count);
            strItems += "|";
        }
        DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, Activity, title, content, strItems.c_str(), mail->recvTime);
        SetVar(VAR_MARRYBOARD3,Award + 31);
        char str[16] = {0};
        sprintf(str, "F_140114_11");
        udpLog("jiehunjinxinger", str, "", "", "", "", "act");
    }

}

void Player::getBuyFundInfo(UInt8 opt)
{
    UInt16 totalNum = GetVar(VAR_BUY_FUND_NuM);
    UInt8 mark = GetVar(VAR_BUY_FUND_TRUMP_AWARD);
    if(totalNum >= 100 && mark == 1 && opt == 1)
    {
        if(GetPackage()->GetRestPackageSize() < 1)
        {
            sendMsgCode(0, 1011);
            return;
        }
        GetPackage()->AddEquip(1726, true, false, FromBuyFundAward);
        mark = 2;
        SetVar(VAR_BUY_FUND_TRUMP_AWARD, mark);
    }
    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x28) << static_cast<UInt8>(0x00);
    st << totalNum << mark << Stream::eos;
    send(st);
}

void Player::buyFund(UInt16 num)
{
    if(!World::getBuyFundAct())
        return;
    
    if(num == 0)
        return;

    UInt16 lastNum = GetVar(VAR_BUY_FUND_NuM);
    UInt16 totalNum = lastNum + num;
    if(totalNum > 1000)
        return;

    if(getGold() < 100 * num)
    {
        sendMsgCode(0, 1104);
        return;
    }
    ConsumeInfo ci(OutBuyFund, 0, 0);
    useGold(100*num, &ci);

    SetVar(VAR_BUY_FUND_NuM, totalNum);
    UInt8 mark = GetVar(VAR_BUY_FUND_TRUMP_AWARD);
    if((lastNum + num) >= 100 && mark == 0)
    {
        mark = 1;
        SetVar(VAR_BUY_FUND_TRUMP_AWARD, mark);
    }

    udpLog("huodong", "F_140108_1", "", "", "", "", "act", num);

    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x28) << static_cast<UInt8>(0x01);
    st << totalNum << mark << Stream::eos;
    send(st);
}


void Player::getBuyFundAward(UInt8 opt)
{
    UInt32 status = GetVar(VAR_BUY_FUND_AWARD);
    
    UInt16 num = GetVar(VAR_BUY_FUND_NuM);

    if(num > 0)
    {
        for(UInt8 i=0; i<9; i++)
        {
            UInt8 state = GET_BIT_2(status, i);
            if(state == 0)
            {
                UInt8 date[9] = {0, 3, 6, 9, 12, 17, 22, 27, 32};
                if(TimeUtil::Now() >= (TimeUtil::MkTime(2014, 2, 14) + date[i]*86400))
                    status = SET_BIT(status, (i*2));
            }
        }
    }

    if(num > 0 && opt >= 1 && opt <= 9)
    {
        UInt8 mark = GET_BIT_2(status, (opt-1));
        if(mark == 1)
        {
            UInt8 award[3][9] = {
                {8, 10, 12, 15, 18, 20, 6, 6, 25},
                {8, 10, 12, 16, 20, 20, 7, 7, 25},
                {8, 10, 12, 16, 20, 22, 8, 8, 26}
            };

            UInt8 index = 0;
            if(num >= 1 && num <= 200)
                index = 0;
            else if(num >= 201 && num <= 300)
                index = 1;
            else if(num >= 301 && num <= 1000)
                index = 2;
            
            UInt32 money = award[index][opt-1] * num;
            IncommingInfo ii(InBuyFund, 0, 0);
            if(opt == 7 || opt == 8)
                getCoupon(money);  
            else
                getGold(money, &ii);

            status = CLR_BIT(status, ((opt - 1) * 2));
            status = SET_BIT(status, ((opt - 1) * 2 + 1));
            SetVar(VAR_BUY_FUND_AWARD, status);

            if(opt == 1)
                udpLog("huodong", "F_140108_2", "", "", "", "", "act");
            else if(opt == 2)
                udpLog("huodong", "F_140108_3", "", "", "", "", "act");
            else if(opt == 3)
                udpLog("huodong", "F_140108_4", "", "", "", "", "act");
            else if(opt == 4)
                udpLog("huodong", "F_140108_5", "", "", "", "", "act");
            else if(opt == 5)
                udpLog("huodong", "F_140108_6", "", "", "", "", "act");
            else if(opt == 6)
                udpLog("huodong", "F_140108_7", "", "", "", "", "act");
            else if(opt == 7)
                udpLog("huodong", "F_140108_8", "", "", "", "", "act");
            else if(opt == 8)
                udpLog("huodong", "F_140108_9", "", "", "", "", "act");
            else
                udpLog("huodong", "F_140108_10", "", "", "", "", "act");
        }
    }

    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x28) << static_cast<UInt8>(0x02);
    st << static_cast<UInt32>(status) << Stream::eos;
    send(st);
}

bool Player::setMounts(UInt8 mounts)
{
    if (mounts != getMounts())
    {
        sendModification(9, mounts, true);
        _playerData.mounts = mounts;
        return true;
    }
    return false;
}

void Player::addMountFromItem(UInt32 itemId)
{
    UInt8 id = GData::ride.getModifyMountId(itemId);
    if(id == 0)
        return;
    if(getOneMount(id))
        return;
    ModifyMount * mount = new ModifyMount(id, this);
    if(mount == NULL)
        return;
    addModifyMount(mount);
}

void Player::addModifyMount(ModifyMount * mount, bool writedb)
{
    if(!mount) return;
    _modifyMounts.insert(std::make_pair(mount->getId(), mount));

    if(writedb)
    {
        mount->updateToDB();
    }
}

bool Player::hasMountChip(UInt32 itemId)
{
    if(GetPackage()->ExistItem(itemId))
        return true;
    UInt8 id = GData::ride.getModifyMountId(itemId);
    if(id == 0)
        return false;
    ModifyMount * mount = getOneMount(id);
    if(mount == NULL)
        return false;
    return mount->hasChip(itemId);
}

bool Player::addMountChip(UInt32 itemId)
{
    UInt8 id = GData::ride.getModifyMountId(itemId);
    ModifyMount * mount = getOneMount(id);
    if(NULL == mount)
        return false;
    return mount->addChip(itemId);
}

void Player::sendAllMountInfo()
{
	Stream st(REP::MODIFY_MOUNT);
    st << static_cast<UInt8>(0);
    st << static_cast<UInt16>(GetVar(VAR_MOUNT_LEVEL));
    st << GetVar(VAR_MOUNT_EXP);
    size_t offset = st.size();
    UInt8 count = 0;
    st << count;
    for(std::map<UInt8, ModifyMount *>::iterator it = _modifyMounts.begin(); it != _modifyMounts.end(); ++ it)
    {
        if(it->second)
        {
            it->second->appendMountInfo(st);
            ++ count;
        }
    }
    st.data<UInt8>(offset)= count;
    st << Stream::eos;
    send(st);
}

void Player::upgradeMount(bool isAuto)
{
    UInt16 mountLvl = GetVar(VAR_MOUNT_LEVEL);
    UInt32 mountExp = GetVar(VAR_MOUNT_EXP);
    if(mountLvl >= 60)
        return;
    GData::Ride::RideUpgradeData * rud = GData::ride.getRideUpgTable(mountLvl);
    if(!rud || GetLev() < rud->lvLimit)
        return;
    int itemNum = GetPackage()->GetItemAnyNum(MOUNT_COSTID);
    if(itemNum < (int)(rud->singleCost))
        return;
    int costNum = 0;
    UInt16 oldLvl = mountLvl;
    if(isAuto)
    {
        while(itemNum >= (int)(rud->singleCost))
        {
            mountExp += uRand(19) + 1;
            if(mountExp >= rud->lvExp)
                mountLvl ++;
            costNum += rud->singleCost;
            itemNum -= rud->singleCost;
            rud = GData::ride.getRideUpgTable(mountLvl);
            if(!rud || GetLev() < rud->lvLimit || mountLvl >= 60)
                break;
        }
    }
    else
    {
        costNum = rud->singleCost;
        mountExp += uRand(19) + 1;
        if(mountExp >= rud->lvExp)
            mountLvl ++;
    }
    GetPackage()->DelItemAny(MOUNT_COSTID, costNum, NULL, ToUse);
    GetPackage()->DelItemSendMsg(MOUNT_COSTID, this);
    SetVar(VAR_MOUNT_EXP, mountExp);
    if(oldLvl != mountLvl)
    {
        SetVar(VAR_MOUNT_LEVEL, mountLvl);
        setLineupDirty();
    }

	Stream st(REP::MODIFY_MOUNT);
    st << static_cast<UInt8>(1);
    st << mountLvl << mountExp;
    st << Stream::eos;
    send(st);
    GameAction()->doStrong(this, SthModifyMount, 0,0);
}

void Player::addMountAttrExtra(GData::AttrExtra& attr)
{
    GData::AttrExtra tmpAttr;
    std::map<UInt8, ModifyMount *>::iterator it = _modifyMounts.begin();
    for(; it != _modifyMounts.end(); ++ it)
    {
        it->second->addAttrExtra(tmpAttr);
    }
    UInt16 mountLvl = GetVar(VAR_MOUNT_LEVEL);
    float rate = GData::ride.getMountRate(mountLvl);
    tmpAttr = tmpAttr * (1.0 + rate);
    attr += tmpAttr;
}

bool Player::check_Cangjianya()
{
    if(GetLev() < 75)
        return false;

    UInt32 now = TimeUtil::Now();
    UInt32 today = TimeUtil::SharpDayT(1, now);
    UInt32 lastDate = GetVar(VAR_MOUNT_CANGJIANYA_DATE);
    lastDate = lastDate == 0 ? 0 :TimeUtil::SharpDayT(1, lastDate);
    UInt32 leftCnt = GetVar(VAR_MOUNT_CANGJIANYA_LEFT_CNT);

    if(today > lastDate)
    {
        if(leftCnt < 5)
        {
            SetVar(VAR_MOUNT_CANGJIANYA_LEFT_CNT, 5);
        }
        SetVar(VAR_MOUNT_CANGJIANYA_DATE, now);

    }
    Stream st(REP::MODIFY_MOUNT);
    st << static_cast<UInt8>(3);
    st << static_cast<UInt8>(GetVar(VAR_MOUNT_CANGJIANYA_LEFT_CNT));
    st << Stream::eos;
    send(st);

    return true;
}

void Player::mount_Cangjianya(UInt8 rideId, UInt8 floors, bool isAuto)
{
    if(!GData::ride.canShowCangjian(rideId)) //判断是否可以在藏剑崖
        return;
    ModifyMount * mount = getOneMount(rideId);
    if(NULL == mount)
    {
        mount = new ModifyMount(rideId, this);
        if(NULL == mount)
            return;
        addModifyMount(mount);
    }
    if(GetFreePackageSize() < 1)
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(mount)
        mount->cangjianya(floors, isAuto);
}

void Player::sendUseRideItemInfo(lua_tinker::table table_items)
{
	UInt32 size = table_items.size();
	if(size == 0 || size % 2 > 0)
		return;
    Stream st(REP::MODIFY_MOUNT);
    st << static_cast<UInt8>(4);
    size_t offset = st.size();
    UInt8 count = 0;
    st << count;
    for (UInt32 i = 0; i < size; i += 2)
    {
		st << table_items.get<UInt32>(i+1);
		st << table_items.get<UInt16>(i+2);
        ++ count;
    }
    st.data<UInt8>(offset) = count;
    st << Stream::eos;
    send(st);
}

void Player::handleJiqirenAct_shiyamen()
{
    if(!World::getJiqirenAct())
        return;
    UInt32 info = GetVar(VAR_JIQIREN_SYBS);
    int remain1 = 5 - _playerData.smFinishCount;
    int remain2 = 5 - _playerData.ymFinishCount;
    if(remain1 > 0)
        info = SET_BIT_8(info, 1, (GET_BIT_8(info, 1)+remain1));
    if(remain2 > 0)
        info = SET_BIT_8(info, 2, (GET_BIT_8(info, 2)+remain2));
    SetVar(VAR_JIQIREN_SYBS, info);
}

void Player::handleJiqirenAct_clan()
{
    if(!World::getJiqirenAct())
        return;
    UInt32 info = GetVar(VAR_JIQIREN_SYBS);
    int remain = 5 - _playerData.ctFinishCount;
    if(remain > 0)
    {
        info = SET_BIT_8(info, 0, (GET_BIT_8(info, 0)+remain));
        SetVar(VAR_JIQIREN_SYBS, info);
    }
}

void Player::handleJiqirenAct_copy()
{
    if(!World::getJiqirenAct())
        return;
    int copy = GetVar(VAR_JIQIREN_COPY);
    int goldCnt = PlayerCopy::getGoldCount(getVipLevel()) - PLAYER_DATA(this, copyGoldCnt);
    int freeCnt = PlayerCopy::getFreeCount() - PLAYER_DATA(this, copyFreeCnt);
    UInt8 times = 1;
    UInt32 updatetime = TimeUtil::SharpDay(0,PLAYER_DATA(this, copyUpdate)) > TimeUtil::MkTime(2014, 9, 29) ? TimeUtil::SharpDay(0,PLAYER_DATA(this, copyUpdate)) : TimeUtil::MkTime(2014, 9, 29);  
    if(TimeUtil::SharpDay() > updatetime)
        times = (TimeUtil::SharpDay() - updatetime)/ 86400;
    if(times > 10)
        times = 1;
    if (World::_wday == 6)
        freeCnt -= PlayerCopy::FREECNT;
    else if (World::_wday == 7)
        freeCnt += PlayerCopy::FREECNT;
    UInt8 fcnt = GET_BIT_8(copy, 0);
    UInt8 gcnt1 = GET_BIT_8(copy, 1);
    UInt8 gcnt2 = GET_BIT_8(copy, 2);
    UInt8 gcnt3 = GET_BIT_8(copy, 3);
    if(goldCnt == 3)
    {
        gcnt1 += 1 * times;
        gcnt2 += 1 * times;
        gcnt3 += 1 * times;
    }
    else if(goldCnt == 2)
    {
        gcnt2 += 1 * times;
        gcnt3 += 1 * times;
    }
    else if(goldCnt == 1)
    {
        gcnt3 += 1 * times;
    }
    if(freeCnt > 0)
        fcnt += freeCnt * times;
    copy = SET_BIT_8(copy, 0, fcnt);
    copy = SET_BIT_8(copy, 1, gcnt1);
    copy = SET_BIT_8(copy, 2, gcnt2);
    copy = SET_BIT_8(copy, 3, gcnt3);
    SetVar(VAR_JIQIREN_COPY, copy);
}

void Player::handleJiqirenAct_frontMap()
{
    if(!World::getJiqirenAct())
        return;
    int front = GetVar(VAR_JIQIREN_FRONTMAP);
    int goldCnt = FrontMap::getGoldCount(getVipLevel()) - PLAYER_DATA(this, frontGoldCnt);
    int freeCnt = FrontMap::getFreeCount() - PLAYER_DATA(this, frontFreeCnt);
    UInt8 times = 1;
    UInt32 updatetime = TimeUtil::SharpDay(0,PLAYER_DATA(this, frontUpdate)) > TimeUtil::MkTime(2014, 9, 29) ? TimeUtil::SharpDay(0,PLAYER_DATA(this, frontUpdate)) : TimeUtil::MkTime(2014, 9, 29);  
    if(TimeUtil::SharpDay() > updatetime)
        times = (TimeUtil::SharpDay() - updatetime)/ 86400;
    if(times > 10)
        times = 1;
    if (World::_wday == 7)
        freeCnt -= FrontMap::FREECNT;
    else if (World::_wday == 1)
        freeCnt += FrontMap::FREECNT;
    UInt8 fcnt = GET_BIT_8(front, 0);
    UInt8 gcnt1 = GET_BIT_8(front, 1);
    UInt8 gcnt2 = GET_BIT_8(front, 2);
    UInt8 gcnt3 = GET_BIT_8(front, 3);
    if(goldCnt == 3)
    {
        gcnt1 += 1 * times;
        gcnt2 += 1 * times;
        gcnt3 += 1 * times;
    }
    else if(goldCnt == 2)
    {
        gcnt2 += 1 * times;
        gcnt3 += 1 * times;
    }
    else if(goldCnt == 1)
    {
        gcnt3 += 1 * times;
    }
    if(freeCnt > 0)
        fcnt += freeCnt * times;
    front = SET_BIT_8(front, 0, fcnt);
    front = SET_BIT_8(front, 1, gcnt1);
    front = SET_BIT_8(front, 2, gcnt2);
    front = SET_BIT_8(front, 3, gcnt3);
    SetVar(VAR_JIQIREN_FRONTMAP, front);
}

void Player::handleJiqirenAct_dungeon()
{
    if(!World::getJiqirenAct())
        return;
    int vipNum = Dungeon::getExtraCount(getVipLevel(), 0);
    int vipNum1 = Dungeon::getExtraCount(getVipLevel(), 1);
    int dungeon = GetVar(VAR_JIQIREN_DUNGEON);
    int dungeonCnt = Dungeon::getMaxCount(0) + vipNum - PLAYER_DATA(this, dungeonCnt);
    int dungeonCnt1 = Dungeon::getMaxCount(1) + vipNum1 - PLAYER_DATA(this, dungeonCnt1);
    UInt8 fcnt = GET_BIT_8(dungeon, 0);
    UInt8 gcnt = GET_BIT_8(dungeon, 1);
    UInt8 fcnt1 = GET_BIT_8(dungeon, 2);
    UInt8 gcnt1 = GET_BIT_8(dungeon, 3);
    if(dungeonCnt == 3)
    {
        fcnt += 2;
        gcnt += 1;
    }
    else if(dungeonCnt == 2)
    {
        if(vipNum == 0)
            fcnt += 2;
        else
        {
            fcnt += 1;
            gcnt += 1;
        }
    }
    else if(dungeonCnt == 1)
    {
        if(vipNum == 0)
            fcnt += 1;
        else
            gcnt += 1;
    }

    if(dungeonCnt1 == 3)
    {
        fcnt1 += 2;
        gcnt1 += 1;
    }
    else if(dungeonCnt1 == 2)
    {
        if(vipNum1 == 0)
            fcnt1 += 2;
        else
        {
            fcnt1 += 1;
            gcnt1 += 1;
        }
    }
    else if(dungeonCnt1 == 1)
    {
        if(vipNum1 == 0)
            fcnt1 += 1;
        else
            gcnt1 += 1;
    }
    dungeon = SET_BIT_8(dungeon, 0, fcnt);
    dungeon = SET_BIT_8(dungeon, 1, gcnt);
    dungeon = SET_BIT_8(dungeon, 2, fcnt1);
    dungeon = SET_BIT_8(dungeon, 3, gcnt1);
    SetVar(VAR_JIQIREN_DUNGEON, dungeon);
}

void Player::handleJiqirenAct_xjfrontMap()
{
    if(!World::getJiqirenAct())
        return;
    int front = GetVar(VAR_JIQIREN_XJFRONTMAP);
    int goldCnt = XJFrontMap::getGoldCount(PLAYER_DATA(this, xjfrontGoldCnt));
    int freeCnt = XJFrontMap::getFreeCount() - PLAYER_DATA(this, xjfrontFreeCnt);
    UInt8 times = 1;
    UInt32 updatetime = TimeUtil::SharpDay(0,PLAYER_DATA(this, xjfrontUpdate)) > TimeUtil::MkTime(2014, 9, 29) ? TimeUtil::SharpDay(0,PLAYER_DATA(this, xjfrontUpdate)) : TimeUtil::MkTime(2014, 9, 29);  
    if(TimeUtil::SharpDay() > updatetime)
        times = (TimeUtil::SharpDay() - updatetime)/ 86400;
    if(times > 10)
        times = 1;
    UInt8 fcnt = GET_BIT_8(front, 0);
    UInt8 gcnt1 = GET_BIT_8(front, 1);
    UInt8 gcnt2 = GET_BIT_8(front, 2);
    UInt8 gcnt3 = GET_BIT_8(front, 3);
    if(goldCnt == 3)
    {
        gcnt1 += 1 * times;
        gcnt2 += 1 * times;
        gcnt3 += 1 * times;
    }
    else if(goldCnt == 2)
    {
        gcnt2 += 1 * times;
        gcnt3 += 1 * times;
    }
    else if(goldCnt == 1)
    {
        gcnt3 += 1 * times;
    }
    if(freeCnt > 0)
        fcnt += freeCnt * times;
    front = SET_BIT_8(front, 0, fcnt);
    front = SET_BIT_8(front, 1, gcnt1);
    front = SET_BIT_8(front, 2, gcnt2);
    front = SET_BIT_8(front, 3, gcnt3);
    SetVar(VAR_JIQIREN_XJFRONTMAP, front);
}

void Player::handleJiqirenAct_fairycopy()
{
    if(!World::getJiqirenAct())
        return;
    int copy = GetVar(VAR_JIQIREN_FAIRYCOPY);
    int goldCnt = PlayerCopy::getGoldCount(getVipLevel()) - PLAYER_DATA(this, copyGoldCnt);
    int freeCnt = PlayerCopy::getFreeCount() - PLAYER_DATA(this, copyFreeCnt);
    UInt8 times = 1;
    UInt32 updatetime = TimeUtil::SharpDay(0,PLAYER_DATA(this, copyUpdate)) > TimeUtil::MkTime(2014, 9, 29) ? TimeUtil::SharpDay(0,PLAYER_DATA(this, copyUpdate)) : TimeUtil::MkTime(2014, 9, 29);  
    if(TimeUtil::SharpDay() > updatetime)
        times = (TimeUtil::SharpDay() - updatetime)/ 86400;
    if(times > 10)
        times = 1;
    if (World::_wday == 6)
        freeCnt -= PlayerCopy::FREECNT;
    else if (World::_wday == 7)
        freeCnt += PlayerCopy::FREECNT;
    UInt8 fcnt = GET_BIT_8(copy, 0);
    UInt8 gcnt1 = GET_BIT_8(copy, 1);
    UInt8 gcnt2 = GET_BIT_8(copy, 2);
    UInt8 gcnt3 = GET_BIT_8(copy, 3);
    if(goldCnt == 3)
    {
        gcnt1 += 1 * times;
        gcnt2 += 1 * times;
        gcnt3 += 1 * times;
    }
    else if(goldCnt == 2)
    {
        gcnt2 += 1 * times;
        gcnt3 += 1 * times;
    }
    else if(goldCnt == 1)
    {
        gcnt3 += 1 * times;
    }
    if(freeCnt > 0)
        fcnt += freeCnt * times;
    copy = SET_BIT_8(copy, 0, fcnt);
    copy = SET_BIT_8(copy, 1, gcnt1);
    copy = SET_BIT_8(copy, 2, gcnt2);
    copy = SET_BIT_8(copy, 3, gcnt3);
    SetVar(VAR_JIQIREN_FAIRYCOPY, copy);
}

void Player::handleJiqirenAct_erlking()
{
    if(!World::getJiqirenAct())
        return;
    UInt32 info = GetVar(VAR_ERLKING_USE_FREE_NUM_DAY);
    int remain = 5 - info;
    if(remain > 0)
    {
        UInt32 sum = GetVar(VAR_JIQIREN_ERLKING) + remain;
        SetVar(VAR_JIQIREN_ERLKING, sum);
    }
}

static const UInt32 Need_tael[25] = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 500, 500, 500, 100, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 800};
static const UInt32 Need_gold[25] = { 0, 20, 40, 60, 0, 20, 40, 60, 0, 20, 0, 50, 0, 0, 0, 0, 0, 20, 40, 60, 0, 20, 40, 60, 0};
void Player::completeJiqirenTask(UInt8 type, UInt8 count)
{
    //type==>0:副本免费 1:副本付费1 2:副本付费2 3:副本付费3
    //       4:阵图免费 5:阵图付费1 6:阵图付费2 7:阵图付费3
    //       8:决战之地(简单)免费 9:决战之地(简单)付费 10:决战之地(困难)免费 11:决战之地(困难)付费
    //       12:帮派任务 13:衙门任务 14:师门任务 15:锁妖塔
    //       16:璇玑阵图免费 17:璇玑阵图付费1 18:璇玑阵图付费2 19:璇玑阵图付费3
    //       20:仙界副本免费 21:仙界副本付费1 22:仙界副本付费2 23:仙界副本付费3
    //       24:妖王再临免费 
    if(!World::getJiqirenAct() || type >= 25 || !count)
        return;
    if(type <= 3 && (GetFreePackageSize() < 20*count || GetPackage()->GetRestPackageSize(3) < 2*count || GetPackage()->GetRestPackageSize(5) < count))
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(type >= 4 && type < 8 && (GetFreePackageSize() < 10*count || GetPackage()->GetRestPackageSize(4) < 2*count || GetPackage()->GetRestPackageSize(3) < 2*count))
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(type >= 8 && type < 12 && (GetFreePackageSize() < 20*count || GetPackage()->GetRestPackageSize(3) < 2*count))
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(type == 15 && GetFreePackageSize() < 50*count) 
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(type >= 16 && type < 20 && (GetFreePackageSize() < 2 * count || GetPackage()->GetRestPackageSize(4) < 7*count))
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(type >= 20 && type < 24 && (GetFreePackageSize() < 5*count || GetPackage()->GetRestPackageSize(3) < 2*count))
    {
        sendMsgCode(0, 1011);
        return;
    }
    if(type == 24 && (GetPackage()->GetRestPackageSize() < ((7*count)/99+1) || GetPackage()->GetRestPackageSize(2) < count))
    {
        sendMsgCode(0, 8050);
        return;
    }
    UInt32 tael = Need_tael[type] * count;
    UInt32 gold = Need_gold[type] * count;
    if(type == 15)
    {
        DeamonPlayerData * dpd = getDeamonPlayerData();
        if(!dpd || dpd->maxLevel == 0)
        {
            sendMsgCode(0, 1099);
            return;
        }
        tael *= dpd->maxLevel * count;
    }
    if(getTael() < tael)
    {
        sendMsgCode(0, 1100);
        return;
    }
    if(getGold() < gold)
    {
        sendMsgCode(0, 1104);
        return;
    }

    if(type < 4)
    {
        UInt32 info = GetVar(VAR_JIQIREN_COPY);
        UInt8 curCnt = GET_BIT_8(info, type);
        if(curCnt < count || GetLev() < 30)
            return;
        TeamCopyPlayerInfo* tcpInfo = getTeamCopyPlayerInfo();
        if(!tcpInfo || !tcpInfo->getPassMax())
        {
            sendMsgCode(0, 1097);
            return;
        }

        SetVar(VAR_JIQIREN_COPY, SET_BIT_8(info, type, (curCnt-count)));
    }
    else if(type >= 4 && type < 8)
    {
        UInt32 info = GetVar(VAR_JIQIREN_FRONTMAP);
        UInt8 curCnt = GET_BIT_8(info, (type%4));
        if(curCnt < count || GetLev() < 35)
            return;

        SetVar(VAR_JIQIREN_FRONTMAP, SET_BIT_8(info, (type%4), (curCnt-count)));
    }
    else if(type >= 8 && type < 12)
    {
        UInt32 info = GetVar(VAR_JIQIREN_DUNGEON);
        UInt8 curCnt = GET_BIT_8(info, (type%4));
        if(curCnt < count || GetLev() < 30)
            return;
        UInt8 dunId = 0;
        if(GetLev() < 45)
            dunId = 1;
        else if(GetLev() < 60)
            dunId = 2;
        else if(GetLev() < 75)
            dunId = 3;
        else if(GetLev() < 90)
            dunId = 4;
        else
            dunId = 5;
        UInt8 difficulty = 0xFF;
        if(type < 10)
            difficulty = 0;
        else
            difficulty = 1;
        Dungeon * dg = GObject::dungeonManager[dunId];
        if(!dg || !dg->getFirstPass(this, difficulty))
        {
            sendMsgCode(0, 1098);
            return;
        }

        SetVar(VAR_JIQIREN_DUNGEON, SET_BIT_8(info, (type%4), (curCnt-count)));
    }
    else if(type >= 12 && type < 16)
    {
        UInt32 info = GetVar(VAR_JIQIREN_SYBS);
        UInt8 curCnt = GET_BIT_8(info, (type%4));
        if(curCnt < count || (type == 12 && !getClan()))
            return;
        SetVar(VAR_JIQIREN_SYBS, SET_BIT_8(info, (type%4), (curCnt-count)));
    }
    else if(type >= 16 && type < 20)
    {
        UInt32 info = GetVar(VAR_JIQIREN_XJFRONTMAP);
        UInt8 curCnt = GET_BIT_8(info, (type%4));
        if(curCnt < count || GetLev() < 75)
            return;

        SetVar(VAR_JIQIREN_XJFRONTMAP, SET_BIT_8(info, (type%4), (curCnt-count)));  
    }
    else if(type >= 20 && type < 24)
    {
        UInt32 info = GetVar(VAR_JIQIREN_FAIRYCOPY);
        UInt8 curCnt = GET_BIT_8(info, type);
        if(curCnt < count || GetLev() < 80)
            return;
        SetVar(VAR_JIQIREN_FAIRYCOPY, SET_BIT_8(info, type, (curCnt-count)));   
    }
    else 
    {
        if(GetErlking()->getMaxLevel(this) == 0)
            return;
        UInt8 curCnt = static_cast<UInt8>(GetVar(VAR_JIQIREN_ERLKING));
        if(curCnt < count)
            return;
        SetVar(VAR_JIQIREN_ERLKING,(curCnt - count));  
    }
    ConsumeInfo ci(DailyActivity, 0, 0);
    useTael(tael, &ci);
    ConsumeInfo ci1(DailyActivity, 0, 0);
    useGold(gold, &ci1);

    UInt32 vipLevel = getVipLevel();
    UInt32 exp = (GetLev() - 10) * ((GetLev() > 99 ? 99 : GetLev()) / 10) * 5 + 25;
    switch(type)
    {
        case 0:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_Copy(this, 1);
            break;
        case 1:
        case 2:
        case 3:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_Copy(this, 0);
            break;
        case 4:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_FrontMap(this, 1);
            break;
        case 5:
        case 6:
        case 7:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_FrontMap(this, 0);
            break;
        case 8:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_Dungeon(this, 0, 1);
            break;
        case 9:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_Dungeon(this, 0, 0);
            break;
        case 10:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_Dungeon(this, 1, 1);
            break;
        case 11:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_Dungeon(this, 1, 0);
            break;
        case 12:    //帮派任务
            {
                AddClanContrib(300*count);
                AddClanBuilding(300*count);
                exp *= 2;
                AddExp(exp*count);
            }
            break;
        case 14:    //师门任务
            {
                if(vipLevel <= 2)
                    exp *= 10.8;
                else if(vipLevel <= 5)
                    exp *= 14.4;
                else
                    exp *= 21.6;
                AddExp(exp*count);
            }
            break;
        case 13:    //衙门任务
            {
                UInt32 tael = 0;
                if(vipLevel <= 1)
                    tael = 800;
                else if(vipLevel <= 4)
                    tael = 1000;
                else
                    tael = 1300;
                getTael(tael*count);
            }
            break;
        case 15:    //锁妖塔
            for(UInt8 i = 0; i < count; ++ i)
            {
                townDeamonManager->getJiqirenAward(this);
            }
            break;
        case 16:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_XJFrontMap(this, 1);
            break;
        case 17:
        case 18:
        case 19:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_XJFrontMap(this, 0);
            break;
        case 20:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_FairyCopy(this, 1);
            break;
        case 21:
        case 22:
        case 23:
            for(UInt8 i = 0; i < count; ++ i)
                GameAction()->getJiqirenAward_FairyCopy(this, 0);
            break;
        case 24:
            GetErlking()->getJiqirenAward(this,count);
            break;

    }
    sendJiqirenInfo();
    char action[16] = "";
    snprintf (action, 16, "F_140107_%d", type+1);
    udpLog("mashangyoujiang", action, "", "", "", "", "act", count);
}

void Player::sendJiqirenInfo()
{
    UInt32 copy = GetVar(VAR_JIQIREN_COPY);
    UInt32 front = GetVar(VAR_JIQIREN_FRONTMAP);
    UInt32 dungeon = GetVar(VAR_JIQIREN_DUNGEON);
    UInt32 sybs = GetVar(VAR_JIQIREN_SYBS);
    UInt32 xjfront = GetVar(VAR_JIQIREN_XJFRONTMAP);
    UInt32 fairycopy = GetVar(VAR_JIQIREN_FAIRYCOPY);

	Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x10) << static_cast<UInt8>(0);
    st << static_cast<UInt8>(GET_BIT_8(copy, 0)) << static_cast<UInt8>(GET_BIT_8(copy, 1));
    st << static_cast<UInt8>(GET_BIT_8(copy, 2)) << static_cast<UInt8>(GET_BIT_8(copy, 3));

    st << static_cast<UInt8>(GET_BIT_8(front, 0)) << static_cast<UInt8>(GET_BIT_8(front, 1));
    st << static_cast<UInt8>(GET_BIT_8(front, 2)) << static_cast<UInt8>(GET_BIT_8(front, 3));

    st << static_cast<UInt8>(GET_BIT_8(dungeon, 0)) << static_cast<UInt8>(GET_BIT_8(dungeon, 1));
    st << static_cast<UInt8>(GET_BIT_8(dungeon, 2)) << static_cast<UInt8>(GET_BIT_8(dungeon, 3));

    st << static_cast<UInt8>(GET_BIT_8(sybs, 0)) << static_cast<UInt8>(GET_BIT_8(sybs, 1));
    st << static_cast<UInt8>(GET_BIT_8(sybs, 2)) << static_cast<UInt8>(GET_BIT_8(sybs, 3));
    st << static_cast<UInt8>(GET_BIT_8(xjfront, 0)) << static_cast<UInt8>(GET_BIT_8(xjfront, 1));
    st << static_cast<UInt8>(GET_BIT_8(xjfront, 2)) << static_cast<UInt8>(GET_BIT_8(xjfront, 3));
    st << static_cast<UInt8>(GET_BIT_8(fairycopy, 0)) << static_cast<UInt8>(GET_BIT_8(fairycopy, 1));
    st << static_cast<UInt8>(GET_BIT_8(fairycopy, 2)) << static_cast<UInt8>(GET_BIT_8(fairycopy, 3));
    st << static_cast<UInt8>(GetVar(VAR_JIQIREN_ERLKING));
    st << Stream::eos;
    send(st);
}

void Player::LoadMoBaoData(UInt16 buyNum, UInt16 status, const std::string& item, 
        UInt8 itemACnt, UInt8 itemBCnt, UInt8 itemCCnt, UInt8 itemDCnt, UInt8 itemECnt, UInt8 itemFCnt)
{
    m_mobao.buyNum = buyNum;
    m_mobao.status = status;

    StringTokenizer items(item, ",");
    UInt32 sz = items.count();
    if (!sz)
        return;

    for(UInt32 i=0; i<sz&&i<9; i++)
    {
        UInt32 itemId = atoi(items[i].c_str());
        m_mobao.item[i] = itemId;
    }
    m_mobao.openFLMSNum = itemACnt;
    m_mobao.openFLMYNum = itemBCnt;
    m_mobao.openJGBXNum = itemCCnt;
    m_mobao.openBFMYNum = itemDCnt;
    m_mobao.openPLMYNum = itemECnt;
    m_mobao.openCSRLBJNum = itemFCnt;
}

void Player::InitMoBaoAward()
{
    std::vector<UInt32> items;
    UInt32 award[4] = {9413, 9424, 9418, 9414};
    for(UInt8 i=0; i<4; i++)
    {
        items.push_back(award[i]);
    }

    memset(m_mobao.item, 0, sizeof(m_mobao.item));
    for(UInt32 j=0; j<9; ++j)
    {
        RandMoBaoAward(items, j, 0);
    }

    std::string its;
    for(UInt32 j=0; j<9; ++j)
    {
        its += Itoa(m_mobao.item[j]);
        if(j != 8)
            its += ",";
    }

    m_mobao.status = 0;
    m_mobao.openFLMSNum = 0;
    m_mobao.openFLMYNum = 0;
    m_mobao.openJGBXNum = 0;
    m_mobao.openBFMYNum = 0;
    m_mobao.openPLMYNum = 0;
    m_mobao.openCSRLBJNum = 0;

    DB1().PushUpdateData("REPLACE INTO `mobao`(`playerId`, `buyNum`, `status`, `item`, `itemACnt`, `itemBCnt`, `itemCCnt`,`itemDCnt`,`itemECnt`,`itemFCnt`)  VALUES(%" I64_FMT "u, %u, %u, '%s', %u, %u, %u, %u,  %u, %u)", getId(), m_mobao.buyNum, 0, its.c_str(), 0, 0, 0, 0, 0, 0);
}

void Player::ReqMoBaoInfo()
{
    UInt8 refreshMark = GetVar(VAR_MOBAO_REFRESH_AWARD_MARK);
    if(0 == refreshMark || 1 == refreshMark) // 1:全部翻完; 0:每天第一次进入墨宝, 重置数据！！！
    {
        InitMoBaoAward();
        SetVar(VAR_MOBAO_REFRESH_AWARD_MARK, 2);
    }
    MoBaoData(1);
}

void Player::MoBaoData(UInt8 mark)
{
    UInt16 buyOpenCardNum = GetVar(VAR_BUY_OPENCARD_NUM);
    UInt16 openCardNum = GetVar(VAR_OPENCARD_NUM);
    UInt16 refreshNum = GetVar(VAR_REFRESH_AWARD_NUM);
    UInt16 buyNum = m_mobao.buyNum;
    
    UInt16 surplusNum = 0; 
    if(0 == openCardNum)
        surplusNum = 3;
    else if(1 == openCardNum)
        surplusNum = 2;
    else if(2 == openCardNum)
        surplusNum = 1;
    else
        surplusNum = 0;

    surplusNum += buyNum;
    
    Stream st(REP::MO_BAO);
    st << static_cast<UInt8>(0x00);
    st << surplusNum << buyOpenCardNum << refreshNum << m_mobao.status;
    for(UInt8 i=0; i<9; i++)
    {
        st << m_mobao.item[i];
    }
    st << mark;
    st << Stream::eos;
    send(st);
}

bool Player::CheckForZero()
{
    UInt8 refreshMark = GetVar(VAR_MOBAO_REFRESH_AWARD_MARK);
    if(0 == refreshMark)
    {
        InitMoBaoAward();
        SetVar(VAR_MOBAO_REFRESH_AWARD_MARK, 2);
        UInt8 mark = 0;
        if(1 == refreshMark)
            mark = 1;

        MoBaoData(mark);

        return false;
    }

    return true;
}

void Player::OpenCard(UInt8 pos)
{
    if(!CheckForZero())
        return;

    if(pos < 0 || pos > 8)
        return;

    UInt16 openCardNum = GetVar(VAR_OPENCARD_NUM);
    if(openCardNum >= 3 &&  0 == m_mobao.buyNum)
        return;

    UInt32 status = m_mobao.status;
    UInt8 mark = GET_BIT(status, pos);
    if(1 == mark)
        return;

    UInt32 itemId = m_mobao.item[pos];
    if(0 == itemId 
            || (9413 != itemId 
            && 9414 != itemId 
            && 9418 != itemId 
            && 9424 != itemId 
            && 9425 != itemId 
            && 9338 != itemId))
        return;
    
    UInt8 count = 0;
    if(9413 == itemId)
        count = m_mobao.openFLMSNum;
    else if(9414 == itemId)
        count = m_mobao.openFLMYNum;
    else if(9418 == itemId)
        count = m_mobao.openJGBXNum;
    else if(9424 == itemId)
        count = m_mobao.openBFMYNum;
    else if(9425 == itemId)
        count = m_mobao.openPLMYNum;
    else if(9338 == itemId)
        count = m_mobao.openCSRLBJNum;

    if(count >= 4)
        return;
    
    if(0 == count)
        count = 1;
    else if(1 == count)
        count = 1;
    else if(2 == count)
        count = 2;
    else if(3 == count)
        count = 4;

    if(GetPackage()->GetRestPackageSize() < count)
    {
        sendMsgCode(0, 1011);
        return;
    }

    for(UInt8 i=0; i<count; i++)
    {
        GetPackage()->AddItem(itemId, 1, true, false, FromMoBao);
    }

    if(9413 == itemId)
        m_mobao.openFLMSNum++;
    else if(9414 == itemId)
        m_mobao.openFLMYNum++;
    else if(9418 == itemId)
        m_mobao.openJGBXNum++;
    else if(9424 == itemId)
        m_mobao.openBFMYNum++;
    else if(9425 == itemId)
        m_mobao.openPLMYNum++;
    else if(9338 == itemId)
        m_mobao.openCSRLBJNum++;

    status = SET_BIT(status, pos);
    m_mobao.status = status;
    if(511 == m_mobao.status) //所有牌都被翻开了
        SetVar(VAR_MOBAO_REFRESH_AWARD_MARK, 1);

    std::string its;
    for(UInt8 j=0; j<9; ++j)
    {
        its += Itoa(m_mobao.item[j]);
        if(j != 8)
            its += ",";
    }
    
    AddVar(VAR_OPENCARD_NUM, 1);
    if(openCardNum >= 3 && m_mobao.buyNum > 0)
        m_mobao.buyNum--;

    DB1().PushUpdateData("REPLACE INTO `mobao`(`playerId`, `buyNum`, `status`, `item`, `itemACnt`, `itemBCnt`, `itemCCnt`,`itemDCnt`,`itemECnt`,`itemFCnt`) VALUES(%" I64_FMT "u, %u, %u, '%s',  %u, %u,  %u, %u,  %u, %u)", getId(), m_mobao.buyNum, m_mobao.status, its.c_str(), m_mobao.openFLMSNum, m_mobao.openFLMYNum, m_mobao.openJGBXNum, m_mobao.openBFMYNum, m_mobao.openPLMYNum, m_mobao.openCSRLBJNum);

    Stream st(REP::MO_BAO);
    st << static_cast<UInt8>(0x01);
    st << pos;
    st << Stream::eos;
    send(st);
    GameAction()->doStrong(this, SthMoBao, 0,0);
}

void Player::BuyOpenCardNum()
{
    if(!CheckForZero())
        return;

    if(!hasChecked())
        return;

    UInt32 money[5] = {10, 20, 40, 80, 100};
    UInt16 buyOpenCardNum = GetVar(VAR_BUY_OPENCARD_NUM);
    if(buyOpenCardNum > 4)
        buyOpenCardNum = 4;
    
    if(getGold() < money[buyOpenCardNum])
    {
        sendMsgCode(0, 1104);
        return;
    }

    ConsumeInfo ci(BuyOpenCard, 0, 0);
    useGold(money[buyOpenCardNum], &ci);
        
    m_mobao.buyNum++;
    AddVar(VAR_BUY_OPENCARD_NUM, 1);
    
    DB3().PushUpdateData("UPDATE `mobao` SET `buyNum` = %u  WHERE `playerId` = %" I64_FMT "u", m_mobao.buyNum, getId());

    UInt16 buyNum = m_mobao.buyNum;
    
    UInt16 openCardNum = GetVar(VAR_OPENCARD_NUM);
    UInt16 surplusNum = 0; 
    if(0 == openCardNum)
        surplusNum = 3;
    else if(1 == openCardNum)
        surplusNum = 2;
    else if(2 == openCardNum)
        surplusNum = 1;
    else
        surplusNum = 0;

    surplusNum += buyNum;
    
    Stream st(REP::MO_BAO);
    st << static_cast<UInt8>(0x03);
    st << surplusNum << static_cast<UInt16>(GetVar(VAR_BUY_OPENCARD_NUM));
    st << Stream::eos;
    send(st);
}

void Player::RefreshAward()
{
    if(!CheckForZero())
        return;

    if(!hasChecked())
        return;

    UInt32 money[5] = {1000, 2000, 4000, 20, 40};
    UInt16 refreshAwardNum = GetVar(VAR_REFRESH_AWARD_NUM);
    if(refreshAwardNum > 4)
        refreshAwardNum = 4;
  
    ConsumeInfo ci(RefreshMoBaoAward, 0, 0);
    if(refreshAwardNum < 3)
    {
        if(getTael() < money[refreshAwardNum])
        {
            sendMsgCode(0, 1100);
            return;
        }

        useTael(money[refreshAwardNum], &ci);
    }
    else
    {
        if(getGold() < money[refreshAwardNum])
        {
            sendMsgCode(0, 1104);
            return;
        }

        useGold(money[refreshAwardNum], &ci);
    }  

    for(UInt8 i=0; i<9; i++)
    {
        UInt8 mark = GET_BIT(m_mobao.status, i);
        if(0 == mark)
            m_mobao.item[i] = 0;
    }

    UInt8 sign = 0;
    std::vector<UInt32> items;
    if(refreshAwardNum < 3)
    {
        UInt32 award[4] = {9413, 9424, 9418, 9414};
        for(UInt8 i=0; i<4; i++)
        {
            items.push_back(award[i]);
        }
    }
    else
    {
        UInt32 award[6] = {9413, 9424, 9418, 9414, 9425, 9338};
        for(UInt8 i=0; i<6; i++)
        {
            items.push_back(award[i]);
        }
        sign = 1;
    }

    for(UInt8 i=0; i<9; i++)
    {
        UInt8 mark = GET_BIT(m_mobao.status, i);
        if(0 == mark)
            RandMoBaoAward(items, i, sign);
    }

    AddVar(VAR_REFRESH_AWARD_NUM, 1);

    std::string its;
    for(UInt8 i=0; i<9; i++)
    {
        if(m_mobao.item[i] > 0)
        {
            its += Itoa(m_mobao.item[i]);
            if(i != 8)
                its += ",";
        }
    }

    DB3().PushUpdateData("UPDATE `mobao` SET `item` = '%s' WHERE `playerId` = %" I64_FMT "u", its.c_str(), getId());

    MoBaoData(1);
}

void Player::RandMoBaoAward(std::vector<UInt32>& items, UInt8 k, UInt8 mark)
{
    UInt8 rand = uRand(100);
    UInt32 itemId = 0;
    UInt8 pos = 0;

    if(0 == mark)
    {
        if(rand >= 90)
            pos = 4;
        else if(rand >= 70)
            pos = 3;
        else if(rand >= 35)
            pos = 2;
        else
            pos = 1;
    }
    else
    {
        if(rand >= 93)
            pos = 6;
        else if(rand >= 85)
            pos = 5;
        else if(rand >= 75)
            pos = 4;
        else if(rand >= 60)
            pos = 3;
        else if(rand >= 30)
            pos = 2;
        else
            pos = 1;
    }

    UInt8 cnt = items.size();
    if(pos > cnt)
    {
        UInt8 randA = uRand(cnt);
        itemId = items[randA];
    }
    else
        itemId = items[pos-1];

    if(!CheckMoBaoAward(itemId))
    {
        for(UInt8 i=0; i<items.size(); i++)
        {
            if(itemId == items[i])
            {
                items.erase(items.begin() + i);
                RandMoBaoAward(items, k);
                break;
            }
        }
    }
    else
        m_mobao.item[k] = itemId;
}

bool Player::CheckMoBaoAward(UInt32 itemId)
{
    UInt8 cnt = 0;
    for(UInt8 i=0; i<9; i++)
    {
        if(itemId == m_mobao.item[i])
            cnt++;

        if(cnt >= 4)
            return false;
    }
    return true;
}

void Player::getSummerMeetScore(UInt8 num , UInt32 val)
{
    if (!World::getSummerMeetTime())
        return;
    UInt32 type = GetVar(VAR_SUMMER_MEET_TYPE);
    UInt32 max[] = {16,16,70,16,10,10,56,35,35,35,1000,1000}; 
    UInt32 Award = GetVar(VAR_SUMMER_MEET_TYPE_AWARD);
    if(type==0 || Award == 0 )
        return ;
    if(num > 11)
        return ;
    if(num == 10)
    {
        UInt32 value = GetVar(VAR_SUMMERMEET_SCORE4 );
        if((value + val) >= 1000)
        {
            SetVar(VAR_SUMMERMEET_SCORE4  , 1000);
        }
        else
            SetVar(VAR_SUMMERMEET_SCORE4 , value + val);
        sendSummerMeetScoreInfo();
        return ;
    }
    UInt32 value_var = GetVar(VAR_SUMMERMEET_SCORE1 + num / 4) ; 
    UInt8 count = GET_BIT_8( value_var ,num % 4);     
    if(count >= max[num])
        return ;
   SetVar(( VAR_SUMMERMEET_SCORE1 + num / 4 ) , SET_BIT_8( value_var ,num % 4 , (count + 1) ));
   sendSummerMeetScoreInfo();
}
UInt32 Player::getSummerMeetTotalScore()
{
    UInt32 sum  =0;
    UInt32 addScore[] = {3,3,1,3,3,1,1,1,1,1,1};
    for(UInt8 i = 0; i<10 ; ++i)
    {
        UInt8 count = GET_BIT_8( GetVar(VAR_SUMMERMEET_SCORE1 + i / 4) ,i % 4);     
        sum+= addScore[i] * count ;
    }
    sum += GetVar(VAR_SUMMERMEET_SCORE4);
    sum += GetVar(VAR_SUMMERMEET_SCORE5);
    return sum;
}
void Player::sendSummerMeetScoreInfo()
{
    if (!World::getSummerMeetTime())
        return;
    Stream st(REP::RC7DAY);  //协议
    st << static_cast<UInt8>(28);
    for(UInt8 i =0 ;i < 10 ; ++i)
    {
        st <<static_cast<UInt8>( GET_BIT_8( GetVar(VAR_SUMMERMEET_SCORE1 + i / 4) ,i % 4) ); 
    }
    st << GetVar(VAR_SUMMERMEET_SCORE4);
    st << GetVar(VAR_SUMMERMEET_SCORE5);
    st <<getSummerMeetTotalScore();
    st << Stream::eos;
    send(st);
}
bool Player::giveLeftPowerHold(UInt32 num)
{
    UInt32 iid = 9496;
    UInt8 ret = 0;
    {
        UInt16 count = GetPackage()->GetItemAnyNum(iid) ;
        ItemBase * item = GetPackage()->FindItem(iid, true);
        if (!item)
            item =GetPackage()->FindItem(iid, false);
        if(item ==NULL)
            return false;
        if(num > count)
            return false;
        GetPackage()->DelItemAny(iid, num );
        GetPackage()->AddItemHistoriesLog(iid, num );
        ret = 1;
    }
    return true;
}

void Player::doGuankaAct(UInt8 type)
{
    if(!World::getGuankaAct())
        return;

    if(CURRENT_THREAD_ID() != getThreadId())
    {
        GameMsgHdr h(0x357,  getThreadId(), this, sizeof(type));
        GLOBAL().PushMsg(h, &type);
        return;
    }
    static UInt32 scores[5] = {20, 30, 50, 200, 400};
    static UInt32 npcIds[6][5] = {
        {13500, 13506, 13512, 13518, 13524},
        {13501, 13507, 13513, 13519, 13525},
        {13502, 13508, 13514, 13520, 13526},
        {13503, 13509, 13515, 13521, 13527},
        {13504, 13510, 13516, 13522, 13528},
        {13505, 13511, 13517, 13523, 13529},
    };
    if(type >= 6) return;
    UInt32 data = GetVar(VAR_GUANKA_ACTION_NPC);
    UInt8 index = GET_BIT_3(data, type);
    if(index >= 5) return;
    UInt32 npcId = npcIds[type][index];
    bool isFull = false;
    UInt64 exp =0;
    bool res = attackCopyNpc(npcId, 2, 0, 1, isFull, exp, 1, false, NULL, false);
    if(res)
    {
		SYSMSG_SENDV(193, this, scores[index]);
        SYSMSG_SENDV(194, this, scores[index]);
        AddVar(VAR_GUANKA_ACTION_SCORE, scores[index]);
        SetVar(VAR_GUANKA_ACTION_TIME, TimeUtil::Now());
        ++ index;
        data = SET_BIT_3(data, type, index);
        SetVar(VAR_GUANKA_ACTION_NPC, data);

        UInt32 totalScore = GetVar(VAR_GUANKA_ACTION_SCORE);
        GameMsgHdr hdr(0x1B6, WORKER_THREAD_WORLD, this, sizeof(totalScore));
        GLOBAL().PushMsg(hdr, &totalScore);
        GameMsgHdr hdr1(0x1B8, WORKER_THREAD_WORLD, this, 0);
        GLOBAL().PushMsg(hdr1, NULL);

        sendguankaActMyRank();
        if(index >= 5)
        {
            SYSMSG_SENDV(5125, this, npcId);
            SYSMSG_BROADCASTV(5126, getCountry(), getName().c_str(), npcId);
            UInt8 cnt = 0;
            for(UInt8 i = 0; i < 6; ++ i)
            {
                if(GET_BIT_3(data, i) >= 5)
                    ++ cnt;
            }
            if(cnt >= 6)
            {
                SYSMSG_SENDV(5127, this);
                SYSMSG_BROADCASTV(5128, getCountry(), getName().c_str());
            }
        }
    }
}

void Player::guankaActUdpLog(UInt32 npcId, bool result)
{
    //add udpLog
    UInt32 logInfo = GetVar(VAR_GUANKA_ACTION_UDPLOG);
    int tmpIdx = npcId - 13500;    //最大30个
    if(tmpIdx < 0 || tmpIdx > 30 || (GET_BIT(logInfo, tmpIdx) && !result))
        return;
    logInfo = SET_BIT(logInfo, tmpIdx);
    SetVar(VAR_GUANKA_ACTION_UDPLOG, logInfo);
    std::string trumpStr;
    for(int i = 0; i < 5; ++ i)
    {
        UInt32 trumps1[3] = {0};
        UInt8 trumps2[3] = {0};
        GObject::Fighter * fgt = getLineup(i).fighter;
        if(fgt != NULL)
        {
            fgt->getAllTrumpTypeId(trumps1);
            fgt->getAllTrumpEnchant(trumps2);
        }
        for(int j = 0; j < 3; ++ j)
        {
            trumpStr += "{" + Itoa(trumps1[j]) + ":" + Itoa(trumps2[j]) + "},";
        }
    }
    char str[32] = {0};
    sprintf(str, "F_140240_%u_%u", npcId, result ? 1 : 2);
    udpLog("hundunmoyu", str, trumpStr.c_str(), Itoa(getBattlePoint()).c_str(), "", "", "act");
}

void Player::addguankaScoreByAttack(UInt32 rounds)
{
    if(!World::getGuankaAct())
        return;
    UInt32 score = 0;
    switch(rounds)
    {
        case 0:
        case 1:
        case 2:
        case 3:
            score = 1026;
            break;
        case 4:
            score = 514;
            break;
        case 5:
            score = 258;
            break;
        case 6:
            score = 130;
            break;
        case 7:
            score = 66;
            break;
        case 8:
            score = 34;
            break;
        case 9:
            score = 18;
            break;
        case 10:
            score = 10;
            break;
        case 11:
            score = 6;
            break;
        case 12:
            score = 4;
            break;
        default:
            return;
    }
    SYSMSG_SENDV(193, this, score);
    SYSMSG_SENDV(194, this, score);
    AddVar(VAR_GUANKA_ACTION_SCORE, score);
}

void Player::sendguankaActMyRank()
{
    GameMsgHdr hdr(0x1B9, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr, NULL);
}

void Player::getguankaScoreAward(UInt8 type)
{
    if(!World::getGuankaAct() || type > 4)
        return;

    static UInt32 scoreLvl[] = {300, 500, 1000, 1500, 2000};
    static UInt32 awards[5][5][2] = {
        {{15,2},  {514,2}, {135,2},   {500,5},   {0, 0}},
        {{15,5},  {514,5}, {135,5},   {500,5},   {0, 0}},
        {{15,10}, {515,2}, {134,2},   {514,5},   {135,5}},
        {{515,4}, {134,4}, {9438,10}, {9022,5},  {0, 0}},
        {{515,6}, {134,6}, {9438,15}, {9075,10}, {0, 0}},
    };
    UInt32 data = GetVar(VAR_GUANKA_ACTION_NPC);
    UInt32 score = GetVar(VAR_GUANKA_ACTION_SCORE);
    UInt8 state = GET_BIT_8(data, 3);
    if(score < scoreLvl[type] || (state & (1 << type)) > 0)
        return;
    state |= 1 << type;
    data = SET_BIT_8(data, 3, state);
    SetVar(VAR_GUANKA_ACTION_NPC, data);
    sendguankaActMyRank();

    for(UInt8 i = 0; i < 5; ++ i)
    {
        struct ItemAdd
        {
            UInt16 item;
            UInt16 num;
            bool bind;
            UInt16 fromWhere;
        };
        ItemAdd ia;
        ia.item = awards[type][i][0];
        ia.num = awards[type][i][1];
        ia.bind = true;
        ia.fromWhere = FromQixi;
        if(ia.item > 0)
        {
            GameMsgHdr hdr(0x241, getThreadId(), this, sizeof(ia));
            GLOBAL().PushMsg(hdr, &ia);
        }
    }
    char str[32] = {0};
    sprintf(str, "F_140240_%d", type+1);
    udpLog("hundunmoyu", str, "", "", "", "", "act");
}

void Player::sevensoul_fixed()
{
    for(std::map<UInt32, FairyPet *>::iterator it = _fairyPets.begin(); it != _fairyPets.end(); ++ it)
    {
        FairyPet* pet = it->second;
        if(!pet)
            continue;
        if(pet->getSevenSoulSoulLevel(0) > 0)
            pet->updateToDBPetSkill();
    }
}
void Player::sendXinMoInfo()
{
    Stream st(REP::EQ_XINMO);
    st <<static_cast<UInt8>(0);
    st << GetVar(VAR_HEART_SWORD);
    std::map<UInt32, Fighter *>::iterator it = _fighters.begin();
    //UInt8 cnt = _fighters.size() ;
    //st << static_cast<UInt8>(cnt);
    for (; it != _fighters.end(); ++it)
    {
        Fighter* fgt = it->second; // XXX: Fashion can not be enchanted
        if(fgt==NULL)
        {
            st <<  static_cast<UInt32>(0); 
        }
        else
        {
            st << fgt->getXinMo().val;
        }
    }
    st << Stream::eos;
    send(st);
}
void Player::AddHeartSword(UInt32 val)
{
    UInt32 var_val = GetVar(VAR_HEART_SWORD);
    SetVar(VAR_HEART_SWORD,var_val+val);
    Stream st(REP::EQ_XINMO);
    st << static_cast<UInt8>(4);
    st << static_cast<UInt32>(var_val+val);
    st << Stream::eos;
    send(st);
    SYSMSG_SENDV(2027,this,val);
    SYSMSG_SENDV(2028,this,val);
}

UInt8 Player::useChangeSexCard()
{
    if(GetVar(VAR_MARRY_STATUS) > 0)
        return 0;

    Fighter* fgt = getMainFighter();
    if(!fgt)
        return 0;
    UInt32 oldId = fgt->getId();
    UInt32 newId;
    if(oldId % 2 == 1) //原先是男
    {
        newId = oldId + 1;
    }
    else
    {
        newId = oldId - 1;
    }

    Stream st(REP::USER_INFO_CHANGE);
    st << static_cast<UInt8>(0x22) << newId << Stream::eos;
    send(st);

    //与改形卡有关的函数
    do_fighter(fgt, oldId, newId);
    do_fighter_buff(fgt, oldId);
    do_fighter_train(fgt, oldId);
    do_practice_data(fgt, oldId);
    do_second_soul(fgt, oldId);
    do_elixir(fgt, oldId);
    do_skill_strengthen(fgt, oldId);
    do_fighter_xingchen(fgt, oldId);
    do_fighter_xinmo(fgt, oldId);
    do_skill_grade(fgt, oldId);
    do_fighter_lingbaoLevel(fgt, oldId);
    do_fighter_lingbaoFall(fgt, oldId);
    do_fighter_evolution(fgt, oldId);

    struct _stTable
    {
        Fighter* fgt;
        UInt32 oldId;
    };
    _stTable sttable = {fgt, oldId};
    GameMsgHdr hdr1(0x1A0, WORKER_THREAD_WORLD, this, sizeof(sttable));
    GLOBAL().PushMsg(hdr1, &sttable);

    UInt32 count = GetVar(VAR_SEX_CHANGE);
    SetVar(VAR_SEX_CHANGE, ++count);
    return 1;
}

void Player::doTableInWorld(Fighter* fgt, UInt32 oldId)
{
    if(!fgt)
        return;
    do_sh_fighter(fgt, oldId);
    do_sh_fighter_attr_extra(fgt, oldId);
    do_sh_fighter_attr2(fgt, oldId);
}


void Player::do_fighter(Fighter* fgt, UInt32 oldId, UInt32 newId)
{
    fgt->setId(newId);
    if(fgt->getId() % 2 == 1)
        fgt->setSex(0);
    else
        fgt->setSex(1);
    _fighters.insert(_fighters.begin(), std::make_pair(newId, fgt));
    std::map<UInt32, Fighter *>::iterator it = _fighters.find(oldId);
    if(it != _fighters.end())
        _fighters.erase(it);
    DB2().PushUpdateData("UPDATE `fighter` SET  `id` = %u WHERE `id` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());

    for(UInt8 i = 0; i < 5; i++)
    {
        if(_playerData.lineup[i].fid == oldId)
        {
            _playerData.lineup[i].fid = newId;
            storeFighters();
        }
    }
}

void Player::do_fighter_buff(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `fighter_buff` SET `id` = %u WHERE `id` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_fighter_train(Fighter* fgt, UInt32 oldId)
{
    //主将不能闭关修炼
    //DB1().PushUpdateData("UPDATE  `fighter_train` SET `fgtId` = %u WHERE `fgtId` = %u AND `ownerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_practice_data(Fighter* fgt, UInt32 oldId)
{
    UInt32 fgts[1] = {oldId};
    GObject::practicePlace.standup(this, fgts, 1);
    fgts[0] = fgt->getId();
    GObject::practicePlace.sitdown(this, fgts, 1);
    //DB1().PushUpdateData("UPDATE `practice_data` SET `fighters` = '%s' WHERE `id` = %" I64_FMT "u", "5,11,13,15,17,19", oldId, getId());
}

void Player::do_second_soul(Fighter* fgt, UInt32 oldId)
{
    DB2().PushUpdateData("UPDATE `second_soul` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_elixir(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `elixir` SET `id` = %u WHERE `id` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_skill_strengthen(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `skill_strengthen` SET `id` = %u WHERE `id` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_sh_fighter(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `sh_fighter` SET `id` = %u WHERE `id` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_sh_fighter_attr_extra(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `sh_fighter_attr_extra` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_sh_fighter_attr2(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `sh_fighter_attr2` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_fighter_xingchen(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `fighter_xingchen` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}
void Player::do_fighter_xinmo(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `fighter_xinmo` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

//增加和某好友的友好度
//flag 为0 表示
void Player::CompleteFriendlyTask(Player * friendOne , UInt8 taskNum , UInt8 flag)
{
    if(friendOne == NULL)
        return ;
    if(!_hasFriend(friendOne))
        return ;
    if(taskNum > 5 )
        return ;

    //std::cout << static_cast<UInt32>(getId()) << " to " <<static_cast<UInt32>(friendOne->getId()) << " num :" <<static_cast<UInt32>(taskNum) << std::endl;

    static UInt8 task_num_val_max[][5] = {
        {1,1,1,3,3},
        {1,1,1,3,3},
        {1,1,1,1,1},
        {1,10,1,8,1},
        {1,4,1,2,1},
        {1,10,4,10,10},
    };

    UInt32 now = TimeUtil::Now();
    std::map<UInt64,FriendTaskNum >::iterator it_task = _friendTask.find(friendOne->getId());
    if(it_task == _friendTask.end())
    {
        FriendTaskNum ft;
        _friendTask[friendOne->getId()] = ft ;
        it_task = _friendTask.find(friendOne->getId());
    }
    if(now > it_task->second.clearTime)
    {
       it_task->second.clear( TimeUtil::SharpDay(1,now) );
    }

    UInt32 count_var =GetVar(VAR_FRIEND_TASK1 + taskNum/3);  
    UInt8 count = GET_BIT_8(count_var , taskNum%3);

    if(it_task->second.taskNum[taskNum] < task_num_val_max[taskNum][1])
    {
        ++it_task->second.taskNum[taskNum];
        AddFriendlyCount( friendOne , task_num_val_max[taskNum][0]);
    }
    else
    {
        flag = 1;
    }
    if(count < task_num_val_max[taskNum][3]) 
    {
        AddVar(VAR_FRIEND_VALUE , task_num_val_max[taskNum][2]);
        AddVar(VAR_FRIEND_VALUE_DAY , task_num_val_max[taskNum][2]);
        count_var = SET_BIT_8(count_var , taskNum %3 , (count +1) );
        SetVar(VAR_FRIEND_TASK1+taskNum/3 , count_var);
    }
    if((count + 1) == task_num_val_max[taskNum][4] )
    {
        UInt8 dayTaskNum = 0 ;
        for(UInt8 i = 0; i < 6; ++i)     
        {
            UInt32 count_var_value =GetVar(VAR_FRIEND_TASK1 + i/3);  
            UInt8 count_num = GET_BIT_8(count_var_value , i%3);
            if(count_num >= task_num_val_max[i][4]) 
                ++dayTaskNum ;
        }
        if(dayTaskNum == 5)
        {
            AddVar(VAR_FRIEND_VALUE , 5);
            AddVar(VAR_FRIEND_VALUE_DAY , 5);
            //std::cout << "XXX5" <<std::endl;
            udpLog("jiebaixitong", "F_140423_1", "", "", "", "", "act");
        }
        if(dayTaskNum == 6)
        {
            AddVar(VAR_FRIEND_VALUE , 3);
            AddVar(VAR_FRIEND_VALUE_DAY , 3);
            //std::cout << "XXX6" <<std::endl;
            udpLog("jiebaixitong", "F_140423_2", "", "", "", "", "act");
        }
    }

    if(!flag)
    {
        if(friendOne->getThreadId() == getThreadId())
        {
            friendOne->AddFriendlyCount(this , task_num_val_max[taskNum][0]);
        }
        else 
        {
            struct msg 
            {
                UInt64 id ;
                UInt8 val ;
                UInt8 flag ;
            };
            struct msg _msg;
            _msg.id = getId();
            _msg.val = task_num_val_max[taskNum][0];
            _msg.flag = 1 ;
            GameMsgHdr hdr(0x358, friendOne->getThreadId(), friendOne, sizeof(_msg));
            GLOBAL().PushMsg(hdr, &_msg);
        }
    }
    sendFirendlyCountTaskInfo();
}
void Player::do_skill_grade(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `skill_grade` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_fighter_lingbaoLevel(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `fighter_lingbaoLevel` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_fighter_lingbaoFall(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `fighter_lingbaoFall` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::do_fighter_evolution(Fighter* fgt, UInt32 oldId)
{
    DB1().PushUpdateData("UPDATE `fighter_evolution` SET `fighterId` = %u WHERE `fighterId` = %u AND `playerId` = %" I64_FMT "u", fgt->getId(), oldId, getId());
}

void Player::BuyLeftPower()
{
    UInt32 buyCount = GetVar(VAR_LEFTADDR_POWER_ADD);
    if(buyCount >=2 )
        return ;
    UInt32 power = GetVar(VAR_LEFTADDR_POWER);
    if(buyCount == 0 )
    {
        if (getTael() < 1000)
        {
            sendMsgCode(0, 1100);
            return ;
        }
        ConsumeInfo ci(BuyPower, 0, 0);
        useTael(1000, &ci);
    }
    if(buyCount == 1)
    {
        if (getGold() < 5)
        {
            sendMsgCode(0, 1104);
            return ;
        }
        ConsumeInfo ci(BuyPower, 0, 0);
        useGold(5, &ci);
    }
    SetVar(VAR_LEFTADDR_POWER_ADD , buyCount + 1 );
    if( ( power + 3 ) > 20)
        SetVar(VAR_LEFTADDR_POWER,20);
    else
        SetVar(VAR_LEFTADDR_POWER,power + 3);
    GameMsgHdr hdr1(0x142, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr1, NULL);
}

void Player::AddFriendlyCount(Player * friendOne , UInt32 val) 
{
    if( !friendOne )
        return ;
    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(friendOne->getId());
    if(it != _friendlyCount.end())
    {
        if( ( it->second.value < 3500 ) && (it->second.value + val >= 3500))
            OnShuoShuo(SS_FRIEND_2);
        it->second.value += val; 
    }
    else 
    {
        FriendCount fc;
        fc.setFriendValue(val);
        _friendlyCount[friendOne->getId()] = fc ; 
    }
    UpdateFriendlyCountToDB(friendOne->getId());
}
void Player::LoadFriendlyCountFromDB(UInt64 friendId , UInt32 val ,UInt32 time ,UInt32 cost , UInt8 wait ,UInt8 flag)
{
    Player* friendOne = globalPlayers[friendId];
    if(friendOne == NULL)
        return ;
    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(friendId);
    if(it == _friendlyCount.end())
    {
        FriendCount fc;
        _friendlyCount[friendId] = fc;
    }
    if(!flag)
        _friendlyCount[friendId].setTimeCostFlag(time,cost,wait);
    _friendlyCount[friendId].setFriendValue(val);
}
void Player::UpdateFriendlyCountToDB(UInt64 friendId)
{
    Player* friendOne = globalPlayers[friendId];
    if(friendOne == NULL)
        return ;

    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(friendId);
    std::map<UInt64,FriendTaskNum >::iterator it_task = _friendTask.find(friendId);
    std::map<UInt64,FriendYellowBird >::iterator it_yb = _friendYB.find(friendOne->getId());
    if(it == _friendlyCount.end())
        return ;
    if(it_task == _friendTask.end())
    {
        FriendTaskNum ft;
        _friendTask[friendOne->getId()] = ft ;
        it_task = _friendTask.find(friendOne->getId());
    }
    if(it_yb == _friendYB.end())
    {
        FriendYellowBird ft;
        _friendYB[friendOne->getId()] = ft ;
        it_yb = _friendYB.find(friendOne->getId());
    }
    DB1().PushUpdateData("REPLACE INTO `friendlyCount` (`playerId`, `friendId` , `value` , `isBrother` , `time` ,`cost`,`wait`,`ybTime`,`ybCount`,`clearTime`,`task1`,`task2`,`task3`,`task4`,`task5`,`task6`) VALUES (%" I64_FMT "u, %" I64_FMT "u , %u , %d , %u , %u,%u,%u ,%d,  %u,%d,%d,%d,%d,%d,%d)", getId(), friendId,it->second.value,static_cast<UInt8>(_hasBrother(friendOne)),it->second.time , it->second.cost , it->second.flag ,it_yb->second.time,it_yb->second.count, it_task->second.clearTime , it_task->second.taskNum[0] , it_task->second.taskNum[1] , it_task->second.taskNum[2] , it_task->second.taskNum[3] , it_task->second.taskNum[4] , it_task->second.taskNum[5]);
}
void Player::sendFirendlyCountTaskInfo()
{
    UInt32 Count = GetVar(VAR_DRINK_COUNT);
    UInt32 buyCount = GetVar(VAR_CLAN_FRIEND);
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(1);
    st << static_cast<UInt32>(GetVar(VAR_FRIEND_VALUE_DAY));
    st << static_cast<UInt32>(GetVar(VAR_FRIEND_VALUE));
    st << static_cast<UInt32>(GetVar(VAR_DRINK_VALUE));
    st << static_cast<UInt8>( GET_BIT_8(Count,0) );
    st << static_cast<UInt8>(GET_BIT_8(Count,1));
    st << static_cast<UInt8>(GET_BIT_8(buyCount,1));
    st << static_cast<UInt8>(GET_BIT_8(Count,2));
    st << static_cast<UInt8>(GetVar(VAR_FRIEND_ACHIEVEMENT));
    for(UInt8 i = 0; i < 6; ++i)     
    {
        UInt32 count_var_value =GetVar(VAR_FRIEND_TASK1 + i/3);  
        UInt8 count_num = GET_BIT_8(count_var_value , i%3);
        st << count_num ;
    }

    st << Stream::eos; 

    send(st);
}
void Player::InsertBrother(Player * pl)
{
    if(pl == NULL)
        return ;
    if(!_hasFriend(pl))
        return ;
    struct invitTime it;
    _brothers[pl->getId()] = it;
}
bool Player::_hasBrother( Player * pl ) const
{
    std::map<UInt64,struct invitTime>::const_iterator it = _brothers.find(pl->getId());
    if(it == _brothers.end())
        return false;
    return true;
}
UInt32 Player::getFriendlyCount(UInt64 playerId)
{
    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(playerId);
    if(it == _friendlyCount.end())
        return 0;
    return it->second.value;
}
void Player::getFriendlyAchievement(UInt8 opt)
{
    static UInt32 AchievementAward[] = {30,80,150,50,150,300,350,400};
    if(opt > 7 )
        return ;
    UInt32 Friends[5] ={0,0,0,0,0};
    UInt32 getAcAward = GetVar(VAR_FRIEND_ACHIEVEMENT);
    if(getAcAward & (1 << opt ))
        return ;
    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.begin();
    for(;it!=_friendlyCount.end();++it)
    {
        if(it->second.value)
            Friends[0]++;
        if(it->second.value >=100)
            Friends[1]++;
        if(it->second.value >= 500)
            Friends[2]++;
        if(it->second.value >= 1500)
            Friends[3]++;
        if(it->second.value >= 3500)
            Friends[4]++;
    }
    bool flag = false ;
    switch(opt)
    {
        case 0:
            {
                if(Friends[1] >= 3 )
                    flag = true;
                break ;
            }
        case 1:
            {
                if(Friends[1] >= 10 )
                    flag = true;
                break ;
            }
        case 2 :
            {
                if(Friends[2] >= 3 )
                    flag = true;
                break ;
            }
        case 3:
            {
                if(_brothers.size())
                    flag = true ;
                break;
            }
        case 4 :
            {
                if(Friends[3] >= 1 )
                    flag = true;
                break ;
            }
        case 5 :
            {
                if(Friends[3] >= 3 )
                    flag = true;
                break ;
            }
        case 6 :
            {
                if(Friends[4] >= 1 )
                    flag = true;
                break ;
            }
        case 7 :
            {
                if(Friends[4] >= 2 )
                    flag = true;
                break ;
            }
    }
    if(flag)
    {
        AddVar(VAR_FRIEND_VALUE , AchievementAward[opt]);
        AddVar(VAR_FRIEND_VALUE_DAY , AchievementAward[opt]);
        getAcAward |= (1 << opt );
        SetVar(VAR_FRIEND_ACHIEVEMENT , getAcAward);
        UInt8 cnt = 0;
        UInt8 i = 0;
        while( i< 8 )
        {
            if(getAcAward & (1 << i++))
                cnt ++; 
        }
        if(cnt == 1)
            OnShuoShuo(SS_FRIEND_3);
        if(cnt == 8)
            OnShuoShuo(SS_FRIEND_4);
    }
    sendFirendlyCountTaskInfo();
}
bool Player::acceptBrother(Player * friendOne , UInt8 flag)
{
    if(flag > 3)
    {
        sendMsgCode(2,4017);
        return false;
    }
    if(flag == 3 )
        return false;

    if(!_hasFriend(friendOne))
        return false;

    UInt64 friendId = getId();
    UInt32 Count = 0 ;
    if(_friendlyCount[friendOne->getId()].value < 500)
    {
        Count = ( 500 - _friendlyCount[friendOne->getId()].value )/20; 
        if(( 500 - _friendlyCount[friendOne->getId()].value )%20)
            ++Count;
    }

    UInt32 now = TimeUtil::Now();
    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(friendOne->getId());
    //   if(flag)
    //   {
    //       UInt32 now = TimeUtil::Now();
    //       std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(friendOne->getId());
    //       if(it->second.time == 0 || it->second.flag != 1 )
    //           flag = 3;
    //       else
    //       {
    //           if(flag == 2)
    //           {
    //               if(!UseMeiHuaJian(16005,Count))
    //               {
    //                   return false;
    //               }
    //           }
    //           it->second.setTimeCostFlag(now,Count,0);
    //           InsertBrother(friendOne);
    //           UpdateFriendlyCountToDB(friendOne->getId());
    //       }
    //   }
    //   else
    //   {
    //       if(!UseMeiHuaJian(16005,Count,1))
    //       {
    //           return false;
    //       }
    //   }
    switch(flag)
    {
        case 0:
            {
                if(GetVar(VAR_MARRY_STATUS) == 5 && friendOne->getId() == GetMarriageInfo()->lovers)
                {
                    UInt64 playerId = getId();
                    GameMsgHdr hdr(0x405, friendOne->getThreadId(), friendOne, sizeof(UInt64));
                    GLOBAL().PushMsg(hdr, &playerId);
                    return false;
                }
                if(!UseMeiHuaJian(16005,Count,1))
                {
                    return false;
                }
            }
            break;
        case 1:
            {
                if(it->second.time == 0 || it->second.flag != 1 )
                    flag = 3;
                else
                {
                    it->second.setTimeCostFlag(now,Count,0);
                    if(_brothers.size() == 0)
                    {
                        OnShuoShuo(SS_FRIEND_1) ;
                    }
                    InsertBrother(friendOne);
                    UpdateFriendlyCountToDB(friendOne->getId());
                    sendFriendlyTimeAndCost();
                    SYSMSGV(title, 404);
                    SYSMSGV(content, 405, friendOne->getCountry(), friendOne->getName().c_str());
                    GetMailBox()->newMail(NULL, 0x01, title, content);
                }
                break;
            }
        case 2:
            {
                if(!UseMeiHuaJian(16005,Count))
                {
                    return false;
                }
                it->second.setTimeCostFlag(now,Count,0);

                if(_brothers.size() == 0)
                {
                    OnShuoShuo(SS_FRIEND_1) ;
                }
                InsertBrother(friendOne);
                UpdateFriendlyCountToDB(friendOne->getId());
                SYSMSGV(title, 404);
                SYSMSGV(content, 405, friendOne->getCountry(), friendOne->getName().c_str());
                GetMailBox()->newMail(NULL, 0x01, title, content);
                break;
            }
    }
    //if(flag)
    {
        struct st
        {
            UInt64 playerId ;
            UInt8 flag;
        };
        st _st;
        _st.playerId = friendId;
        _st.flag = flag + 1 ;

        if(friendOne->getThreadId() == getThreadId())
        {
            friendOne->acceptBrother(this , flag + 1);
        }
        else
        {
            GameMsgHdr hdr(0x401, friendOne->getThreadId(), friendOne, sizeof(_st));
            GLOBAL().PushMsg(hdr, &_st);
        }
    }
    return true;
}
TeamMemberData* Player::getTeamMemberData()
{
    return m_teamMemberData;
}

void Player::setTeamMemberData(TeamMemberData* tmd)
{
    if(tmd)
    {
        ++tmd->refCount;
    }
    if(m_teamMemberData)
    {
        if((--m_teamMemberData->refCount) == 0)
            delete m_teamMemberData;
    }
    m_teamMemberData = tmd;
}

void Player::SendFriendsA(UInt8 type)
{
	Mutex::ScopedLock lk(_mutex);

    ClearInactiveSort();

    Player* pfriend = NULL;
    std::set<Player*>::iterator offset;
    for(offset = _friends[0].begin(); offset != _friends[0].end(); ++offset)
	{
		pfriend = *offset;
        if(!pfriend)
            continue;

        if(NULL != pfriend->getTeamMemberData())
            continue;

        UInt32 status = pfriend->GetVar(VAR_KJTM_STATUS);
        UInt8 mark = GET_BIT(status, 0);
        if(1 == mark)
            SetInactiveSort(pfriend);
	}
    SendInactiveSort(type);
}

void Player::SendFriendsB(UInt8 type)
{
	Mutex::ScopedLock lk(_mutex);

    ClearActiveSort();

    Player* pfriend = NULL;
    std::set<Player*>::iterator offset;
    for(offset = _friends[0].begin(); offset != _friends[0].end(); ++offset)
	{
		pfriend = *offset;
        if(!pfriend)
            continue;
        if(NULL == pfriend->getTeamMemberData())
            continue;

        UInt32 status = pfriend->GetVar(VAR_KJTM_STATUS);
        UInt8 mark = GET_BIT(status, 0);
        if(0==mark)
            SetActiveSort(pfriend);
	}
    SendActiveSort(type);
}

void Player::SetInactiveSort(Player* pl)
{
    if(NULL == pl)
        return;

    InactiveSort s;
    s.player = pl;
    s.level = pl->GetLev();
    s.power = pl->GetVar(VAR_TOTAL_BATTLE_POINT);
    s.time = TimeUtil::Now();
    _CommonSort.insert(s);
}
        
void Player::SendInactiveSort(UInt8 type, UInt8 curPage)
{
    if(0 == curPage)
        return;

    UInt32 status = GetVar(VAR_KJTM_STATUS);
    UInt8 mark = GET_BIT(status, 2);
    if(0 == mark)
    {
        status = SET_BIT(status, 2);
        SetVar(VAR_KJTM_STATUS, status);
    }

    UInt8 cnt = _CommonSort.size();
    UInt8 totalPage = 0;
    if(0 == cnt)
        totalPage = 1;
    else if(0 == cnt % 10)
        totalPage = cnt / 10;
    else
        totalPage = cnt / 10 + 1;

    if(curPage < totalPage)
        cnt = 10;
    else if(curPage == totalPage)
        cnt = cnt - (curPage - 1) * 10;
    else
        return;

    Stream st(REP::KANGJITIANMO_REP);
    st << static_cast<UInt8>(0x01);
    st << type;
    st << totalPage << curPage << cnt;
    UInt8 c = 0;
    UInt8 c1 = 0;
    for(InactiveSortType::iterator i = _CommonSort.begin(), e = _CommonSort.end(); i != e; ++i)
    {
        if(NULL == i->player)
            continue;

        if((c>=(curPage-1)*10) && (c<=(curPage*10)))
        {
            st << i->player->getId();
            st << i->player->getCountry();
            st << i->player->getName();
            st << i->level;
            st << i->power;
            st << i->player->getOpenId();
            st <<  static_cast<UInt8>(i->player->GetVar(VAR_FRIEND_SECURITY));
            c1++;
        }
        c++;
        if(c1 >= 10)
            break;
    }
    st << Stream::eos;
    send(st);

    SetCurPageA(curPage);
}

void Player::ClearInactiveSort()
{
    if(_CommonSort.size() > 0)
        _CommonSort.clear();
}

void Player::SetActiveSort(Player* pl)
{
    if(NULL == pl)
        return;

    ActiveSort s;
    s.player = pl;
    s.power = pl->GetVar(VAR_TOTAL_BATTLE_POINT);
    if(pl->isOnline())
        s.isOnline = 1;
    else
        s.isOnline = 0;
    s.time = TimeUtil::Now();
    _ActiveSort.insert(s);
}

void Player::SendActiveSort(UInt8 type, UInt8 curPage)
{
    if(0 == curPage)
        return;

    UInt32 status = GetVar(VAR_KJTM_STATUS);
    UInt8 mark = GET_BIT(status, 2);
    if(0 == mark)
    {
        status = SET_BIT(status, 2);
        SetVar(VAR_KJTM_STATUS, status);
    }

    UInt8 cnt = _ActiveSort.size();
    UInt8 totalPage = 0;
    if(0 == cnt)
        totalPage = 1;
    else if(0 == cnt % 7)
        totalPage = cnt / 7;
    else
        totalPage = cnt / 7 + 1;

    if(curPage < totalPage)
        cnt = 7;
    else if(curPage == totalPage)
        cnt = cnt - (curPage - 1) * 7;
    else
        return;

    Stream st(REP::KANGJITIANMO_REP);
    st << static_cast<UInt8>(0x02);
    st << type;
    st << totalPage << curPage << cnt;
    UInt8 c = 0;
    UInt8 c1 = 0;
    for(ActiveSortType::iterator i = _ActiveSort.begin(), e = _ActiveSort.end(); i != e; ++i)
    {
        if(NULL == i->player)
            continue;

        if((c>=(curPage-1)*7) && (c<=(curPage*7)))
        {
            st << i->player->getId();
            st << i->player->getCountry();
            st << i->player->getName();
            st << i->power;
            UInt8 isOnline = 0;
            if(i->player->isOnline())
                isOnline = 1;
            st << isOnline;
            c1++;
        }
        c++;
        if(c1 >= 7)
            break;
    }
    st << Stream::eos;
    send(st);

    SetCurPageA(curPage);
}

void Player::ClearActiveSort()
{
    if(_ActiveSort.size() > 0)
        _ActiveSort.clear();
}

void Player::AddGobackFromDB(UInt64 inviterId)
{
    _Goback.push_back(inviterId);
}

void Player::AddGoback(UInt64 inviterId)
{
    _Goback.push_back(inviterId);

    DB5().PushUpdateData("INSERT INTO `invitegoback` (`inviteeId`, `playerId`) VALUES (%" I64_FMT "u, %" I64_FMT "u)", getId(), inviterId);

    udpLog("kangjitianmo", "F_140406_1", "", "", "", "", "act");
}

void Player::DelGoback(UInt64 inviterId)
{
    UInt32 cnt = _Goback.size();
    for(UInt32 i=0; i<cnt; i++)
    {
        if(inviterId == _Goback[i])
        {
            _Goback.erase(_Goback.begin()+i);
            DB5().PushUpdateData("DELETE FROM `invitegoback` WHERE `inviteeId` = %" I64_FMT "u AND `playerId` = %" I64_FMT "u", getId(), inviterId);
        }
    }
}

bool Player::CheckGoback(UInt64 inviterId)
{
    Player* inviter = globalPlayers[inviterId];
    if(NULL == inviter)
        return false;

    UInt32 cnt = _Goback.size();
    for(UInt32 i=0; i<cnt; i++)
    {
        if(inviterId == _Goback[i])
        {
            inviter->sendMsgCode(1, 8010);
            return false;
        }
    }
    return true;
}

void Player::SendGoback(UInt8 type)
{
    ClearActiveSort();

    UInt32 cnt = _Goback.size();
    for(UInt32 i=0; i<cnt; i++)
    {
        Player* member = globalPlayers[_Goback[i]];
        if(NULL == member)
            continue;

        SetActiveSort(member);
    }
    SendActiveSort(type);
}

void Player::AddApplyListFromDB(UInt64 applicantId)
{
    _ApplyList.push_back(applicantId);
}

void Player::AddApplyList(UInt64 applicantId)
{
    _ApplyList.push_back(applicantId);

    DB5().PushUpdateData("INSERT INTO `applylist` (`playerId`, `applicantId`) VALUES (%" I64_FMT "u, %" I64_FMT "u)", getId(), applicantId);

    Player* applicant = globalPlayers[applicantId];
    if(NULL == applicant)
        return;

    applicant->sendMsgCode(1, 4050);
}

bool Player::CheckApplyList(UInt64 applicantId)
{
    Player* applicant = globalPlayers[applicantId];
    if (NULL == applicant)
        return false;

    UInt32 cnt = _ApplyList.size();
    if(cnt >= 2000)
    {
		applicant->sendMsgCode(1, 8011);
        return false; //最多接受2000个回流玩家的申请
    }

    for(UInt32 i=0; i<cnt; i++)
    {
        if(applicantId == _ApplyList[i])
        {
            applicant->sendMsgCode(1, 8012);
            return false;
        }
    }

    TeamMemberData* tmd = getTeamMemberData();
    if(NULL == tmd)
        return false;
    if(tmd->memCnt >= 3)
    {
        applicant->sendMsgCode(1, 8014);
        return false;
    }

    return true;
}

void Player::SendApplyList(UInt8 type, UInt8 curPage)
{
    if(0 == curPage)
        return;

    UInt8 totalPage = 0;
    UInt32 cnt = _ApplyList.size();
    if(0 == cnt)
        totalPage = 1;
    else if(0 == cnt % 10)
        totalPage = cnt / 10;
    else
        totalPage = cnt / 10 + 1;

    if(curPage < totalPage)
        cnt = 10;
    else if(curPage == totalPage)
        cnt = cnt - (curPage - 1) * 10;
    else
        return;

    Stream st(REP::KANGJITIANMO_REP);
    st << static_cast<UInt8>(0x05);
    st << type;
    st << totalPage << curPage << static_cast<UInt8>(cnt);
    UInt32 c = 0;
    UInt32 c1 = 0;
    for(UInt32 i=0; i<_ApplyList.size(); i++)
    {
        Player* member = globalPlayers[_ApplyList[i]];
        if(NULL == member)
            continue;

        if((c>=(static_cast<UInt32>(curPage-1)*10)) && (c<=(static_cast<UInt8>(curPage*10))))
        {
            st << member->getId();
            st << member->getCountry();
            st << member->getName();
            st << member->GetLev();
            c1++;
        }
        c++;
        if(c1 >= 10)
            break;
    }
    st << Stream::eos;
    send(st);

    SetCurPageA(curPage);
}

void Player::AcceptApply(UInt64 applicantId)
{
    KJTMManager->JoinTeamMember(getId(), applicantId);
    DelApplyList(applicantId);
}

void Player::RefuseApply(UInt64 applicantId)
{
    DelApplyList(applicantId);
}

void Player::DelApplyList(UInt64 applicantId)
{
    UInt32 cnt = _ApplyList.size();
    for(UInt32 i=0; i<cnt; i++)
    {
        if(applicantId == _ApplyList[i])
        {
            _ApplyList.erase(_ApplyList.begin() + i);
            DB5().PushUpdateData("DELETE FROM `applylist` WHERE `playerId` = %" I64_FMT "u AND `applicantId` = %" I64_FMT "u", getId(), applicantId);
        }
    }

    Stream st(REP::KANGJITIANMO_REP);
    st << static_cast<UInt8>(0x07);
    st << Stream::eos;
    send(st);
}

void Player::ApplyToName(Player* pl)
{
    if(NULL == pl)
        return;

    if(!isOnline())
    {
        pl->sendMsgCode(1, 2218);
        return;
    }

    TeamMemberData* tmd = getTeamMemberData();
    if(NULL == tmd)
    {
        pl->sendMsgCode(1, 4052);
        return;
    }

    if(tmd->memCnt >= 3)
    {
        pl->sendMsgCode(1, 8014);
        return;
    }

    Stream st(REP::KANGJITIANMO_REP);
    st << static_cast<UInt8>(0x1A);
    st << pl->getId();
    st << pl->getName();
    st << Stream::eos;
    send(st);
}

void Player::InviteToName(Player* pl)
{
    if(NULL == pl)
        return;


    if(!isOnline())
    {
        pl->sendMsgCode(1, 2218);
        return;
    }

    TeamMemberData* tmdB = getTeamMemberData();
    if(NULL != tmdB)
        return;

    TeamMemberData* tmd = pl->getTeamMemberData();
    if(NULL == tmd)
        return;
    if(tmd->memCnt >= 3)
    {
        pl->sendMsgCode(1, 8014);
        return;
    }

    Stream st(REP::KANGJITIANMO_REP);
    st << static_cast<UInt8>(0x1B);
    st << pl->getId();
    st << pl->getName();
    st << Stream::eos;
    send(st);
}

void Player::ClearKJTMData()
{
    ClearInactiveSort();
    ClearActiveSort();
    if(_Goback.size() > 0)
        _Goback.clear();
    if(_ApplyList.size() > 0)
        _ApplyList.clear();

    setTeamMemberData(NULL);
    SetVar(VAR_KJTM_STATUS, 0); 
    SetVar(VAR_KJTM_KILL_NPC_STATUS, 0); 
    SetVar(VAR_KJTM_LOGIN_STATUS, 0); 
    SetVar(VAR_KJTM_LOGIN_NUM, 0); 
    SetVar(VAR_KJTM_AWARD_MARK, 0); 
}

void Player::KJTMUdpLog()
{
    UInt32 status = GetVar(VAR_KJTM_STATUS);
    UInt8 mark = GET_BIT(status, 0);
    if(1 == mark)
    {
        UInt32 statusA = GetVar(VAR_KJTM_LOGIN_STATUS);
        UInt8 mark = GET_BIT(statusA, 0);
        if(0 == mark)
        {
            UInt32 durtime = TimeUtil::SharpDayT(0, TimeUtil::Now()) - TimeUtil::SharpDayT(0, getLastOnline());
            if(durtime == 86400)
            {
                udpLog("kangjitianmo", "F_140406_8", "", "", "", "", "act");
                statusA = SET_BIT(statusA, 0);
                SetVar(VAR_KJTM_LOGIN_STATUS, statusA);
            }
        }
    }
}

void Player::makeFighterSGList(Stream& st)
{
    size_t c = _fighters.size();
    st.init(REP::SKILLSTRENGTHEN);
    st << static_cast<UInt8>(10);
    st << GetVar(VAR_SKILL_GRADE_MONEY);
    st << static_cast<UInt8>(c);
    for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
    {
        if(it->second)
        {
            it->second->makeFighterSGInfo(st);
        }
    }
    st << Stream::eos;
    send(st);
}

void Player::makeFighterSGListWithNoSkill(Stream& st)
{
    size_t c = _fighters.size();
    st.init(REP::SKILLSTRENGTHEN);
    st << static_cast<UInt8>(14);
    st << static_cast<UInt8>(c);
    for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
    {
        if (it->second)
        {
            it->second->makeFighterSGInfoWithNoSkill(st);
        }
    }
    st << Stream::eos;
}

void Player::beRefuceBrother(Player * friendOne ,UInt8 flag )  //flag=0表示被拒绝，1表示取消
{
    UInt32 itemId = 16005 ;
    if(!_hasFriend(friendOne))
        return ;
    if(_hasBrother(friendOne))
        return ;

    if(_friendlyCount[friendOne->getId()].time == 0)
        return ;
    UInt32 now = TimeUtil::Now();
    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(friendOne->getId());
    UInt32 Count = it->second.cost; 
    it->second.setTimeCostFlag(flag?it->second.time:now, 0 , 0);
    if(Count!=0)
        GetPackage()->AddItem(itemId, Count, true, false, FromJieBai);
    sendFriendlyTimeAndCost();
    SYSMSGV(title, 402);
    SYSMSGV(content, 403, friendOne->getCountry(), friendOne->getName().c_str());
    GetMailBox()->newMail(NULL, 0x01, title, content);
    UpdateFriendlyCountToDB(friendOne->getId());
}

bool Player::IsAccept(Player * friendOne)
{
    if(getDrinkInfo().drinker != friendOne)
        return false;
    return true;
}
   UInt32 Player::getCurClanTitle()
   {
       if(_clan == NULL)
           return 0;
       UInt32 clanTitleId = GetVar(VAR_CUR_CLAN_TITLE);
       if(clanTitleId == 0)
           return 0;
       checkClanTitle();
       std::map<UInt8, UInt32> & _clanTitle = _clan->GetClanTitle();
       std::map<UInt8, UInt32>::iterator it = _clanTitle.find(clanTitleId);
       if(it != _clanTitle.end())
           return clanTitleId;
       SetVar(VAR_CUR_CLAN_TITLE, 0);
       return 0;
   }

void Player::drinking(Player * friendOne, UInt8 drinkCount ,UInt8 flag)
{
    if(friendOne != getDrinkInfo().drinker)
        return;
    if( (_drinkingSum /100) && flag ==1)
        return ;


    if(!drinkCount)
    {
        if((_friendSum /100) && flag == 1) 
        {
            //Player * pl = getDrinkInfo().drinker;
            calcDrinkPoint();
            UInt8 flag = 0;
            GameMsgHdr hdr(0x407, friendOne->getThreadId(), friendOne, sizeof(UInt8));
            GLOBAL().PushMsg( hdr, &flag );
            return ;
        }
        UInt32 time = TimeUtil::Now() - getDrinkInfo().time;
        UInt8 count = rand() % 5 + 5;
        if(flag == 1)
        {
            count = 100;
            _drinkingSum += count;
        }
        else if ( (time < 25 && _drinkingSum < 50 ))
        { 
            _drinkingSum += count;
        }   
        else
            return ;
        if(friendOne->getThreadId() == getThreadId())
        {
            friendOne->drinking(this, count);
        }
        else
        {
            struct st
            {
                UInt64 friendId;
                UInt8 drinkCount;
            }_st;
            _st.friendId = getId();
            _st.drinkCount = count;
            GameMsgHdr hdr(0x402, friendOne->getThreadId(), friendOne, sizeof(_st));
            GLOBAL().PushMsg(hdr, &_st);
        }
    }
    else
    {
        _friendSum += drinkCount;
    }
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x04);
    st << static_cast<UInt8>(_drinkingSum %100);
    st << static_cast<UInt8>(_friendSum %100);
    st << Stream::eos;
    send(st); 
}

UInt32 Player::DrinkingPoint()
{
    if(getDrinkInfo().type > 3)
        return 0;
    UInt32 wine[]={20,20,40,160};
    float drinkingAdd = 0;
    float friendAdd = 0;

    if(_drinkingSum <= 40)
    {
        drinkingAdd = 0.9;
    }
    else if(_drinkingSum <= 45)
    {
        drinkingAdd = 0.95;
    }
    else if(_drinkingSum <= 50)
    {
        drinkingAdd = 1;
    }
    else 
    {
       drinkingAdd = 0.95;
    }

    if( _friendSum <= 40)
    {
        friendAdd = 0;
    }
    else if(_friendSum <= 45)
    {
        friendAdd = 0.05;
    }
    else if(_friendSum <= 50)
    {
        friendAdd = 0.10;
    }
    else
    {
        friendAdd = 0.05;
    }

    UInt32 drinkingPoint = (drinkingAdd + friendAdd)* wine[getDrinkInfo().type];
    return drinkingPoint;
}

bool Player::CheckCanBeBrother(Player * friendOne , UInt8 type)
{
    if(type > 1 ) 
        return false;
    if(!_hasFriend(friendOne))
        return false;
    if(_hasBrother(friendOne))
        return false;
    if(GetVar(VAR_MARRY_STATUS) == 5 && friendOne->getId() == GetMarriageInfo()->lovers)
        return false;

    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(friendOne->getId());
    if(it == _friendlyCount.end())
    {
        FriendCount fc;
        _friendlyCount[friendOne->getId()] = fc ; 
        it = _friendlyCount.find(friendOne->getId());
        if(type == 0)
            return false;
    }
    if(type == 0 && it->second.value < 500)
        return false;

    UInt32 now = TimeUtil::Now();

    if(it->second.time !=0 && ( TimeUtil::SharpDay(1,it->second.time)  >=  TimeUtil::SharpDay(1,now) ))
    {
        sendMsgCode(2,4018);
        return false;
    }

    if(type == 0 && it->second.value >= 500)
    {
        it->second.setTimeCostFlag(now,0,1);
        UpdateFriendlyCountToDB(friendOne->getId());
        return true ;
    }
    if(type == 1 && it->second.value < 500)
    {
        UInt32 Count = ( 500 - _friendlyCount[friendOne->getId()].value )/20 ; 
        if(( 500 - _friendlyCount[friendOne->getId()].value )%20)
             ++ Count;
        if(!UseMeiHuaJian(16005,Count))
            return false;
        it->second.setTimeCostFlag(now,Count,1);
        UpdateFriendlyCountToDB(friendOne->getId());
    }
    return true;
}
UInt8 Player::CheckCanDrink( UInt8 type)
{
   // Player* obj_player = GObject::globalPlayers[GetMarriageInfo()->lovers];
   // if(obj_player != friendOne && _hasBrother(friendOne))
   //     return ;
    
    if(type == 0)
        return 1;
    //getDrinkInfo().reset();
    if(getDrinkInfo().drinker != NULL || getDrinkInfo().time != 0)
        return 1;

    UInt32 drinkCount = GetVar(VAR_DRINK_COUNT);
    UInt8 count = GET_BIT_8(drinkCount , 0 );
    UInt32 drinkAddCount = GetVar(VAR_CLAN_FRIEND); 
    UInt8 addCount = GET_BIT_8( drinkAddCount , 1 );
    if(count >= 2 && addCount < 1)
        return 2;
    if(getDrinkInfo().type ==0)
        setDrinkType(type);
    return 0;
}
void Player::InviteDrinking(Player * friendOne)   //邀请饮酒
{
    if(getDrinkInfo().type == 0)
        return ;
    bool flag = true;

    if(_playerData.location != 9476)
        //moveTo(9476,true);
        return ;

    UInt32 now = TimeUtil::Now();
    std::map<UInt64,struct invitTime>::const_iterator it = _brothers.find(friendOne->getId());
    if(it == _brothers.end())
        flag = false;
    else if(now < it->second.drinkT )
    {
        flag = false ;
    }

    if( GetVar(VAR_MARRY_STATUS) == 5 && friendOne->getId() == GetMarriageInfo()->lovers ) 
        flag = true ;
    if(!flag)
        return ;

    getDrinkInfo().plset.insert(friendOne);
    if(friendOne->getThreadId() == getThreadId())
    {
        friendOne->beInviteDrinking(this , getDrinkInfo().type);
    }
    else 
    {
        struct st
        {
            UInt64 playerId ; 
            UInt8 type ;
        };
        st _st ;
        _st.playerId = getId();
        _st.type = getDrinkInfo().type;
        GameMsgHdr hdr(0x403, friendOne->getThreadId(), friendOne, sizeof(_st));
        GLOBAL().PushMsg(hdr, &_st);
    }
}
void Player::beInviteDrinking(Player * pl , UInt8 type)  //被邀请对酒
{
    if(pl==NULL||type == 0)
        return ;
    if(getDrinkInfo().drinker!=NULL)
    {
        struct st 
        {
            UInt64 playerId;
            UInt8 res ;
            UInt8 type ;
            UInt8 count ;
        };
        st _st ;
        _st.playerId = getId();
        _st.res = 2;
        _st.type = 0;
        _st.count = 0;
        GameMsgHdr hdr(0x404, pl->getThreadId(), pl, sizeof(_st));
        GLOBAL().PushMsg( hdr, &_st );
        return ;
    }
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x05);
    st << pl->getName();
    st << static_cast<UInt8>(type);
    st << Stream::eos;
    send(st);
}
void Player::beReplyForDrinking(Player * pl , UInt8 res , UInt8 type , UInt8 count)  //对酒邀请回复 res 0拒绝 1-接受   type -- 对酒类型
{
    if(count > 1)
        return ;
    UInt8 shenfen = 0;  //0表示被邀请
    if(count == 0)
    {
        shenfen = 1;    //1表示主动邀请
        if(getDrinkInfo().type ==0)
        {
            pl->getDrinkInfo().reset();
            pl->sendMsgCode(2,4038);
            return ;
        }
    }
    UInt32 now = TimeUtil::Now();
    UInt8 result = 0;
    if(count)
        result = res ;
    bool flag = false ;
    std::map<UInt64,struct invitTime>::iterator it = _brothers.find(pl->getId());
    if(it != _brothers.end()) 
        flag = true ;
    if( GetVar(VAR_MARRY_STATUS) == 5 && pl->getId() == GetMarriageInfo()->lovers ) 
        flag = true ;
    if(!flag)
        return ;

    if(res != 1 )
    {
        if(shenfen)    //主动方被拒绝，添加冷却时间
        {
            if(res ==0)
                it->second.drinkT = now + 300; 
            else if(res == 2)
                sendMsgCode(2,4037);
        }
        else           //被动方被拒绝，清楚标志位(_drinkInfo.drinker)
        {
            getDrinkInfo().reset(); 
            sendMsgCode(2,4019);
        }
        return ;
    }
    if(_playerData.location != 9476)
        //moveTo(9476,true);
        return ;
    if(shenfen &&( getDrinkInfo().drinker == NULL || getDrinkInfo().drinker == pl ))  //判断是否已经有人对酒
    {
        std::set<Player *>::iterator it = getDrinkInfo().plset.find(pl);
        if(it != getDrinkInfo().plset.end())
        {
            setDrinking(pl,0);   //XXX
            result = 1 ;
        }
    }
    if(!shenfen && count )
        setDrinking(pl,0);

    if(type == 0 && shenfen )  //type用来告诉对方对酒级别  由主动发起方赋值
    {
        type = getDrinkInfo().type ; 
    }
    std::string  playerName1;
    std::string  playerName2;
    if(shenfen)
    {
        playerName1 = getName(); 
        playerName2 = pl->getName();
    }
    else
    {
        playerName2 = getName(); 
        playerName1 = pl->getName();

    }
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x06);
    st << static_cast<UInt8>(0x01);
    st << playerName1;
    st << playerName2;
    st << static_cast<UInt8>(type);
    st <<Stream::eos;
    if(result)
        send(st);
    if(shenfen || count == 0) //主动方要告知被动房斗酒开始
    {
        struct st 
        {
            UInt64 playerId1;
            UInt8 result ;
            UInt8 type ;
            UInt8 count ;
        };
        st _st;
        _st.playerId1 = getId();
        _st.result = result;
        _st.type = type ;
        _st.count = count + 1 ;
        GameMsgHdr hdr(0x404, pl->getThreadId(), pl , sizeof(_st));
        GLOBAL().PushMsg( hdr, &_st );
    }

}
bool Player::UseMeiHuaJian(UInt16 iid , UInt32 num , UInt8 use)  //梅花笺
{
    if(num == 0)
        return true ;
    UInt16 count = GetPackage()->GetItemAnyNum(iid) ;
    ItemBase * item = GetPackage()->FindItem(iid, true);
    if (!item)
        item =GetPackage()->FindItem(iid, false);
    if(item ==NULL)
        return false;
    if(num > count)
        return false;
    if(!use)
    {
        GetPackage()->DelItemAny(iid, num );
        GetPackage()->AddItemHistoriesLog(iid , num);
    }
    return true;
}
void Player::sendFriendlyTimeAndCost()
{
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x07);
    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.begin();
    size_t offset = st.size();
    UInt8 count = 0;
    st << count ;
    for(;it != _friendlyCount.end(); ++ it)
    {
        if(!it->second.flag)  // 0-9预留为特殊状态
            continue;
        Player* pl = globalPlayers[it->first];
        if( pl == 0 )
            continue;
        if(GetVar(VAR_MARRY_STATUS) == 5 && pl->getId() == GetMarriageInfo()->lovers)
            continue;
        if(_hasBrother(pl))
            continue;
        st << pl->getName() << static_cast<UInt32>(it->second.time) <<static_cast<UInt32>(it->second.cost);
        ++count;
    }
    st.data<UInt8>(offset)= count;
    st << Stream::eos;
    send(st);
}
void Player::CancelBrother(Player * FriendOne)
{
    if(!FriendOne)
        return ;
    std::map<UInt64,FriendCount >::iterator it = _friendlyCount.find(FriendOne->getId());
    if(it == _friendlyCount.end())
        return ;
    if(!it->second.flag)
        return ;
    else
        it->second.flag = 0;
    beRefuceBrother(FriendOne,1);
    sendFriendlyTimeAndCost();
}
bool Player::AfterDrinking()
{
    if( getDrinkInfo().drinker == NULL )
        return false;     
    Player * friendOne = getDrinkInfo().drinker ;
    if(friendOne == NULL)
        return false;
    UInt8 shenfen = 0;  //0表示被邀请
    bool res = true;
    if(getDrinkInfo().type != 0)
        shenfen = 1;    //1表示主动邀请
    if(shenfen && !UseMeiHuaJian(16005 + getDrinkInfo().type , 1))
        return false;
    {
    char action[16] = "";
    snprintf (action, 16, "F_140423_%d",9+getDrinkInfo().type );
    udpLog("jiebaixitong", action, "", "", "", "", "act");
    }

    UInt32 var_val = GetVar(VAR_DRINK_COUNT);
    UInt8 val = GET_BIT_8( var_val , !shenfen);
    if(shenfen)
    {
        if(val < 2)
        {
            UInt32 value = SET_BIT_8(var_val , !shenfen , (val+1));
            SetVar(VAR_DRINK_COUNT,value);
            if(val == 0 )
                udpLog("jiebaixitong", "F_140423_4", "", "", "", "", "act");
            else
                udpLog("jiebaixitong", "F_140423_5", "", "", "", "", "act");

        }
        else
        {
            UInt32 var_buy = GetVar(VAR_CLAN_FRIEND); 
            UInt8 buy_count =GET_BIT_8( var_buy , 1 );
            if(buy_count != 0)
            {
                UInt32 buyCount = SET_BIT_8(var_buy,1,( buy_count -1 ));
                SetVar(VAR_CLAN_FRIEND,buyCount);
            }
            else
                res = false;
        }
        //UInt64 id = getId();
        //GameMsgHdr hdr(0x406, friendOne->getThreadId(), friendOne , sizeof(id));
        //GLOBAL().PushMsg( hdr, &id );
    }
    else
    {
        if(val >= 2)
            res = false;
        UInt32 value = SET_BIT_8(var_val , !shenfen , (val+1));
        SetVar(VAR_DRINK_COUNT,value);
    }
    return res;
}
void Player::sendDrinkInfo()
{
    Stream st(REP::BROTHER) ;
    st <<static_cast<UInt8>(0x0E);
    st <<static_cast<UInt8>(getDrinkInfo().type);
    if(getDrinkInfo().drinker)
        st <<getDrinkInfo().drinker->getName();
    else
        st << "" ;
    st << getDrinkInfo().time;
    st <<Stream::eos;
    send(st);
}
void Player::BuyDrinkCount()
{
    UInt32 var_buy = GetVar(VAR_CLAN_FRIEND);  //剩余次数
    UInt8 nowCount =GET_BIT_8( var_buy , 1 ); //剩余次数
    UInt32 _buy = GetVar(VAR_DRINK_COUNT);   //购买次数
    UInt8 buy_count =GET_BIT_8( _buy , 2 );  //购买次数

    if( (buy_count + 1) > 255)
        return ;

    UInt32 gold = 15 * (buy_count + 1);
    if (getGold() < gold)
    {
        sendMsgCode(0, 1104);
        return ;
    }

    ConsumeInfo ci(ExtendPackage,0,0);
    useGold(gold,&ci);

    UInt32 now_Count = SET_BIT_8(var_buy,1,(nowCount + 1 ));  //剩余次数
    UInt32 buy_Count = SET_BIT_8(_buy,2,(buy_count+1));

    SetVar(VAR_CLAN_FRIEND,now_Count);
    SetVar(VAR_DRINK_COUNT,buy_Count);
    sendFirendlyCountTaskInfo();
    char action[16] = "";
    snprintf (action, 16, "F_140423_%d",5+((buy_count<3)?(buy_count+1):4) );
    udpLog("jiebaixitong", action, "", "", "", "", "act");
}

bool Player::UseYellowBird(Player * friendOne ,UInt32 num)
{
    UInt32 now = TimeUtil::Now();
    UInt8 countNum = GetYBCount(friendOne);
    if(countNum >= 10 )
        return false ;
    if(!UseMeiHuaJian(16004,num))
        return false;
    for(UInt8 i = 0; i < num; ++i)
    {
        CompleteFriendlyTask( friendOne, 5);
        udpLog("jiebaixitong", "F_140423_3", "", "", "", "", "act");
    }
    countNum += num ; 

    _friendYB[friendOne->getId()].count = countNum ;
    _friendYB[friendOne->getId()].time = now;
    DB1().PushUpdateData("UPDATE `friendlyCount` SET `ybTime` = %u,`ybCount` = %d WHERE playerId =  %" I64_FMT "u and friendId =  %" I64_FMT "u ", now, countNum , getId() , friendOne->getId());

    SYSMSG_SENDV(5133, friendOne , getCountry(), getName().c_str() , num);

    return true;
}
void Player::BuyFriendlyGoods(UInt8 type , UInt8 count)
{
    if(count > 100)
        return ;
    if(!GameAction()->RunFriendlyGoods(this, type,count))
    {
        return;
    }
}
UInt8 Player::GetYBCount(Player *friendOne)
{
    std::map<UInt64,FriendYellowBird >::iterator it = _friendYB.find(friendOne->getId());
    if(it == _friendYB.end())
        return 0;
    UInt32 now = TimeUtil::Now();
    if(TimeUtil::SharpDay(0,it->second.time) != TimeUtil::SharpDay(0,now))
    {
        it->second.count = 0; 
        it->second.time = now;
    }
    return it->second.count;
}
void Player::SetYBCount(Player * friendOne , UInt32 time ,UInt8 count)
{
    FriendYellowBird yb(time,count);
    _friendYB[friendOne->getId()] = yb;
}
void Player::SetFriendTaskNum(Player * pl , UInt32 time,UInt8 task1 , UInt8 task2 , UInt8 task3 , UInt8 task4 , UInt8 task5 , UInt8 task6)
{
    if(pl == NULL)
        return ;
    FriendTaskNum  ft(time,task1,task2,task3,task4,task5,task6);
    _friendTask[pl->getId()] = ft;
}
void Player::calcDrinkPoint(UInt8 flag)
{
    _drinkingSum %= 100;
    _friendSum %= 100;

    if(getDrinkInfo().time == 0)
    {
        getDrinkInfo().reset();
        return ;
    }

    UInt32 drinkingPoint = 0;
    if(AfterDrinking())
    {
        drinkingPoint = DrinkingPoint();
        AddVar(VAR_DRINK_VALUE, drinkingPoint);
        setFightersDirty(true);
    }
    if(flag)
    {
        sendMsgCode(2,4036);
    }
    _friendSum =0;
    _drinkingSum = 0;
    getDrinkInfo().reset();
    //std::cout << "player :" << static_cast<UInt32>(getId() )<<"对酒结束" <<std::endl;
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x0C);
    st << drinkingPoint;
    st << Stream::eos;
    send(st);
    sendFirendlyCountTaskInfo();
}
void Player::BeginDrink()
{
   if( getDrinkInfo().drinker ==NULL )
       return ;
   UInt32 now = TimeUtil::Now();
   getDrinkInfo().time = now ;
   Stream st(REP::BROTHER);
   st <<static_cast<UInt8>(0x0D);
   st << Stream::eos;
   send(st);
   if(getDrinkInfo().type)
   {
       Player *friendOne = getDrinkInfo().drinker;
       GameMsgHdr hdr(0x408, friendOne->getThreadId(), friendOne, 0);
       GLOBAL().PushMsg( hdr, NULL );
   }
}
void Player::AddClanFriend()
{
    if(!getClan())
        return ;
    UInt32 val = GetVar(VAR_CLAN_FRIEND);
    if(GET_BIT_8(val,0))
        return ;
    std::set<Player *>::iterator it = _friends[0].begin();
    for(;it != _friends[0].end();++it)
    {
        if(!(*it)->getClan())    
            continue;
        if((*it)->getClan()->getId() == getClan()->getId())
        {
            AddFriendlyCount( (*it) , 50);
        }
    }
    SetVar(VAR_CLAN_FRIEND, SET_BIT_8(val, 0, 1));
}
/*
AttrExtra Player::getDrinkInfo()
{
   AttrExtra ae; 
}
*/

void Player::sendFighterSGListWithNoSkill()
{
    Stream st;
    makeFighterSGListWithNoSkill(st);
    send(st);
}

void Player::makeClanTitleInfo(Stream & st)
{
    if(_clan == NULL)
    {
        st << static_cast<UInt8>(0);
        st << static_cast<UInt8>(0);
        return;
    }
    std::map<UInt8, UInt32> & _clanTitle = _clan->GetClanTitle();
    UInt8 count = _clanTitle.size();
    UInt8 curClanTitle = GetVar(VAR_CUR_CLAN_TITLE);
    UInt32 now = TimeUtil::Now();
    st << curClanTitle;
    size_t offset = st.size();
    st << count;
    for(std::map<UInt8, UInt32>::iterator it = _clanTitle.begin(); it != _clanTitle.end(); ++it)
    {
        //first==0表示“无称号”，seonc==0表示永久称号
        if(it->first == 0 || it->second > now || it->second == 0)
        {
            st << it->first <<static_cast<UInt32>(it->second);
        }
        else
        {
            --count;
        }
    }
    st.data<UInt8>(offset) = count;
}

void Player::changeClanTitle(UInt8 id)
{
    if(_clan == NULL)
        return;
    if(id != 0)
    {
        std::map<UInt8, UInt32> & _clanTitle = _clan->GetClanTitle();
        std::map<UInt8, UInt32>::iterator it = _clanTitle.find(id);
        if(it != _clanTitle.end())
        SetVar(VAR_CUR_CLAN_TITLE, id);
    }
    else
        clearClanTitle();
    rebuildBattleName();
    notifyClanTitle();
}

void Player::notifyClanTitle()
{
    Stream st(REP::USER_INFO_CHANGE);
    st << static_cast<UInt8>(0x23);
    makeClanTitleInfo(st);
    st << Stream::eos;
    send(st);
}


void Player::checkClanTitle()
{
    if(_clan == NULL)
        return;
    bool writeDB = false;
    std::map<UInt8, UInt32> & _clanTitle = _clan->GetClanTitle();
    for(std::map<UInt8, UInt32>::iterator it = _clanTitle.begin(); it != _clanTitle.end();)
    {
        if(it->second != 0 && it->second < TimeUtil::Now() )
        {
            std::map<UInt8, UInt32>::iterator tmp = it;
            ++ tmp;
            if(GetVar(VAR_CUR_CLAN_TITLE) == it->first)
                SetVar(VAR_CUR_CLAN_TITLE, 0);
            _clanTitle.erase(it->first);
            it = tmp;
            writeDB = true;
            continue;
        }
        ++it;
    }
    if(writeDB)
        _clan->writeClanTitleAll();
}

void Player::sendTYSSBuf()
{
    UInt32 endTime = TimeUtil::Now() + 86400 * 14;
    setBuffData(PLAYER_BUFF_TYSS, endTime);

    return;
}

void Player::clearClanTitle()
{
    UInt8 titleId = GetVar(VAR_CUR_CLAN_TITLE);
    if(titleId != 0)
        SetVar(VAR_CUR_CLAN_TITLE, 0);
    notifyClanTitle();
}

void Player::specialUdpLog(UInt8 type)
{
    switch(type)
    {
        case 1:
            udpLog("huodong", "F_140417_1", "", "", "", "", "act");
            break;
    }
}

bool Player::canInviteCutting( Player *pl)
{
    UInt32 TreeCount = GetVar(VAR_CUTTREE_COUNT);
    UInt8 count = GET_BIT_8(TreeCount , 0 );
    UInt32 TreeCount2 = GetVar(VAR_CUTTREE_BUY); 

    std::set<Player *>::iterator it = getDrinkInfo().plset.find(pl);
    if(it != getDrinkInfo().plset.end())
        return false;
    if( count >= 2 && TreeCount2 < 1)
        return false;
    if(getCuttingInfo().cutter != NULL || getCuttingInfo().time != 0 )
        return false;
    return true;

}
UInt8 Player::InviteCutting(Player * pl)   //需要抛消息
{
    if(_playerData.location != 9476)
        //moveTo(9476,true);
        return 0;
    UInt32 now = TimeUtil::Now();
    UInt32 friendlyCount = getFriendlyCount(pl->getId());
    if(friendlyCount < 500 )
        return 0;
    std::map<UInt64,struct invitTime1500>::const_iterator it = _friendCount1500.find(pl->getId());
    if(now < it->second.cutT && it != _friendCount1500.end())
    {
        return 0;
    }
    getCuttingInfo().plset.insert(pl);
    struct invitTime1500 iT(now);
    _friendCount1500[pl->getId()] = iT ;
    if(pl->getThreadId() == getThreadId())
    {
        pl->beInviteCutting(this);
    }
    else 
    {
        UInt64 pid = getId();
        GameMsgHdr hdr(0x409, pl->getThreadId(), pl, sizeof(pid));
        GLOBAL().PushMsg(hdr, &pid);
    }
    return 1;
}
void Player::beReplyForCutting(Player * pl ,UInt8 res)   //调用之前 pl进入据点
{
    if(res == 2)
    {
        sendMsgCode(2,4037);
        return ;
    }
    UInt32 now = TimeUtil::Now();
    bool flag = false ;
    std::map<UInt64,struct invitTime1500>::iterator it = _friendCount1500.find(pl->getId());
    if(it != _friendCount1500.end()) 
        flag = true ;
    if( GetVar(VAR_MARRY_STATUS) == 5 && pl->getId() == GetMarriageInfo()->lovers ) 
        flag = true ;
    if(!flag)
        return ;
    if(res == 1)
    {
        if(pl->getCuttingInfo().shenfen ==1 )
            return ;
        if(getCuttingInfo().cutter != NULL)
        {
            pl->sendMsgCode(2,4038);
            return ;
        }
        if(pl->getCuttingInfo().cutter != NULL)
        {
            pl->getCuttingInfo().cutter->setCutter(1,NULL);
            pl->getCuttingInfo().cutter->sendMsgCode(2,4039);
            pl->getCuttingInfo().cutter->sendCutterInfo();
            pl->getCuttingInfo().reset();
        }
        std::set<Player *>::iterator it = getCuttingInfo().plset.find(pl);
        if(it != getCuttingInfo().plset.end())
        {
            setCutter(1,pl);
            pl->setCutter(0,this);
            pl->getCuttingInfo().type = getCuttingInfo().type;
            sendCutterInfo();
            pl->sendCutterInfo();
        }
        else
        {
            pl->sendMsgCode(2,4038);
        }
    }
    else
    {
        it->second.cutT = now + 300; 
    }
}
UInt32 Player::CutForOnce(UInt8 num ,UInt8 flag)
{
    static UInt32 chance [][3] = {
        {10,60,101},
        {10,60,101},
        {45,85,101},
        {20,60,101},
        {30,65,101},
    };
    static UInt32 treeNum[] = {5,7,10,12,14};
    UInt8 type = getCuttingInfo().type; 
    if(type < 1 || type > 5)
        return 1;

    UInt32 lastTime = GetVar(VAR_TREE_TIME); 
    UInt32 now = TimeUtil::Now();
    UInt8 statue = 0;
    if(!flag &&(  now < (lastTime + getCuttingInfo().oneTime) || now > (getCuttingInfo().time + 35))) 
        return 1;
    if(!flag)
    {
        statue = getCuttingInfo().setTree(num,getCuttingInfo().shenfen);        
        if(getCuttingInfo().cutter)
            getCuttingInfo().cutter->getCuttingInfo().setTree(num,getCuttingInfo().shenfen);     
        //std::cout <<"playerId:"<<static_cast<UInt32>(getId()&0xffffffffff)<<  " tree:"<<static_cast<UInt32>(num)<< " statue:" <<static_cast<UInt32>(statue) << std::endl;
    }
    if(statue%100 == 1 &&!flag)
    {
        SetVar(VAR_TREE_TIME,now);
        return 0;
    }
    if(statue > 2)
        return 2;
    UInt32 rnd = uRand(100);
    UInt8 baseNum = (type-1) / 2 ;
    for(UInt8 i = 0;i < 3 ;++i)
    {
        if(rnd < chance[type-1][i])
        {
            //std::cout << "chance at " << static_cast<UInt32>(i)<< std::endl;
            if(!getCuttingInfo().shenfen && !flag )
            {
               if(GetVar(VAR_TREE_VALUE_DAY) + 3 <= 99)
               {
                    AddVar(VAR_TREE_VALUE_DAY , 3);
                    AddVar(VAR_TREE_VALUE , 3);
                    getCuttingInfo().count += 3; 
               }
               if(!flag && getCuttingInfo().cutter)
                   getCuttingInfo().cutter->getTreefromCutter((treeNum[i+baseNum]+1)/2);
            }
            else
            {
               getCuttingInfo().count += treeNum[i+baseNum];
               AddVar(VAR_TREE_VALUE,treeNum[i+baseNum]);
            }
            if( flag > 1 )
            {
                getCuttingInfo().count += (treeNum[i+baseNum]+1)/2 ;
                AddVar(VAR_TREE_VALUE,(treeNum[i+baseNum]+1)/2);
            }
            break;
        }            
    }
    UInt32 rnd2 = uRand(100);
    if(rnd2 < 10)
    {
        UInt32 tool = GetVar(VAR_TREE_TOOL);
        if( tool%10 != 7)
        {
            m_Package->AddItem(16012 ,1 ,true ,true);
            SYSMSG_SENDV(2034,this);
            SYSMSG_SENDV(2035,this);
            getCuttingInfo().count2 ++;
        }
    }
    //std::cout <<" TreeCount: " <<static_cast<UInt32>(getCuttingInfo().count) << std::endl;
    return 0;
}
UInt8 Player::quicklyCut(UInt8 type)
{
    if(!subCuttingCount(1))
        return 1;
    if(type == 1)
    {
        UInt32 tael = 1000;
        if(getTael() < tael)
        {
            sendMsgCode(0, 1100);
            return 2;
        }
        ConsumeInfo ci(CutTree, 0, 0);
        useTael(tael, &ci);
    }
    else if(type == 2)
    {
        UInt32 gold = 10 ;
        if (getGold() < gold)
        {
            sendMsgCode(0, 1104);
            return 2;
        }
        ConsumeInfo ci(CutTree,0,0);
        useGold(gold,&ci);
    }
    if(getCuttingInfo().oneTime == 0)
        return 2;
    UInt8 count = 30 / getCuttingInfo().oneTime;
    //std::cout <<" id:" <<static_cast<UInt32>(getId()&0xffffffffff) << std::endl;
    for(UInt8 i = 0; i < count ;++i)
    {
       CutForOnce(0,type);
    }
    return 0;
}
void Player::beginCutting()
{
    UInt32 now = TimeUtil::Now();
    if(getCuttingInfo().shenfen && (getCuttingInfo().time  + 35) > now)
        return ;
    if(!subCuttingCount())
        return ;
    setCutTime(now);
    sendCutterInfo();
    getCuttingInfo().plset.clear();
    if(getCuttingInfo().cutter == NULL)
        return ;
    getCuttingInfo().cutter->getCuttingInfo().oneTime = getCuttingInfo().oneTime;  
    getCuttingInfo().cutter->setCutTime(now);
    getCuttingInfo().cutter->sendCutterInfo();
}
void Player::beInviteCutting(Player * pl)
{
    UInt32 now = TimeUtil::Now();
    if(pl == NULL)
        return ;
    /*
    if(getCuttingInfo().cutter)   //拥有伐木对象 （1、主动邀请方掉线 2、正常活动中）
    {
        if(getCuttingInfo().time + 35 < now)   //活动范围外(1)
            getCuttingInfo().reset();
        else                                    //活动范围外
        {
            pl->beReplyForCutting(this,2);
            return ;
        }
    }
    if(getCuttingInfo().time + 35 > now)   //活动范围)
    {
        pl->beReplyForCutting(this,2);
        return ;
    }
    if(getCuttingInfo().cutter && getCuttingInfo().time == 0)  //有队友
    {
        pl->beReplyForCutting(this,2);
        return ;
    }
    if(getCuttingInfo().time !=0 && getCuttingInfo().time + 35 < now && getCuttingInfo().shenfen == 0)
        getCuttingInfo().reset();

*/
    if(getCuttingInfo().shenfen)
    {
        if(getCuttingInfo().time !=0 && getCuttingInfo().time + 35 < now) 
        {
            getCuttingInfo().reset();
            sendCutterInfo();
        }
        else
        {
            pl->beReplyForCutting(this,2);
            return ;
        }
    }

    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x14);
    st << pl->getName();
    st << GetVar(VAR_TREE_VALUE_DAY);
    st << Stream::eos;
    send(st);
}
void Player::sendCutterInfo()
{
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x11);
    st << static_cast<UInt8>(getCuttingInfo().type);
    st <<static_cast<UInt8>(getCuttingInfo().shenfen);
    if(!getCuttingInfo().cutter)
        st <<"";
    else
        st << getCuttingInfo().cutter->getName();
    st << getCuttingInfo().time;
    st << static_cast<UInt8>(getCuttingInfo().oneTime);
    st << static_cast<UInt32>(GetVar(VAR_TREE_TIME));
    st << GetVar(VAR_TREE_VALUE);
    st << GetVar(VAR_TREE_VALUE_DAY);
    st << static_cast<UInt32>(getCuttingInfo().count);   //本轮自己获得的木片就数量
    if(getCuttingInfo().cutter)
        st << static_cast<UInt32>(getCuttingInfo().cutter->getCuttingInfo().count);   //本轮好友获得的木片就数量
    else 
        st << static_cast<UInt32>(0);
   
    st << static_cast<UInt32>(getCuttingInfo().count2);  //好友帮助获得的
    if(getCuttingInfo().cutter)
        st << static_cast<UInt32>(getCuttingInfo().cutter->getCuttingInfo().count2);   //本轮好友获得的精粹数量
    else
        st << static_cast<UInt32>(0);

    st << static_cast<UInt32>(getCuttingInfo().countOther); //偶也
    //std::cout << static_cast<UInt32>(getId()&0xffffffffff) << std::endl;
    for(UInt8 i = 0; i < TREEMAX ; ++i)
    {
        st << getCuttingInfo().getTree(i);
        //std::cout << static_cast<UInt32>(getCuttingInfo().getTree(i)) << "  " ;
    }
    //std::cout << std::endl;
    st << Stream::eos;
    send(st);
}
bool Player::CutToolLevelUp(UInt8 level)
{
   UInt16 iid = 16012;
   UInt8 num =  1 ;
   static UInt8 nums[] = { 0,15,8,10,5,10,15,15};
   UInt32 curLevel = GetVar(VAR_TREE_TOOL); 
   if(level > 7 || level ==0)
       return false;
   if( curLevel%10 != static_cast<UInt32>(level-1) )
       return false;
   UInt16 count = GetPackage()->GetItemAnyNum(iid) ;
   ItemBase * item = GetPackage()->FindItem(iid, true);
   if (!item)
       item =GetPackage()->FindItem(iid, false);
   if(item ==NULL)
       return false;
   if(num > count)
       return false;
   GetPackage()->DelItemAny(iid, num );
   GetPackage()->AddItemHistoriesLog(iid , num);
   AddVar(VAR_TOOL_CNT,num);
   if(GetVar(VAR_TOOL_CNT) == nums[level]) 
   {
       AddVar(VAR_TREE_TOOL,1);
       SetVar(VAR_TOOL_CNT,0);
   }
   sendTreesInfo();
   char action[16] = "";
   snprintf (action, 16, "F_140528_%d",level + 5 );
   udpLog("jingyulou", action, "", "", "", "", "act");
   return true;
}
void Player::BuyCutCount()
{
    UInt32 _buy = GetVar(VAR_CUTTREE_COUNT);   //购买次数
    UInt8 buy_count =GET_BIT_8( _buy , 1 );  //购买次数

    if( (buy_count + 1) > 255)
        return ;

    UInt32 gold = 10 * (buy_count + 1);
    if (getGold() < gold)
    {
        sendMsgCode(0, 1104);
        return ;
    }

    ConsumeInfo ci(ExtendPackage,0,0);
    useGold(gold,&ci);

    UInt32 buy_Count = SET_BIT_8(_buy,1,(buy_count+1));

    AddVar(VAR_CUTTREE_BUY,1);
    SetVar(VAR_CUTTREE_COUNT,buy_Count);
    sendTreesInfo();
    char action[16] = "";
    snprintf (action, 16, "F_140528_%d",2+((buy_count< 2)?(buy_count+1):3) );
    udpLog("jingyulou", action, "", "", "", "", "act");
}
void Player::setCutType(UInt8 type)
{
    static UInt8 types[] = {2,2,3,3,3,4,4,5};
    static UInt32 times[] = {8,7,7,7,6,6,5,5};
    UInt32 tool = GetVar(VAR_TREE_TOOL);
    if(getCuttingInfo().cutter != NULL )
        return ;
    if (GetPackage()->GetRestPackageSize() < 1)
    {
        sendMsgCode(0, 1011);
        return;
    }

    if(tool%10 > 7 || type < 1)
        return ;
    if(types[tool%10] < type)
        return ;
    if(type == 2 && tool < 10)
    {
        //std::map<UInt64,struct invitTime1500>::const_iterator it = _friendCount1500.find(pl->getId());
        std::map<UInt64,FriendCount >::iterator it_count = _friendlyCount.begin();
        for(;it_count!=_friendlyCount.end();++it_count)
        {
            if(it_count->second.value >= 1500)
            {
                AddVar(VAR_TREE_TOOL,10);
                break;
            }
        }
    }
    getCuttingInfo().type = type;
    getCuttingInfo().oneTime = times[tool%10];
    getCuttingInfo().shenfen = 1;
    sendFirendlyCountTaskInfo();
    sendCutterInfo();
}
void Player::getTreefromCutter(UInt8 count)  //从好友处获得木片
{
    if(getCuttingInfo().shenfen != 1 )
        return ;
    getCuttingInfo().countOther +=count;
    AddVar(VAR_TREE_VALUE,count);
}
void Player::CutEnd()
{
    UInt8 i = 0;
    for( ; i < TREEMAX ; ++i)
    {
        if(getCuttingInfo().getTree(i) != 2)
            break;
    }
    if( i == TREEMAX && getCuttingInfo().oneTime == 5)
    {
        getCuttingInfo().count += 10;
        AddVar(VAR_TREE_VALUE,10);
    }
    UInt32 now = TimeUtil::Now();
    if(getCuttingInfo().time  + 33 > now)
        return ;
    if(!getCuttingInfo().shenfen && !getCuttingInfo().cutter)
        return ;
    Player *cutter = getCuttingInfo().cutter;
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x18);
    st << getCuttingInfo().count;  
    if(getCuttingInfo().shenfen == 0 && cutter)
        st << cutter->getCuttingInfo().countOther;
    else
        st << getCuttingInfo().countOther;  
    st << Stream::eos;
    send(st);
    if(getCuttingInfo().shenfen && cutter )
        cutter->CutEnd();
    getCuttingInfo().reset();
}
void Player::sendTreesInfo()
{
    Stream st(REP::BROTHER);
    st << static_cast<UInt8>(0x10);
    UInt32 CountTree = GetVar(VAR_CUTTREE_COUNT);
    st << static_cast<UInt32>(GetVar(VAR_TREE_VALUE));
    st << static_cast<UInt8>( GET_BIT_8(CountTree,0) );
    st << static_cast<UInt32>(GetVar(VAR_TREE_VALUE_DAY));
    st << static_cast<UInt8>(GetVar(VAR_CUTTREE_BUY));
    st << static_cast<UInt8>( GET_BIT_8(CountTree,1) );
    st << static_cast<UInt8>(GetVar(VAR_TREE_TOOL));
    st << static_cast<UInt8>(GetVar(VAR_TOOL_CNT));
    st << Stream::eos;
    send(st);
}
bool Player::subCuttingCount(UInt8 flag)
{
    if(!flag && !getCuttingInfo().shenfen)
        return false;
    UInt32 var_val = GetVar(VAR_CUTTREE_COUNT);
    UInt8 val = GET_BIT_8( var_val , 0);
    UInt8 freeCount = 2;
    if(GetVar(VAR_TREE_TOOL)>=10)
        freeCount = 3;
    bool res = true;
    if(val < freeCount)
    {
        UInt32 value = SET_BIT_8(var_val , 0 , (val+1));
        SetVar(VAR_CUTTREE_COUNT,value);
        if(val < 2)
        {
            char action[16] = "";
            snprintf (action, 16, "F_140528_%d",val+1 );
            udpLog("jingyulou", action, "", "", "", "", "act");
        }
        //    if(val == 0 )
    //        udpLog("jiebaixitong", "F_140423_4", "", "", "", "", "act");
    //    else
    //        udpLog("jiebaixitong", "F_140423_5", "", "", "", "", "act");

    }
    else
    {
        UInt32 buy_count = GetVar(VAR_CUTTREE_BUY); 
        if(buy_count != 0)
        {
            SetVar(VAR_CUTTREE_BUY,buy_count - 1);
        }
        else
            res = false;
    }
    //UInt64 id = getId();
    //GameMsgHdr hdr(0x406, friendOne->getThreadId(), friendOne , sizeof(id));
    //GLOBAL().PushMsg( hdr, &id );
    return res;
}
    UInt8 Player::getChallengeStatus(Player* pl)
    {
        if(!pl)
            return 0;
        std::map <Player *, UInt8>::iterator it = _challengePlayer.find(pl);
        if(it != _challengePlayer.end())
            return it->second;
        return 0;
    }

    void Player::insertChallengePlayer(Player* pl)
    {
        if(!pl)
            return;
        std::map <Player *, UInt8>::iterator it = _challengePlayer.find(pl);
        if(it != _challengePlayer.end())
            return;
        _challengePlayer[pl] = 1;
    }

    void Player::clearChallengePlayer()
    {
        _challengePlayer.clear();
    }

    void Player::makeRBBattleInfo(Stream& st)
    {
        UInt8 reportCnt = _playerReport.size();
        st << reportCnt;
        for(UInt8 i = 0; i < reportCnt; i++)
        {
            Player* pl = _playerReport[i].pl;
            st << pl->getName();
            st << pl->getCountry();
            st << _playerReport[i].win;
            st << _playerReport[i].reportId;
        }
    }

    void Player::insertPlayerRecord(PlayerReport record)
    {
        _playerReport.push_back(record);
    }

    void Player::clearPlayerRecord()
    {
        _playerReport.clear();
    }
#if 0
    void Player::readRandBattleReport(UInt32 reportId)
    {
        std::vector<PlayerReport>::iterator it;
        for(it = _playerReport.begin(); it != _playerReport.end(); ++it)
        {
            if(it->reportId == reportId)
                break;
        }
        if(it == _playerReport.end())
            return;

        std::vector<UInt8> *r = Battle::battleReport[reportId];
        if(r == NULL)
            return;
        send(&(*r)[0], r->size());
    }
#endif
    void Player::autoRaceBattle(UInt32 count)
    {
		EventAutoRaceBattle* event = new(std::nothrow)EventAutoRaceBattle(this, 60, count);
		if(event == NULL)
            return;
		cancelAutoRaceBattle();
		PushTimerEvent(event);

    }

	void Player::cancelAutoRaceBattle()
	{
#if 0
        if(getThreadId() != WORKER_THREAD_NEUTRAL)
        {
            GameMsgHdr hdr(0x1D1, WORKER_THREAD_NEUTRAL, this, 0);
            GLOBAL().PushMsg(hdr, NULL);
            return;
        }
#endif
        EventBase* ev = eventWrapper.RemoveTimerEvent(this, EVENT_AUTORACEBATTLE, 0);
        if(ev == NULL)
            return;
        ev->release();
	}

void Player::SetKJTMAwardMark(UInt8 type)
{
    UInt32 status = GetVar(VAR_KJTM_AWARD_MARK);
    if(0 == GET_BIT_2(status, type))
    {
        status = SET_BIT(status, (type*2));
        SetVar(VAR_KJTM_AWARD_MARK, status);
        
        GetKJTMAwardMark();
    }
}

void Player::GetKJTMAwardMark()
{
    UInt32 status = GetVar(VAR_KJTM_AWARD_MARK);
    Stream st(REP::KANGJITIANMO_REP);
    st << static_cast<UInt8>(0x18);
    st << status;
    st << Stream::eos;
    send(st);
}

void Player::GetKJTMAward(UInt8 opt)
{
    if(opt > 3)
        return;

    if (GetPackage()->GetRestPackageSize() < 6)
    {
        sendMsgCode(0, 1011);
        return;
    }

    UInt32 status = GetVar(VAR_KJTM_AWARD_MARK);
    if(1 == GET_BIT_2(status, opt))
    {
        status = CLR_BIT(status, (opt*2));
        status = SET_BIT(status, ((opt*2)+1));
        SetVar(VAR_KJTM_AWARD_MARK, status);

        UInt32 statusA = GetVar(VAR_KJTM_STATUS);
        UInt8 mark = GET_BIT(statusA, 0);
        switch(opt)
        {
            case 0:
                {
                    if(0 == mark)
                        GetPackage()->AddItem(15, 5, true, false, FromKJTM);
                    else
                        GetPackage()->AddItem(549, 1, true, false, FromKJTM);

                    AddVar(VAR_KJTM_LOGIN_NUM, 1);
                }
                break;
            case 1:
                {
                    if(0 == mark)
                        GetPackage()->AddItem(15, 5, true, false, FromKJTM);
                    else
                    {
                        GetPackage()->AddItem(549, 1, true, false, FromKJTM);
                        GetPackage()->AddItem(9420, 2, true, false, FromKJTM);
                    }
                }
                break;
            case 2:
                {
                    if(0 == mark)
                        GetPackage()->AddItem(503, 1, true, false, FromKJTM);
                    else
                    {
                        GetPackage()->AddItem(503, 5, true, false, FromKJTM);
                        GetPackage()->AddItem(5054, 1, true, false, FromKJTM);
                    }
                }
                break;
            case 3:
                {
                    if(0 == mark)
                        GetPackage()->AddItem(503, 1, true, false, FromKJTM);
                    else
                    {
                        GetPackage()->AddItem(30, 10, true, false, FromKJTM);
                        GetPackage()->AddItem(9420, 2, true, false, FromKJTM);
                    }
                }
                break;
        }
        GetKJTMAwardMark();
        if(0 == opt)
            BroadcastPower();
    }
}

void Player::BroadcastPower()
{
    TeamMemberData* tmd = getTeamMemberData();
    if(NULL == tmd)
        return;

    Stream st(REP::KANGJITIANMO_REP);
    st << static_cast<UInt8>(0x1E);
    st << static_cast<UInt8>(tmd->memCnt);

    for(UInt8 i=0; i<tmd->memCnt; i++)
    {
        Player* member = tmd->members[i];
        if(NULL == member)
            continue;

        st << static_cast<UInt8>(member->getVipLevel());
        UInt32 power = member->GetVar(VAR_TOTAL_BATTLE_POINT);

        float factor = 1.0f;
        UInt16 value = 0;
        UInt8 loginNum = member->GetVar(VAR_KJTM_LOGIN_NUM);
        if(i==0)
            value = 30;
        else
        {
            value = 100;

            if(member->getVipLevel() >= 1 && member->getVipLevel() <= 4)
                value += 50;
            else if(member->getVipLevel() >= 5)
                value += 100;
        }
        factor = static_cast<float>(value+loginNum*10)/100.0f;
        power = power * factor;

        st << power;
        st << static_cast<UInt8>(loginNum);
    }
    st << Stream::eos;

    for(UInt8 i=0; i<tmd->memCnt; i++)
    {
        Player* member = tmd->members[i];
        if(NULL == member)
            continue;

        member->send(st);
    }
}

void Player::getFireContributionBag(Player * pl)
{
    SYSMSG(title, 955);
    SYSMSGV(content, 956, getName().c_str());
    Mail * mail = pl->GetMailBox()->newMail(NULL, 0x21, title, content, 0xFFFE0000);
    if(mail)
    {
        MailPackage::MailItem mitem = {9476, 1};
        mailPackageManager.push(mail->id, &mitem, 1, true);
    }
}
void Player::setPictureInfo(UInt8 floor , std::map<UInt8 ,std::vector<UInt8> > *map_vec)
{
    static UInt8 nums[]={1,1,2,2,2,2,3,3,2,3,3,3,2,2,3,3,3,3,4,4};
    UInt32 treeCount = GetVar(VAR_CUBE_COUNT);
    UInt32 oneCost =  GData::pictureAttrData.getFloorCost(floor);
    if(oneCost == 0 || oneCost * getCubeCountInSet(*map_vec) > treeCount)
        return ;
    std::map<UInt8 ,std::vector<UInt8> >::iterator it = (*map_vec).begin();

    for(;it!=map_vec->end();++it)
    {
       if( getPictureInfo().cubeHave.find(it->first) == getPictureInfo().cubeHave.end()) 
           return ;
    }

    if(GData::pictureAttrData.getFloorCubeCount(getPictureInfo().floor) == getCubeCountInSet(*map_vec))
    {
        if(getPictureInfo().floor > 100 )
            return ;
        getPictureInfo().floor +=1; 
        if(getPictureInfo().floor%5 == 1  && getPictureInfo().floor !=1)
            AddVar(VAR_CUTTREE_BUY,nums[getPictureInfo().floor/5-1]);
        getPictureInfo().cubeHave.clear();
        getPictureInfo().cubeCover.clear();
        SetVar(VAR_CUBE_COUNT,0);
    }
    else
    {
        getPictureInfo().cubeCover = *map_vec;
    }
    UpdatePictureToDB();
    sendPictureInfo();
    setFightersDirty(true);
}
UInt8 Player::getCubeCountInSet(std::map<UInt8 , std::vector<UInt8> > map_vec)
{
    UInt8 count = 0;
    std::map<UInt8, std::vector<UInt8> >::iterator it = map_vec.begin();
    for(;it!= map_vec.end();++it)
    {
       count += it->second.size(); 
    }
    return count;
}
void Player::getPictureAttr(GData::AttrExtra& ae)
{
    //前floor-1层属性
    if(getPictureInfo().floor == 0 )
        return ;
    GData::PictureAttr::stPictureAttr* attr = GData::pictureAttrData.getFloorAttrTable(getPictureInfo().floor);
    if(attr == NULL)
        return ;
    ae.hp += attr->hp;
    ae.attack += attr->attack;
    ae.magatk += attr->action;  //action含义被修改为魔法攻击
    //当前层属性
    std::map<UInt8 , std::vector<UInt8> >::iterator it = getPictureInfo().cubeCover.begin();
    for(;it != getPictureInfo().cubeCover.end();++it)
    {
        for(UInt8 i = 0; i < it->second.size();++i)
        {
            GData::PictureAttr::stPictureAttr* attr = GData::pictureAttrData.getPictureAttrTable(getPictureInfo().floor ,(it->second)[i] )    ;
            if(attr == NULL)
                continue;
            ae.hp += attr->hp;
            ae.attack += attr->attack;
            ae.magatk += attr->action;  //action含义被修改为魔法攻击
        }
    }
}
void Player::sendPictureInfo()
{
    Stream st(REP::BROTHER);
    st <<static_cast<UInt8>(0x20);
    st << static_cast<UInt8>(getPictureInfo().floor);
    st << static_cast<UInt32>(GetVar(VAR_TREE_VALUE));
    st << static_cast<UInt8>(getPictureInfo().cubeHave.size());
    std::set<UInt8>::iterator it_set = getPictureInfo().cubeHave.begin();
    for(;it_set != getPictureInfo().cubeHave.end(); ++it_set)
    {
        st << static_cast<UInt8>(*it_set);
    }
    st << static_cast<UInt8>(getPictureInfo().cubeCover.size()) ;

    for(std::map<UInt8,std::vector<UInt8> >::iterator it = getPictureInfo().cubeCover.begin() ; it != getPictureInfo().cubeCover.end() ; ++it)
    {
        st << static_cast<UInt8>(it->first);
        st << static_cast<UInt8>(it->second.size()) ;
        for(UInt8 j = 0; j < it->second.size(); ++j)
        {
            st << static_cast<UInt8>(it->second.at(j));
        }
    }
    st << Stream::eos;
    send(st);
}

void Player::UpdatePictureToDB()
{
    std::string strCubeHave ;
    std::set<UInt8>::iterator it_set = getPictureInfo().cubeHave.begin();
    for(;it_set != getPictureInfo().cubeHave.end(); ++it_set)
    {
        if(it_set != getPictureInfo().cubeHave.begin())
            strCubeHave += ",";
        strCubeHave += Itoa(*it_set);
    }
    std::string strCubeCover;
    std::map<UInt8,std::vector<UInt8> >::iterator it = getPictureInfo().cubeCover.begin(); 
    for(;it != getPictureInfo().cubeCover.end(); ++it)
    {
        strCubeCover += Itoa(it->first);
        strCubeCover +=",";
        for(UInt8 i =0 ; i < it->second.size(); ++i) 
        {
            strCubeCover += Itoa(it->second.at(i));
            strCubeCover +=",";
        }
        strCubeCover +="|";
    }
    DB1().PushUpdateData("REPLACE INTO `pictureAttr`(`playerId`, `floor`, `cubeHave`, `cubeCover`) VALUES(%" I64_FMT "u, %d, '%s', '%s')", getId(), getPictureInfo().floor, strCubeHave.c_str(), strCubeCover.c_str());
}

UInt8 Player::buyCubeInPicture(UInt8 floor , UInt8 index , UInt8 count)
{
   if(getPictureInfo().floor != floor) 
       return 1;
   if(count == 0)
       return 1;
   if(getPictureInfo().floor < 1)
       return 1;
    UInt32 oneCost =  GData::pictureAttrData.getFloorCost(floor);
    UInt8 cubeCount =  GData::pictureAttrData.getCubeCount((floor-1)%20+1,index);

    if(cubeCount != count)
        return 1;

    std::set<UInt8>::iterator it = getPictureInfo().cubeHave.find(index);
    if(it != getPictureInfo().cubeHave.end())
        return 2;
    //UInt32 treeCostCount = GetVar(VAR_CUBE_COUNT);
    UInt32 treeCount = GetVar(VAR_TREE_VALUE);
    if(treeCount < oneCost * count )
        return 3;

    //std::cout << "picture :" << static_cast<UInt32>(index) << std::endl;
    getPictureInfo().cubeHave.insert(index);
    treeCount -= (oneCost * count);
    SetVar(VAR_TREE_VALUE,treeCount);   //设置剩余木片数
    AddVar(VAR_CUBE_COUNT,oneCost * count); //增加当前层数木片消耗数
    UpdatePictureToDB();
    return 0;
}

void Player::writeClanShopItems()
{
    std::multimap<UInt32, UInt8> & _clanShopItemsAll = _playerData.clanShopItemsAll;
    std::string items = "";

    for(std::multimap<UInt32, UInt8>::iterator it = _clanShopItemsAll.begin(); it != _clanShopItemsAll.end(); ++ it)
    {
        items += Itoa(it->first);
        items += ',';
        items += Itoa(it->second);
        items += '|';
    }

    DB1().PushUpdateData("UPDATE `player` SET `clancontrishop` = '%s' WHERE `id` = %" I64_FMT "u", items.c_str(), getId());
}

void Player::sendClanShopInfo()
{
    Stream st(REP::CLAN_COPY);
    st << static_cast<UInt8>(0x30);
    st << static_cast<UInt8>(0);

    std::multimap<UInt32, UInt8> & _clanShopItemsAll = _playerData.clanShopItemsAll;
    UInt8 currentLvl = GetVar(VAR_CLAN_SHOP_CURRENT_LVL);
    UInt8 count = 0;

    st << static_cast<UInt8>(GetVar(VAR_CLAN_SHOP_FLUSH_TIMES));
    size_t offset = st.size();
    st << static_cast<UInt8>(count);

    for(std::multimap<UInt32, UInt8>::iterator it = _clanShopItemsAll.begin(); it != _clanShopItemsAll.end(); ++ it)
    {
        if(it->first / 100 == currentLvl)
        {
            st << static_cast<UInt32>(it->first);
            st << static_cast<UInt8>(it->second);
            count ++ ;
        }
    }
    st.data<UInt8>(offset) = count;

    st << Stream::eos;
    send(st);
}

bool Player::clanShopLvlShift(UInt8 lvl)
{
    std::multimap<UInt32, UInt8> & _clanShopItemsAll = _playerData.clanShopItemsAll;
    if(GetLev() < lvl || lvl > 80 || lvl < 40)
    {
        //等级错误
        return 0;
    }

    SetVar(VAR_CLAN_SHOP_CURRENT_LVL, lvl);
    //判断该等级物品是否开启过
    bool flag = false;
    for(std::multimap<UInt32, UInt8>::iterator it = _clanShopItemsAll.begin(); it != _clanShopItemsAll.end(); ++ it)
    {
        if(it->first / 100 == lvl)
        {
            flag = true;
            break;
        }
    }
    //第一次打开该等级
    if(!flag)
        flushClanShopItems(true);
    return 1;
}

bool Player::buyClanShopItems(UInt8 offset)
{
    std::multimap<UInt32, UInt8> & _clanShopItemsAll = _playerData.clanShopItemsAll;
    UInt8 currentLvl = GetVar(VAR_CLAN_SHOP_CURRENT_LVL);
    if(currentLvl == 0)
        return 0;
    std::map<UInt32, GData::ClanShopInfo::ClanShopItems> _clanShopItemsTemplate = GData::clanShopInfo.getClanShopInfo(currentLvl);
    std::multimap<UInt32, UInt8>::iterator targetToBuy =  _clanShopItemsAll.end();

    if(offset < 1 || offset > 9)
        return 0;

    //遍历当前玩家帮贡物品，找到要买的物品
    for(std::multimap<UInt32, UInt8>::iterator it = _clanShopItemsAll.begin(); it!= _clanShopItemsAll.end(); ++it)
    {
        if(it->first / 100 == currentLvl)
        {
            for(UInt8 i = 0; i < offset - 1; i++)
            {
                it++;
            }
            targetToBuy = it;
            break;
        }
    }
    if(targetToBuy == _clanShopItemsAll.end())
        return 0;
    if(targetToBuy->second == 1)
        return 0;

    //根据物品在帮贡物品模版中找到对应价格，完成购买
    std::map<UInt32, GData::ClanShopInfo::ClanShopItems>::iterator it = _clanShopItemsTemplate.find(targetToBuy->first);
    if(it == _clanShopItemsTemplate.end())
        return 0;
    if(getClan()->getLev() < it->second.lvl)
        return 0;

    UInt32 price = it->second.price;
    UInt32 proffer = getClanProffer();
    if(proffer >= price)
    {
        ConsumeInfo ci(BuyClanShopItems, 0, 0);
        useClanProffer(price, &ci);

        if(GetPackage()->GetRestPackageSize() < 1)
        {
            sendMsgCode(2, 1011);
            return 0;
        }

        GetPackage()->Add(it->second.itemid, 1 , true, false, FromClanShop);
        //设置状态为已购买
        targetToBuy->second = 1;
    }
    else
    {
        sendMsgCode(0, 1360);
        return 0;
    }

    writeClanShopItems();
    return 1;
}

void Player::randomForClanShop(UInt8 lvl)
{
    UInt8 currentLvl = GetVar(VAR_CLAN_SHOP_CURRENT_LVL);
    if(currentLvl == 0)
        return;
    std::multimap<UInt32, UInt8> & _clanShopItemsAll = _playerData.clanShopItemsAll;
    std::map<UInt32, GData::ClanShopInfo::ClanShopItems> _clanShopItemsTemplate = GData::clanShopInfo.getClanShopInfo(currentLvl);

    //如果当前等级有帮贡物品，则先删除
    for(std::multimap<UInt32, UInt8>::iterator it = _clanShopItemsAll.begin(); it!= _clanShopItemsAll.end(); )
    {
        std::multimap<UInt32, UInt8>::iterator tmp = it;
        ++ tmp;
        if(it->first / 100 == currentLvl)
        {
            _clanShopItemsAll.erase(it);
        }
        it = tmp;
    }

    //计算概率基数
    UInt32 probSum = 0;
    for(std::map<UInt32, GData::ClanShopInfo::ClanShopItems>::iterator it = _clanShopItemsTemplate.begin(); it != _clanShopItemsTemplate.end(); ++it)
    {
        probSum += it->second.prob;
    }

    //为当前等级随9个帮贡物品，并且物品重复不超过3次
    for(UInt8 i = 0; i < 9; i++)
    {
        UInt32 probTmp = 0;
        UInt32 rand = uRand(probSum);
        for(std::map<UInt32, GData::ClanShopInfo::ClanShopItems>::iterator it=_clanShopItemsTemplate.begin(); it!=_clanShopItemsTemplate.end(); ++it)
        {
            probTmp  += it->second.prob;
            if(rand <= probTmp)
            {
                //如果重复3次以上，此次随机无效
                std::pair<std::multimap<UInt32, UInt8>::iterator, std::multimap<UInt32, UInt8>::iterator> found = _clanShopItemsAll.equal_range(it->first);
                UInt8 count = 0;
                while(found.first != found.second)
                {
                    count++;
                    ++found.first;
                }
                if(count > 2)
                {
                    i --;
                    break;
                }
                else
                {
                    _clanShopItemsAll.insert(std::make_pair(it->first, 0));
                    break;
                }
            }
        }
    }
}

bool Player::flushClanShopItems(bool flag)
{
    //flag(ture:第一次打开，自动随机，不消耗次数,false:手动刷新)
    UInt8 currentLvl = GetVar(VAR_CLAN_SHOP_CURRENT_LVL);
    if(currentLvl == 0)
        return 0;
    //每天刷新次数共9次，其中前4次免费
    UInt32 profferCost[9] = {0, 0, 0, 0, 500, 1000, 3000, 5000, 10000};
    UInt8 flushTimes = GetVar(VAR_CLAN_SHOP_FLUSH_TIMES);
    if(flag)
    {
        randomForClanShop(currentLvl);
        writeClanShopItems();
        return 1;
    }
    else
    {
        if(flushTimes > 9)
        {
            //刷新次数用完
            return 0;
        }
        UInt32 proffer = getClanProffer();
        if(proffer >= profferCost[flushTimes])
        {
            if(0 != profferCost[flushTimes])
            {
                ConsumeInfo ci(FlushClanShopItems, 0, 0);
                useClanProffer(profferCost[flushTimes], &ci);
            }

            AddVar(VAR_CLAN_SHOP_FLUSH_TIMES, 1);
            randomForClanShop(currentLvl);
            writeClanShopItems();
            return 1;
        }
        else
        {
            sendMsgCode(0, 1360);
            return 0;
        }
    }
}

void Player::clanShopOp(UInt8 type, UInt8 command)
{
    switch(type)
    {
        case 0:
            clanShopLvlShift(command);
            sendClanShopInfo();
            break;
        case 1:
            buyClanShopItems(command);
            sendClanShopInfo();
            break;
        case 2:
            flushClanShopItems(false);
            sendClanShopInfo();
            break;
        default:
            break;
    }
}

void Player::AddWorldCupScore(UInt32 grade ,UInt8 num)
{
    if(num > 0 && num <= WC_MAX_COUNT )  //结算
        grade = worldCupInfo[num-1].supportNum * 100 ; 
    static UInt32 gradeAward[]={6000,12000,28000,60000,120000,200000};
    UInt32 WCGrade = GetVar(VAR_WORLDCUP_RES);
    for(UInt8 i =0 ; i< 6;i++)
    {
        if(WCGrade < gradeAward[i] &&( WCGrade + grade) >=gradeAward[i])
        {
            if(World::getWorldCupTime())
                SendWCGradeAward(i+1);
            else if(World::getWorldCupTime2())
                SendWCGradeAward2(i+1);
        }
    }
    AddVar(VAR_WORLDCUP_RES,grade);
    //AddVar(VAR_11AIRBOOK_GRADE_DAY,grade);
    UInt32 count = GetVar(VAR_WORLDCUP_RES);
    GameMsgHdr hdr1(0x152, WORKER_THREAD_WORLD, this, sizeof(count));
    GLOBAL().PushMsg(hdr1, &count);
}
void Player::SendWCGradeAward(UInt8 type)
{
    if(type > 6 || type == 0 )
        return ;
    static UInt32 gradeAward[]={6000,12000,28000,60000,120000,200000};
    static MailPackage::MailItem s_item[][6] = {
        {{56,3},{57,3},{500,3},{15,3},{9371,3}},
        {{503,3},{516,3},{513,3},{501,3}},
        {{517,10},{551,10},{9424,10},{9414,8}},
        {{9457,20},{16001,20},{9498,20},{9600,20},{9076,20}},
        {{515,30},{9498,40},{134,40},{1325,30}},
        {{9022,15},{9075,15},{9068,15},{1732,1}},
    };
    static UInt32 count[] = {5,4,4,5,4,4};
    SYSMSG(title, 5153);
    if(type)
    {
        SYSMSGV(content, 5154,gradeAward[type-1]);
        Mail * mail = GetMailBox()->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        //player->sendMailItem(4153, 4154, items, sizeof(items)/sizeof(items[0]), false);
        if(mail)
        {
                mailPackageManager.push(mail->id, s_item[type-1], count[type-1], true);
        }
        std::string strItems;
        for(UInt8 index = 0; index < count[type-1]; ++ index)
        {
            strItems += Itoa(s_item[type-1][index].id);
            strItems += ",";
            strItems += Itoa(s_item[type-1][index].count);
            strItems += "|";
        }
        DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, Activity, title, content, strItems.c_str(), mail->recvTime);
    }
}
void Player::SendWCGradeAward2(UInt8 type)
{
    if(type > 6 || type == 0 )
        return ;
    static UInt32 gradeAward[]={6000,12000,28000,60000,120000,200000};
    static MailPackage::MailItem s_item[][6] = {
        {{503,3},{500,3},{512,3},{505,3}},
        {{503,3},{516,3},{9424,3},{9418,3}},
        {{9498,10},{517,10},{1126,10},{9457,10}},
        {{9457,20},{16001,20},{515,20},{9438,20},{9068,5}},
        {{1733,1},{9498,50},{515,30},{501,50},{9076,25}},
        {{9022,20},{9075,20},{9076,20}},
    };
    static UInt32 count[] = {4,4,4,5,5,3};
    SYSMSG(title, 5153);
    if(type)
    {
        SYSMSGV(content, 5154,gradeAward[type-1]);
        Mail * mail = GetMailBox()->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        //player->sendMailItem(4153, 4154, items, sizeof(items)/sizeof(items[0]), false);
        if(mail)
        {
                mailPackageManager.push(mail->id, s_item[type-1], count[type-1], true);
        }
        std::string strItems;
        for(UInt8 index = 0; index < count[type-1]; ++ index)
        {
            strItems += Itoa(s_item[type-1][index].id);
            strItems += ",";
            strItems += Itoa(s_item[type-1][index].count);
            strItems += "|";
        }
        DBLOG1().PushUpdateData("insert into mailitem_histories(server_id, player_id, mail_id, mail_type, title, content_text, content_item, receive_time) values(%u, %" I64_FMT "u, %u, %u, '%s', '%s', '%s', %u)", cfg.serverLogId, getId(), mail->id, Activity, title, content, strItems.c_str(), mail->recvTime);
    }
}
UInt8 Player::supportWorldCup(UInt8 num ,UInt8 res, UInt32 number)
{
    if( num >= WC_MAX_COUNT)
        return 1;
    if( num <48 && !World::getWorldCupTime())
        return 1;
    if( num >= 48 && !World::getWorldCupTime2())
        return 1;

    if(worldCupInfo[num].support == 0 && res != 0)
       worldCupInfo[num].support = res ; 
    if(worldCupInfo[num].support != res)
        return 1;

    UInt32 now = TimeUtil::Now();
    UInt32 limitTime = GameAction()->getWorldCupLimitTime(this,num);
    if(now > limitTime)
        return 2;

    if(number == 0)
        return 1 ;
    UInt16 iid = 16017;
    UInt16 count = GetPackage()->GetItemAnyNum(iid) ;
    ItemBase * item = GetPackage()->FindItem(iid, true);
    if (!item)
        item =GetPackage()->FindItem(iid, false);
    if(item ==NULL)
        return 1;
    if(number > count)
        return 3;
    GetPackage()->DelItemAny(iid, number );
    GetPackage()->AddItemHistoriesLog(iid , number);

    worldCupInfo[num].supportNum  += number ;
    worldCupInfo[num].supportTime = now;

	struct WCSupportData
	{
		UInt8 num;
        UInt8 res;
		UInt32  number;
	};
    WCSupportData wcs ;
    wcs.num = num ;
    wcs.res = res ;
    wcs.number = number;

    GameMsgHdr hdr(0x151, WORKER_THREAD_WORLD, this, sizeof(WCSupportData));
    GLOBAL().PushMsg(hdr, &wcs);

    AddWorldCupScore(number * 100 );
    UpdateWorldCupToDB(num);
    return 0;
}
void Player::sendMyWorldCupInfo()
{
    Stream st(REP::ACTIVE);
    st << static_cast<UInt8>(0x33);
    st << static_cast<UInt8>(0x01);
    st << static_cast<UInt8>(0);
    st << static_cast<UInt8>(WC_MAX_COUNT);
    for(UInt8 i = 0 ; i < WC_MAX_COUNT ; ++i)
    {
        st << worldCupInfo[i].support;
        st << worldCupInfo[i].supportNum;
        st << worldCupInfo[i].supportTime;
    }
    st << Stream::eos;
    send(st);
}
void Player::UpdateWorldCupToDB(UInt8 num)
{
    if(num >= WC_MAX_COUNT)
        return ;
    DB1().PushUpdateData("REPLACE INTO `worldCup`(`playerId`, `num`, `count1`,`count2`,`count3`, `result`) VALUES(%" I64_FMT "u, %d, %u,%u,%u , %u)", getId(), num , worldCupInfo[num].supportNum ,worldCupInfo[num].supportTime , 0 , worldCupInfo[num].support);
    
}
void Player::getXXLScore(UInt8 type ,UInt8 count)
{
   static UInt8 Award[][4][4] = {
       {{1,1,1,1},{2,2,2,2},{5,5,5,5},{6,6,6,6}},
       {{1,1,1,1},{2,2,2,2},{5,5,5,5},{6,6,6,6}},
       {{1,1,1,1},{2,2,2,2},{5,5,5,5},{6,6,6,6}},
   };
   static UInt8 Score[]= { 10,20,50,60};
   if(type > 2)
       return ;
   if(count < 3 )
       return ;

   if(count > 6)
       count = 6;
   UInt32 div1 = Award[type][count-3][1] - Award[type][count-3][0] + 1;
   UInt32 div2 = Award[type][count-3][3] - Award[type][count-3][2] + 1;
   UInt8 count1 = uRand(10000) / (10000/div1 + 1) ;
   UInt8 count2 = uRand(10000) / (10000/div2 + 1) ;
   AddVar(VAR_HAPPY_XXL_SCORE , Score[count - 3]);
   AddVar(VAR_ZIYUN_LIANFU , Award[type][count-3][0] + count1);
   AddVar(VAR_ZIYUN_KUANG + type , Award[type][count-3][2] + count2);
}
UInt8 Player::setXXLMapInfo(UInt8 step ,UInt8 type , std::string mapInfo , UInt8 flag)
{
    if(type > 2)    
        return 1;
    UInt32 goldUse = 0;
    if(flag == 2)
    {
        goldUse = 30 ;
        if (getGold() < goldUse)
            return 3;
    }
    if(!subXXLCount(step))
        return 2;

    ConsumeInfo ci(MOFUMIZHEN1,0,0);
    useGold(goldUse, &ci);
    xxlMapInfo[type] = mapInfo;
    if(flag)
        getWrapKey()->InitTheKey(100,9900);
    //sendHappyXXLInfo();
    UpdateXXLToDB(type);
    return 0;
}
void Player::sendHappyXXLInfo()
{
    Stream st(REP::ACTIVE) ;
    st << static_cast<UInt8>(0x34);
    st << static_cast<UInt8>(0x01);
    st << static_cast<UInt32>(20 + GetVar(VAR_HAPPY_XXL_BUYCOUNT) - GetVar(VAR_HAPPY_XXL_DAYCOUNT));
    st << static_cast<UInt8>(GetVar(VAR_HAPPY_XXL_BUYNUM) );
    st << static_cast<UInt32>(GetVar(VAR_ZIYUN_KUANG));
    st << static_cast<UInt32>(GetVar(VAR_ZIYUN_MU));
    st << static_cast<UInt32>(GetVar(VAR_ZIYUN_PAI));
    st << static_cast<UInt32>(GetVar(VAR_ZIYUN_LIANFU));
    st << static_cast<UInt32>(GetVar(VAR_HAPPY_XXL_SCORE));
    st << static_cast<UInt8>(GetVar(VAR_HAPPY_XXL_AWARD));
    st << static_cast<UInt32>(getWrapKey()->wrapTheKey());
    st << Stream::eos;
    send(st);

    Stream stA(REP::MOFANG_INFO);
    stA << static_cast<UInt8>(15);
    stA << static_cast<UInt32>(GetVar(VAR_ZIYUN_KUANG));
    stA << static_cast<UInt32>(GetVar(VAR_ZIYUN_MU));
    stA << static_cast<UInt32>(GetVar(VAR_ZIYUN_PAI));
    stA << static_cast<UInt32>(GetVar(VAR_ZIYUN_LIANFU));
    stA << Stream::eos;
    send(stA);
}
void Player::sendXXLMapInfo(UInt8 res ,UInt8 type)
{
    Stream st(REP::ACTIVE) ;
    st << static_cast<UInt8>(0x34);
    st << static_cast<UInt8>(0x02);
    st << static_cast<UInt8>(res);
    st << static_cast<UInt8>(type);
    st << static_cast<UInt8>(GetVar(VAR_HAPPY_XXL_PAGE));
    st << static_cast<UInt8>(3);
    for(UInt8 i = 0; i < 3;++i)
    {
        st <<  static_cast<UInt8>(i); 
        st << xxlMapInfo[i];
    }
    st << Stream::eos;
    send(st);
}
UInt8 Player::subXXLCount(UInt8 step)
{
    if(step == 0)
        return 1;
    UInt32 stepFree = GetVar(VAR_HAPPY_XXL_DAYCOUNT) ;
    if(stepFree > 20)
        return 0;
    if( (20 - stepFree) < step)
    {
        UInt32 need = step + stepFree - 20 ;
        UInt32 stepBuy = GetVar(VAR_HAPPY_XXL_BUYCOUNT);
        if( need > stepBuy)
            return 0;
        SetVar(VAR_HAPPY_XXL_DAYCOUNT,20);
        SetVar(VAR_HAPPY_XXL_BUYCOUNT,stepBuy - need );
    }
    else
    {
       AddVar(VAR_HAPPY_XXL_DAYCOUNT,step);
    }
    return 1;
}
void Player::getXXLAward(UInt8 type)
{
    static UInt8 ScoreAward[][4] = {
        {0,0,0,4},
        {10,0,0,0},
        {0,20,0,0},
        {0,0,40,0},
        {0,0,0,70}
    };
    static UInt32 Score[] = {200,500,1000,2000,3000};
    
    if(type > 4)
        return ;
    UInt32  Award = GetVar(VAR_HAPPY_XXL_AWARD);
    if(Award & (1 << type))
        return ;
    UInt32 myScore = GetVar(VAR_HAPPY_XXL_SCORE);
    if(myScore < Score[type])
        return ;
    for(UInt8 i = 0; i < 4 ; ++ i )
    {
        AddVar(VAR_ZIYUN_KUANG+i,ScoreAward[type][i]);
    }
    Award |= (1 << type);
    SetVar(VAR_HAPPY_XXL_AWARD,Award);
    sendHappyXXLInfo();
    if(type == 4)
    {
        char str[16] = {0};
        sprintf(str, "F_140627_3");
        udpLog("mofumizhen", str, "", "", "", "", "act");
    }
}
void Player::buyXXLCount()
{
    UInt32 buyCount = GetVar(VAR_HAPPY_XXL_BUYNUM) ;
    UInt32 cost = GameAction()->getXXLCost(this,buyCount+1);
    if (getGold() < cost)
        return ;
    ConsumeInfo ci(MOFUMIZHEN2,0,0);
    useGold(cost, &ci);
    AddVar(VAR_HAPPY_XXL_BUYNUM,1);
    AddVar(VAR_HAPPY_XXL_BUYCOUNT,10);
    sendHappyXXLInfo();
    char str[16] = {0};
    sprintf(str, "F_140627_1");
    udpLog("mofumizhen", str, "", "", "", "", "act");
}
void Player::UpdateXXLToDB(UInt8 num)
{
    if(num >= 3)
        return ;
    DB1().PushUpdateData("REPLACE INTO `happyXXL`(`playerId`,`num`, `map`) VALUES(%" I64_FMT "u, %d, '%s')", getId(), num ,xxlMapInfo[num].c_str() );

}

void Player::sendCoolSummerActPointGift(UInt8 awardType)
{
    if(!(awardType >= 0 && awardType <= 5))
        return;
    UInt8 doubleOrNot = GetVar(VAR_COOL_SUMMER_STATUS);
    UInt32 actPointLevel[] = {0, 100, 300, 600, 1000, 2000};
    //0用来统一下表，无实际意义
    static UInt32 awardArray[][2][2] = {
        { {0, 0}, {0 ,0}},
        { {503, 2}, {0, 0} },
        { {500, 5}, {501, 5} },
        { {9424, 5}, {9413, 5} },
        { {554, 5}, {9600, 5} },
        { {9022, 3}, {0, 0} },
    };
    //活跃值第一次达到双倍，后面单倍
    if(awardType)
    {
        if(!doubleOrNot)
        {
            SYSMSG(title, 5165);
            SYSMSGV(content, 5166, actPointLevel[awardType]);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[2] = {
                    {static_cast<UInt16>(awardArray[awardType][0][0]), awardArray[awardType][0][1] * 2},
                    {static_cast<UInt16>(awardArray[awardType][1][0]), awardArray[awardType][1][1] * 2},
                };
                mailPackageManager.push(mail->id, mitem, 2, true);
            }
        }
        else
        {
            SYSMSG(title, 5167);
            SYSMSGV(content, 5168, actPointLevel[awardType]);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[2] = {
                    {static_cast<UInt16>(awardArray[awardType][0][0]), awardArray[awardType][0][1]},
                    {static_cast<UInt16>(awardArray[awardType][1][0]), awardArray[awardType][1][1]},
                };
                mailPackageManager.push(mail->id, mitem, 2, true);
            }
        }
    }
    UInt32 awardFlag = GetVar(VAR_COOL_SUMMER_STATUS);
    awardFlag &= 0xFF;
    awardFlag += awardType << 8;
    SetVar(VAR_COOL_SUMMER_STATUS, awardFlag);

    if(awardType)
    {
         char str[16] = {0};
         sprintf(str, "F_140625_%d", 12 + awardType);
         udpLog("kushuangyixia", str, "", "", "", "", "act");
    }
}

void Player::useIceCream(UInt8 randType, UInt8 flag)
{
    if(randType > 4 || randType < 1)
        return;
    UInt32 activePoint = GetVar(VAR_COOL_SUMMER_ACTIVE_POINT);
    UInt32 activePointTotal = GetVar(VAR_COOL_SUMMER_ACTIVE_POINT_TOTAL);
    static UInt32 useCount[][2] = {{1, 10}, {10, 110}, {20, 220}, {50, 530}};

    if(GetPackage()->GetRestPackageSize() < 1 + 8*useCount[randType - 1][0] / 99)
    {
        sendMsgCode(2, 1011);
        return;
    }

    //使用冰淇淋，增加活跃值
    if(GetPackage()->GetItemAnyNum(16052) < useCount[randType - 1][0])
    {
        sendMsgCode(0, 8062);
        return;
    }

    GetPackage()->DelItemAny(16052, useCount[randType - 1][0]);

    char str[16] = {0};
    sprintf(str, "F_140625_%d", randType);
    udpLog("kushuangyixia", str, "", "", "", "", "act");

    activePoint += useCount[randType - 1][1];
    activePointTotal += useCount[randType - 1][1];

    //更新累积活跃值排行
    SetVar(VAR_COOL_SUMMER_ACTIVE_POINT_TOTAL, activePointTotal);
    GameMsgHdr hdr(0x156, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr, NULL);

    if(randType == 3 || randType == 4)
            SYSMSG_BROADCASTV(5162, getCountry(), getName().c_str(), useCount[randType - 1][0]);

    //0用来统一下标，无实际意义
    UInt32 actPointLevel[] = {0, 100, 300, 600, 1000, 2000};
    UInt32 currentAwardFlag = GetVar(VAR_COOL_SUMMER_STATUS) >> 8;

    UInt8 doubleOrNot = GetVar(VAR_COOL_SUMMER_STATUS);
    for(int i = currentAwardFlag + 1; i < 6; i++)
    {
        if(activePoint < actPointLevel[i])
            break;
        sendCoolSummerActPointGift(i);

        if(i == 5)
        {
            activePoint -= 2000;
            if(!doubleOrNot)
                AddVar(VAR_COOL_SUMMER_STATUS, 1);
            i = -1;
        }
    }
    SetVar(VAR_COOL_SUMMER_ACTIVE_POINT, activePoint);

    //为拉把随机奖励
    UInt8 awardType = 0;
    static UInt32 awardProb[] = {3000, 5300, 7600, 8500, 9270, 9970, 9990, 10000};
    UInt32 rand = uRand(10000);
    for(UInt8 i = 0; i < 8; i++)
    {
        if(rand <= awardProb[i])
        {
            awardType = i;
            break;
        }
    }

    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x11);
    st << static_cast<UInt8>(1);
    st << randType << awardType << Stream::eos;
    send(st);

    //播放动画延迟发奖，跳过动画直接发奖
    if(!flag)
    {
        sendCoolSummerAward(awardType, randType, 0);
        //先偷偷发物品，然后定时器公告和弹窗
        SetVar(VAR_COOL_SUMMER_RAND_TYPE, randType);
        SetVar(VAR_COOL_SUMMER_AWARD_TYPE, awardType);
        EventCoolSummerGiveAward* event = new(std::nothrow)EventCoolSummerGiveAward(this, 5, 1);
		if(event == NULL)
            return;
		PushTimerEvent(event);
    }
    else
        sendCoolSummerAward(awardType, randType, 1);
}

void Player::sendCoolSummerAward(UInt8 awardType, UInt8 randType, UInt8 sendType)
{
    if(!(awardType >= 0 && awardType <= 7))
        return;
    static UInt8 awardCount[4] = {1, 11, 22, 53};
    static UInt32 awardArray[][2] = {
        {16018, 1},
        {503, 1},
        {501, 2},
        {1325, 2},
        {134, 2},
        {515, 3},
        {1734, 1},
        {1735, 1},
    };

    UInt32 itemCount = awardArray[awardType][1] * awardCount[randType - 1];

    if(sendType)
    {
        if(awardType == 1)
        {
            SYSMSG_BROADCASTV(5169, getCountry(), getName().c_str(), itemCount);
        }
        else if(awardType == 2)
        {
            SYSMSG_BROADCASTV(5156, getCountry(), getName().c_str(), itemCount);
        }
        else if(awardType == 3)
        {
            SYSMSG_BROADCASTV(5157, getCountry(), getName().c_str(), itemCount);
        }
        else if(awardType == 4)
        {
            SYSMSG_BROADCASTV(5158, getCountry(), getName().c_str(), itemCount);
        }
        else if(awardType == 5)
        {
            SYSMSG_BROADCASTV(5159, getCountry(), getName().c_str(), itemCount);
        }
        else if(awardType == 6)
        {
            SYSMSG_BROADCASTV(5160, getCountry(), getName().c_str(), itemCount);
        }
        else if(awardType == 7)
        {
            SYSMSG_BROADCASTV(5161, getCountry(), getName().c_str(), itemCount);
        }

        char str[16] = {0};
        sprintf(str, "F_140625_%d", 5+awardType);
        udpLog("kushuangyixia", str, "", "", "", "", "act");
    }

    if(sendType == 0)
        GetPackage()->Add(awardArray[awardType][0], itemCount, true, true, FromCoolSummer);
    else if(sendType == 1)
        GetPackage()->Add(awardArray[awardType][0], itemCount, true, false, FromCoolSummer);
    else if(sendType == 2)
        m_Package->ItemNotify(awardArray[awardType][0], itemCount);
}

void Player::coolSummerOp(UInt8 type, UInt8 randType, UInt8 flag)
{
    switch(type)
    {
        case 0:
            {
                GameMsgHdr hdr(0x155, WORKER_THREAD_WORLD, this, 0);
                GLOBAL().PushMsg(hdr, NULL);
            }
            break;
        case 1:
            useIceCream(randType, flag);
            break;
        default:
            break;
    }
}
void Player::UseCouponOrGoldInKettle(UInt32 num , UInt8 flag )
{ 
    UInt32 coupon = 0;
    UInt32 gold = 0;
    if(getCoupon()*flag + getGold() < num * 15 )
    {
        coupon = getCoupon() *flag;
        gold = getGold();
    }
    else
    {
       if(getCoupon()*flag >= num * 15 ) 
           coupon = num * 15;
       else
       {
           coupon = getCoupon()*flag;
           gold = num * 15 - coupon;
       }
    }

    if(coupon > 0)
    {
        ConsumeInfo ci(KETTLE, 0, 0);
        useCoupon(coupon, &ci);
    }
    if(gold > 0)
    { 
        ConsumeInfo ci(KETTLE, 0, 0);
        useGold(gold, &ci);
    } 
} 
void Player::sendKettleInfo()
{
    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x35);
    st << static_cast<UInt8>(0x01);
    getMonsterKettleMgr()->GetMonsterKettleInfo(st); 
    st << Stream::eos;
    send(st);
}

void Player::shuShanWeiWei_XDPB(Player * player, UInt8 opt)
{
    if(!(opt >= 0 && opt <= 6))
        return;
    if(!player)
        return;
    UInt32 status = GetVar(VAR_SHU_SHAN_WEI_WEI_XDPB);
    if(opt)
    {
        UInt8 tmp = GET_BIT(status, (opt - 1));
        if(!tmp)
        {
            if(!GameAction()->getShuShanWeiWei_XDPB_Award(player, opt))
                return;
            status = SET_BIT(status, (opt - 1));
            SetVar(VAR_SHU_SHAN_WEI_WEI_XDPB, status);
        }
    }
    Stream st(REP::ACTIVITY_REWARD);
    st << static_cast<UInt8>(20);
    st << static_cast<UInt8>(status);
    st << Stream::eos;
    send(st);
}

void Player::shuShanWeiWei_MSYJ(Player * player, UInt8 opt)
{
    if(!(opt >= 0 && opt <= 3))
        return;
    if(!player)
        return;
    UInt8 flag = GetVar(VAR_SHU_SHAN_WEI_WEI_MSYJ);

    Stream st(REP::ACTIVITY_REWARD);
    st << static_cast<UInt8>(21);
    st << static_cast<UInt8>(opt);

    if(0 == opt)
    {
        st << flag;
        st << Stream::eos;
        send(st);
    }
    else if(1 == opt)
    {
        if(flag)
            return;
        if(GetPackage()->GetRestPackageSize() < 1)
        {
            sendMsgCode(2, 1011);
            return;
        }
        GetPackage()->AddItem(16022, 1, true, false, FromShuShanWeiWei);
        SetVar(VAR_SHU_SHAN_WEI_WEI_MSYJ, 1);
        st << static_cast<UInt8>(1);
        st << Stream::eos;
        send(st);
    }
    else if(2 == opt)
    {
        if(GetPackage()->GetItemAnyNum(16022) < 1)
        {
            sendMsgCode(0, 3507);
            return;
        }
        if(GetPackage()->GetRestPackageSize() < 1)
        {
            sendMsgCode(2, 1011);
            return;
        }
        lua_tinker::table result = GameAction()->getShuShanWeiWei_MSYJ_Award(player);
        UInt32 item_id = result.get<UInt32>(1);
        UInt32 item_count = result.get<UInt32>(2);
        GetPackage()->DelItemAny(16022, 1);
        SetVar(VAR_SHU_SHAN_WEI_WEI_MSYJ_AWARD, (item_id + (item_count << 16)));
        st << item_id;
        st << getName();
        st << getCountry();
        st << Stream::eos;
        NETWORK()->Broadcast(st);
    }
    else if(3 == opt)
    {
        UInt32 itemId = GetVar(VAR_SHU_SHAN_WEI_WEI_MSYJ_AWARD) & 0xFFFF;
        UInt32 itemCount = GetVar(VAR_SHU_SHAN_WEI_WEI_MSYJ_AWARD) >> 16;
        m_Package->ItemNotify(itemId, itemCount);
    }
}

void Player::shuShanWeiWei_WXSC(UInt8 opt, UInt8 pos, UInt32 count)
{
    if(!(opt >= 0 && opt <= 2))
        return;
    UInt32 item_status = GetVar(VAR_SHU_SHAN_WEI_WEI_WXSC);
    UInt32 item_total = GameAction()->getWeiXinShopItemNum();
    UInt8 tmp = GET_BIT(item_status, pos);

    if(pos > item_total)
        return;

    if(1 == opt)
    {
        if(tmp)
        {
            sendMsgCode(0, 3510);
            return;
        }
        if(GetPackage()->GetItemAnyNum(16023) < 1)
        {
            sendMsgCode(0, 3508);
            return;
        }
        GetPackage()->DelItemAny(16023, 1);
        item_status = SET_BIT(item_status, pos);
        SetVar(VAR_SHU_SHAN_WEI_WEI_WXSC, item_status);
    }
    else if(2 == opt)
    {
        if(!tmp)
        {
            sendMsgCode(0, 3509);
            return;
        }
        if(0 == pos && 0 == GetVar(VAR_SHU_SHAN_WEI_WEI_WXSC_COUPON))
        {
            getCoupon(100);
            SetVar(VAR_SHU_SHAN_WEI_WEI_WXSC_COUPON, 1);
        }
        if(pos)
        {
            lua_tinker::table weixin = GameAction()->getWeiXinShop(pos);
            UInt32 item_id = weixin.get<UInt32>(1);
            UInt32 item_cost = weixin.get<UInt32>(2);
            UInt32 item_num = weixin.get<UInt32>(3);
            if(GetPackage()->GetRestPackageSize() < 1 + count/99)
            {
                sendMsgCode(0, 1011);
                return;
            }
            ConsumeInfo ci(WeiWeiShop,0,0);
            if(count > item_num)
                return;
            if(!hasChecked())
                return;
			if (getGold() < item_cost * count)
			{
				sendMsgCode(0, 1104);
				return;
			}
			useGold(item_cost * count, &ci);
            GetPackage()->AddItem(item_id, count, true, false, FromShuShanWeiWei);
            item_status = CLR_BIT(item_status, pos);
            SetVar(VAR_SHU_SHAN_WEI_WEI_WXSC, item_status);
        }
    }

    Stream st(REP::ACTIVITY_REWARD);
    st << static_cast<UInt8>(22);
    st << static_cast<UInt8>(GetVar(VAR_SHU_SHAN_WEI_WEI_WXSC_COUPON));
    st << static_cast<UInt16>(item_status);
    st << Stream::eos;
    send(st);
}

void Player::seekingHer_SendBeans(UInt64 userId, UInt8 beanType, UInt32 count, std::string words)
{
    static UInt32 beanPoint[5][3] = {
        {1, 1, 16024},
        {10, 9, 16025},
        {110, 99, 16026},
        {550, 520, 16027},
        {1500, 1314, 16028}
    };
    if(!(beanType >= 0 && beanType <= 4))
        return;
    if(0 == count)
        return;
    if(GetPackage()->GetItemAnyNum(beanPoint[beanType][2]) < count)
    {
        sendMsgCode(0, 9000);
        return;
    }
    Player * receiver = globalPlayers[userId];
    if(receiver == NULL)
    {
        return;
    }
    if(!GameAction()->getRedBeanAward(this, beanType + 1, count))
        return;
    if(getId() == userId)
    {
        receiver->AddVar(VAR_SEEKING_HER_BEAN_TOTAL, beanPoint[beanType][1] * count);
        GameMsgHdr hdr2(0x158, WORKER_THREAD_WORLD, receiver, 0);
        GLOBAL().PushMsg(hdr2, NULL);
    }
    else
    {
        AddVar(VAR_SEEKING_HER_CHARM_POINT, beanPoint[beanType][0] * count);
        GameMsgHdr hdr1(0x157, WORKER_THREAD_WORLD, this, 0);
        GLOBAL().PushMsg(hdr1, NULL);
        GameMsgHdr hdr2(0x182, WORKER_THREAD_WORLD, this, 0);
        GLOBAL().PushMsg(hdr2, NULL);

        receiver->AddVar(VAR_SEEKING_HER_BEAN_TOTAL, beanPoint[beanType][1] * count);
        GameMsgHdr hdr3(0x158, WORKER_THREAD_WORLD, receiver, 0);
        GLOBAL().PushMsg(hdr3, NULL);
        getSeekingHerCharmAward();
    }
    GetPackage()->DelItemAny(beanPoint[beanType][2], count);

    if(1 == beanType)
    {
        SYSMSG_BROADCASTV(5222, getCountry(), getName().c_str(), receiver->getCountry(), receiver->getName().c_str());
    }
    else if(2 == beanType)
    {
        SYSMSG_BROADCASTV(5223, getCountry(), getName().c_str(), receiver->getCountry(), receiver->getName().c_str());
        SYSMSGV(title, 5209, count);
        SYSMSGV(content, 5205, getCountry(), getName().c_str(), count);
        receiver->m_MailBox->newMail(NULL, 0x1, title, content, 0xFFFE0000);
    }
    else if(3 == beanType)
    {
        SYSMSG_BROADCASTV(5224, getCountry(), getName().c_str(), receiver->getCountry(), receiver->getName().c_str(), count);
        SYSMSGV(title, 5210, count);
        SYSMSGV(content, 5212, getCountry(), getName().c_str(), count);
        receiver->m_MailBox->newMail(NULL, 0x1, title, content, 0xFFFE0000);

        Stream st(REP::COUNTRY_ACT);
        st << static_cast<UInt8>(0x12);
        st << static_cast<UInt8>(0x14);
        st << static_cast<UInt8>(0);
        st << words;
        st << getName();
        st << Stream::eos;
        NETWORK()->Broadcast(st);
    }
    else if(4 == beanType)
    {
        SYSMSG_BROADCASTV(5203, getCountry(), getName().c_str(), receiver->getCountry(), receiver->getName().c_str(), count);
        SYSMSGV(title, 5211, count);
        SYSMSGV(content, 5213, getCountry(), getName().c_str(), count);
        receiver->m_MailBox->newMail(NULL, 0x1, title, content, 0xFFFE0000);

        Stream st(SERVERWARREQ::SAY_TO_WORLD, 0xEE);
        st << words;
        st << getName();
        st << Stream::eos;
        NETWORK()->SendToServerWar(st);
    }

    UInt32 now = TimeUtil::Now();
    UInt64 senderId = getId();
    receiver->SetSeekingHerSendBeanLog(senderId, now, count, beanType, 1);

    char str[32] = {0};
    sprintf(str, "F_140801_%d", static_cast<Int32>(12 + beanType));
    udpLog("zhonglixunta", str, "", "", "", "", "act");
}

void Player::getSeekingHerCharmAward()
{
    static UInt32 charmlvl[] = {200, 500, 1500, 4000, 8000, 16000, 32000};
    static MailPackage::MailItem charmPointAward[][7] = {
        {{9123, 2}, {440, 2}, {503, 2}, {500, 2}, {15, 5}},
        {{503, 3}, {517, 3}, {512, 3}, {511, 3}, {0, 0}},
        {{9600, 3}, {16001, 3}, {551, 3}, {501, 3}, {9418, 3}},
        {{134, 5}, {1325, 5}, {9600, 5}, {9438, 5}, {9424, 5}},
        {{9498, 10}, {9600, 10}, {9414, 10}, {501, 10}, {0, 0}},
        {{1734, 1}, {9076, 8}, {515, 8}, {9600, 10}, {0, 0}},
        {{1735, 1}, {9022, 8}, {9075, 8}, {9021, 8}, {0, 0}},
    };

    UInt32 charmPoint = GetVar(VAR_SEEKING_HER_CHARM_POINT);
    UInt32 awardStatus = GetVar(VAR_SEEKING_HER_CHARM_AWARD);
    for(UInt8 i = 0; i < 7; i++)
    {
        if(charmPoint >= charmlvl[i])
        {
            UInt8 tmp = GET_BIT(awardStatus, i);
            if(!tmp)
            {
                SYSMSGV(title, 5220);
                SYSMSGV(content, 5221, charmlvl[i]);
                Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
                if(mail)
                {
                    mailPackageManager.push(mail->id, charmPointAward[i], 5, true);
                }
                awardStatus = SET_BIT(awardStatus, i);

                char str[32] = {0};
                sprintf(str, "F_140801_%d", static_cast<Int32>(1+i));
                udpLog("zhonglixunta", str, "", "", "", "", "act");
            }
        }
    }
    SetVar(VAR_SEEKING_HER_CHARM_AWARD, awardStatus);
}

void Player::seekingHer_Announce(std::string words)
{
    UInt32 now = TimeUtil::Now();
    UInt32 lastAnnounceTime = GetVar(VAR_SEEKING_HER_ANNOUNCE_TIME);
    if(now < lastAnnounceTime + 10 * 60)
    {
        sendMsgCode(0, 9001);
        return;
    }
    setMyAnnouncement(words, 1);
    SetVar(VAR_SEEKING_HER_ANNOUNCE_TIME, now);
    sendMsgCode(0, 9002);

    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x12);
    st << static_cast<UInt8>(0x12);
    st << static_cast<UInt8>(1);
    st << Stream::eos;
    send(st);

    udpLog("zhonglixunta", "F_140801_11", "", "", "", "", "act");
}

void Player::seekingHer_GetSendBeanLog()
{
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x12);
    st << static_cast<UInt8>(0x13);
    st << static_cast<UInt32>(_seekingHerSendBeanLog.size());
    for(std::vector<SeekingHerSendBeanLog *>::iterator i = _seekingHerSendBeanLog.begin(), e = _seekingHerSendBeanLog.end(); i!=e ; ++i)
    {
        st << (*i)->date;
        st << globalPlayers[(*i)->senderId]->getName();
        st << (*i)->count;
        st << (*i)->beantype;
    }
    st << Stream::eos;
    send(st);
}

void Player::SetSeekingHerSendBeanLog(UInt64 & senderId, UInt32 & date, UInt32 & count, UInt8 & beantype, bool toDB)
{
    SeekingHerSendBeanLog * lg = new SeekingHerSendBeanLog;
    lg->senderId = senderId;
    lg->date = date;
    lg->count = count;
    lg->beantype = beantype;
    _seekingHerSendBeanLog.push_back(lg);

    if(toDB)
        DB1().PushUpdateData("insert into `sendbeans_log`(senderId, receiverId, data, count, beantype) values(%" I64_FMT "u, %" I64_FMT "u, %u, %u, %u)", senderId, getId(), date, count, beantype);
}

void Player::firstPotOfGold(UInt32 total)
{
    static UInt32 rechargeLvl[6] = {200, 800, 1500, 3000, 5000, 8000};
    UInt32 now = TimeUtil::Now();
    if(now > 7 * 24 *3600 + getCreated())
        return;
    for(size_t i = 0; i < 6; i++)
    {
        if(total == rechargeLvl[i])
        {
            UInt8 flag = GET_BIT(GetVar(VAR_FIRST_POT_GOLD_STATUS), i);
            if(flag)
                return;
            SYSMSG(title, 5187);
            SYSMSGV(content, 5188, rechargeLvl[i], rechargeLvl[i]);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                MailPackage::MailItem mitem[1] = {
                    {0xA000, rechargeLvl[i]},
                };
                mailPackageManager.push(mail->id, mitem, 1, true);
            }
            SYSMSG_BROADCASTV(5189, getCountry(), getName().c_str(), rechargeLvl[i]);
            SetVar(VAR_FIRST_POT_GOLD_STATUS, SET_BIT(GetVar(VAR_FIRST_POT_GOLD_STATUS), i));
            firstPotOfGoldReturn(0);
            char str[32] = {0};
            sprintf(str, "F_140726_%d", static_cast<Int32>(1+i));
            udpLog("diyitongjin", str, "", "", "", "", "act");
        }
    }
}

void Player::firstPotOfGoldReturn(UInt8 type)
{
    UInt32 now = TimeUtil::Now();
    if(now > 7 * 24 *3600 + getCreated())
        return;

    if(type == 0)
    {
        Stream st(REP::COUNTRY_ACT);
        st << static_cast<UInt8>(0x13);
        st << type;
        st << static_cast<UInt8>(GetVar(VAR_FIRST_POT_GOLD_STATUS));
        st << Stream::eos;
        send(st);
    }
}

void Player::hideVipLvlFlag(UInt8 op)
{
    UInt32 flag = GetVar(VAR_HIDE_VIP_LEVEL_FLAG);
    if(0 == op)
    {
        if(!flag)
        {
            SetVar(VAR_HIDE_VIP_LEVEL_FLAG, 1);
            udpLog("vipbiaoshi", "F_140801_1", "", "", "", "", "act");
        }
    }
    else if(1 == op)
    {
        if(flag)
        {
            SetVar(VAR_HIDE_VIP_LEVEL_FLAG, 0);
        }
    }
}

void Player::ReturnFlyRoadInfo()
{
    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x36);
    st << static_cast<UInt8>(0x01);
    st << GetVar(VAR_FLYROAD_SW);
    st << GetVar(VAR_FLYROAD_FT);
    st << GetVar(VAR_FLYROAD_ZZ);
    st << GetVar(VAR_FLYROAD_DJ);
    st << static_cast<UInt8>(GET_BIT_8(GetVar(VAR_FLYROAD_FLAG),0));
    st << static_cast<UInt8>(GET_BIT_8(GetVar(VAR_FLYROAD_FLAG),1));
    st << static_cast<UInt8>(GET_BIT_8(GetVar(VAR_FLYROAD_FLAG),2));
    st << static_cast<UInt8>(GET_BIT_8(GetVar(VAR_FLYROAD_FLAG),3));
    st << Stream::eos;
    send(st);
}

void Player::SacrificeFlyRoad(UInt8 type, UInt16 num)
{
    if(type > 3 ) 
        return;
    UInt16 mCount = GetPackage()->GetItemAnyNum(16042);
    if(mCount == 0 || num == 0)     
        return;
    if(mCount < num) 
        return; 
    GetPackage()->DelItemAny(16042, num);
    switch(type)
    {
        case 0:
            AddVar(VAR_FLYROAD_SW,100 * num); 
            break;
        case 1:
            AddVar(VAR_FLYROAD_FT,100 * num); 
            break;
        case 2:
            AddVar(VAR_FLYROAD_ZZ,100 * num); 
            break;
        case 3:
            AddVar(VAR_FLYROAD_DJ,100 * num); 
            break;
        default:
            break;
    }
    ReturnFlyRoadInfo();
    while(num--)
        udpLog("feishengzhilu", "F_140731_1", "", "", "", "", "act");
}

void Player::ExchangeXG(UInt8 type)
{
    UInt16 itemid1 = 0;
    UInt16 itemid2 = 0;
    UInt16 item_dst = 0;
    switch(type)
    {
        case 0:
            itemid1 = 16033;
            itemid2 = 16034;
            item_dst = 16029;
            break;
        case 1:
            itemid1 = 16035;
            itemid2 = 16036;
            item_dst = 16030;
            break;
        case 2:
            itemid1 = 16037;
            itemid2 = 16038;
            item_dst = 16031;
            break;
        case 3:
            itemid1 = 16039;
            itemid2 = 16040;
            item_dst = 16032;
            break;
        default:
            return;
    }
    UInt8 flag_tmp = GET_BIT_8(GetVar(VAR_FLYROAD_FLAG),type);
    if(flag_tmp == 1)
        return;
    
    if(GetPackage()->GetItemAnyNum(itemid1) == 0 || GetPackage()->GetItemAnyNum(itemid2)== 0)
        return;
    GetPackage()->DelItemAny(itemid1, 1);
    GetPackage()->DelItemAny(itemid2, 1);
	GetPackage()->AddItem(item_dst, 1, true, false, FromFlyRoad);
    UInt32 flag_tmp1 = SET_BIT_8(GetVar(VAR_FLYROAD_FLAG),type,1);
    SetVar(VAR_FLYROAD_FLAG,flag_tmp1);
    ReturnFlyRoadInfo();
    switch(type)
    {
        case 0 :
            udpLog("feishengzhilu", "F_140731_6", "", "", "", "", "act");
            break;
        case 1 :
            udpLog("feishengzhilu", "F_140731_7", "", "", "", "", "act");
            break;
        case 2 :
            udpLog("feishengzhilu", "F_140731_8", "", "", "", "", "act");
            break;
        case 3 :
            udpLog("feishengzhilu", "F_140731_9", "", "", "", "", "act");
            break;
    }

}

void Player::ExchangeFlyRoadBox(UInt8 type)
{
    if (GetPackage()->IsFull())
    {
        sendMsgCode(0, 1011);
        return;
    }
    UInt32 cur_num = 0; 
    switch(type)
    {
        case 0:
            cur_num = GetVar(VAR_FLYROAD_SW);
            if(cur_num < 1000)
                return;
            GetPackage()->AddItem(16043, 1, true, false, FromFlyRoad);
            cur_num = cur_num - 1000;
            SetVar(VAR_FLYROAD_SW,cur_num);
            break;
        case 1:
            cur_num = GetVar(VAR_FLYROAD_FT);
            if(cur_num < 1000)
                return;
            GetPackage()->AddItem(16044, 1, true, false, FromFlyRoad);
            cur_num = cur_num - 1000;
            SetVar(VAR_FLYROAD_FT,cur_num);
            break;
        case 2:
            cur_num = GetVar(VAR_FLYROAD_ZZ);
            if(cur_num < 1000)
                return;
            GetPackage()->AddItem(16045, 1, true, false, FromFlyRoad);
            cur_num = cur_num - 1000;
            SetVar(VAR_FLYROAD_ZZ,cur_num);
            break;
        case 3:
            cur_num = GetVar(VAR_FLYROAD_DJ);
            if(cur_num < 1000)
                return;
            GetPackage()->AddItem(16046, 1, true, false, FromFlyRoad);
            cur_num = cur_num - 1000;
            SetVar(VAR_FLYROAD_DJ,cur_num);
            break;
        default:
            return;
    }
    ReturnFlyRoadInfo();
}

void Player::giveCarnivalDailyAward(UInt32 addTotal)
{
    static MailPackage::MailItem CarnivalDailyAward[][7][5] = {
        {
            {{503, 5}, {500, 5}, {0, 0}, {0, 0}, {0, 0}},
            {{513, 3}, {547, 3}, {517, 3}, {0, 0}, {0, 0}},
            {{9418, 3}, {9414, 3}, {551, 3}, {513, 3}, {0, 0}},
            {{134, 5}, {9338, 5}, {9604, 5}, {9498, 6}, {0, 0}},
            {{9438, 6}, {16001, 6}, {1126, 6}, {501, 6}, {1325, 5}},
            {{9600, 10}, {9457, 10}, {9498, 10}, {16001, 10}, {0, 0}},
            {{1733, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}
        },
        {
            {{501, 5}, {514, 5}, {0, 0}, {0, 0}, {0, 0}},
            {{1126, 3}, {9424, 3}, {9308, 3}, {0, 0}, {0, 0}},
            {{503, 3}, {9457, 3}, {505, 3}, {512, 3}, {0, 0}},
            {{9425, 3}, {9310, 5}, {551, 5}, {134, 5}, {0, 0}},
            {{1325, 6}, {9600, 6}, {16001, 6}, {9418, 6}, {9424, 6}},
            {{9438, 8}, {9498, 8}, {9600, 8}, {9425, 8}, {134, 8}},
            {{1732, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}
        },
        {
            {{9425, 5}, {511, 5}, {0, 0}, {0, 0}, {0, 0}},
            {{513, 3}, {512, 3}, {500, 3}, {0, 0}, {0, 0}},
            {{8000, 3}, {9418, 3}, {1126, 3}, {9427, 2}, {0, 0}},
            {{9414, 5}, {9498, 5}, {551, 5}, {505, 3}, {0, 0}},
            {{516, 5}, {547, 5}, {16001, 5}, {9457, 5}, {9414, 5}},
            {{515, 8}, {509, 8}, {134, 8}, {9600, 8}, {0, 0}},
            {{7720, 20}, {7020, 20}, {7420, 20}, {0, 0}, {0, 0}}
        },
        {
            {{503, 5}, {500, 5}, {0, 0}, {0, 0}, {0, 0}},
            {{513, 3}, {547, 3}, {517, 3}, {0, 0}, {0, 0}},
            {{9418, 3}, {9414, 3}, {551, 3}, {513, 3}, {0, 0}},
            {{134, 5}, {9338, 5}, {9604, 5}, {9498, 6}, {0, 0}},
            {{9438, 6}, {16001, 6}, {1126, 6}, {501, 6}, {1325, 5}},
            {{9600, 10}, {9457, 10}, {9498, 10}, {0, 0}, {0, 0}},
            {{1734, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}
        },
        {
            {{501, 5}, {514, 5}, {0, 0}, {0, 0}, {0, 0}},
            {{1126, 3}, {9425, 3}, {9308, 3}, {0, 0}, {0, 0}},
            {{503, 3}, {9457, 3}, {505, 3}, {512, 3}, {0, 0}},
            {{9425, 3}, {9310, 5}, {551, 5}, {134, 5}, {0, 0}},
            {{1325, 6}, {9600, 6}, {16001, 6}, {9418, 6}, {9424, 6}},
            {{9438, 8}, {9498, 8}, {9600, 8}, {9425, 8}, {134, 8}},
            {{1735, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}
        }
    };

    UInt32 now = TimeUtil::Now();
    UInt32 beginTime = TimeUtil::MkTime(2014, 9, 11);
    UInt8 day_index = (now - beginTime)/(3600 * 24);
    static UInt32 awardLvl[] = {299, 599, 1299, 3999, 6999, 12999, 20000};
    UInt32 oldTotal = GetVar(VAR_CARNIVAL_CONSUME_TODAY_TOTAL);
    UInt32 newTotal = oldTotal + addTotal;
    for(size_t i = 0; i < 7 && day_index < 5; i++)
    {
        if(oldTotal < awardLvl[i] && newTotal >= awardLvl[i])
        {
            SYSMSGV(title, 5230);
            SYSMSGV(content, 5231, awardLvl[i]);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                mailPackageManager.push(mail->id, CarnivalDailyAward[day_index][i], 5, true);
            }
        }
    }
}

void Player::shakeMoneyBag()
{
    if(10 <= GetVar(VAR_CARNIVAL_CONSUME_SHAKE_TIMES))
        return;
    UInt32 total = GetVar(VAR_CARNIVAL_CONSUME_TOTAL_REBATE);
    if(total && GetVar(VAR_CARNIVAL_CONSUME_SHAKE_STATUS) == 0)
    {
        UInt32 now = TimeUtil::Now();
        if(GetVar(VAR_CARNIVAL_CONSUME_SHAKE_TIMES) == 9)
        {
            UInt32 tmp = 0;
            tmp = total/10;
            if(!GetVar(VAR_CARNIVAL_CONSUME_REBATE_FLAG))
                getCoupon(total - tmp * 9);
            else
            {
                IncommingInfo ii(CarnivalRebate, 0, 0);
                getGold(total - tmp * 9, &ii);
            }
            SetShakeMoneyBagLog(now, total - tmp * 9, 1);
        }
        else
        {
            if(!GetVar(VAR_CARNIVAL_CONSUME_REBATE_FLAG))
                getCoupon(total/10);
            else
            {
                IncommingInfo ii(CarnivalRebate, 0, 0);
                getGold(total/10, &ii);
            }
            SetShakeMoneyBagLog(now, total/10, 1);
        }
        SetVar(VAR_CARNIVAL_CONSUME_SHAKE_STATUS, 1);
        AddVar(VAR_CARNIVAL_CONSUME_SHAKE_TIMES, 1);
    }

    GameMsgHdr hdr(0x189, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr, NULL);
}

void Player::gratitudeReturnInfo()
{
        Stream st(REP::COUNTRY_ACT);
        st << static_cast<UInt8>(0x14);
        st << static_cast<UInt8>(GetVar(VAR_GRATITUDE_GIVING_AWARD_STATUS));
        st << getCreated();
        if(World::getGratitudeGiving())
        {
            st << GetLev();
            st << getTotalRecharge();
        }
        else
        {
            st << static_cast<UInt8>(GetVar(VAR_GRATITUDE_GIVING_LEVEL));
            st << GetVar(VAR_GRATITUDE_GIVING_RECHARGE);
        }
        st << Stream::eos;
        send(st);
}

void Player::getGratitudeAward(UInt8 flag)
{
    if(flag > 3 || flag < 1)
        return;
    UInt32 now = TimeUtil::Now();
    if(getCreated() > now)
        return;
    UInt32 status = GetVar(VAR_GRATITUDE_GIVING_AWARD_STATUS);
    if(GET_BIT(status, (flag - 1)))
        return;
    UInt32 endDay = TimeUtil::MkTime(2014, 9, 17);
    if(getCreated() > endDay)
        return;
    if(World::getGratitudeGiving())
    {
        if(1 == flag)
        {
            UInt32 days = (now - getCreated()) / (24 * 3600);
            getTael(days * 1000);
        }
        else if(2 == flag)
        {
            getCoupon(GetLev() * 10);
        }
        else
        {
            UInt32 total = (getTotalRecharge() > 100000 ? 100000 : getTotalRecharge());
            AddPExp(total * 50);
        }
    }
    else
    {
         if(1 == flag)
        {
            UInt32 days = (endDay - getCreated()) / (24 * 3600);
            getTael(days * 1000);
        }
        else if(2 == flag)
        {
            getCoupon(GetVar(VAR_GRATITUDE_GIVING_LEVEL) * 10);
        }
        else
        {
             UInt32 total = (GetVar(VAR_GRATITUDE_GIVING_RECHARGE) > 100000 ? 100000 : GetVar(VAR_GRATITUDE_GIVING_RECHARGE));
             AddPExp(total * 50);
        }
    }
    status = SET_BIT(status, (flag - 1));
    SetVar(VAR_GRATITUDE_GIVING_AWARD_STATUS, status);
    gratitudeReturnInfo();
}

UInt32 Player::UseIncenseGood(UInt32 oldexp ,UInt8 type , UInt8 num)
{ 
    if(type > 1 || !num)
        return 0;
    
    {
        UInt16 count = GetPackage()->GetItemAnyNum(555+type) ;
        ItemBase * item = GetPackage()->FindItem(555+type, true);
        if (!item)
            item =GetPackage()->FindItem(555+type, false);
        if(item ==NULL)
            return 0;
        if(num > count)
            return 0;
    }
    UInt32 once = type*40 + !type*10;
    UInt32 sum = 0;
    //UInt32 max  = GData::incenseData.getIncenseMax();

    for(UInt8 i = 0; i < num ; ++i)
    { 
        if(oldexp >= 44587)
            return sum;
        GetPackage()->DelItemAny(555+type, 1 );
        GetPackage()->AddItemHistoriesLog(555+type ,1 );
        sum += once;
        oldexp += once;
        if(type && uRand(10000) < 800)
        {
            sum += once;
            oldexp += once;
        }
    } 
    return sum;

} 
void Player::getLuckyBagExtraAward()
{
    SYSMSGV(title, 4166);
    SYSMSGV(content, 4167);
    Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
    if(mail)
    {
        MailPackage::MailItem mitem = {16038,1};
        mailPackageManager.push(mail->id, &mitem, 1, true);
    }
}

UInt32 Player::getClanJoinTime()
{
    Clan* clan = getClan();
    if(clan)
    {
        ClanMember* mem = clan->getClanMember(this);
        if(mem)
            return mem->joinTime;
    }
    return 0;
}

void Player::getFighterMinTimeAndCount(UInt32& petTime, UInt32& fighterTime, UInt8& fighterCount)
{
    for(std::map<UInt32, Fighter *>::iterator it = _fighters.begin(); it != _fighters.end(); ++ it)
    {
        Fighter* fgt = it->second;
        if(!fgt)
            continue;
        if(fighterTime == 0 || fighterTime > fgt->getSummoned())
            fighterTime = fgt->getSummoned();
        ++fighterCount;
    }

    for(std::map<UInt32, FairyPet *>::iterator it = _fairyPets.begin(); it != _fairyPets.end(); ++ it)
    {
        FairyPet* pet = it->second;
        Fighter* fgt = static_cast<Fighter* >(pet);
        if(!fgt)
            continue;
        if(petTime == 0 || petTime > fgt->getSummoned())
            petTime = fgt->getSummoned();
    }
}

void Player::SetShakeMoneyBagLog(UInt32 date, UInt32 count, bool toDB)
{
    ShakeMoneyBagLog * lg = new ShakeMoneyBagLog;
    lg->date = date;
    lg->count = count;
    _shakeMoneyBagLog.push_back(lg);

    if(toDB)
        DB1().PushUpdateData("insert into `shake_moneybag_log`(playerId, data, count) values(%" I64_FMT "u, %u, %u)", getId(), date, count);
}

void Player::getShakeMoneyBagLog()
{
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x15);
    st << static_cast<UInt8>(3);
    st << static_cast<UInt8>(_shakeMoneyBagLog.size());
    for(std::vector<ShakeMoneyBagLog *>::iterator i = _shakeMoneyBagLog.begin(), e = _shakeMoneyBagLog.end(); i!=e ; ++i)
    {
        st << (*i)->date;
        st << (*i)->count;
    }
    st << Stream::eos;
    send(st);
}

void Player::CarnivalConsumeAct(UInt32 c)
{
    if(!World::getCarnivalConsume())
        return;
    giveCarnivalDailyAward(c);
    AddVar(VAR_CARNIVAL_CONSUME_TOTAL, c);
    AddVar(VAR_CARNIVAL_CONSUME_TODAY_TOTAL, c);

    GameMsgHdr hdr(0x159, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr, NULL);

    GameMsgHdr hdr1(0x189, WORKER_THREAD_WORLD, this, 0);
    GLOBAL().PushMsg(hdr1, NULL);
}

void Player::SendFlyRoadGiftInfo()
{
    Stream st(REP::ACT);
    st << static_cast<UInt8>(0x37);
    st << static_cast<UInt8>(1);
    st << static_cast<UInt8>(GetVar(VAR_FLY_ROAD_GIFT_GOT_NUM));
    st << Stream::eos;
    send(st);
}

void Player::GetFlyRoadGift(UInt8 IsDouble)
{
    UInt8 currentPos = 0;
    currentPos = GetVar(VAR_FLY_ROAD_GIFT_GOT_NUM);
    if(currentPos >= 10 || GetLev() < 80)
        return;
    if(GetVar(VAR_FLY_ROAD_GIFT_TODAY_STATUS))
    {
        sendMsgCode(0, 2233);
        return;
    }

    if(IsDouble)
    {
        if (getGold() < 20)
        {
            sendMsgCode(0, 1104);
            return;
        }
    }
    if(!GameAction()->getFlyRoadAward(this, currentPos + 1, IsDouble))
        return;
    if(IsDouble)
    {
        ConsumeInfo ci(FLYROADGETAWARD,0,0);
        useGold(20, &ci);
    }

    SetVar(VAR_FLY_ROAD_GIFT_TODAY_STATUS, 1);
    AddVar(VAR_FLY_ROAD_GIFT_GOT_NUM, 1);
    SendFlyRoadGiftInfo();
}

void Player::GetMemoirAward(UInt8 type)
{
    static MailPackage::MailItem MemoirAward[][3] = {
        {{503, 1}, {500, 1}, {15, 1}}, //微信分享
        {{9424, 1}, {501, 1}, {15, 1}}, //微博分享
        {{9371, 3}, {9457, 3}, {556, 3}}, //微信终极
        {{9600, 3}, {1126, 3}, {1325, 3}} //微博终极
    };

    //1分享到微博，0分享到微信
    if(type)
    {
        if(GetVar(VAR_MEMOIR_TODAY_WEIBO_STATUS) || GetVar(VAR_MEMOIR_WEIBO_COUNT) >= 5)
            return;
        SYSMSGV(title, 5234);
        SYSMSGV(content, 5235);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {
            mailPackageManager.push(mail->id, MemoirAward[1], 3, true);
        }
        AddVar(VAR_MEMOIR_WEIBO_COUNT, 1);
        SetVar(VAR_MEMOIR_TODAY_WEIBO_STATUS, 1);
        if(GetVar(VAR_MEMOIR_WEIBO_COUNT) == 3)
        {
            SYSMSGV(title, 5236);
            SYSMSGV(content, 5237);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                mailPackageManager.push(mail->id, MemoirAward[3], 3, true);
            }
        }
        sendMsgCode(0, 4047);
    }
    else
    {
        if(GetVar(VAR_MEMOIR_TODAY_WEIXIN_STATUS) || GetVar(VAR_MEMOIR_WEIXIN_COUNT) >= 5)
            return;
        SYSMSGV(title, 5234);
        SYSMSGV(content, 5235);
        Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
        if(mail)
        {
            mailPackageManager.push(mail->id, MemoirAward[0], 3, true);
        }
        AddVar(VAR_MEMOIR_WEIXIN_COUNT, 1);
        SetVar(VAR_MEMOIR_TODAY_WEIXIN_STATUS, 1);
        if(GetVar(VAR_MEMOIR_WEIXIN_COUNT) == 3)
        {
            SYSMSGV(title, 5236);
            SYSMSGV(content, 5237);
            Mail * mail = m_MailBox->newMail(NULL, 0x21, title, content, 0xFFFE0000);
            if(mail)
            {
                mailPackageManager.push(mail->id, MemoirAward[2], 3, true);
            }
        }
        sendMsgCode(0, 4047);
    }
    sendMemoirAwardInfo();
}

void Player::sendMemoirAwardInfo()
{
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x16);
    st << static_cast<UInt8>(GetVar(VAR_MEMOIR_TODAY_WEIXIN_STATUS));
    st << static_cast<UInt8>(GetVar(VAR_MEMOIR_TODAY_WEIBO_STATUS));
    st << Stream::eos;
    send(st);
}
void Player::sendBaiFuBagInfo()
{
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x18);
    st << static_cast<UInt8>(GetVar(VAR_BAIFU_BAG_STATUE));
    st << Stream::eos;
    send(st);
}

/* ****************** */
/* *****百服大礼包*** */
/* ****************** */
void Player::getBaiFuBag()
{
    UInt32 val = GetVar(VAR_BAIFU_BAG_STATUE);
    if(val != 1)
        return ;
    if(!GameAction()->getBaiFuBagAward(this))
        return ;
    SetVar(VAR_BAIFU_BAG_STATUE ,2);
    sendBaiFuBagInfo();
}

/* ****************** */
/* *****获得奖励***** */
/* ****************** */
void Player::AddXCTJAward(UInt8 num ,UInt32 itemId ,UInt8 count)
{ 
    struct XCTJAward
    {
        Player * pl;
        UInt8 num;
        UInt32 itemId;
        UInt8 count;
        UInt32 time;
    };
    struct XCTJAward bd ;
    bd.pl = this;
    bd.num = num;
    bd.itemId = itemId;
    bd.count = count;
    bd.time = TimeUtil::Now();

    GameMsgHdr hdr(0x18A, WORKER_THREAD_WORLD, this, sizeof(bd));
    GLOBAL().PushMsg(hdr, &bd);

    AddXCTJMyAward(this,num,itemId,count,TimeUtil::Now());
} 

UInt8 Player::HitEggInXCTJ(UInt8 type)
{ 
    static UInt8 SubNum[] = {1,9,44};
    static UInt8 nums[] = {1,10,50};
    if(type > 2)
        return 2;

    const UInt16 ItemId = 16058;
    UInt16 count = GetPackage()->GetItemAnyNum(ItemId) ;
    ItemBase * item = GetPackage()->FindItem(ItemId, true);
    if (!item)
        item =GetPackage()->FindItem(ItemId, false);
    if(item ==NULL)
        return 2;
    if(SubNum[type] > count)
        return 1;

    if (GetPackage()->GetRestPackageSize() <= nums[type])
    { 
        sendMsgCode(0, 1011);
        return 2;
    } 

    GetPackage()->DelItemAny(ItemId ,SubNum[type] );
    GetPackage()->AddItemHistoriesLog(ItemId, SubNum[type] );

    GameAction()->getHitEggAward(this,nums[type]);

    if(GetVar(VAR_XCTJ_COUNT)/3000 < (GetVar(VAR_XCTJ_COUNT)+nums[type]*10)/3000)
    { 
    } 
    AddVar(VAR_XCTJ_COUNT,nums[type] * 10);

    UInt32 xctjCount = GetVar(VAR_XCTJ_COUNT);
    GameMsgHdr hdr(0x18C, WORKER_THREAD_WORLD, this, sizeof(xctjCount));
    GLOBAL().PushMsg(hdr, &xctjCount);

    char str[16] = {0};
    sprintf(str, "F_140925_%d",type+2);
    udpLog("xicongtianjiang", str, "", "", "", "", "act");
    return 0;

    //AddVar(VAR_MARRYBOARD_LIVELY,!type * 100 + num * 5);
    // char str[16] = {0};
    // sprintf(str, "F_140102_%d",type + 12);
    // udpLog("jiehunjinxing", str, "", "", "", "", "act");
} 

/* ****************** */
/* *****发放福利***** */
/* ****************** */
void Player::giveOutTheWelfare(UInt8 type,std::string test)  //type 0-世界
{ 
    //static UInt32 welfare[] = {503,500,509,17103,17109};
    //static UInt8 welfareNum[][5] = {
    //    {4,4,3,3,3},
    //    {2,2,1,2,2}
    //};
    UInt32 count = GetVar(VAR_XCTJ_REPEAT);
    UInt32 hasCount = GetVar(VAR_XCTJ_FULI);
    if( count <= hasCount)
        return ;
    if(type && !getClan())
        return ;
    if(type > 1 )
        return ;

    GameMsgHdr hdr(0x18B, WORKER_THREAD_WORLD, this, sizeof(type));
    GLOBAL().PushMsg(hdr, &type);

    if(type)
    {
        if(getClan())
        {
            SYSMSG_BROADCASTV(5239,getCountry(), getName().c_str(),getClan()->getName().c_str() , test.c_str());
            SYSMSG_BROADCASTV(5239,getCountry(), getName().c_str(),getClan()->getName().c_str() , test.c_str());
            SYSMSG_BROADCASTV(5239,getCountry(), getName().c_str(),getClan()->getName().c_str() , test.c_str());
        }
    }
    else
    { 
        SYSMSG_BROADCASTV(5240,getCountry(), getName().c_str(), test.c_str());
        SYSMSG_BROADCASTV(5240,getCountry(), getName().c_str(), test.c_str());
        SYSMSG_BROADCASTV(5240,getCountry(), getName().c_str(), test.c_str());
    } 
    AddVar(VAR_XCTJ_FULI,1);
    char str[16] = {0};
    sprintf(str, "F_140925_%d",!type+11);
    udpLog("xicongtianjiang", str, "", "", "", "", "act");
} 

/* ****************** */
/* *喜从天降积分奖励* */
/* ****************** */
void Player::getXCTJCountAward(UInt8 type)  //type 从0开始
{ 
    static UInt32 countLimit[] = {100,300,600,1200,2400,3000};
    if(type > 5)
        return ;

    UInt32 count = GetVar(VAR_XCTJ_COUNT);
    UInt32 award = GetVar(VAR_XCTJ_AWARD);
    UInt32 repeat = GetVar(VAR_XCTJ_REPEAT);
    if(award & (1<<type))
        return ;
    if( count/3000 < repeat || (count - repeat * 3000) < countLimit[type])
        return ;
    if(!GameAction()->getXCTJCountAward(this,type+1,(repeat%5)+1))
        return ;
    award |= (1<<type); 
    if(award == 0x3F)
    {
        award = 0;
        AddVar(VAR_XCTJ_REPEAT,1);
        SYSMSG_BROADCASTV(5238,getCountry(), getName().c_str());
        SYSMSG_BROADCASTV(5238,getCountry(), getName().c_str());
        SYSMSG_BROADCASTV(5238,getCountry(), getName().c_str());
    }
    SetVar(VAR_XCTJ_AWARD , award);
    char str[16] = {0};
    sprintf(str, "F_140925_%d",type+5);
    udpLog("xicongtianjiang", str, "", "", "", "", "act");
} 
void Player::sendXCTJInfo()
{ 
    UInt32 repeat = GetVar(VAR_XCTJ_REPEAT);
    UInt32 fuli = GetVar(VAR_XCTJ_FULI);
    Stream st(REP::COUNTRY_ACT); 
    st << static_cast<UInt8>(0x19);
    st << static_cast<UInt8>(0x01);
    st << static_cast<UInt32>(GetVar(VAR_XCTJ_COUNT));
    st << static_cast<UInt32>(GetVar(VAR_XCTJ_COUNT) - repeat *3000);
    st << static_cast<UInt8>(GetVar(VAR_XCTJ_AWARD));
    st << static_cast<UInt8>(repeat);
    st << static_cast<UInt8>( repeat>=fuli?(repeat - fuli):0);
    st << Stream::eos;
    send(st);
} 
void Player::AddXCTJMyAward(Player *pl ,UInt8 num ,UInt32 itemId ,UInt8 count,UInt32 time)
{
    if(num == 0 )
        return ;
    XCTJAward bfa(pl,num,itemId,count,time);
    if(my_deque.size() >=50 )
        my_deque.pop_front();
    my_deque.push_back(bfa);

    //单个获奖信息广播
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x19) <<static_cast<UInt8>(0x03) << static_cast<UInt8>(1) << static_cast<UInt8>(1);
    st << pl->getName() << static_cast<UInt8>(pl->getCountry())<< time << num << itemId << count;
    st << Stream::eos;
    send(st);
}
void Player::sendXCTJMyAward()
{ 
    UInt32 size  = my_deque.size(); 
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x19) <<static_cast<UInt8>(0x03) << static_cast<UInt8>(1) << static_cast<UInt8>(size);
    for(UInt8 i = 0; i < size; ++ i)
    {
        if( my_deque[i].pl)
            st << my_deque[i].pl->getName() << static_cast<UInt8>(my_deque[i].pl->getCountry());
        else
            st << "";
        st<< my_deque[i].time;
        st<< my_deque[i].num ;
        st<< my_deque[i].itemId;
        st<< my_deque[i].count;
    }
    st << Stream::eos;
    send(st);
} 

void Player::SetExchangeTreasureLog(UInt32 date, UInt32 itemid, UInt32 count, bool toDB)
{
    ExchangeTreasureLog * lg = new ExchangeTreasureLog;
    lg->date = date;
    lg->itemid = itemid;
    lg->count = count;
    _exchangeTreasureLog.push_back(lg);

    if(toDB)
        DB().PushUpdateData("insert into `exchange_treasure_log`(playerId, data, itemid, count) values(%" I64_FMT "u, %u, %u, %u)", getId(), date, itemid, count);
}

void Player::GetExchangeTreasureLog()
{
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x17);
    st << static_cast<UInt8>(2);
    st << static_cast<UInt32>(_exchangeTreasureLog.size());
    for(std::vector<ExchangeTreasureLog*>::iterator i = _exchangeTreasureLog.begin(), e = _exchangeTreasureLog.end(); i!=e ; ++i)
    {
        st << (*i)->date;
        st << (*i)->itemid;
        st << (*i)->count;
    }
    st << Stream::eos;
    send(st);
}

void Player::RetTreasureInfo()
{
    Stream st(REP::COUNTRY_ACT);
    st << static_cast<UInt8>(0x17);
    st << static_cast<UInt8>(0);
    st << GetVar(VAR_TREASURE_CONSUME) << GetVar(VAR_TREASURE_SCORE);         
    st << Stream::eos;
    send(st);
}

void Player::TreasureConsumeAct(UInt32 c)
{
    //if(!World::getTreasureConsume())
    //    return;
    AddVar(VAR_TREASURE_CONSUME, c);
    AddVar(VAR_TREASURE_CONSUME_EXT, c);
   
    while(GetVar(VAR_TREASURE_CONSUME_EXT) >= 30)
    {
        UInt32 tmp = GetVar(VAR_TREASURE_CONSUME_EXT) - 30;
        SetVar(VAR_TREASURE_CONSUME_EXT,tmp);
        AddVar(VAR_TREASURE_SCORE, 10);
    }
}


} // namespace GObject

