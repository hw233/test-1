#pragma once
#ifndef __EXPLOIT_H__
#define __EXPLOIT_H__
#include"GObject/Player.h"
#include"GObject/Fighter.h"
#include"GObject/Var.h"
#include<time.h>
#include"Common/TimeUtil.h"

#define EXPLOIT_TAB 3*60  //每3min开采一次
#define SOURCE_BASE 16    //
#define EXPLOIT_SEND_ONCE 30*60 //给客户端一次发半个小时的开采次数

namespace GObject
{
    class Player;
    class Fighter;

    typedef enum ExploitType
    {
        WOOD = 0,   //木材
        LEATHER = 1, //皮革
        IRON = 2,    //铁
        COPPER = 3,  //铜
        MAX = 4
    } EpType;

    //采集点信息
    class ExploitInfo
    {
        public:
            ExploitInfo(UInt8 sourceId, Fighter* fighter) : id(sourceId) , fgt(fighter) {}
            ~ExploitInfo() {}
            Fighter* GetFighter() const { return fgt;}
            void SetFighter(Fighter* fighter) { fgt = fighter;}
            UInt8  GetId() const { return id;}
            UInt8 GetPerCount();
            void SerStartTime(UInt32 time) { startTime = time;}
            UInt32 GetStartTime() const { return startTime;}
        private:
            UInt8  id;          //资源点编号
            UInt32 startTime;   //开始采集的时间(离线不需要用到这个)
            Fighter* fgt;       //负责采集的武将
    };


    //采集管理
    class ExpolitManager
    {
        public:
            ExpolitManager(GObject::Player* player) : _owner(player){}
            void ReplaceFighter(Fighter* fgt,UInt8 sourceId);
            Player* GetOwner() const { return _owner;}
            ExploitInfo* GetExploitInfo(UInt8 id);
            void GetOfflineSource();
            UInt32 GetOnlineSource(UInt8 id);
            void GetOnlineSource();
            void GiveOnlineSource();
        private:
            Player* _owner;
            std::set<ExploitInfo*> _vecExploitInfo;
    };
}
#endif
