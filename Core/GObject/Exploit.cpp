#include"Exploit.h"
#include"GData/ExploitTable.h"
#include"MsgID.h"

namespace GObject
{

    UInt8 ExploitInfo::GetPerCount()
    {
        GData::ExploitPoint* epInfo = GData::exploitTable.GetExploitPoint(id);
        UInt8 perMin = epInfo->GetPerMin();
        UInt8 perMax = epInfo->GetPerMax();

        UInt8 level = uRand(100);
        float transform = epInfo->GetTransform();
        UInt8 ability = epInfo->GetAbility();
        UInt8 count = level*transform;
        if( count < perMin )
            count = perMin;
        if( count > perMax )
            count = perMax;
        return count;
    }


    void ExploitManager::ReplaceFighter(UInt8 id,Fighter* fgt)
    {
        if( fgt == NULL )
            return;
        ExploitInfo* info = GetExploitInfo(id);
        UInt32 now = TimeUtil::Now();
        if( info == NULL )
        {
            ExploitInfo* eInfo = new ExploitInfo(id,fgt);
            _vecExploitInfo.insert(eInfo);
            _owner->SetVar(VAR_EXPLOIT_TIME,now);
        }
        else
        {
            if( fgt == info->GetFighter() )
                return;
            CollectAllSource();
            info->GetFighter()->SetVar(VAR_EXPLOIT_TIME,0);
            //把之前将领开采的资源发给他
            info->SetFighter(fgt);
            _owner->SetVar(VAR_EXPLOIT_TIME,now);
        }
        
    }

    

    ExploitInfo* ExploitManager::GetExploitInfo(UInt8 id)
    {
        for( auto it = _vecExploitInfo.begin(); it != _vecExploitInfo.end(); ++it )
        {
            if( (*it)->GetId() == id )
            {
                return (*it);
            }
        }
        return NULL;
    }


    UInt32 ExploitManager::GetSourceNum(UInt8 id)
    {
        ExploitInfo* info = GetExploitInfo(id);
        if( info == NULL )
            return 0;
        Fighter* fgt = info->GetFighter();
        UInt32  lastTime = _owner->GetVar(VAR_EXPLOIT_TIME);
        if( lastTime = 0 )
            return 0;
        UInt32  now = TimeUtil::Now();
        if( lastTime > now ) 
            return 0;
        UInt32 count = ( (now-lastTime)/( EXPLOIT_TAB) ) * info->GetPerCount();
        UInt32 max = info->GetPerCount()*((SAVE_MAX_TIME*60)/EXPLOIT_TAB);
        return (count > max ?  max : count );
    }


    void ExploitManager::CollectAllSource()
    {
        std::map<UInt8,UInt32> type2Num;
        for( auto it = _vecExploitInfo.begin(); it != _vecExploitInfo.end(); ++it)
        {
            UInt8 id = (*it)->GetId();
            GData::ExploitPoint* epInfo = GData::exploitTable.GetExploitPoint(id);
            if( epInfo == NULL )
                return;
            UInt32 count = GetSourceNum(id);
            if( count == 0 )
                continue;
            UInt8 sourceType = epInfo->GetType();
            if( !type2Num[sourceType] )
            {
                type2Num[sourceType] = count;
            }
            else
            {
                type2Num[sourceType] += count;
            }
        }

        //发资源
        Stream st(REP::EXPLOIT_COLLECT);
        st<<static_cast<UInt8>(type2Num.size());
        for( auto it = type2Num.begin(); it != type2Num.end(); ++it )
        {
            UInt8 sourceType = it->first;
            UInt32 count = it->second;
            _owner->AddVar(SOURCE_BASE+sourceType,count); 
            st<< static_cast<UInt8>(sourceType);
            st<< static_cast<UInt32>(count);
        }
        UInt32 now = TimeUtil::Now();
        _owner->SetVar(VAR_EXPLOIT_TIME,now);
        st<<Stream::eos;
        _owner->send(st);
    }


    void ExploitManager::SpeedUp()
    {
        std::map<UInt8,UInt32> type2Num;
        for( auto it = _vecExploitInfo.begin(); it != _vecExploitInfo.end(); ++it)
        {
            UInt8 id = (*it)->GetId();
            GData::ExploitPoint* epInfo = GData::exploitTable.GetExploitPoint(id);
            if( epInfo == NULL )
                return;
            UInt32 count = (SPEEDUP_TIME/EXPLOIT_TAB)*((*it)->GetPerCount());
            if( count == 0 )
                continue;
            UInt8 sourceType = epInfo->GetType();
            if( !type2Num[sourceType] )
            {
                type2Num[sourceType] = count;
            }
            else
            {
                type2Num[sourceType] += count;
            }
        }

        //发资源
        Stream st(REP::EXPLOIT_SPEEDUP);
        st<<static_cast<UInt8>(type2Num.size());
        for( auto it = type2Num.begin(); it != type2Num.end(); ++it )
        {
            UInt8 sourceType = it->first;
            UInt32 count = it->second;
            _owner->AddVar(SOURCE_BASE+sourceType,count); 
            st<< static_cast<UInt8>(sourceType);
            st<< static_cast<UInt32>(count);
        }
        st<<Stream::eos;
        _owner->send(st);
    }
}
