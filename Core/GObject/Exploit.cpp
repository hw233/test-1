#include"Exploit.h"
#include"GData/ExploitTable.h"

namespace GObject
{

    UInt8 ExploitInfo::GetPerCount()
    {
        GData::ExploitPoint* epInfo = GData::exploitTable.GetExploitPoint(id);
        UInt8 perMin = epInfo->GetPerMin();
        UInt8 perMax = epInfo->GetPerMax();

        UInt8 level = uRand(100);
        float transform = epInfo->GetTransform();
        UInt8 count = level*transform;
        if( count < perMin )
            count = perMin;
        if( count > perMax )
            count = perMax;
        return count;
    }


    void ExpolitManager::ReplaceFighter(Fighter* fgt,UInt8 sourceId)
    {
        if( fgt == NULL )
            return;
        ExploitInfo* info = GetExploitInfo(sourceId);
        if( info == NULL )
        {
            ExploitInfo* eInfo = new ExploitInfo(sourceId,fgt);
            _vecExploitInfo.insert(eInfo);
        }
        else
        {
            if( fgt == info->GetFighter() )
                return;
            info->SetFighter(fgt);
        }
        
    }

    

    ExploitInfo* ExpolitManager::GetExploitInfo(UInt8 id)
    {
        for( auto it = _vecExploitInfo.begin(); it != _vecExploitInfo.end(); ++it )
        {
            if( (*it)->GetId() == id )
            {
                return (*it);
            }
        }
        return NULL;
    }

    //离线获得资源
    void ExpolitManager::GetOfflineSource()
    {
        UInt32 offlineTime = _owner->GetVar(VAR_OFF_LINE);
        UInt32 now = TimeUtil::Now();
        if( offlineTime > now )
            return;
        UInt32 count = (now - offlineTime)/EXPLOIT_TAB;
        if( count <= 0 )
            return;
        //Stream st(REP::EXPLOIT_OFFLINE);
        for( auto it = _vecExploitInfo.begin(); it != _vecExploitInfo.end(); ++it )
        {
            UInt8 id = (*it)->GetId();
            UInt32 totalNum = ((*it)->GetPerCount())*count;
            _owner->SetVar(SOURCE_BASE+id,totalNum);
        }
    }

    
    //这个是给客户端的30分钟的各个资源点的总资源
    void ExpolitManager::GetOnlineSource()
    {
        for( auto it = _vecExploitInfo.begin(); it != _vecExploitInfo.end(); ++it)
        {
            UInt32 count = GetOnlineSource((*it)->GetId());
            count = 0;
        }
        
    }

    
    //在线的话看情况 是一次发个半小时  还是一次一次发
    UInt32 ExpolitManager::GetOnlineSource(UInt8 id)
    {
        ExploitInfo* info = GetExploitInfo(id);
        if( info == NULL )
            return 0;
        time_t now = time(NULL);
        tm* tt=localtime(&now);
        UInt8 min = tt->tm_min;
        UInt8 sec = tt->tm_sec;
        UInt16 second = (min%EXPLOIT_TAB == 0 && sec == 0 ) ? 0 : min%EXPLOIT_TAB+sec;
        UInt16 count = second/EXPLOIT_TAB;
        return count*(info->GetPerCount());
    }

    //这个是服务器的 每3min发一次资源
    void ExpolitManager::GiveOnlineSource()
    {
        for( auto it = _vecExploitInfo.begin(); it != _vecExploitInfo.end(); ++it )
        {
            ExploitInfo* info = GetExploitInfo((*it)->GetId());
            if( info == NULL )
                return;
           UInt16 count = info->GetPerCount(); 
           _owner->SetVar(SOURCE_BASE+(*it)->GetId(),count);
        }
    }
}
