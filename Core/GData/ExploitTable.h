#pragma once
#ifndef __EXPLOITTABLE_H__
#define __EXPLOITTABLE_H__
#include"Config.h"

namespace GData
{
    
    //资源点信息
    class ExploitPoint
    {
        public:
            ExploitPoint(UInt8 i,UInt8 t,UInt8 l,UInt8 a, float f,UInt8 min,UInt8 max) : id(i),type(t),openLevel(l),ability(a),transform(f),perMin(min),perMax(max) {}
            ~ExploitPoint() {}
            UInt8 GetId() const { return id;}
            UInt8 GetType() const { return type;}
            UInt8 GetOpenLevel() const { return openLevel;}
            float GetTransform() const { return transform;}
            UInt8 GetPerMin() const { return perMin;}
            UInt8 GetPerMax() const { return perMax;}
            UInt8 GetAbility() const { return ability;}
        private:
            UInt8 id;         //编号
            UInt8 type;       //资源类型
            UInt8 openLevel;  //开放等级
            UInt8 ability;
            float transform;  //产出率
            UInt8 perMin;    //
            UInt8 perMax;
    };

    class ExploitTable
    {
        public:
           ExploitPoint* GetExploitPoint(UInt8 id);
           void LoadExpoit(ExploitPoint* exp);
        private:
            std::set<ExploitPoint*> exploitTable;

    };


    extern ExploitTable exploitTable;
}
#endif
