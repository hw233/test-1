#ifndef _CLAN_COPY_TABLE_
#define _CLAN_COPY_TABLE_

namespace GData
{

#if 0 // 这里我想多了
static UInt8 spotMapType[] =
{
			/*0123456789ABCDEF */
    /*0x00*/ "????????????????"\
    /*0x10*/ "????????????????"\
    /*0x20*/ "????????????????"\
    /*0x30*/ "????????????????"\
    /*0x40*/ "????????????????"\
    /*0x50*/ "????????????????"\
    /*0x60*/ "????????????????"\
    /*0x70*/ "????????????????"\
    /*0x80*/ "????????????????"\
    /*0x90*/ "????????????????"\
    /*0xA0*/ "????????????????"\
    /*0xB0*/ "????????????????"\
    /*0xC0*/ "????????????????"\
    /*0xD0*/ "????????????????"\
    /*0xE0*/ "????????????????"\
    /*0xF0*/ "????????????????"\
			/*0123456789ABCDEF */
};



struct ClanCopySpotData
{
    UInt8  spotId;              // 该据点的id（使用enum Copy_Spot的值）
    UInt8  copyType;            // 帮派副本类型(现默认只有防守怪物类型)
    UInt16 copyLevel;           // 帮派副本等级
    UInt8  side1MaxCount;       // 防守方的最大人数
    UInt8  side2MaxCount;       // 进攻方的最大人数
    UInt8  side1BufferType;     // 防守方的据点增益效果种类
    UInt8  side2BufferType;     // 进攻方的据点增益效果种类
};
typedef std::vector<ClanCopySpotData> ClanCopySpotTable;

extern ClanCopySpotTable clanCopySpotTable;

#endif

struct ClanCopyMonsterData
{
    ClanCopyMonsterData(UInt16 level, UInt16 appearRound, UInt32 npcId,
            UInt8 npcCount, UInt8 npcRouteCount, UInt16 npcValue)
        : level(level), appearRound(appearRound), npcId(npcId),
        npcCount(npcCount), npcRouteCount(npcRouteCount), npcValue(npcValue)
    {
    }
    UInt16 level;              // 副本等级
    UInt16 appearRound;        // 生产该怪的波数
    UInt32 npcId;              // 怪物npcGroupId
    UInt8  npcCount;           // 每一路怪物的数量
    UInt8  npcRouteCount;      // 出现的路数 
    UInt16 npcValue;           // 怪物对主基地的破坏值
};

// key值为 (level << 16 | appearRound)
typedef std::map<UInt32, ClanCopyMonsterData> ClanCopyMonsterMap;

struct ClanCopyData
{
    UInt16 level;               // 帮派副本等级
    UInt32 expOutput;           // 该等级给予神像每小时的经验值
    UInt16 minPlayer;           // 该等级副本参与最少人数
    UInt16 maxPlayer;           // 该等级副本参与最多人数
    UInt8  spotMaxPlayer;       // 该等级副本每个据点最大人数
};

typedef std::vector<ClanCopyData> ClanCopyTable;

extern ClanCopyTable clanCopyTable;
extern ClanCopyMonsterMap clanCopyMonsterMap;

}

#endif

